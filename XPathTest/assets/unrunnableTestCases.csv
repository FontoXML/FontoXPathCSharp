abbreviatedSyntax-2;Expected XPath for $h in (/works/employee[2]) return $h/text() to resolve to Text data from Employee[2], but instead got Text data from Employee[2]
abbreviatedSyntax-26;PRSC Error: Failed to parse query 'let $in := <a><b>ABC</b><b>XYZ</b></a> return $in//string-to-codepoints(.)'
ancestor-21;PRSC Error: Failed to parse query 'let $var := <anElement>Some Content</anElement> return fn:count($var/ancestor::*) = 0'
ancestorself-21;PRSC Error: Failed to parse query 'let $var := <anElement>Some Content</anElement> return $var/ancestor-or-self::*'
annex-1;PRSC Error: Failed to parse query 'declare namespace eg = "http://example.org"; declare function eg:if-empty ( $node as node()?, $value as xs:anyAtomicType) as xs:anyAtomicType* { if ($node and $node/child::node()) then fn:data($node) else $value }; let $arg1 := <element1>some data</element1> let $arg2 as xs:anyAtomicType := 1 return eg:if-empty($arg1,$arg2)'
annex-2;PRSC Error: Failed to parse query 'declare namespace eg = "http://example.org"; declare function eg:if-absent ( $node as node()?, $value as xs:anyAtomicType) as xs:anyAtomicType* { if ($node) then fn:data($node) else $value }; let $arg1 := <element1>some data</element1> let $arg2 as xs:anyAtomicType := 1 return eg:if-absent($arg1,$arg2)'
annex-3;PRSC Error: Failed to parse query 'declare namespace eg = "http://example.org"; declare function eg:value-union ( $arg1 as xs:anyAtomicType*, $arg2 as xs:anyAtomicType*) as xs:anyAtomicType* { fn:distinct-values(($arg1, $arg2)) }; let $arg1 as xs:anyAtomicType := 1 let $arg2 as xs:anyAtomicType := 2 return eg:value-union($arg1,$arg2)'
annex-4;Expected executing the XPath 'declare namespace eg = "http://example.org"; declare function eg:value-intersect ( $arg1 as xs:anyAtomicType*, $arg2 as xs:anyAtomicType* ) as xs:anyAtomicType* { fn:distinct-values($arg1[.=$arg2]) }; let $arg1 as xs:anyAtomicType := 1 let $arg2 as xs:anyAtomicType := 1 return eg:value-intersect($arg1,$arg2)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare namespace eg = "http://example.org"; declare function eg:value-intersect ( $arg1 as xs:anyAtomicType*, $arg2 as xs:anyAtomicType* ) as xs:anyAtomicType* { fn:distinct-values($arg1[.=$arg2]) }; let $arg1 as xs:anyAtomicType := 1 let $arg2 as xs:anyAtomicType := 1 return eg:value-intersect($arg1,$arg2) = 1'
annex-5;Expected executing the XPath 'declare namespace eg = "http://example.org"; declare function eg:value-except ( $arg1 as xs:anyAtomicType*, $arg2 as xs:anyAtomicType*) as xs:anyAtomicType* { fn:distinct-values($arg1[not(.=$arg2)]) }; let $arg1 as xs:anyAtomicType := 1 let $arg2 as xs:anyAtomicType := 2 return eg:value-except($arg1,$arg2)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare namespace eg = "http://example.org"; declare function eg:value-except ( $arg1 as xs:anyAtomicType*, $arg2 as xs:anyAtomicType*) as xs:anyAtomicType* { fn:distinct-values($arg1[not(.=$arg2)]) }; let $arg1 as xs:anyAtomicType := 1 let $arg2 as xs:anyAtomicType := 2 return eg:value-except($arg1,$arg2) = 1'
annex-6;PRSC Error: Failed to parse query 'declare namespace eg = "http://example.org"; declare function eg:index-of-node($sequence as node()*, $srch as node()) as xs:integer* { for $n at $i in $sequence where ($n is $srch) return $i }; let $arg1 := (<element1>some data 1</element1>,<element2>some data 2</element2>) let $arg2 := $arg1[2] return eg:index-of-node($arg1, exactly-one($arg2)) = 2'
annex-7;PRSC Error: Failed to parse query 'declare namespace eg = "http://example.org"; declare function eg:string-pad ( $padString as xs:string?, $padCount as xs:integer) as xs:string { fn:string-join((for $i in 1 to $padCount return $padString), "") }; let $arg1 as xs:string := "A String" let $arg2 as xs:integer := 3 return eg:string-pad($arg1,$arg2)'
annex-8;PRSC Error: Failed to parse query 'declare namespace eg = "http://example.org"; declare function eg:distinct-nodes-stable ($arg as node()*) as node()* { for $a at $apos in $arg let $before_a := fn:subsequence($arg, 1, $apos - 1) where every $ba in $before_a satisfies not($ba is $a) return $a }; let $arg1 := (<element1>some data 1</element1>,<element2>some data 2</element2>) return eg:distinct-nodes-stable($arg1)'
annotation-1;PRSC Error: Failed to parse query '\n         declare namespace eg = "http://example.com";\n         declare %eg:sequential function local:foo() {\n            "bar"\n         };\n         local:foo()\n       = "bar"'
annotation-10;PRSC Error: Failed to parse query '\n         declare %Q{http://example.com}bar variable $foo := 0;\n\n         declare %Q{http://example.com}bar function local:foo($arg) { $arg }; \n\n         local:foo($foo)\n      '
annotation-11;PRSC Error: Failed to parse query '\n         declare namespace eg = "http://example.com";\n\n         declare %eg:one %eg:two %eg:three variable $foo := 0;\n\n         declare %eg:one %eg:two %eg:three function local:foo($arg) { $arg }; \n\n         local:foo($foo)\n      '
annotation-12;PRSC Error: Failed to parse query '\n         declare namespace eg = "http://example.com";\n\n         declare %eg:one%eg:two%eg:three(1)%eg:four variable $foo := 0;\n\n         declare %eg:one%eg:two%eg:three(1)%eg:four function local:foo($arg) { $arg }; \n\n         local:foo($foo)\n      '
annotation-13;PRSC Error: Failed to parse query '\n         declare namespace eg = "http://example.com";\n\n         declare \n            %eg:one\n            %eg:two\n            (: Lorem ipsum dolor sit amet. :)\n            %eg:three(1)\n            %Q{http://example.com}four\n            variable $foo := 0;\n\n         declare \n            %eg:one\n            %eg:two\n            (: Lorem ipsum dolor sit amet. :)\n            %eg:three(1)\n            %Q{http://example.com}four\n            function local:foo($arg) { $arg }; \n\n         local:foo($foo)\n      '
annotation-14;PRSC Error: Failed to parse query '\n         declare namespace eg = "http://example.com";\n\n         declare %eg:one(1, 2, 3) %eg:two("a", "b") %eg:three(1.234) variable $foo := 0;\n\n         declare  %eg:one(1, 2, 3) %eg:two("a", "b") %eg:three(1.234) function local:foo($arg) { $arg }; \n\n         local:foo($foo)\n      '
annotation-15;Expected error code: XQST0045. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         declare %xml:x function local:foo() {\n            "bar"\n         };\n         local:foo()\n      '
annotation-16;Expected error code: XQST0045. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         declare %Q{http://www.w3.org/XML/1998/namespace}x variable $foo := "bar";\n         $foo\n      '
annotation-17;Expected error code: XQST0045. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         declare %xs:x function local:foo() {\n            "bar"\n         };\n         local:foo()\n      '
annotation-18;Expected error code: XQST0045. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         declare %Q{http://www.w3.org/2001/XMLSchema}x variable $foo := "bar";\n         $foo\n      '
annotation-19;Expected error code: XQST0045. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         declare %xsi:x function local:foo() {\n            "bar"\n         };\n         local:foo()\n      '
annotation-2;PRSC Error: Failed to parse query '\n         declare namespace eg = "http://example.com";\n         declare %eg:sequential variable $foo := "bar";\n         $foo\n       = "bar"'
annotation-20;Expected error code: XQST0045. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         declare %Q{http://www.w3.org/2001/XMLSchema-instance}x variable $foo := "bar";\n         $foo\n      '
annotation-21;Expected error code: XQST0045. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         declare %fn:x function local:foo() {\n            "bar"\n         };\n         local:foo()\n      '
annotation-22;Expected error code: XQST0045. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         declare %Q{http://www.w3.org/2005/xpath-functions}x variable $foo := "bar";\n         $foo\n      '
annotation-23;Expected error code: XQST0045. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         declare %x variable $foo := "bar";\n         $foo\n      '
annotation-24;Expected error code: XQST0045. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         declare namespace math = "http://www.w3.org/2005/xpath-functions/math";\n         declare %math:x function local:foo() {\n            "bar"\n         };\n         local:foo()\n      '
annotation-25;Expected error code: XQST0045. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         declare %Q{http://www.w3.org/2005/xpath-functions/math}x variable $foo := "bar";\n         $foo\n      '
annotation-26;Expected error code: XQST0045. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         declare namespace opts = "http://www.w3.org/2012/xquery";\n         declare %opts:x function local:foo() {\n            "bar"\n         };\n         local:foo()\n      '
annotation-27;Expected error code: XQST0045. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         declare %Q{http://www.w3.org/2012/xquery}x variable $foo := "bar";\n         $foo\n      '
annotation-28;Expected error code: XQST0045. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         declare default function namespace "http://example.com";\n         declare %x variable $foo := "bar";\n         $foo\n      '
annotation-29;PRSC Error: Failed to parse query '\n         declare %local:x variable $foo := "bar";\n         $foo\n       = "bar"'
annotation-3;PRSC Error: Failed to parse query '\n         declare namespace eg = "http://example.com";\n         %eg:sequential function () { "bar" } ()\n       = "bar"'
annotation-30;PRSC Error: Failed to parse query '\n         declare namespace eg = "http://example.com";\n         %eg:sequential("abc", 3) function () { "bar" } ()\n       = "bar"'
annotation-31;PRSC Error: Failed to parse query '\n         declare namespace eg = "http://example.com";\n         % Q{http://example.com}sequential("abc", 3) function () { "bar" } ()\n       = "bar"'
annotation-32;PRSC Error: Failed to parse query '\n         declare namespace eg = "http://example.com";\n         %eg:sequential("abc", 3) %eg:memo-function function () { "bar" } ()\n       = "bar"'
annotation-34;PRSC Error: Failed to parse query '(\n         declare default function namespace "http://example.com";\n         declare %private function lt() as item()*{\n         ()\n         };\n         ()\n      ) => empty()'
annotation-35;Expected error code: XQST0045. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         declare namespace array = "http://www.w3.org/2005/xpath-functions/array";\n         declare %array:x function local:foo() {\n            "bar"\n         };\n         local:foo()\n      '
annotation-36;Expected error code: XQST0045. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         declare namespace map = "http://www.w3.org/2005/xpath-functions/map";\n         declare %map:x function local:foo() {\n            "bar"\n         };\n         local:foo()\n      '
annotation-37;PRSC Error: Failed to parse query '\n         declare namespace a = "http://www.example.org/annotation";\n         declare %a:translucent("true") %a:translucent("false") function local:foo() {\n            "bar"\n         };\n         local:foo()\n       = "bar"'
annotation-38;PRSC Error: Failed to parse query '\n         declare namespace a = "http://www.example.org/annotation";\n         declare %a:translucent("true") %a:translucent("false") variable $foo := "bar";\n         $foo\n       = "bar"'
annotation-4;PRSC Error: Failed to parse query '\n         declare namespace java = "http://example.com";\n\n         declare %java:variable("java.lang.Integer.MAX_VALUE") variable $max := 0;\n\n         declare %java:method("java.lang.Math.sin") function local:sin($arg) { 0 }; \n\n         local:sin($max)\n      '
annotation-5;PRSC Error: Failed to parse query '\n         declare namespace eg = "http://example.com";\n\n         declare %eg:integer(1234) variable $foo := 0;\n\n         declare %eg:integer(1234) function local:foo($arg) { $arg }; \n\n         local:foo($foo)\n      '
annotation-6;PRSC Error: Failed to parse query '\n         declare namespace eg = "http://example.com";\n\n         declare %eg:integer(12.34) variable $foo := 0;\n\n         declare %eg:integer(12.34) function local:foo($arg) { $arg }; \n\n         local:foo($foo)\n      '
annotation-7;PRSC Error: Failed to parse query '\n         declare namespace eg = "http://example.com";\n\n         declare %eg:integer(12e34) variable $foo := 0;\n\n         declare %eg:integer(12e34) function local:foo($arg) { $arg }; \n\n         local:foo($foo)\n      '
annotation-9;PRSC Error: Failed to parse query '\n         declare namespace eg = "http://example.com";\n\n         declare %eg:many(12e34,"abc",1234) variable $foo := 0;\n\n         declare %eg:many("xyz", 987, 12.3) function local:foo($arg) { $arg }; \n\n         local:foo($foo)\n      '
annotation-assertion-1;PRSC Error: Failed to parse query '\n         declare namespace eg = "http://example.com";\n         () instance of %eg:x function(*)\n      '
annotation-assertion-10;PRSC Error: Failed to parse query '\n         declare namespace eg = "http://example.com";\n         () instance of %eg:x function(xs:integer) as xs:string\n      '
annotation-assertion-11;Expected error code: XQST0045. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         () instance of %xml:x function(*) \n      '
annotation-assertion-12;Expected error code: XQST0045. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         () instance of %Q{http://www.w3.org/XML/1998/namespace}x function(*) \n      '
annotation-assertion-13;Expected error code: XQST0045. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         () instance of %xs:x function(*) \n      '
annotation-assertion-14;Expected error code: XQST0045. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         () instance of %Q{http://www.w3.org/2001/XMLSchema}x function(*) \n      '
annotation-assertion-15;Expected error code: XQST0045. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         () instance of %xsi:x function(*) \n      '
annotation-assertion-16;Expected error code: XQST0045. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         () instance of %fn:x function(*) \n      '
annotation-assertion-17;Expected error code: XQST0045. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         declare namespace math = "http://www.w3.org/2005/xpath-functions/math";\n         () instance of %math:x function(*) \n      '
annotation-assertion-18;Expected error code: XQST0045. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         declare namespace opts = "http://www.w3.org/2012/xquery";\n         () instance of %opts:x function(*) \n      '
annotation-assertion-19;PRSC Error: Failed to parse query '\n         declare namespace eg = "http://example.com";\n         () instance of %eg:x(1) %eg:x(2) function(xs:integer) as xs:string\n      '
annotation-assertion-2;PRSC Error: Failed to parse query '\n         declare namespace eg = "http://example.com";\n         () instance of %eg:x("foo") function(*)\n      '
annotation-assertion-20;Expected executing the XPath 'declare namespace eg = "http://example.com";\n         declare %public function local:three() as xs:integer {3};\n         local:three#0 instance of %public %private function(xs:integer) as xs:integer' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n         declare namespace eg = "http://example.com";\n         declare %public function local:three() as xs:integer {3};\n         local:three#0 instance of %public %private function(xs:integer) as xs:integer\n      '
annotation-assertion-3;PRSC Error: Failed to parse query '\n         declare namespace eg = "http://example.com";\n         () instance of %eg:x(1234) function(*)\n      '
annotation-assertion-4;PRSC Error: Failed to parse query '\n         declare namespace eg = "http://example.com";\n         () instance of %eg:x(12.34) function(*)\n      '
annotation-assertion-5;PRSC Error: Failed to parse query '\n         declare namespace eg = "http://example.com";\n         () instance of %eg:x(12e34) function(*)\n      '
annotation-assertion-6;PRSC Error: Failed to parse query '\n         declare namespace eg = "http://example.com";\n         () instance of %eg:x("abc", 12e34, 567) function(*)\n      '
annotation-assertion-7;PRSC Error: Failed to parse query '\n         () instance of %Q{http://example.com}x function(*)\n      '
annotation-assertion-8;PRSC Error: Failed to parse query '\n         () instance of %Q{http://example.com}x function(*)\n      '
annotation-assertion-9;PRSC Error: Failed to parse query '\n         declare namespace eg = "http://example.com";\n         () instance of %eg:x %eg:y%eg:z %eg:w(1) function(*)\n      '
array-append-101;PRSC Error: Failed to parse query '(array:append([],"3")) instance of $array(*)'
array-append-102;PRSC Error: Failed to parse query '(array:append(["a","b"],"3")) instance of $array(*)'
array-append-103;PRSC Error: Failed to parse query '(array:append(["a",["b"]],[3])) instance of $array(*)'
array-append-104;PRSC Error: Failed to parse query '(array:append(["a","b"],("c","d"))) instance of $array(*)'
array-append-105;PRSC Error: Failed to parse query '(array:append(["a","b"],())) instance of $array(*)'
array-append-106;PRSC Error: Failed to parse query '(array:append(array:append(["a","b"],"c"),"d")) instance of $array(*)'
array-append-107;PRSC Error: Failed to parse query '(array:append([], [])) instance of $array(*)'
array-append-108;PRSC Error: Failed to parse query '(fold-left(1 to 5, [], array:append#2)) instance of $array(*)'
array-filter-001;PRSC Error: Failed to parse query '(array:filter(["A", "B", 1, 2], function($z) {$z instance of xs:integer})) instance of $array(*)'
array-filter-002;PRSC Error: Failed to parse query '(array:filter(["the cat", "sat", "on the mat"], function($s){count(tokenize($s, " ")) gt 1})) instance of $array(*)'
array-filter-003;PRSC Error: Failed to parse query '(array:filter(["A", "B", "", 0, 1], boolean#1)) instance of $array(*)'
array-filter-004;PRSC Error: Failed to parse query '(array:filter([[2,3],[],[4,5,6,7],[6,7],[3]], function($a){array:size($a) gt 1})) instance of $array(*)'
array-filter-005;PRSC Error: Failed to parse query '(array:filter([], contains(?, ""))) instance of $array(*)'
array-filter-006;PRSC Error: Failed to parse query '(array:filter(['apple', 'banana', 'cherry'], contains(?, "e"))) instance of $array(*)'
array-filter-007;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'array:filter(['apple', 'banana', 'cherry'], substring-after(?, "e"))'
array-filter-008;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'array:filter(['apple', 'banana', 'cherry'], substring-after#2)'
array-filter-009;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'array:filter(['apple', 'banana', 'cherry', 17], substring-after(?, "e"))'
array-filter-010;Expected error code: FOAR0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'array:filter([10, 20, 30, 0], function($x){ 20 idiv $x eq 5})'
array-filter-011;PRSC Error: Failed to parse query 'deep-equal((array:filter(["Monday", "Friday", "Tuesday"], map{"Monday":true(), "Tuesday":false(), "Wednesday":true(), "Thursday":4, "Friday":true()})), (["Monday", "Friday"]))'
array-filter-012;PRSC Error: Failed to parse query 'deep-equal((array:filter(array{5 to 9}, [1, 2, 3, 4, true(), false(), true(), false(), true()])), ([5, 7, 9]))'
array-flatten-001;PRSC Error: Failed to parse query '(array:flatten([1, 4, 6, 5, 3])) instance of $xs:integer*'
array-flatten-002;PRSC Error: Failed to parse query '(array:flatten([])) => empty()'
array-flatten-003;The function array:flatten with arity 1 is not registered.
array-flatten-004;The function array:flatten with arity 1 is not registered.
array-flatten-005;PRSC Error: Failed to parse query 'deep-equal((array:flatten(([1, [4, [6, 9]]]))), (1, 4, 6, 9))'
array-flatten-006;PRSC Error: Failed to parse query 'deep-equal((array:flatten((map{}, map{1:2}, map{1:2, 2:3}))), (map{}, map{1:2}, map{1:2, 2:3}))'
array-flatten-007;PRSC Error: Failed to parse query 'deep-equal((array:flatten((map{}, map{1:[2,3]}, map{1:[2], 2:[3]}))), (map{}, map{1:[2,3]}, map{1:[2], 2:[3]}))'
array-flatten-008;PRSC Error: Failed to parse query '<out>{array:flatten((<a/>, <b/>, <c/>))}</out>'
array-flatten-009;PRSC Error: Failed to parse query '<out>{array:flatten([<a/>, [<b/>, <c/>]])}</out>'
array-flatten-010;PRSC Error: Failed to parse query '<out>{[<a/>, [<b/>, <c/>]]}</out>'
array-fold-left-101;PRSC Error: Failed to parse query '(array:fold-left([1,2,3,4,5,6], 0, function($z,$a){$z + $a})) instance of $xs:integer'
array-fold-left-102;PRSC Error: Failed to parse query '(array:fold-left([[2,3],[],[4,5,6,7],[6,7],[3]], 0, function($z,$a){$z + array:size($a)})) instance of $xs:integer'
array-fold-left-103;PRSC Error: Failed to parse query '(array:fold-left(["the cat", "sat", "on the mat"], "", function($z,$a){concat($z, " ", $a)})) instance of $item()*'
array-fold-left-104;PRSC Error: Failed to parse query '(array:fold-left(["+2", "*3"], "10", function($z,$a){concat("(", $z, $a, ")")})) instance of $item()*'
array-fold-left-105;PRSC Error: Failed to parse query '(array:fold-left([function($x){$x+2}, function($x){$x*3}], 10, function($z,$a){$a($z)})) instance of $xs:integer'
array-fold-left-107;PRSC Error: Failed to parse query 'array:fold-left([true(), true(), false()], true(), function($x, $y){$x and $y})'
array-fold-left-108;PRSC Error: Failed to parse query ' array:fold-left([true(), true(), false()], false(), function($x, $y){$x or $y})'
array-fold-left-109;PRSC Error: Failed to parse query 'deep-equal((array:fold-left([1,2,3], [], function($x, $y){[$x, $y]})), ([[[[], 1], 2], 3]))'
array-fold-left-110;PRSC Error: Failed to parse query 'array:fold-left([8,9,4,26], (), function($x, $y){min(($x, $y))}) = 4'
array-fold-right-001;PRSC Error: Failed to parse query '(array:fold-right([1,2,3,4,5,6], 0, function($a,$z){$a + $z})) instance of $xs:integer'
array-fold-right-002;PRSC Error: Failed to parse query '(array:fold-right([[2,3],[],[4,5,6,7],[6,7],[3]], 0, function($a,$z){array:size($a) + $z})) instance of $xs:integer'
array-fold-right-003;PRSC Error: Failed to parse query '(array:fold-right(["the cat", "sat", "on the mat"], "", function($a,$z){concat($a, " ", $z)})) instance of $item()*'
array-fold-right-004;PRSC Error: Failed to parse query '(array:fold-right(["+2", "*3"], "10", function($a,$z){concat("(", $z, $a, ")")})) instance of $item()*'
array-fold-right-005;PRSC Error: Failed to parse query '(array:fold-right([function($x){$x+2}, function($x){$x*3}], 10, function($a,$z){$a($z)})) instance of $xs:integer'
array-fold-right-006;PRSC Error: Failed to parse query '(array:fold-right([" opened the door", " went up stairs"], "Bob", function($a,$z){concat($z, $a)})) instance of $item()*'
array-fold-right-007;PRSC Error: Failed to parse query 'array:fold-right([true(), true(), false()], true(), function($x, $y){$x and $y})'
array-fold-right-008;PRSC Error: Failed to parse query ' array:fold-right([true(), true(), false()], false(), function($x, $y){$x or $y})'
array-fold-right-009;PRSC Error: Failed to parse query 'deep-equal((array:fold-right([1,2,3], [], function($x, $y){[$x, $y]})), ([1, [2, [3, []]]]))'
array-fold-right-010;PRSC Error: Failed to parse query 'array:fold-right([8,9,4,26], (), function($x, $y){min(($x, $y))}) = 4'
array-for-each-001;PRSC Error: Failed to parse query '(array:for-each(["A", "B", 1, 2], function($z) {$z instance of xs:integer})) instance of $array(*)'
array-for-each-002;PRSC Error: Failed to parse query '(array:for-each(["the cat", "sat", "on the mat"], tokenize(?, " "))) instance of $array(*)'
array-for-each-003;PRSC Error: Failed to parse query '(array:for-each([], tokenize(?, " "))) instance of $array(*)'
array-for-each-004;PRSC Error: Failed to parse query '(array:for-each([[2,3],[4,5,6,7],[6,7],[],[3]], array:size(?))) instance of $array(*)'
array-for-each-005;PRSC Error: Failed to parse query '(array:for-each([[2,3],[4,5,6,7],[6,7],[],[3]], array:insert-before(?,1,1))) instance of $array(*)'
array-for-each-006;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'array:for-each([10,20,30,40], remove#2)'
array-for-each-007;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'array:for-each([10,20,30,40], upper-case#1)'
array-for-each-008;PRSC Error: Failed to parse query 'deep-equal((array:for-each(["Monday", "Friday", "Tuesday"], map{"Monday":true(), "Tuesday":false(), "Wednesday":true(), "Thursday":4, "Friday":true()})), ([true(), true(), false()]))'
array-for-each-009;PRSC Error: Failed to parse query 'deep-equal((array:for-each(array{5 to 9}, [1, 2, 3, 4, true(), false(), true(), false(), true()])), ([true(), false(), true(), false(), true()]))'
array-for-each-pair-301;PRSC Error: Failed to parse query '(array:for-each-pair(["A", "B", "C"], [1, 2, 3], function($x, $y) {[$x, $y]})) instance of $array(*)'
array-for-each-pair-302;PRSC Error: Failed to parse query '(let $A := ["A", "B", "C", "D"] return array:for-each-pair($A, array:tail($A), concat#2)) instance of $array(*)'
array-for-each-pair-303;PRSC Error: Failed to parse query '(array:for-each-pair([1,2,3,4,5], [2,4,6,8,10,12,14], function($a,$b){$a + $b})) instance of $array(*)'
array-for-each-pair-304;PRSC Error: Failed to parse query '(array:for-each-pair([function($x){$x+2},function($x){$x*2},function($x){$x*$x}], [3,4,5], function($a,$b){$a($b)})) instance of $array(*)'
array-for-each-pair-305;PRSC Error: Failed to parse query '(array:for-each-pair([["a","b","c"],["d","e","f"],["g","h","i"]], [1,2,3], array:remove#2)) instance of $array(*)'
array-for-each-pair-306;PRSC Error: Failed to parse query '(array:for-each-pair([], [], contains#2)) instance of $array(*)'
array-for-each-pair-307;PRSC Error: Failed to parse query '(array:for-each-pair([], [1, 2], contains#2)) instance of $array(*)'
array-for-each-pair-308;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'array:for-each-pair(['a', 'b'], [1, 2], true#0)'
array-for-each-pair-309;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'array:for-each-pair(['a', 'b'], [1, 2], contains#2)'
array-get-001;PRSC Error: Failed to parse query '(array:get([5,6,7], 1)) instance of $xs:integer'
array-get-002;PRSC Error: Failed to parse query '(array:get([5,[6,7]], 2)) instance of $array(*)'
array-get-003;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'array:get([5,6,7], -1)'
array-get-004;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'array:get([5,6,7], 0)'
array-get-005;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'array:get([], 1)'
array-get-006;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'array:get([1,2,3], 1.2)'
array-get-007;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'array:get([1,2,3], 1 to 2)'
array-get-008;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'array:get([1,2,3], ())'
array-get-009;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function array:get with arity 2 is not registered.
array-get-010;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'array:get([1], 4294967297)'
array-head-601;PRSC Error: Failed to parse query '(array:head([5,6,7,8])) instance of $item()*'
array-head-602;PRSC Error: Failed to parse query '(array:head([["a", "b"], ["c", "d"]])) instance of $array(*)'
array-head-603;PRSC Error: Failed to parse query '(array:head([("a", "b"), ("c", "d")])) instance of $item()*'
array-head-604;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'array:head([])'
array-head-605;PRSC Error: Failed to parse query '(array:head([(), 1])) => empty()'
array-head-606;PRSC Error: Failed to parse query '(array:head([[1,[2],3], [4,5,6]])) instance of $array(*)'
array-head-607;PRSC Error: Failed to parse query 'let $result := (\n           array:head([(1, [<e><f>g</f></e>, "b"], 2)])\n        ) return count($result) eq 3'
array-head-608;PRSC Error: Failed to parse query 'array:head(array { (), (27, 17, 0) }) = 27'
array-head-609;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'array:head(array { (1 to 100) [. eq year-from-date(current-date())] })'
array-insert-before-501;PRSC Error: Failed to parse query '(array:insert-before(["a", "b", "c", "d"], 3, ("x", "y"))) instance of $array(*)'
array-insert-before-502;PRSC Error: Failed to parse query '(array:insert-before(["a", "b", "c", "d"], 5, ("x", "y"))) instance of $array(*)'
array-insert-before-503;PRSC Error: Failed to parse query '(array:insert-before(["a", "b", "c", "d"], 3, ["x", "y"])) instance of $array(*)'
array-insert-before-504;PRSC Error: Failed to parse query '(array:insert-before(["a", "b", "c", "d"], 1, ([],[]))) instance of $array(*)'
array-insert-before-505;PRSC Error: Failed to parse query '(array:insert-before([], 1, ())) instance of $array(*)'
array-insert-before-506;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'array:insert-before([], 2, ())'
array-insert-before-507;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'array:insert-before([4,5,[6]], 0, "a")'
array-insert-before-508;PRSC Error: Failed to parse query '(   \n              let $x := <x/>\n        	  let $array := [<e/>, <f/>, <g/>]\n           	  for $i in 1 to array:size($array) + 1\n              return\n        	     array:insert-before($array, $i, $x) \n        ) instance of $array(*)+'
array-insert-before-509;PRSC Error: Failed to parse query '(   \n              let $x := 1\n              let $array := [0,0,0]\n              for $i in 1 to array:size($array) + 1\n              return\n                 array:insert-before($array, $i, $x) \n        ) instance of $array(*)+'
array-insert-before-510;PRSC Error: Failed to parse query 'deep-equal((   \n              let $x := <c/>\n              let $array := [<a/>, <b/>]\n              let $insert1 := array:insert-before($array, 1, $x)\n              let $insert2 := array:insert-before($array, 2, $x)\n              for $element in (array:flatten($insert1) union array:flatten($insert2))\n              let $name := $element/name()\n              order by $name\n              return $name\n        ), (("a", "b", "c")))'
array-insert-before-511;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'array:insert-before([1], 4294967297, 22)'
array-join-201;PRSC Error: Failed to parse query '(array:join(([1,2],[3,4]))) instance of $array(*)'
array-join-202;PRSC Error: Failed to parse query '(array:join(([],[1,2],[]))) instance of $array(*)'
array-join-203;PRSC Error: Failed to parse query '(array:join([1,2])) instance of $array(*)'
array-join-204;PRSC Error: Failed to parse query '(array:join(())) instance of $array(*)'
array-join-205;PRSC Error: Failed to parse query '(array:join((["a","b","c"], ["d"], [["e","f"]]))) instance of $array(*)'
array-join-206;PRSC Error: Failed to parse query '(array:join([])) instance of $array(*)'
array-join-207;PRSC Error: Failed to parse query '(array:join([()])) instance of $array(*)'
array-join-208;PRSC Error: Failed to parse query '(array:join(([], [], []))) instance of $array(*)'
array-join-209;PRSC Error: Failed to parse query '(array:join(([()], [()], [()]))) instance of $array(*)'
array-join-210;PRSC Error: Failed to parse query '(\n           array:join(([], [()], [], [4], [], [<e>f</e>, <!-- 234 -->], [], [] ))\n        ) instance of $array(*)'
array-join-211;PRSC Error: Failed to parse query '(\n           array:join((\n              [[(1,2)]],\n              [[(3,4)],(5,6)],\n              [7],\n        	  []\n           ))\n        ) instance of $array(*)'
array-put-001;PRSC Error: Failed to parse query '(array:put(["a", "b", "c", "d"], 3, ("x", "y"))) instance of $array(*)'
array-put-002;PRSC Error: Failed to parse query '(array:put(["a", "b", "c", "d"], 4, ("x", "y"))) instance of $array(*)'
array-put-003;PRSC Error: Failed to parse query '(array:put(["a", "b", "c", "d"], 3, ["x", "y"])) instance of $array(*)'
array-put-004;PRSC Error: Failed to parse query '(array:put(["a", "b", "c", "d"], 1, ([],[]))) instance of $array(*)'
array-put-005;PRSC Error: Failed to parse query '(array:put([1], 1, ())) instance of $array(*)'
array-put-006;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'array:put([], 2, ())'
array-put-007;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'array:put([4,5,[6]], 0, "a")'
array-put-008;PRSC Error: Failed to parse query '(   \n              let $x := <x/>\n        	  let $array := [<e/>, <f/>, <g/>]\n           	  for $i in 1 to array:size($array)\n              return\n        	     array:put($array, $i, $x) \n        ) instance of $array(*)+'
array-put-009;PRSC Error: Failed to parse query '(   \n              let $x := 1\n              let $array := [0,0,0]\n              for $i in 1 to array:size($array)\n              return\n                 array:put($array, $i, $x) \n        ) instance of $array(*)+'
array-put-010;PRSC Error: Failed to parse query 'deep-equal((   \n              let $x := <c/>\n              let $array := [<a/>, <b/>]\n              let $insert1 := array:put($array, 1, $x)\n              let $insert2 := array:put($array, 2, $x)\n              for $element in (array:flatten($insert1) union array:flatten($insert2))\n              let $name := $element/name()\n              order by $name\n              return $name\n        ), (("a", "b", "c")))'
array-put-011;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'array:put([4,5,[6]], 4, "a")'
array-put-012;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'array:put([4,5,[6]], -842, "a")'
array-put-013;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'array:put([1], 4294967297, 2)'
array-remove-401;PRSC Error: Failed to parse query '(array:remove(["a", "b", "c", "d"], 1)) instance of $array(*)'
array-remove-402;PRSC Error: Failed to parse query '(array:remove(["a", "b", "c", "d"], 2)) instance of $array(*)'
array-remove-403;PRSC Error: Failed to parse query '(array:remove(["a"], 1)) instance of $array(*)'
array-remove-404;PRSC Error: Failed to parse query '(array:remove(["a", ["b", ()], ["d"]], 2)) instance of $array(*)'
array-remove-405;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'array:remove([], 1)'
array-remove-406;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'array:remove([4,5,6], 4)'
array-remove-407;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'array:remove([4,5,6], 0)'
array-remove-408;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'array:remove([[(1,2)]], -3)'
array-remove-409;PRSC Error: Failed to parse query '(array:remove([[(1,2)]], 1)) instance of $array(*)'
array-remove-410;PRSC Error: Failed to parse query '(array:remove([[(1,2)],[(1,2)]], 1)) instance of $array(*)'
array-remove-412;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'array:remove([[(1,2)],[(1,2)]], 3)'
array-remove-413;PRSC Error: Failed to parse query '(array:remove(["a", "b", "c", "d"], (1 to 3))) instance of $array(*)'
array-remove-414;PRSC Error: Failed to parse query '(array:remove(["a", "b", "c", "d"], ())) instance of $array(*)'
array-remove-415;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'array:remove(["a", "b", "c", "d"], (4 to 5))'
array-remove-416;PRSC Error: Failed to parse query '(array:remove(["a", "b", "c", "d"], (3, 2, 1, 2))) instance of $array(*)'
array-remove-417;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'array:remove([1], 4294967297)'
array-reverse-801;PRSC Error: Failed to parse query '(array:reverse(["a", "b", "c", "d"])) instance of $array(*)'
array-reverse-802;PRSC Error: Failed to parse query '(array:reverse([("a", "b"), ("c", "d")])) instance of $array(*)'
array-reverse-803;PRSC Error: Failed to parse query '(array:reverse([(1 to 5)])) instance of $array(*)'
array-reverse-804;PRSC Error: Failed to parse query '(array:reverse([])) instance of $array(*)'
array-size-001;PRSC Error: Failed to parse query '(array:size([])) instance of $xs:integer'
array-size-002;PRSC Error: Failed to parse query '(array:size([2,3,4])) instance of $xs:integer'
array-size-003;PRSC Error: Failed to parse query '(array:size([2,[3,4]])) instance of $xs:integer'
array-size-004;PRSC Error: Failed to parse query '(array:size([[],[]])) instance of $xs:integer'
array-size-005;PRSC Error: Failed to parse query '(array:size(["a","b","c","d"])) instance of $xs:integer'
array-size-006;PRSC Error: Failed to parse query '(array:size(["a","","c",""])) instance of $xs:integer'
array-size-007;PRSC Error: Failed to parse query '(array:size([(),(2,3), ()])) instance of $xs:integer'
array-subarray-301;PRSC Error: Failed to parse query '(array:subarray(["a", "b", "c", "d"], 2)) instance of $array(*)'
array-subarray-302;PRSC Error: Failed to parse query '(array:subarray(["a", "b", "c", "d"], 5)) instance of $array(*)'
array-subarray-303;PRSC Error: Failed to parse query '(array:subarray(["a", "b", "c", "d"], 2, 3)) instance of $array(*)'
array-subarray-304;PRSC Error: Failed to parse query '(array:subarray(["a", "b", "c", "d"], 2, 0)) instance of $array(*)'
array-subarray-305;PRSC Error: Failed to parse query '(array:subarray(["a", "b", "c", "d"], 2, 1)) instance of $array(*)'
array-subarray-306;PRSC Error: Failed to parse query '(array:subarray(["a", "b", "c", "d"], 2, 2)) instance of $array(*)'
array-subarray-307;PRSC Error: Failed to parse query '(array:subarray(["a", "b", "c", "d"], 5, 0)) instance of $array(*)'
array-subarray-308;PRSC Error: Failed to parse query '(array:subarray(["a", (1,2,3,4), [(),0], "d", (), ""], 2, 4)) instance of $array(*)'
array-subarray-309;PRSC Error: Failed to parse query '(array:subarray([], 1, 0)) instance of $array(*)'
array-subarray-310;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'array:subarray([1,2,3], 0)'
array-subarray-311;Expected error code: FOAY0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'array:subarray([1,2,3], 2, -1)'
array-subarray-312;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'array:subarray([1,2,3], 2, 3)'
array-subarray-313;PRSC Error: Failed to parse query '(array:subarray([[[1]],(2,2),3], 3, 1)) instance of $array(*)'
array-subarray-314;PRSC Error: Failed to parse query '(array:subarray([1, (2,2), 3], 3, 0)) instance of $array(*)'
array-subarray-315;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'array:subarray([1, (2,[2]), 3], 4, 1)'
array-subarray-316;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'array:subarray([1, (2,[2]), 3], 2, 20)'
array-subarray-317;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'array:subarray([1,2,3,4,5], 4294967297, 2)'
array-subarray-318;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'array:subarray([1,2,3,4,5], 1, 4294967297)'
array-tail-701;PRSC Error: Failed to parse query '(array:tail([5,6,7,8])) instance of $array(*)'
array-tail-702;PRSC Error: Failed to parse query '(array:tail([["a", "b"], ["c", "d"]])) instance of $array(*)'
array-tail-703;PRSC Error: Failed to parse query '(array:tail([5])) instance of $array(*)'
array-tail-704;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'array:tail([])'
array-tail-705;PRSC Error: Failed to parse query '(array:tail([()])) instance of $array(*)'
array-tail-706;PRSC Error: Failed to parse query '(\n          array:tail([\n        	[1,[[2]]],\n        	<e/>,\n            (<f/>,<g/>)\n          ])\n        ) instance of $array(*)'
ArrowPostfix-003;Expected XPath "the cat sat on the mat"=>tokenize("\s+")=>count() to (deep equally) resolve to 6
ArrowPostfix-004;Expected XPath let $f:= tokenize#2 return "the cat sat on the mat"=>$f("\s+")=>count() to (deep equally) resolve to 6
ArrowPostfix-005;The function tokenize with arity 1 is not registered.
ArrowPostfix-006;Expected XPath let $f:= tokenize#2 return "the cat sat on the mat"=>($f)("\s+")=>count() to (deep equally) resolve to 6
ArrowPostfix-015;The function normalize-unicode with arity 1 is not registered.
ArrowPostfix-020;PRSC Error: Failed to parse query 'deep-equal((let $m:= map{1:2, 2:4, 3:6} return 2=>$m()), (4))'
ArrowPostfix-021;PRSC Error: Failed to parse query 'deep-equal((2=>(map{1:2, 2:4, 3:6})()), (4))'
ArrowPostfix-022;PRSC Error: Failed to parse query 'deep-equal((let $array:= ['a','b','c','d','e'] return 3=>$array()), ('c'))'
ArrowPostfix-023;PRSC Error: Failed to parse query 'deep-equal((3=>(['a','b','c','d','e'])()), ('c'))'
ArrowPostfix-027;Skipped test, it was a assert-permutation
ArrowPostfix-028;Skipped test, it was a assert-permutation
ArrowPostfix-029;Skipped test, it was a assert-permutation
ArrowPostfix-030;Skipped test, it was a assert-permutation
ArrowPostfix-032;Expected XPath ("one two three four five" => tokenize(" ")) ! upper-case(.) to (deep equally) resolve to ("ONE", "TWO", "THREE", "FOUR", "FIVE")
ArrowPostfix-101;Expected XPath ("one two three four five" => Q{http://www.w3.org/2005/xpath-functions}tokenize(" ")) ! upper-case(.) to (deep equally) resolve to ("ONE", "TWO", "THREE", "FOUR", "FIVE")
ArrowPostfix-105;Expected base expression of a function call to evaluate to a sequence of single function item
ArrowPostfix-106;Expected base expression of a function call to evaluate to a sequence of single function item
ArrowPostfix-107;PRSC Error: Failed to parse query '1 => ([2,3],[4,5][6])() = 2'
ArrowPostfix-109;PRSC Error: Failed to parse query 'let $days := map{"Mo": "Monday", "Tu": "Tuesday"} return "Tu" => $days() = "Tuesday"'
ArrowPostfix-110;PRSC Error: Failed to parse query '"Tu" => (map{"Mo": "Monday", "Tu": "Tuesday"})() = "Tuesday"'
Axes046-1;Expected XPath fn:count(/child::node()) to resolve to 1
Axes046-2;Expected XPath fn:count(/child::node()) to resolve to 7
Axes049-1;Expected XPath fn:count(/node()) to resolve to 1
Axes049-2;Expected XPath fn:count(/node()) to resolve to 7
Axes058-1;Expected XPath fn:count(/descendant::node()) to resolve to 1
Axes058-2;Expected XPath fn:count(/descendant::node()) to resolve to 56
Axes058-3;Expected XPath fn:count(/descendant::node()) to resolve to 58
Axes061-1;Expected XPath fn:count(/descendant-or-self::node()) to resolve to 57
Axes061-2;Expected XPath fn:count(/descendant-or-self::node()) to resolve to 59
Axes064-1;Expected XPath fn:count(//child::node()) to resolve to 1
Axes064-2;Expected XPath fn:count(//child::node()) to resolve to 56
Axes064-3;Expected XPath fn:count(//child::node()) to resolve to 58
Axes067-1;Expected XPath fn:count(//node()) to resolve to 1
Axes067-2;Expected XPath fn:count(//node()) to resolve to 56
Axes067-3;Expected XPath fn:count(//node()) to resolve to 58
Axes073-1;Expected XPath fn:count(//self::node()) to resolve to 57
Axes073-2;Expected XPath fn:count(//self::node()) to resolve to 59
Axes084-5;Casting AbstractValue(Text) to StringValue
Axes085;PRSC Error: Failed to parse query '<root> {//Customers} </root>'
Axes086;PRSC Error: Failed to parse query '<root> {//@*/..} </root>'
Axes087;PRSC Error: Failed to parse query '<root> {/doc/part/*/text()/..} </root>'
Axes089;PRSC Error: Failed to parse query '\nxquery version "1.0";\ndeclare namespace saxon="http://saxon.sf.net/";\ndeclare namespace tour="http://wrox.com/tour";\n\n(:\n    XQuery program to perform a knight's tour of the chessboard.\n    Author: Michael H. Kay\n    Date: 26 June 2003\n    \n    This version modified to use XQuery 1.0, with sequences and functions.\n\n    This query does not use a source document.\n    There is an optional parameter, start, which can be set to any square on the\n    chessboard, e.g. a3 or h5. XQuery does not allow parameters to be given a\n    default value, so the parameter is mandatory.\n    \n    There is a second optional parameter, end, which indicates that the processing should stop\n    after a given number of steps. This can be used to animate the display of the tour. This\n    works especially well when the query is compiled into a Java servlet.\n\n    The output is an HTML display of the completed tour.\n\n    Internally, the following data representations are used:\n    * A square on the chessboard: represented as a number in the range 0 to 63\n    * A state of the chessboard: a sequence of 64 integers, each containing a move number. \n      A square that has not been visited yet is represented by a zero.\n    * A set of possible moves: represented as a sequence of integers,\n    * each integer representing the number of the destination square\n      \n:)\n\ndeclare variable $start as xs:string := "a1";\n\ndeclare variable $end as xs:string := "64";\ndeclare variable $endd as xs:integer := xs:integer($end); \n\n(: start-column is an integer in the range 0-7 :)\n\ndeclare variable $start-column as xs:integer :=\n    xs:integer(translate(substring($start, 1, 1),\n            'abcdefgh', '01234567'));\n\n(: start-row is an integer in the range 0-7, with zero at the top :)\n\ndeclare variable $start-row as xs:integer :=\n    8 - xs:integer(substring($start, 2, 1));\n    \ndeclare function tour:main () as element() {\n\n    (: This function controls the processing. It does not access the source document. :)\n\n    (: Validate the input parameter :)\n\n    if (not(string-length($start)=2) or\n        not(translate(substring($start,1,1), 'abcdefgh', 'aaaaaaaa')='a') or\n        not(translate(substring($start,2,1), '12345678', '11111111')='1'))\n    then\n        error((), "Invalid start parameter: try say 'a1' or 'g6'")\n    else\n    \n    if (not($endd = 1 to 64)) \n    then\n        error((), "Invalid end parameter: must be in range 1 to 64")\n    else\n\n    (: Set up the empty board :)\n\n    let $empty-board as xs:integer* := \n        for $i in (1 to 64) return 0\n    \n    (: Place the knight on the board at the chosen starting position :)\n    \n    let $initial-board as xs:integer* :=\n        tour:place-knight(1, $empty-board, $start-row * 8 + $start-column)\n    \n    (: Evaluate the knight's tour :)\n\n    let $final-board as xs:integer* :=\n       tour:make-moves(2, $initial-board, $start-row * 8 + $start-column)\n\n    (: produce the HTML output :)\n    \n    return tour:print-board($final-board)\n};\n\ndeclare function tour:place-knight (\n                    $move as xs:integer,\n                    $board as xs:integer*,\n                    $square as xs:integer (: range 0 to 63 :)\n                  ) as xs:integer* {\n\n    (: This function places a knight on the board at a given square. The returned value is\n         the supplied board, modified to indicate that the knight reached a given square at a given\n         move :)\n\n    for $i in 1 to 64 return\n        if ($i = $square + 1) then $move else $board[$i]\n\n};\n\ndeclare function tour:make-moves (\n                    $move as xs:integer,\n                    $board as xs:integer*,\n                    $square as xs:integer (: range 0 to 63 :)\n                ) as xs:integer* {\n\n    (: This function takes the board in a given state, decides on the next move to make,\n         and then calls itself recursively to make further moves, until the knight has completed\n         his tour of the board. It returns the board in its final state. :)\n\n    (: determine the possible moves that the knight can make :)\n\n    let $possible-move-list as xs:integer* := \n        tour:list-possible-moves($board, $square)\n\n    (: try these moves in turn until one is found that works :)\n\n    return tour:try-possible-moves($move, $board, $square, $possible-move-list)\n};\n\ndeclare function tour:try-possible-moves (\n                    $move as xs:integer,\n                    $board as xs:integer*,\n                    $square as xs:integer, (: range 0 to 63 :)\n                    $possible-moves as xs:integer* )\n                as xs:integer* {\n\n    (:   This function tries a set of possible moves that the knight can make\n         from a given position. It determines the best move as the one to the square with\n         fewest exits. If this is unsuccessful then it can backtrack and\n         try another move; however this turns out rarely to be necessary. \n         \n         The function makes the selected move, and then calls make-moves() to make\n         subsequent moves, returning the final state of the board. :)\n\n         if (count($possible-moves)!=0)\n                then tour:make-best-move($move, $board, $square, $possible-moves)\n                else ()\n\n         (: if there is no possible move, we return the special value () as the final state\n             of the board, to indicate to the caller that we got stuck :)\n};\n\ndeclare function tour:make-best-move (\n                    $move as xs:integer,\n                    $board as xs:integer*,\n                    $square as xs:integer, (: range 0 to 63 :)\n                    $possible-moves as xs:integer* )\n                as xs:integer* {\n                \n    (: this function, given the state of the board and a set of possible moves,\n       determines which of the moves is the best one. It then makes this move,\n       and proceeds recursively to make further moves, eventually returning the\n       final state of the board. :)            \n        \n    (:  if at least one move is possible, find the best one :)\n\n    let $best-move as xs:integer :=\n        tour:find-best-move($board, $possible-moves, 9, 999)\n\n    (: find the list of possible moves excluding the best one :)\n\n    let $other-possible-moves as xs:integer* :=\n        $possible-moves[. != $best-move]\n\n    (: update the board to make the move chosen as the best one :)\n\n    let $next-board as xs:integer* :=\n        tour:place-knight($move, $board, $best-move)\n    \n    (: now make further moves using a recursive call, until the board is complete :)\n\n    let $final-board as xs:integer* :=\n        if ($move < $endd) (:count($next-board[.=0])!=0:) \n                    then tour:make-moves($move+1, $next-board, $best-move)\n                    else $next-board\n\n    (:   if the final board has the special value '()', we got stuck, and have to choose\n         the next best of the possible moves. This is done by a recursive call. I thought\n         that the knight never did get stuck, but it does: if the starting square is f1,\n         the wrong choice is made at move 58, and needs to be reversed. :)\n\n    return\n        if (empty($final-board))\n        then tour:try-possible-moves($move, $board, $square, $other-possible-moves)\n        else $final-board\n        \n};\n\ndeclare function tour:find-best-move (\n                    $board as xs:integer*,\n                    $possible-moves as xs:integer*,\n                    $fewest-exits as xs:integer,\n                    $best-so-far as xs:integer )\n                as xs:integer {\n\n    (:  This function finds from among the possible moves, the one with fewest exits.\n         It calls itself recursively. :)\n         \n    (:  split the list of possible moves into the first move and the rest of the moves :)\n\n    let $trial-move as xs:integer := \n        $possible-moves[1]\n    \n    let $other-possible-moves as xs:integer* :=\n        $possible-moves[position() > 1]\n\n    (: try making the first move :)\n\n    let $trial-board as xs:integer* :=\n        tour:place-knight(99, $board, $trial-move)\n\n    (: see how many moves would be possible the next time :)\n\n    let $trial-move-exit-list as xs:integer* :=\n        tour:list-possible-moves($trial-board, $trial-move)\n\n    let $number-of-exits as xs:integer :=\n        count($trial-move-exit-list)\n\n    (:  determine whether this trial move has fewer exits than those considered up till now :)\n\n    let $minimum-exits as xs:integer :=\n        min(($number-of-exits, $fewest-exits))\n\n    (:  determine which is the best move (the one with fewest exits) so far :)\n\n    let $new-best-so-far as xs:integer :=\n        if ($number-of-exits < $fewest-exits)\n            then $trial-move\n            else $best-so-far  \n\n    (:  if there are other possible moves, consider them too, using a recursive call.\n        Otherwise return the best move found. :)\n\n    return\n        if (count($other-possible-moves)!=0)\n            then tour:find-best-move($board, $other-possible-moves, \n                                            $minimum-exits, $new-best-so-far)\n            else $new-best-so-far\n\n};\n\ndeclare function tour:list-possible-moves (\n                $board as xs:integer*,\n                $square as xs:integer )\n            as xs:integer* {\n\n    (:   This function, given the knight's position on the board, returns the set of squares\n         he can move to. The squares will be ones that have not been visited before :)\n            \n    let $row as xs:integer := $square idiv 8\n    let $column as xs:integer := $square mod 8\n\n    return\n        (if ($row > 1 and $column > 0 and $board[($square - 17) + 1]=0)\n            then $square - 17 else (),\n         if ($row > 1 and $column < 7 and $board[($square - 15) + 1]=0)\n            then $square - 15 else (),\n         if ($row > 0 and $column > 1 and $board[($square - 10) + 1]=0)\n            then $square - 10 else (),\n         if ($row > 0 and $column < 6 and $board[($square - 6) + 1]=0)\n            then $square - 6 else (),\n         if ($row < 6 and $column > 0 and $board[($square + 15) + 1]=0)\n            then $square + 15 else (),\n         if ($row < 6 and $column < 7 and $board[($square + 17) + 1]=0)\n            then $square + 17 else (),\n         if ($row < 7 and $column > 1 and $board[($square + 6) + 1]=0)\n            then $square + 6 else (),\n         if ($row < 7 and $column < 6 and $board[($square + 10) + 1]=0)\n            then $square + 10 else () )\n\n};\n\ndeclare function tour:print-board (\n                $board as xs:integer* )\n            as element()\n{\n    (: Output the board in HTML format :)\n\n    <html>\n    <head>\n        <title>Knight's tour</title>\n    </head>\n    <body>\n    <div align="center">\n    <h1>Knight's tour starting at {$start}</h1>\n    <table border="1" cellpadding="4">\n        {for $row in 0 to 7 return\n           <tr>\n              {for $column in 0 to 7\n                let $color :=\n                          if ((($row + $column) mod 2)=1)\n                          then 'xffff44' \n                          else 'white' return\n                <td align="center" bgcolor="{$color}" width="22">{\n                  let $n := $board[$row * 8 + $column + 1]\n                  return \n                      if ($endd != 64 and $n = $endd)\n                      then <b>{$n}</b>\n                      else if ($n = 0)\n                      then "&#xa0;"\n                      else $n\n                }</td>\n              }\n           </tr>\n        }\n    </table>\n    <p>{\n        if ($endd != 64) \n        then\n          <a href="Tour?start={$start}&amp;end={$endd+1}">Step</a>\n        else ()\n    }</p>    \n    </div>\n    </body>\n    </html>\n};\n\ntour:main()\n\n'
Axes090;Expected executing the XPath 'let $element as element(foo) := <foo/> return count($element/self::bar)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'let $element as element(foo) := <foo/> return count($element/self::bar) = 0'
Axes091;Expected executing the XPath 'let $element as element(foo) := <foo/> return count($element/self::*:bar)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'let $element as element(foo) := <foo/> return count($element/self::*:bar) = 0'
Axes092;Expected executing the XPath 'declare namespace ns1 = "http://www.example.org/ns1"; declare namespace ns2 = "http://www.example.org/ns2"; let $element as element(ns1:foo) := <ns1:foo/> return count($element/self::ns2:*)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare namespace ns1 = "http://www.example.org/ns1"; declare namespace ns2 = "http://www.example.org/ns2"; let $element as element(ns1:foo) := <ns1:foo/> return count($element/self::ns2:*) = 0'
Axes093;Expected executing the XPath 'let $attribute as attribute(foo) := attribute foo { } return count($attribute/self::bar)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'let $attribute as attribute(foo) := attribute foo { } return count($attribute/self::bar) = 0'
Axes094;Expected executing the XPath 'let $attribute as attribute(foo) := attribute foo { } \n            return count($attribute/self::*:bar)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'let $attribute as attribute(foo) := attribute foo { } \n            return count($attribute/self::*:bar)\n       = 0'
Axes095;Expected executing the XPath 'declare namespace ns1 = "http://www.example.org/ns1"; \n        declare namespace ns2 = "http://www.example.org/ns2"; \n        let $attribute as attribute(ns1:foo) := attribute ns1:foo { } \n        return count($attribute/self::ns2:*)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n        declare namespace ns1 = "http://www.example.org/ns1"; \n        declare namespace ns2 = "http://www.example.org/ns2"; \n        let $attribute as attribute(ns1:foo) := attribute ns1:foo { } \n        return count($attribute/self::ns2:*)\n       = 0'
Axes096;Expected executing the XPath 'let $element as element(*) := <foo/> return count($element/self::bar)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'let $element as element(*) := <foo/> return count($element/self::bar) = 0'
Axes097;Expected executing the XPath 'let $element as element(*) := <foo/> return count($element/self::*:bar)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'let $element as element(*) := <foo/> return count($element/self::*:bar) = 0'
Axes098;Expected executing the XPath 'declare namespace ns1 = "http://www.example.org/ns1"; \n        declare namespace ns2 = "http://www.example.org/ns2"; \n        let $element as element(*) := <ns1:foo/> \n        return count($element/self::ns2:*)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n        declare namespace ns1 = "http://www.example.org/ns1"; \n        declare namespace ns2 = "http://www.example.org/ns2"; \n        let $element as element(*) := <ns1:foo/> \n        return count($element/self::ns2:*) = 0'
Axes099;Expected executing the XPath 'let $attribute as attribute(*) := attribute foo { } return count($attribute/self::bar)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'let $attribute as attribute(*) := attribute foo { } return count($attribute/self::bar) = 0'
Axes100;Expected executing the XPath 'let $attribute as attribute(*) := attribute foo { } return count($attribute/self::*:bar)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'let $attribute as attribute(*) := attribute foo { } return count($attribute/self::*:bar) = 0'
Axes101;Expected executing the XPath 'declare namespace ns1 = "http://www.example.org/ns1"; \n        declare namespace ns2 = "http://www.example.org/ns2"; \n        let $attribute as attribute(*) := attribute ns1:foo { } \n        return count($attribute/self::ns2:*)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n        declare namespace ns1 = "http://www.example.org/ns1"; \n        declare namespace ns2 = "http://www.example.org/ns2"; \n        let $attribute as attribute(*) := attribute ns1:foo { } \n        return count($attribute/self::ns2:*) = 0'
Axes102;PRSC Error: Failed to parse query '\n        declare namespace ns1 = "http://www.example.org/ns1"; \n        declare namespace ns2 = "http://www.example.org/ns2"; \n        declare construction strip; \n        let $element as element(*, xs:untyped) := <e>test</e> \n        let $element as element(*, xs:untyped) := $element/self::* \n        return count($element) = 1'
Axes103;Expected executing the XPath 'let $comment as comment() := <!--comment--> return count($comment/self::*)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'let $comment as comment() := <!--comment--> return count($comment/self::*) = 0'
Axes104;Expected executing the XPath 'let $comment as comment() := <!--comment--> return count($comment/self::foo)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'let $comment as comment() := <!--comment--> return count($comment/self::foo) = 0'
Axes105;Expected executing the XPath 'let $comment as comment() := <!--comment--> return count($comment/self::*:foo)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'let $comment as comment() := <!--comment--> return count($comment/self::*:foo) = 0'
Axes106;Expected executing the XPath 'declare namespace ns1 = "http://www.example.org/ns1"; \n        let $comment as comment() := <!--comment--> \n        return count($comment/self::ns1:*)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n        declare namespace ns1 = "http://www.example.org/ns1"; \n        let $comment as comment() := <!--comment--> \n        return count($comment/self::ns1:*) = 0'
Axes107;Expected executing the XPath 'let $processing-instruction as processing-instruction() := <?processing instruction?> \n        return count($processing-instruction/self::*)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n        let $processing-instruction as processing-instruction() := <?processing instruction?> \n        return count($processing-instruction/self::*) = 0'
Axes108;Expected executing the XPath 'let $processing-instruction as processing-instruction() := <?processing instruction?> \n        return count($processing-instruction/self::processing)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n        let $processing-instruction as processing-instruction() := <?processing instruction?> \n        return count($processing-instruction/self::processing) = 0'
Axes109;Expected executing the XPath 'let $processing-instruction as processing-instruction() := <?processing instruction?> \n        return count($processing-instruction/self::*:processing)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n        let $processing-instruction as processing-instruction() := <?processing instruction?> \n        return count($processing-instruction/self::*:processing) = 0'
Axes110;Expected executing the XPath 'declare namespace ns1 = "http://www.example.org/ns1"; \n        let $processing-instruction as processing-instruction() := <?processing instruction?> \n        return count($processing-instruction/self::ns1:*)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n        declare namespace ns1 = "http://www.example.org/ns1"; \n        let $processing-instruction as processing-instruction() := <?processing instruction?> \n        return count($processing-instruction/self::ns1:*) = 0'
Axes111;PRSC Error: Failed to parse query '\n        declare namespace ns1 = "http://www.example.org/ns1"; \n        declare namespace ns2 = "http://www.example.org/ns2"; declare construction strip; \n        let $element as element(*, xs:untyped) := <e a="value" /> \n        let $attribute as attribute(*, xs:untypedAtomic)* := $element/attribute::* \n        return count($attribute) = 1'
Axes112;Expected XPathException with code XQST0134, but got NamespaceTest AST to Expression not yet implemented
Axes113;NamespaceTest AST to Expression not yet implemented
Axes114;PRSC Error: Failed to parse query '(/*/namespace::namespace-node()) => count()'
Axes115;Expected executing the XPath '/*/attribute::namespace-node()' to resolve to one of the expected results, but got System.NotImplementedException: NamespaceTest AST to Expression not yet implemented
Axes116;PRSC Error: Failed to parse query '(/*/namespace::*[self::namespace-node()]) => count()'
Axes117;PRSC Error: Failed to parse query '(namespace {"xsl"}{"http://www.w3.org/1999/XSL/Transform"} / self::namespace-node()) => count()'
Axes118;PRSC Error: Failed to parse query '(/*/namespace::*) => count()'
Axes119;PRSC Error: Failed to parse query '(/*/namespace::*/..) => count()'
Axes120;Skipped test, it was a assert-permutation
Axes121;PRSC Error: Failed to parse query 'string(/*/namespace::xlink) = 'http://www.w3.org/1999/xlink''
Axes122;PRSC Error: Failed to parse query '/*/namespace::xlink is /*/*[1]/namespace::xlink'
Axes123;PRSC Error: Failed to parse query '/*/namespace::xlink is /*/namespace::*[. = 'http://www.w3.org/1999/xlink']'
Axes124;PRSC Error: Failed to parse query '(/*/namespace::*[not(name())]) => count()'
Axes125;PRSC Error: Failed to parse query '(/*/*/namespace::*[not(name())]) => count()'
Axes126;PRSC Error: Failed to parse query '(/*/*/*/namespace::*[not(name())]) => empty()'
Axes127;Expected XPathException with code XPST0017, but got NamespaceTest AST to Expression not yet implemented
axis-err-1;Expected executing the XPath 'let $var := <anElement>Some content</anElement> return $var/20[child::text()]' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XPTY0019. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'let $var := <anElement>Some content</anElement> return $var/20[child::text()]'
base64-001;Type casting to XsHexBinary has not been implemented yet.
base64-002;Type casting to XsHexBinary has not been implemented yet.
base64-003;Type casting to XsHexBinary has not been implemented yet.
base64-004;Type casting to XsHexBinary has not been implemented yet.
base64-005;Type casting to XsHexBinary has not been implemented yet.
base64-006;Type casting to XsHexBinary has not been implemented yet.
base64-007;Type casting to XsHexBinary has not been implemented yet.
base64-008;Type casting to XsHexBinary has not been implemented yet.
base64-009;Type casting to XsHexBinary has not been implemented yet.
base64-010;Type casting to XsHexBinary has not been implemented yet.
base64-011;Type casting to XsHexBinary has not been implemented yet.
base64-012;Type casting to XsHexBinary has not been implemented yet.
base64-013;Type casting to XsHexBinary has not been implemented yet.
base64-014;Type casting to XsHexBinary has not been implemented yet.
base64-101;Type casting to XsBase64Binary has not been implemented yet.
base64-102;Type casting to XsBase64Binary has not been implemented yet.
base64-103;Type casting to XsBase64Binary has not been implemented yet.
base64-104;Type casting to XsBase64Binary has not been implemented yet.
base64-105;Type casting to XsBase64Binary has not been implemented yet.
base64-106;Type casting to XsBase64Binary has not been implemented yet.
base64-107;Type casting to XsBase64Binary has not been implemented yet.
base64-108;Type casting to XsBase64Binary has not been implemented yet.
base64-109;Type casting to XsBase64Binary has not been implemented yet.
base64-110;Type casting to XsBase64Binary has not been implemented yet.
base64-111;Type casting to XsBase64Binary has not been implemented yet.
base64-112;Type casting to XsBase64Binary has not been implemented yet.
base64-113;Type casting to XsBase64Binary has not been implemented yet.
base64-114;Type casting to XsBase64Binary has not been implemented yet.
base64-115;Type casting to XsBase64Binary has not been implemented yet.
base64-901;Expected XPathException with code FORG0001, but got Type casting to XsBase64Binary has not been implemented yet.
base64-902;Expected XPathException with code FORG0001, but got Type casting to XsBase64Binary has not been implemented yet.
base64-903;Expected XPathException with code FORG0001, but got Type casting to XsBase64Binary has not been implemented yet.
base64-904;Expected XPathException with code FORG0001, but got Type casting to XsBase64Binary has not been implemented yet.
base64-905;Expected XPathException with code FORG0001, but got Type casting to XsBase64Binary has not been implemented yet.
base64-906;Expected XPathException with code FORG0001, but got Type casting to XsBase64Binary has not been implemented yet.
base64-907;Expected XPathException with code FORG0001, but got Type casting to XsBase64Binary has not been implemented yet.
base64-908;Expected XPathException with code FORG0001, but got Type casting to XsBase64Binary has not been implemented yet.
base64-909;PRSC Error: Failed to parse query 'codepoints-to-string((119070, 119070, 119070, 119070) (:treble clef:)) castable as xs:base64Binary'
base64BinaryEqual-1;Type casting to XsBase64Binary has not been implemented yet.
base64BinaryEqual-10;Type casting to XsBase64Binary has not been implemented yet.
base64BinaryEqual-11;Type casting to XsBase64Binary has not been implemented yet.
base64BinaryEqual-12;Type casting to XsBase64Binary has not been implemented yet.
base64BinaryEqual-13;Type casting to XsBase64Binary has not been implemented yet.
base64BinaryEqual-14;Type casting to XsBase64Binary has not been implemented yet.
base64BinaryEqual-2;Type casting to XsBase64Binary has not been implemented yet.
base64BinaryEqual-3;Type casting to XsBase64Binary has not been implemented yet.
base64BinaryEqual-4;Type casting to XsBase64Binary has not been implemented yet.
base64binaryequal-5;Type casting to XsBase64Binary has not been implemented yet.
base64BinaryEqual-6;Type casting to XsBase64Binary has not been implemented yet.
base64BinaryEqual-7;Type casting to XsBase64Binary has not been implemented yet.
base64BinaryEqual-8;Type casting to XsBase64Binary has not been implemented yet.
base64BinaryEqual-9;Type casting to XsBase64Binary has not been implemented yet.
boolean-010;Expected error code: FORG0006. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'boolean([true()])'
boolean-010b;Expected error code: FORG0006. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'fn:boolean([])'
boolean-011;Expected error code: FORG0006. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'boolean(map{})'
boolean-013;Expected error code: FORG0006. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'boolean(array{})'
boolean-014;Expected error code: FORG0006. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'boolean(map{0:"false", 1:"true"})'
caselessmatch01;The function matches with arity 3 is not registered.
caselessmatch02;The function matches with arity 3 is not registered.
caselessmatch03;The function matches with arity 3 is not registered.
caselessmatch04;The function matches with arity 3 is not registered.
caselessmatch05;The function matches with arity 3 is not registered.
caselessmatch06;The function matches with arity 3 is not registered.
caselessmatch07;The function matches with arity 3 is not registered.
caselessmatch08;The function matches with arity 3 is not registered.
caselessmatch09;The function matches with arity 3 is not registered.
caselessmatch10;The function matches with arity 3 is not registered.
caselessmatch11;The function matches with arity 3 is not registered.
caselessmatch12;The function matches with arity 3 is not registered.
caselessmatch13;The function matches with arity 3 is not registered.
caselessmatch14;The function matches with arity 3 is not registered.
caselessmatch15;The function matches with arity 3 is not registered.
cast-derived-3;can not cast '<Value>[type: XsFloat, value: NaN]' to xs:integer
cast-derived-6;can not cast '<Value>[type: XsFloat, value: NaN]' to xs:integer
cast-to-parent-3;Can not cast '<Value>[type: XsDouble, value: NaN]' to xs:integer
cast-to-parent-6;Can not cast '<Value>[type: XsDouble, value: NaN]' to xs:integer
cast-within-1;Can not cast '<Value>[type: XsDouble, value: NaN]' to xs:integer
cast-within-4;Can not cast '<Value>[type: XsDouble, value: NaN]' to xs:integer
Castable-ListType-10;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        s:intListType1("1 2 3") castable as s:intListType1'
Castable-ListType-11;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        "1.1 2.1 3.1" castable as s:intListType1?'
Castable-ListType-12;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        "1 2 3" castable as s:intListType1?'
Castable-ListType-13;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        "" castable as s:intListType1?'
Castable-ListType-14;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        xs:untypedAtomic("1.1 2.1 3.1") castable as s:intListType1?'
Castable-ListType-15;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        xs:untypedAtomic("1 2 3") castable as s:intListType1?'
Castable-ListType-16;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        xs:untypedAtomic("") castable as s:intListType1?'
Castable-ListType-17;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        (1, 2, 3) castable as s:intListType1?'
Castable-ListType-18;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        () castable as s:intListType1?'
Castable-ListType-19;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        s:intListType1("1 2 3") castable as s:intListType1?'
Castable-ListType-2;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        "1.1 2.1 3.1" castable as s:intListType1'
Castable-ListType-3;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        "1 2 3" castable as s:intListType1'
Castable-ListType-4;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        "" castable as s:intListType1'
Castable-ListType-5;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        xs:untypedAtomic("1.1 2.1 3.1") castable as s:intListType1'
Castable-ListType-6;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        xs:untypedAtomic("1 2 3") castable as s:intListType1'
Castable-ListType-7;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        xs:untypedAtomic("") castable as s:intListType1'
Castable-ListType-8;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        (1, 2, 3) castable as s:intListType1'
Castable-ListType-9;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        () castable as s:intListType1'
Castable-UnionType-1;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n      "123" castable as s:myUnionType1'
Castable-UnionType-10;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n      s:myUnionType1("2001-01-01") castable as s:myUnionType1'
Castable-UnionType-11;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n      xs:integer(123) castable as s:myUnionType1'
Castable-UnionType-12;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n      xs:date("2001-01-01") castable as s:myUnionType1'
Castable-UnionType-13;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n      () castable as s:myUnionType1'
Castable-UnionType-14;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n      "123" castable as s:myUnionType1?'
Castable-UnionType-15;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n      "2001-01-01" castable as s:myUnionType1?'
Castable-UnionType-16;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n      "string" castable as s:myUnionType1?'
Castable-UnionType-17;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n      xs:untypedAtomic("123") castable as s:myUnionType1?'
Castable-UnionType-18;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n      xs:untypedAtomic("2001-01-01") castable as s:myUnionType1?'
Castable-UnionType-19;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n      xs:untypedAtomic("string") castable as s:myUnionType1?'
Castable-UnionType-2;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n      "2001-01-01" castable as s:myUnionType1'
Castable-UnionType-20;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n      s:unrestrictedInteger(123) castable as s:myUnionType1?'
Castable-UnionType-21;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n      s:unrestrictedDate("2001-01-01") castable as s:myUnionType1?'
Castable-UnionType-22;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n      xs:gYear("2001") castable as s:myUnionType1?'
Castable-UnionType-23;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n      s:myUnionType1("2001-01-01") castable as s:myUnionType1?'
Castable-UnionType-24;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n      xs:integer(123) castable as s:myUnionType1?'
Castable-UnionType-25;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n      xs:date("2001-01-01") castable as s:myUnionType1?'
Castable-UnionType-26;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n      () castable as s:myUnionType1?'
Castable-UnionType-3;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n      "string" castable as s:myUnionType1'
Castable-UnionType-36;PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         declare function local:f($a as s:dateOrDateTime) as xs:boolean { $a castable as xs:string };\n         local:f(xs:date('2001-01-01'))\n       '
Castable-UnionType-37;PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         declare function local:f($a as s:dateOrDateTime) as xs:boolean { $a castable as xs:dateTime };\n         local:f(xs:date('2001-01-01'))\n       '
Castable-UnionType-38;PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         declare function local:f($a as s:dateOrDateTime) as xs:boolean { $a castable as xs:date };\n         local:f(xs:date('2001-01-01'))\n       '
Castable-UnionType-4;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n      xs:untypedAtomic("123") castable as s:myUnionType1'
Castable-UnionType-5;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n      xs:untypedAtomic("2001-01-01") castable as s:myUnionType1'
Castable-UnionType-6;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n      xs:untypedAtomic("string") castable as s:myUnionType1'
Castable-UnionType-7;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n      s:unrestrictedInteger(123) castable as s:myUnionType1'
Castable-UnionType-8;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n      s:unrestrictedDate("2001-01-01") castable as s:myUnionType1'
Castable-UnionType-9;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n      xs:gYear("2001") castable as s:myUnionType1'
CastableAs001;PRSC Error: Failed to parse query 'xs:untypedAtomic("INF") castable as xs:untypedAtomic'
CastableAs002;PRSC Error: Failed to parse query 'xs:untypedAtomic("0.0E0") castable as xs:untypedAtomic'
CastableAs003;PRSC Error: Failed to parse query 'xs:untypedAtomic("true") castable as xs:untypedAtomic'
CastableAs004;PRSC Error: Failed to parse query 'xs:untypedAtomic("INF") castable as xs:string'
CastableAs005;PRSC Error: Failed to parse query 'xs:untypedAtomic("0.0E0") castable as xs:string'
CastableAs006;PRSC Error: Failed to parse query 'xs:untypedAtomic("true") castable as xs:string'
CastableAs007;PRSC Error: Failed to parse query 'xs:untypedAtomic("-0.0E0") castable as xs:float'
CastableAs008;PRSC Error: Failed to parse query 'xs:untypedAtomic("NaN") castable as xs:float'
CastableAs009;PRSC Error: Failed to parse query 'xs:untypedAtomic("1e-5") castable as xs:float'
CastableAs010;PRSC Error: Failed to parse query 'xs:untypedAtomic("-10000000") castable as xs:float'
CastableAs011;PRSC Error: Failed to parse query 'xs:untypedAtomic("true") castable as xs:float'
CastableAs012;PRSC Error: Failed to parse query 'xs:untypedAtomic("-0.0E0") castable as xs:double'
CastableAs013;PRSC Error: Failed to parse query 'xs:untypedAtomic("NaN") castable as xs:double'
CastableAs014;PRSC Error: Failed to parse query 'xs:untypedAtomic("1e-5") castable as xs:double'
CastableAs015;PRSC Error: Failed to parse query 'xs:untypedAtomic("-10000000") castable as xs:double'
CastableAs016;PRSC Error: Failed to parse query 'xs:untypedAtomic("true") castable as xs:double'
CastableAs017;PRSC Error: Failed to parse query 'xs:untypedAtomic("-0.0E0") castable as xs:decimal'
CastableAs018;PRSC Error: Failed to parse query 'xs:untypedAtomic("NaN") castable as xs:decimal'
CastableAs019;PRSC Error: Failed to parse query 'xs:untypedAtomic("1e-5") castable as xs:decimal'
CastableAs020;PRSC Error: Failed to parse query 'xs:untypedAtomic("5.5432") castable as xs:decimal'
CastableAs021;PRSC Error: Failed to parse query 'xs:untypedAtomic("true") castable as xs:decimal'
CastableAs022;PRSC Error: Failed to parse query 'xs:untypedAtomic("-0.0E0") castable as xs:integer'
CastableAs023;PRSC Error: Failed to parse query 'xs:untypedAtomic("NaN") castable as xs:integer'
CastableAs024;PRSC Error: Failed to parse query 'xs:untypedAtomic("1e-5") castable as xs:integer'
CastableAs025;PRSC Error: Failed to parse query 'xs:untypedAtomic("-1.1234") castable as xs:integer'
CastableAs026;PRSC Error: Failed to parse query 'xs:untypedAtomic("true") castable as xs:integer'
CastableAs027;PRSC Error: Failed to parse query 'xs:untypedAtomic("P1Y2M3DT10H30M23S") castable as xs:duration'
CastableAs028;PRSC Error: Failed to parse query 'xs:untypedAtomic("-P1Y1M1DT1H1M1.123S") castable as xs:duration'
CastableAs029;PRSC Error: Failed to parse query 'xs:untypedAtomic("true") castable as xs:duration'
CastableAs030;PRSC Error: Failed to parse query 'xs:untypedAtomic("-P1Y1M1DT1H1M1.123S") castable as xs:yearMonthDuration'
CastableAs031;PRSC Error: Failed to parse query 'xs:untypedAtomic("P24M") castable as xs:yearMonthDuration'
CastableAs032;PRSC Error: Failed to parse query 'xs:untypedAtomic("-P21M") castable as xs:yearMonthDuration'
CastableAs033;PRSC Error: Failed to parse query 'xs:untypedAtomic("true") castable as xs:yearMonthDuration'
CastableAs034;PRSC Error: Failed to parse query 'xs:untypedAtomic("-P1Y1M1DT1H1M1.123S") castable as xs:dayTimeDuration'
CastableAs035;PRSC Error: Failed to parse query 'xs:untypedAtomic("P3DT10H30M") castable as xs:dayTimeDuration'
CastableAs036;PRSC Error: Failed to parse query 'xs:untypedAtomic("-PT100M") castable as xs:dayTimeDuration'
CastableAs037;PRSC Error: Failed to parse query 'xs:untypedAtomic("true") castable as xs:dayTimeDuration'
CastableAs038;PRSC Error: Failed to parse query 'xs:untypedAtomic("1999-05-31T13:20:00") castable as xs:dateTime'
CastableAs039;PRSC Error: Failed to parse query 'xs:untypedAtomic("-1999-05-31T13:20:00+14:00") castable as xs:dateTime'
CastableAs040;PRSC Error: Failed to parse query 'xs:untypedAtomic("2000-01-16T00:00:00Z") castable as xs:dateTime'
CastableAs041;PRSC Error: Failed to parse query 'xs:untypedAtomic("true") castable as xs:dateTime'
CastableAs042;PRSC Error: Failed to parse query 'xs:untypedAtomic("13:20:00-05:00") castable as xs:time'
CastableAs043;PRSC Error: Failed to parse query 'xs:untypedAtomic("13:20:02.123") castable as xs:time'
CastableAs044;PRSC Error: Failed to parse query 'xs:untypedAtomic("13:20:00Z") castable as xs:time'
CastableAs045;PRSC Error: Failed to parse query 'xs:untypedAtomic("true") castable as xs:time'
CastableAs046;PRSC Error: Failed to parse query 'xs:untypedAtomic("1999-05-31") castable as xs:date'
CastableAs047;PRSC Error: Failed to parse query 'xs:untypedAtomic("-0012-12-03-05:00") castable as xs:date'
CastableAs048;PRSC Error: Failed to parse query 'xs:untypedAtomic("1999-05-31Z") castable as xs:date'
CastableAs049;PRSC Error: Failed to parse query 'xs:untypedAtomic("true") castable as xs:date'
CastableAs050;PRSC Error: Failed to parse query 'xs:untypedAtomic("1999-05") castable as xs:gYearMonth'
CastableAs051;PRSC Error: Failed to parse query 'xs:untypedAtomic("-0012-12-05:00") castable as xs:gYearMonth'
CastableAs052;PRSC Error: Failed to parse query 'xs:untypedAtomic("1999-05Z") castable as xs:gYearMonth'
CastableAs053;PRSC Error: Failed to parse query 'xs:untypedAtomic("true") castable as xs:gYearMonth'
CastableAs054;PRSC Error: Failed to parse query 'xs:untypedAtomic("1999") castable as xs:gYear'
CastableAs055;PRSC Error: Failed to parse query 'xs:untypedAtomic("-0012-05:00") castable as xs:gYear'
CastableAs056;PRSC Error: Failed to parse query 'xs:untypedAtomic("1999Z") castable as xs:gYear'
CastableAs057;PRSC Error: Failed to parse query 'xs:untypedAtomic("true") castable as xs:gYear'
CastableAs058;PRSC Error: Failed to parse query 'xs:untypedAtomic("--05-31") castable as xs:gMonthDay'
CastableAs059;PRSC Error: Failed to parse query 'xs:untypedAtomic("--05-31+14:00") castable as xs:gMonthDay'
CastableAs060;PRSC Error: Failed to parse query 'xs:untypedAtomic("--05-31Z") castable as xs:gMonthDay'
CastableAs061;PRSC Error: Failed to parse query 'xs:untypedAtomic("true") castable as xs:gMonthDay'
CastableAs062;PRSC Error: Failed to parse query 'xs:untypedAtomic("---31") castable as xs:gDay'
CastableAs063;PRSC Error: Failed to parse query 'xs:untypedAtomic("---03-05:00") castable as xs:gDay'
CastableAs064;PRSC Error: Failed to parse query 'xs:untypedAtomic("---31Z") castable as xs:gDay'
CastableAs065;PRSC Error: Failed to parse query 'xs:untypedAtomic("true") castable as xs:gDay'
CastableAs066;PRSC Error: Failed to parse query 'xs:untypedAtomic("--05") castable as xs:gMonth'
CastableAs067;PRSC Error: Failed to parse query 'xs:untypedAtomic("--12-05:00") castable as xs:gMonth'
CastableAs068;PRSC Error: Failed to parse query 'xs:untypedAtomic("--05Z") castable as xs:gMonth'
CastableAs069;PRSC Error: Failed to parse query 'xs:untypedAtomic("true") castable as xs:gMonth'
CastableAs070;PRSC Error: Failed to parse query 'xs:untypedAtomic("0.0") castable as xs:boolean'
CastableAs071;PRSC Error: Failed to parse query 'xs:untypedAtomic("0") castable as xs:boolean'
CastableAs072;PRSC Error: Failed to parse query 'xs:untypedAtomic("true") castable as xs:boolean'
CastableAs073;PRSC Error: Failed to parse query 'xs:untypedAtomic("true") castable as xs:base64Binary'
CastableAs074;PRSC Error: Failed to parse query 'xs:untypedAtomic("00000000") castable as xs:base64Binary'
CastableAs075;PRSC Error: Failed to parse query 'xs:untypedAtomic("D74D35D35D35") castable as xs:base64Binary'
CastableAs076;PRSC Error: Failed to parse query 'xs:untypedAtomic("true") castable as xs:hexBinary'
CastableAs077;PRSC Error: Failed to parse query 'xs:untypedAtomic("010010101") castable as xs:hexBinary'
CastableAs078;PRSC Error: Failed to parse query 'xs:untypedAtomic("0fb7") castable as xs:hexBinary'
CastableAs079;PRSC Error: Failed to parse query 'xs:untypedAtomic("D74D35D35D35") castable as xs:hexBinary'
CastableAs080;PRSC Error: Failed to parse query 'xs:untypedAtomic("http://www.example.com/~b%C3%A9b%C3%A9") castable as xs:anyURI'
CastableAs081;PRSC Error: Failed to parse query 'xs:untypedAtomic("true") castable as xs:anyURI'
CastableAs082;PRSC Error: Failed to parse query 'xs:untypedAtomic("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:anyURI'
CastableAs083;PRSC Error: Failed to parse query 'xs:string("INF") castable as xs:untypedAtomic'
CastableAs084;PRSC Error: Failed to parse query 'xs:string("0.0E0") castable as xs:untypedAtomic'
CastableAs085;PRSC Error: Failed to parse query 'xs:string("true") castable as xs:untypedAtomic'
CastableAs086;PRSC Error: Failed to parse query 'xs:string("INF") castable as xs:string'
CastableAs087;PRSC Error: Failed to parse query 'xs:string("0.0E0") castable as xs:string'
CastableAs088;PRSC Error: Failed to parse query 'xs:string("true") castable as xs:string'
CastableAs089;PRSC Error: Failed to parse query 'xs:string("-0.0E0") castable as xs:float'
CastableAs090;PRSC Error: Failed to parse query 'xs:string("NaN") castable as xs:float'
CastableAs091;PRSC Error: Failed to parse query 'xs:string("1e-5") castable as xs:float'
CastableAs092;PRSC Error: Failed to parse query 'xs:string("-10000000") castable as xs:float'
CastableAs093;PRSC Error: Failed to parse query 'xs:string("true") castable as xs:float'
CastableAs094;PRSC Error: Failed to parse query 'xs:string("-0.0E0") castable as xs:double'
CastableAs095;PRSC Error: Failed to parse query 'xs:string("NaN") castable as xs:double'
CastableAs096;PRSC Error: Failed to parse query 'xs:string("1e-5") castable as xs:double'
CastableAs097;PRSC Error: Failed to parse query 'xs:string("-10000000") castable as xs:double'
CastableAs098;PRSC Error: Failed to parse query 'xs:string("true") castable as xs:double'
CastableAs099;PRSC Error: Failed to parse query 'xs:string("-0.0E0") castable as xs:decimal'
CastableAs100;PRSC Error: Failed to parse query 'xs:string("NaN") castable as xs:decimal'
CastableAs101;PRSC Error: Failed to parse query 'xs:string("1e-5") castable as xs:decimal'
CastableAs102;PRSC Error: Failed to parse query 'xs:string("5.5432") castable as xs:decimal'
CastableAs103;PRSC Error: Failed to parse query 'xs:string("true") castable as xs:decimal'
CastableAs104;PRSC Error: Failed to parse query 'xs:string("-0.0E0") castable as xs:integer'
CastableAs105;PRSC Error: Failed to parse query 'xs:string("NaN") castable as xs:integer'
CastableAs106;PRSC Error: Failed to parse query 'xs:string("1e-5") castable as xs:integer'
CastableAs107;PRSC Error: Failed to parse query 'xs:string("-1.1234") castable as xs:integer'
CastableAs108;PRSC Error: Failed to parse query 'xs:string("true") castable as xs:integer'
CastableAs109;PRSC Error: Failed to parse query 'xs:string("P1Y2M3DT10H30M23S") castable as xs:duration'
CastableAs110;PRSC Error: Failed to parse query 'xs:string("-P1Y1M1DT1H1M1.123S") castable as xs:duration'
CastableAs111;PRSC Error: Failed to parse query 'xs:string("true") castable as xs:duration'
CastableAs112;PRSC Error: Failed to parse query 'xs:string("-P1Y1M1DT1H1M1.123S") castable as xs:yearMonthDuration'
CastableAs113;PRSC Error: Failed to parse query 'xs:string("P24M") castable as xs:yearMonthDuration'
CastableAs114;PRSC Error: Failed to parse query 'xs:string("-P21M") castable as xs:yearMonthDuration'
CastableAs115;PRSC Error: Failed to parse query 'xs:string("true") castable as xs:yearMonthDuration'
CastableAs116;PRSC Error: Failed to parse query 'xs:string("-P1Y1M1DT1H1M1.123S") castable as xs:dayTimeDuration'
CastableAs117;PRSC Error: Failed to parse query 'xs:string("P3DT10H30M") castable as xs:dayTimeDuration'
CastableAs118;PRSC Error: Failed to parse query 'xs:string("-PT100M") castable as xs:dayTimeDuration'
CastableAs119;PRSC Error: Failed to parse query 'xs:string("true") castable as xs:dayTimeDuration'
CastableAs120;PRSC Error: Failed to parse query 'xs:string("1999-05-31T13:20:00") castable as xs:dateTime'
CastableAs121;PRSC Error: Failed to parse query 'xs:string("-1999-05-31T13:20:00+14:00") castable as xs:dateTime'
CastableAs122;PRSC Error: Failed to parse query 'xs:string("2000-01-16T00:00:00Z") castable as xs:dateTime'
CastableAs123;PRSC Error: Failed to parse query 'xs:string("true") castable as xs:dateTime'
CastableAs124;PRSC Error: Failed to parse query 'xs:string("13:20:00-05:00") castable as xs:time'
CastableAs125;PRSC Error: Failed to parse query 'xs:string("13:20:02.123") castable as xs:time'
CastableAs126;PRSC Error: Failed to parse query 'xs:string("13:20:00Z") castable as xs:time'
CastableAs127;PRSC Error: Failed to parse query 'xs:string("true") castable as xs:time'
CastableAs128;PRSC Error: Failed to parse query 'xs:string("1999-05-31") castable as xs:date'
CastableAs129;PRSC Error: Failed to parse query 'xs:string("-0012-12-03-05:00") castable as xs:date'
CastableAs130;PRSC Error: Failed to parse query 'xs:string("1999-05-31Z") castable as xs:date'
CastableAs131;PRSC Error: Failed to parse query 'xs:string("true") castable as xs:date'
CastableAs132;PRSC Error: Failed to parse query 'xs:string("1999-05") castable as xs:gYearMonth'
CastableAs133;PRSC Error: Failed to parse query 'xs:string("-0012-12-05:00") castable as xs:gYearMonth'
CastableAs134;PRSC Error: Failed to parse query 'xs:string("1999-05Z") castable as xs:gYearMonth'
CastableAs135;PRSC Error: Failed to parse query 'xs:string("true") castable as xs:gYearMonth'
CastableAs136;PRSC Error: Failed to parse query 'xs:string("1999") castable as xs:gYear'
CastableAs137;PRSC Error: Failed to parse query 'xs:string("-0012-05:00") castable as xs:gYear'
CastableAs138;PRSC Error: Failed to parse query 'xs:string("1999Z") castable as xs:gYear'
CastableAs139;PRSC Error: Failed to parse query 'xs:string("true") castable as xs:gYear'
CastableAs140;PRSC Error: Failed to parse query 'xs:string("--05-31") castable as xs:gMonthDay'
CastableAs141;PRSC Error: Failed to parse query 'xs:string("--05-31+14:00") castable as xs:gMonthDay'
CastableAs142;PRSC Error: Failed to parse query 'xs:string("--05-31Z") castable as xs:gMonthDay'
CastableAs143;PRSC Error: Failed to parse query 'xs:string("true") castable as xs:gMonthDay'
CastableAs144;PRSC Error: Failed to parse query 'xs:string("---31") castable as xs:gDay'
CastableAs145;PRSC Error: Failed to parse query 'xs:string("---03-05:00") castable as xs:gDay'
CastableAs146;PRSC Error: Failed to parse query 'xs:string("---31Z") castable as xs:gDay'
CastableAs147;PRSC Error: Failed to parse query 'xs:string("true") castable as xs:gDay'
CastableAs148;PRSC Error: Failed to parse query 'xs:string("--05") castable as xs:gMonth'
CastableAs149;PRSC Error: Failed to parse query 'xs:string("--12-05:00") castable as xs:gMonth'
CastableAs150;PRSC Error: Failed to parse query 'xs:string("--05Z") castable as xs:gMonth'
CastableAs151;PRSC Error: Failed to parse query 'xs:string("true") castable as xs:gMonth'
CastableAs152;PRSC Error: Failed to parse query 'xs:string("0.0") castable as xs:boolean'
CastableAs153;PRSC Error: Failed to parse query 'xs:string("0") castable as xs:boolean'
CastableAs154;PRSC Error: Failed to parse query 'xs:string("true") castable as xs:boolean'
CastableAs155;PRSC Error: Failed to parse query 'xs:string("true") castable as xs:base64Binary'
CastableAs156;PRSC Error: Failed to parse query 'xs:string("00000000") castable as xs:base64Binary'
CastableAs157;PRSC Error: Failed to parse query 'xs:string("D74D35D35D35") castable as xs:base64Binary'
CastableAs158;PRSC Error: Failed to parse query 'xs:string("true") castable as xs:hexBinary'
CastableAs159;PRSC Error: Failed to parse query 'xs:string("010010101") castable as xs:hexBinary'
CastableAs160;PRSC Error: Failed to parse query 'xs:string("0fb7") castable as xs:hexBinary'
CastableAs161;PRSC Error: Failed to parse query 'xs:string("D74D35D35D35") castable as xs:hexBinary'
CastableAs162;PRSC Error: Failed to parse query 'xs:string("http://www.example.com/~b%C3%A9b%C3%A9") castable as xs:anyURI'
CastableAs163;PRSC Error: Failed to parse query 'xs:string("true") castable as xs:anyURI'
CastableAs164;PRSC Error: Failed to parse query 'xs:string("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:anyURI'
CastableAs165;PRSC Error: Failed to parse query 'xs:float("1e5") castable as xs:untypedAtomic'
CastableAs166;PRSC Error: Failed to parse query 'xs:float("-INF") castable as xs:untypedAtomic'
CastableAs167;PRSC Error: Failed to parse query 'xs:float("-0.0E0") castable as xs:string'
CastableAs168;PRSC Error: Failed to parse query 'xs:float("NaN") castable as xs:string'
CastableAs169;PRSC Error: Failed to parse query 'xs:float("5.4321E-100") castable as xs:float'
CastableAs170;PRSC Error: Failed to parse query 'xs:float("-1.75e-3") castable as xs:float'
CastableAs171;PRSC Error: Failed to parse query 'xs:float("INF") castable as xs:float'
CastableAs172;PRSC Error: Failed to parse query 'xs:float("-0.0E0") castable as xs:double'
CastableAs173;PRSC Error: Failed to parse query 'xs:float("-INF") castable as xs:double'
CastableAs174;PRSC Error: Failed to parse query 'xs:float("-0.0E0") castable as xs:decimal'
CastableAs175;PRSC Error: Failed to parse query 'xs:float("5.4321E-100") castable as xs:decimal'
CastableAs176;PRSC Error: Failed to parse query 'xs:float("1e5") castable as xs:decimal'
CastableAs177;PRSC Error: Failed to parse query 'xs:float("-1.75e-3") castable as xs:decimal'
CastableAs178;PRSC Error: Failed to parse query 'xs:float("-0.0E0") castable as xs:integer'
CastableAs179;PRSC Error: Failed to parse query 'xs:float("1e5") castable as xs:integer'
CastableAs180;PRSC Error: Failed to parse query 'xs:float("INF") castable as xs:integer'
CastableAs181;PRSC Error: Failed to parse query 'xs:float("-1.75e-3") castable as xs:duration'
CastableAs182;PRSC Error: Failed to parse query 'xs:float("5.4321E-100") castable as xs:yearMonthDuration'
CastableAs183;PRSC Error: Failed to parse query 'xs:float("5.4321E-100") castable as xs:dayTimeDuration'
CastableAs184;PRSC Error: Failed to parse query 'xs:float("5.4321E-100") castable as xs:dateTime'
CastableAs185;PRSC Error: Failed to parse query 'xs:float("5.4321E-100") castable as xs:time'
CastableAs186;PRSC Error: Failed to parse query 'xs:float("5.4321E-100") castable as xs:date'
CastableAs187;PRSC Error: Failed to parse query 'xs:float("5.4321E-100") castable as xs:gYearMonth'
CastableAs188;PRSC Error: Failed to parse query 'xs:float("5.4321E-100") castable as xs:gYear'
CastableAs189;PRSC Error: Failed to parse query 'xs:float("5.4321E-100") castable as xs:gMonthDay'
CastableAs190;PRSC Error: Failed to parse query 'xs:float("5.4321E-100") castable as xs:gDay'
CastableAs191;PRSC Error: Failed to parse query 'xs:float("5.4321E-100") castable as xs:gMonth'
CastableAs192;PRSC Error: Failed to parse query 'xs:float("-0.0E0") castable as xs:boolean'
CastableAs193;PRSC Error: Failed to parse query 'xs:float("1e5") castable as xs:boolean'
CastableAs194;PRSC Error: Failed to parse query 'xs:float("-INF") castable as xs:boolean'
CastableAs195;PRSC Error: Failed to parse query 'xs:float("NaN") castable as xs:boolean'
CastableAs196;PRSC Error: Failed to parse query 'xs:float("5.4321E-100") castable as xs:base64Binary'
CastableAs197;PRSC Error: Failed to parse query 'xs:float("5.4321E-100") castable as xs:hexBinary'
CastableAs198;PRSC Error: Failed to parse query 'xs:float("5.4321E-100") castable as xs:anyURI'
CastableAs199;PRSC Error: Failed to parse query 'xs:double("1e5") castable as xs:untypedAtomic'
CastableAs200;PRSC Error: Failed to parse query 'xs:double("INF") castable as xs:untypedAtomic'
CastableAs201;PRSC Error: Failed to parse query 'xs:double("1e8") castable as xs:string'
CastableAs202;PRSC Error: Failed to parse query 'xs:double("INF") castable as xs:string'
CastableAs203;PRSC Error: Failed to parse query 'xs:double("-0.0E0") castable as xs:float'
CastableAs204;PRSC Error: Failed to parse query 'xs:double("5.4321E-1001") castable as xs:float'
CastableAs205;PRSC Error: Failed to parse query 'xs:double("1e5") castable as xs:float'
CastableAs206;PRSC Error: Failed to parse query 'xs:double("-1.75e-3") castable as xs:float'
CastableAs207;PRSC Error: Failed to parse query 'xs:double("NaN") castable as xs:float'
CastableAs208;PRSC Error: Failed to parse query 'xs:double("1e5") castable as xs:double'
CastableAs209;PRSC Error: Failed to parse query 'xs:double("INF") castable as xs:double'
CastableAs210;PRSC Error: Failed to parse query 'xs:double("-0.0E0") castable as xs:decimal'
CastableAs211;PRSC Error: Failed to parse query 'xs:double("5.4321E-1001") castable as xs:decimal'
CastableAs212;PRSC Error: Failed to parse query 'xs:double("-1.75e-3") castable as xs:decimal'
CastableAs213;PRSC Error: Failed to parse query 'xs:double("INF") castable as xs:decimal'
CastableAs214;PRSC Error: Failed to parse query 'xs:double("-0.0E0") castable as xs:integer'
CastableAs215;PRSC Error: Failed to parse query 'xs:double("1e5") castable as xs:integer'
CastableAs216;PRSC Error: Failed to parse query 'xs:double("-1.75e-3") castable as xs:integer'
CastableAs217;PRSC Error: Failed to parse query 'xs:double("INF") castable as xs:integer'
CastableAs218;PRSC Error: Failed to parse query 'xs:double("NaN") castable as xs:integer'
CastableAs219;PRSC Error: Failed to parse query 'xs:double("1e5") castable as xs:duration'
CastableAs220;PRSC Error: Failed to parse query 'xs:double("1e5") castable as xs:yearMonthDuration'
CastableAs221;PRSC Error: Failed to parse query 'xs:double("1e5") castable as xs:dayTimeDuration'
CastableAs222;PRSC Error: Failed to parse query 'xs:double("1e5") castable as xs:dateTime'
CastableAs223;PRSC Error: Failed to parse query 'xs:double("1e5") castable as xs:time'
CastableAs224;PRSC Error: Failed to parse query 'xs:double("1e5") castable as xs:date'
CastableAs225;PRSC Error: Failed to parse query 'xs:double("1e5") castable as xs:gYearMonth'
CastableAs226;PRSC Error: Failed to parse query 'xs:double("1e5") castable as xs:gYear'
CastableAs227;PRSC Error: Failed to parse query 'xs:double("1e5") castable as xs:gMonthDay'
CastableAs228;PRSC Error: Failed to parse query 'xs:double("1e5") castable as xs:gDay'
CastableAs229;PRSC Error: Failed to parse query 'xs:double("1e5") castable as xs:gMonth'
CastableAs230;PRSC Error: Failed to parse query 'xs:double("1e5") castable as xs:boolean'
CastableAs231;PRSC Error: Failed to parse query 'xs:double("1e5") castable as xs:base64Binary'
CastableAs232;PRSC Error: Failed to parse query 'xs:double("1e5") castable as xs:hexBinary'
CastableAs233;PRSC Error: Failed to parse query 'xs:double("1e5") castable as xs:anyURI'
CastableAs234;PRSC Error: Failed to parse query 'xs:decimal("-1.1234") castable as xs:untypedAtomic'
CastableAs235;PRSC Error: Failed to parse query 'xs:decimal("-1.1234") castable as xs:string'
CastableAs236;PRSC Error: Failed to parse query 'xs:decimal("-1.1234") castable as xs:float'
CastableAs237;PRSC Error: Failed to parse query 'xs:decimal("-1.1234") castable as xs:double'
CastableAs238;PRSC Error: Failed to parse query 'xs:decimal("-1.1234") castable as xs:decimal'
CastableAs239;PRSC Error: Failed to parse query 'xs:decimal("-1.1234") castable as xs:integer'
CastableAs240;PRSC Error: Failed to parse query 'xs:decimal("5.5432") castable as xs:integer'
CastableAs241;PRSC Error: Failed to parse query 'xs:decimal("-1.1234") castable as xs:duration'
CastableAs242;PRSC Error: Failed to parse query 'xs:decimal("-1.1234") castable as xs:yearMonthDuration'
CastableAs243;PRSC Error: Failed to parse query 'xs:decimal("-1.1234") castable as xs:dayTimeDuration'
CastableAs244;PRSC Error: Failed to parse query 'xs:decimal("-1.1234") castable as xs:dateTime'
CastableAs245;PRSC Error: Failed to parse query 'xs:decimal("-1.1234") castable as xs:time'
CastableAs246;PRSC Error: Failed to parse query 'xs:decimal("-1.1234") castable as xs:date'
CastableAs247;PRSC Error: Failed to parse query 'xs:decimal("-1.1234") castable as xs:gYearMonth'
CastableAs248;PRSC Error: Failed to parse query 'xs:decimal("-1.1234") castable as xs:gYear'
CastableAs249;PRSC Error: Failed to parse query 'xs:decimal("-1.1234") castable as xs:gMonthDay'
CastableAs250;PRSC Error: Failed to parse query 'xs:decimal("-1.1234") castable as xs:gDay'
CastableAs251;PRSC Error: Failed to parse query 'xs:decimal("-1.1234") castable as xs:gMonth'
CastableAs252;PRSC Error: Failed to parse query 'xs:decimal("-1.1234") castable as xs:boolean'
CastableAs253;PRSC Error: Failed to parse query 'xs:decimal("-1.1234") castable as xs:base64Binary'
CastableAs254;PRSC Error: Failed to parse query 'xs:decimal("-1.1234") castable as xs:hexBinary'
CastableAs255;PRSC Error: Failed to parse query 'xs:decimal("-1.1234") castable as xs:anyURI'
CastableAs256;PRSC Error: Failed to parse query 'xs:integer("1") castable as xs:untypedAtomic'
CastableAs257;PRSC Error: Failed to parse query 'xs:integer("-100") castable as xs:string'
CastableAs258;PRSC Error: Failed to parse query 'xs:integer("-100") castable as xs:float'
CastableAs259;PRSC Error: Failed to parse query 'xs:integer("-100") castable as xs:double'
CastableAs260;PRSC Error: Failed to parse query 'xs:integer("-100") castable as xs:decimal'
CastableAs261;PRSC Error: Failed to parse query 'xs:integer("-100") castable as xs:integer'
CastableAs262;PRSC Error: Failed to parse query 'xs:integer("-100") castable as xs:duration'
CastableAs263;PRSC Error: Failed to parse query 'xs:integer("-100") castable as xs:yearMonthDuration'
CastableAs264;PRSC Error: Failed to parse query 'xs:integer("-100") castable as xs:dayTimeDuration'
CastableAs265;PRSC Error: Failed to parse query 'xs:integer("-100") castable as xs:dateTime'
CastableAs266;PRSC Error: Failed to parse query 'xs:integer("-100") castable as xs:time'
CastableAs267;PRSC Error: Failed to parse query 'xs:integer("-100") castable as xs:date'
CastableAs268;PRSC Error: Failed to parse query 'xs:integer("-100") castable as xs:gYearMonth'
CastableAs269;PRSC Error: Failed to parse query 'xs:integer("-100") castable as xs:gYear'
CastableAs270;PRSC Error: Failed to parse query 'xs:integer("-100") castable as xs:gMonthDay'
CastableAs271;PRSC Error: Failed to parse query 'xs:integer("-100") castable as xs:gDay'
CastableAs272;PRSC Error: Failed to parse query 'xs:integer("-100") castable as xs:gMonth'
CastableAs273;PRSC Error: Failed to parse query 'xs:integer("-100") castable as xs:boolean'
CastableAs274;PRSC Error: Failed to parse query 'xs:integer("-100") castable as xs:base64Binary'
CastableAs275;PRSC Error: Failed to parse query 'xs:integer("-100") castable as xs:hexBinary'
CastableAs276;PRSC Error: Failed to parse query 'xs:integer("-100") castable as xs:anyURI'
CastableAs277;PRSC Error: Failed to parse query 'xs:duration("P1Y2M3DT10H30M23S") castable as xs:untypedAtomic'
CastableAs278;PRSC Error: Failed to parse query 'xs:duration("P1Y2M3DT10H30M23S") castable as xs:string'
CastableAs279;PRSC Error: Failed to parse query 'xs:duration("P1Y2M3DT10H30M23S") castable as xs:float'
CastableAs280;PRSC Error: Failed to parse query 'xs:duration("P1Y2M3DT10H30M23S") castable as xs:double'
CastableAs281;PRSC Error: Failed to parse query 'xs:duration("P1Y2M3DT10H30M23S") castable as xs:decimal'
CastableAs282;PRSC Error: Failed to parse query 'xs:duration("P1Y2M3DT10H30M23S") castable as xs:integer'
CastableAs283;PRSC Error: Failed to parse query 'xs:duration("P1Y2M3DT10H30M23S") castable as xs:duration'
CastableAs284;PRSC Error: Failed to parse query 'xs:duration("PT10H") castable as xs:duration'
CastableAs285;PRSC Error: Failed to parse query 'xs:duration("P1Y2M3DT10H30M23S") castable as xs:yearMonthDuration'
CastableAs286;PRSC Error: Failed to parse query 'xs:duration("PT10H") castable as xs:yearMonthDuration'
CastableAs287;PRSC Error: Failed to parse query 'xs:duration("P24M") castable as xs:yearMonthDuration'
CastableAs288;PRSC Error: Failed to parse query 'xs:duration("P1Y2M3DT10H30M23S") castable as xs:dayTimeDuration'
CastableAs289;PRSC Error: Failed to parse query 'xs:duration("PT10H") castable as xs:dayTimeDuration'
CastableAs290;PRSC Error: Failed to parse query 'xs:duration("P24M") castable as xs:dayTimeDuration'
CastableAs291;PRSC Error: Failed to parse query 'xs:duration("P1Y2M3DT10H30M23S") castable as xs:dateTime'
CastableAs292;PRSC Error: Failed to parse query 'xs:duration("P1Y2M3DT10H30M23S") castable as xs:time'
CastableAs293;PRSC Error: Failed to parse query 'xs:duration("P1Y2M3DT10H30M23S") castable as xs:date'
CastableAs294;PRSC Error: Failed to parse query 'xs:duration("P1Y2M3DT10H30M23S") castable as xs:gYearMonth'
CastableAs295;PRSC Error: Failed to parse query 'xs:duration("P1Y2M3DT10H30M23S") castable as xs:gYear'
CastableAs296;PRSC Error: Failed to parse query 'xs:duration("P1Y2M3DT10H30M23S") castable as xs:gMonthDay'
CastableAs297;PRSC Error: Failed to parse query 'xs:duration("P1Y2M3DT10H30M23S") castable as xs:gDay'
CastableAs298;PRSC Error: Failed to parse query 'xs:duration("P1Y2M3DT10H30M23S") castable as xs:gMonth'
CastableAs299;PRSC Error: Failed to parse query 'xs:duration("P1Y2M3DT10H30M23S") castable as xs:boolean'
CastableAs300;PRSC Error: Failed to parse query 'xs:duration("P1Y2M3DT10H30M23S") castable as xs:base64Binary'
CastableAs301;PRSC Error: Failed to parse query 'xs:duration("P1Y2M3DT10H30M23S") castable as xs:hexBinary'
CastableAs302;PRSC Error: Failed to parse query 'xs:duration("P1Y2M3DT10H30M23S") castable as xs:anyURI'
CastableAs303;PRSC Error: Failed to parse query 'xs:yearMonthDuration("P1Y2M") castable as xs:untypedAtomic'
CastableAs304;PRSC Error: Failed to parse query 'xs:yearMonthDuration("P1Y2M") castable as xs:string'
CastableAs305;PRSC Error: Failed to parse query 'xs:yearMonthDuration("P1Y2M") castable as xs:float'
CastableAs306;PRSC Error: Failed to parse query 'xs:yearMonthDuration("P1Y2M") castable as xs:double'
CastableAs307;PRSC Error: Failed to parse query 'xs:yearMonthDuration("P1Y2M") castable as xs:decimal'
CastableAs308;PRSC Error: Failed to parse query 'xs:yearMonthDuration("P1Y2M") castable as xs:integer'
CastableAs309;PRSC Error: Failed to parse query 'xs:yearMonthDuration("P1Y2M") castable as xs:duration'
CastableAs310;PRSC Error: Failed to parse query 'xs:yearMonthDuration("P1Y2M") castable as xs:yearMonthDuration'
CastableAs311;PRSC Error: Failed to parse query 'xs:yearMonthDuration("-P21M") castable as xs:yearMonthDuration'
CastableAs312;PRSC Error: Failed to parse query 'xs:yearMonthDuration("P1Y2M") castable as xs:dayTimeDuration'
CastableAs313;PRSC Error: Failed to parse query 'xs:yearMonthDuration("P1Y2M") castable as xs:dateTime'
CastableAs314;PRSC Error: Failed to parse query 'xs:yearMonthDuration("P1Y2M") castable as xs:time'
CastableAs315;PRSC Error: Failed to parse query 'xs:yearMonthDuration("P1Y2M") castable as xs:date'
CastableAs316;PRSC Error: Failed to parse query 'xs:yearMonthDuration("P1Y2M") castable as xs:gYearMonth'
CastableAs317;PRSC Error: Failed to parse query 'xs:yearMonthDuration("P1Y2M") castable as xs:gYear'
CastableAs318;PRSC Error: Failed to parse query 'xs:yearMonthDuration("P1Y2M") castable as xs:gMonthDay'
CastableAs319;PRSC Error: Failed to parse query 'xs:yearMonthDuration("P1Y2M") castable as xs:gDay'
CastableAs320;PRSC Error: Failed to parse query 'xs:yearMonthDuration("P1Y2M") castable as xs:gMonth'
CastableAs321;PRSC Error: Failed to parse query 'xs:yearMonthDuration("P1Y2M") castable as xs:boolean'
CastableAs322;PRSC Error: Failed to parse query 'xs:yearMonthDuration("P1Y2M") castable as xs:base64Binary'
CastableAs323;PRSC Error: Failed to parse query 'xs:yearMonthDuration("P1Y2M") castable as xs:hexBinary'
CastableAs324;PRSC Error: Failed to parse query 'xs:yearMonthDuration("P1Y2M") castable as xs:anyURI'
CastableAs325;PRSC Error: Failed to parse query 'xs:dayTimeDuration("P3DT10H30M") castable as xs:untypedAtomic'
CastableAs326;PRSC Error: Failed to parse query 'xs:dayTimeDuration("-PT100M") castable as xs:untypedAtomic'
CastableAs327;PRSC Error: Failed to parse query 'xs:dayTimeDuration("P3DT10H30M") castable as xs:string'
CastableAs328;PRSC Error: Failed to parse query 'xs:dayTimeDuration("-PT100M") castable as xs:string'
CastableAs329;PRSC Error: Failed to parse query 'xs:dayTimeDuration("P3DT10H30M") castable as xs:float'
CastableAs330;PRSC Error: Failed to parse query 'xs:dayTimeDuration("P3DT10H30M") castable as xs:double'
CastableAs331;PRSC Error: Failed to parse query 'xs:dayTimeDuration("P3DT10H30M") castable as xs:decimal'
CastableAs332;PRSC Error: Failed to parse query 'xs:dayTimeDuration("P3DT10H30M") castable as xs:integer'
CastableAs333;PRSC Error: Failed to parse query 'xs:dayTimeDuration("P3DT10H30M") castable as xs:duration'
CastableAs334;PRSC Error: Failed to parse query 'xs:dayTimeDuration("PT24H") castable as xs:duration'
CastableAs335;PRSC Error: Failed to parse query 'xs:dayTimeDuration("-PT100M") castable as xs:duration'
CastableAs336;PRSC Error: Failed to parse query 'xs:dayTimeDuration("P3DT10H30M") castable as xs:yearMonthDuration'
CastableAs337;PRSC Error: Failed to parse query 'xs:dayTimeDuration("P3DT10H30M") castable as xs:dayTimeDuration'
CastableAs338;PRSC Error: Failed to parse query 'xs:dayTimeDuration("P14D") castable as xs:dayTimeDuration'
CastableAs339;PRSC Error: Failed to parse query 'xs:dayTimeDuration("-PT100M") castable as xs:dayTimeDuration'
CastableAs340;PRSC Error: Failed to parse query 'xs:dayTimeDuration("P3DT10H30M") castable as xs:dateTime'
CastableAs341;PRSC Error: Failed to parse query 'xs:dayTimeDuration("P3DT10H30M") castable as xs:time'
CastableAs342;PRSC Error: Failed to parse query 'xs:dayTimeDuration("P3DT10H30M") castable as xs:date'
CastableAs343;PRSC Error: Failed to parse query 'xs:dayTimeDuration("P3DT10H30M") castable as xs:gYearMonth'
CastableAs344;PRSC Error: Failed to parse query 'xs:dayTimeDuration("P3DT10H30M") castable as xs:gYear'
CastableAs345;PRSC Error: Failed to parse query 'xs:dayTimeDuration("P3DT10H30M") castable as xs:gMonthDay'
CastableAs346;PRSC Error: Failed to parse query 'xs:dayTimeDuration("P3DT10H30M") castable as xs:gDay'
CastableAs347;PRSC Error: Failed to parse query 'xs:dayTimeDuration("P3DT10H30M") castable as xs:gMonth'
CastableAs348;PRSC Error: Failed to parse query 'xs:dayTimeDuration("P3DT10H30M") castable as xs:boolean'
CastableAs349;PRSC Error: Failed to parse query 'xs:dayTimeDuration("P3DT10H30M") castable as xs:base64Binary'
CastableAs350;PRSC Error: Failed to parse query 'xs:dayTimeDuration("P3DT10H30M") castable as xs:hexBinary'
CastableAs351;PRSC Error: Failed to parse query 'xs:dayTimeDuration("P3DT10H30M") castable as xs:anyURI'
CastableAs352;PRSC Error: Failed to parse query 'xs:dateTime("1999-05-31T13:20:00") castable as xs:untypedAtomic'
CastableAs353;PRSC Error: Failed to parse query 'xs:dateTime("-1999-05-31T13:20:00+14:00") castable as xs:untypedAtomic'
CastableAs354;PRSC Error: Failed to parse query 'xs:dateTime("1999-05-31T13:20:00") castable as xs:string'
CastableAs355;PRSC Error: Failed to parse query 'xs:dateTime("-1999-05-31T13:20:00+14:00") castable as xs:string'
CastableAs356;PRSC Error: Failed to parse query 'xs:dateTime("1999-05-31T13:20:00") castable as xs:float'
CastableAs357;PRSC Error: Failed to parse query 'xs:dateTime("2000-01-16T00:00:00Z") castable as xs:float'
CastableAs358;PRSC Error: Failed to parse query 'xs:dateTime("1999-05-31T13:20:00") castable as xs:decimal'
CastableAs359;PRSC Error: Failed to parse query 'xs:dateTime("1999-05-31T13:20:00") castable as xs:integer'
CastableAs360;PRSC Error: Failed to parse query 'xs:dateTime("1999-05-31T13:20:00") castable as xs:duration'
CastableAs361;PRSC Error: Failed to parse query 'xs:dateTime("1999-05-31T13:20:00") castable as xs:yearMonthDuration'
CastableAs362;PRSC Error: Failed to parse query 'xs:dateTime("1999-05-31T13:20:00") castable as xs:dayTimeDuration'
CastableAs363;PRSC Error: Failed to parse query 'xs:dateTime("1999-05-31T13:20:00") castable as xs:dateTime'
CastableAs364;PRSC Error: Failed to parse query 'xs:dateTime("1999-05-31T13:20:00") castable as xs:time'
CastableAs365;PRSC Error: Failed to parse query 'xs:dateTime("-1999-05-31T13:20:00+14:00") castable as xs:time'
CastableAs366;PRSC Error: Failed to parse query 'xs:dateTime("1999-05-31T13:20:00") castable as xs:date'
CastableAs367;PRSC Error: Failed to parse query 'xs:dateTime("-1999-05-31T13:20:00+14:00") castable as xs:date'
CastableAs368;PRSC Error: Failed to parse query 'xs:dateTime("1999-05-31T13:20:00") castable as xs:gYearMonth'
CastableAs369;PRSC Error: Failed to parse query 'xs:dateTime("-1999-05-31T13:20:00+14:00") castable as xs:gYearMonth'
CastableAs370;PRSC Error: Failed to parse query 'xs:dateTime("1999-05-31T13:20:00") castable as xs:gYear'
CastableAs371;PRSC Error: Failed to parse query 'xs:dateTime("-1999-05-31T13:20:00+14:00") castable as xs:gYear'
CastableAs372;PRSC Error: Failed to parse query 'xs:dateTime("1999-05-31T13:20:00") castable as xs:gMonthDay'
CastableAs373;PRSC Error: Failed to parse query 'xs:dateTime("-1999-05-31T13:20:00+14:00") castable as xs:gMonthDay'
CastableAs374;PRSC Error: Failed to parse query 'xs:dateTime("1999-05-31T13:20:00") castable as xs:gDay'
CastableAs375;PRSC Error: Failed to parse query 'xs:dateTime("-1999-05-31T13:20:00+14:00") castable as xs:gDay'
CastableAs376;PRSC Error: Failed to parse query 'xs:dateTime("1999-05-31T13:20:00") castable as xs:gMonth'
CastableAs377;PRSC Error: Failed to parse query 'xs:dateTime("-1999-05-31T13:20:00+14:00") castable as xs:gMonth'
CastableAs378;PRSC Error: Failed to parse query 'xs:dateTime("1999-05-31T13:20:00") castable as xs:boolean'
CastableAs379;PRSC Error: Failed to parse query 'xs:dateTime("1999-05-31T13:20:00") castable as xs:base64Binary'
CastableAs380;PRSC Error: Failed to parse query 'xs:dateTime("1999-05-31T13:20:00") castable as xs:hexBinary'
CastableAs381;PRSC Error: Failed to parse query 'xs:dateTime("1999-05-31T13:20:00") castable as xs:anyURI'
CastableAs382;PRSC Error: Failed to parse query 'xs:time("13:20:00-05:00") castable as xs:untypedAtomic'
CastableAs383;PRSC Error: Failed to parse query 'xs:time("13:20:00-05:00") castable as xs:string'
CastableAs384;PRSC Error: Failed to parse query 'xs:time("13:20:00-05:00") castable as xs:float'
CastableAs385;PRSC Error: Failed to parse query 'xs:time("13:20:00-05:00") castable as xs:double'
CastableAs386;PRSC Error: Failed to parse query 'xs:time("13:20:00-05:00") castable as xs:decimal'
CastableAs387;PRSC Error: Failed to parse query 'xs:time("13:20:00-05:00") castable as xs:integer'
CastableAs388;PRSC Error: Failed to parse query 'xs:time("13:20:00-05:00") castable as xs:duration'
CastableAs389;PRSC Error: Failed to parse query 'xs:time("13:20:00-05:00") castable as xs:yearMonthDuration'
CastableAs390;PRSC Error: Failed to parse query 'xs:time("13:20:00-05:00") castable as xs:dayTimeDuration'
CastableAs391;PRSC Error: Failed to parse query 'xs:time("13:20:00-05:00") castable as xs:dateTime'
CastableAs392;PRSC Error: Failed to parse query 'xs:time("13:20:00-05:00") castable as xs:time'
CastableAs393;PRSC Error: Failed to parse query 'xs:time("13:20:02.123") castable as xs:time'
CastableAs394;PRSC Error: Failed to parse query 'xs:time("13:20:00Z") castable as xs:time'
CastableAs395;PRSC Error: Failed to parse query 'xs:time("13:20:00-05:00") castable as xs:date'
CastableAs396;PRSC Error: Failed to parse query 'xs:time("13:20:00-05:00") castable as xs:gYearMonth'
CastableAs397;PRSC Error: Failed to parse query 'xs:time("13:20:00-05:00") castable as xs:gYear'
CastableAs398;PRSC Error: Failed to parse query 'xs:time("13:20:00-05:00") castable as xs:gMonthDay'
CastableAs399;PRSC Error: Failed to parse query 'xs:time("13:20:00-05:00") castable as xs:gDay'
CastableAs400;PRSC Error: Failed to parse query 'xs:time("13:20:00-05:00") castable as xs:gMonth'
CastableAs401;PRSC Error: Failed to parse query 'xs:time("13:20:00-05:00") castable as xs:boolean'
CastableAs402;PRSC Error: Failed to parse query 'xs:time("13:20:00-05:00") castable as xs:base64Binary'
CastableAs403;PRSC Error: Failed to parse query 'xs:time("13:20:00-05:00") castable as xs:hexBinary'
CastableAs404;PRSC Error: Failed to parse query 'xs:time("13:20:00-05:00") castable as xs:anyURI'
CastableAs405;PRSC Error: Failed to parse query 'xs:date("1999-05-31") castable as xs:untypedAtomic'
CastableAs406;Expected executing the XPath 'xs:date("-0012-12-03-05:00") castable as xs:untypedAtomic' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: FODT0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'xs:date("-0012-12-03-05:00") castable as xs:untypedAtomic'
CastableAs407;PRSC Error: Failed to parse query 'xs:date("1999-05-31") castable as xs:string'
CastableAs408;Expected executing the XPath 'xs:date("-0012-12-03-05:00") castable as xs:string' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'xs:date("-0012-12-03-05:00") castable as xs:string'
CastableAs409;PRSC Error: Failed to parse query 'xs:date("1999-05-31") castable as xs:float'
CastableAs410;PRSC Error: Failed to parse query 'xs:date("1999-05-31") castable as xs:double'
CastableAs411;PRSC Error: Failed to parse query 'xs:date("1999-05-31Z") castable as xs:double'
CastableAs412;PRSC Error: Failed to parse query 'xs:date("1999-05-31") castable as xs:integer'
CastableAs413;PRSC Error: Failed to parse query 'xs:date("1999-05-31") castable as xs:duration'
CastableAs414;PRSC Error: Failed to parse query 'xs:date("1999-05-31") castable as xs:yearMonthDuration'
CastableAs415;PRSC Error: Failed to parse query 'xs:date("1999-05-31") castable as xs:dayTimeDuration'
CastableAs416;PRSC Error: Failed to parse query 'xs:date("1999-05-31") castable as xs:dateTime'
CastableAs417;PRSC Error: Failed to parse query 'xs:date("1999-05-31") castable as xs:time'
CastableAs418;PRSC Error: Failed to parse query 'xs:date("1999-05-31") castable as xs:date'
CastableAs419;Expected executing the XPath 'xs:date("-0012-12-03-05:00") castable as xs:date' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'xs:date("-0012-12-03-05:00") castable as xs:date'
CastableAs420;PRSC Error: Failed to parse query 'xs:date("1999-05-31Z") castable as xs:date'
CastableAs421;PRSC Error: Failed to parse query 'xs:date("1999-05-31") castable as xs:gYearMonth'
CastableAs422;PRSC Error: Failed to parse query 'xs:date("1999-05-31") castable as xs:gYear'
CastableAs423;Expected executing the XPath 'xs:date("-0012-12-03-05:00") castable as xs:gYear' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'xs:date("-0012-12-03-05:00") castable as xs:gYear'
CastableAs424;PRSC Error: Failed to parse query 'xs:date("1999-05-31Z") castable as xs:gYear'
CastableAs425;PRSC Error: Failed to parse query 'xs:date("1999-05-31") castable as xs:gMonthDay'
CastableAs426;Expected executing the XPath 'xs:date("-0012-12-03-05:00") castable as xs:gMonthDay' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'xs:date("-0012-12-03-05:00") castable as xs:gMonthDay'
CastableAs427;PRSC Error: Failed to parse query 'xs:date("1999-05-31Z") castable as xs:gMonthDay'
CastableAs428;PRSC Error: Failed to parse query 'xs:date("1999-05-31Z") castable as xs:gDay'
CastableAs429;Expected executing the XPath 'xs:date("-0012-12-03-05:00") castable as xs:gMonth' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'xs:date("-0012-12-03-05:00") castable as xs:gMonth'
CastableAs430;PRSC Error: Failed to parse query 'xs:date("1999-05-31Z") castable as xs:gMonth'
CastableAs431;PRSC Error: Failed to parse query 'xs:date("1999-05-31") castable as xs:boolean'
CastableAs432;PRSC Error: Failed to parse query 'xs:date("1999-05-31") castable as xs:base64Binary'
CastableAs433;PRSC Error: Failed to parse query 'xs:date("1999-05-31") castable as xs:hexBinary'
CastableAs434;PRSC Error: Failed to parse query 'xs:date("1999-05-31") castable as xs:anyURI'
CastableAs435;PRSC Error: Failed to parse query 'xs:gYearMonth("1999-05") castable as xs:untypedAtomic'
CastableAs436;PRSC Error: Failed to parse query 'xs:gYearMonth("1999-05") castable as xs:string'
CastableAs437;PRSC Error: Failed to parse query 'xs:gYearMonth("1999-05") castable as xs:float'
CastableAs438;PRSC Error: Failed to parse query 'xs:gYearMonth("1999-05") castable as xs:double'
CastableAs439;PRSC Error: Failed to parse query 'xs:gYearMonth("1999-05Z") castable as xs:double'
CastableAs440;PRSC Error: Failed to parse query 'xs:gYearMonth("1999-05Z") castable as xs:decimal'
CastableAs441;PRSC Error: Failed to parse query 'xs:gYearMonth("1999-05Z") castable as xs:integer'
CastableAs442;PRSC Error: Failed to parse query 'xs:gYearMonth("1999-05Z") castable as xs:duration'
CastableAs443;PRSC Error: Failed to parse query 'xs:gYearMonth("1999-05Z") castable as xs:yearMonthDuration'
CastableAs444;PRSC Error: Failed to parse query 'xs:gYearMonth("1999-05Z") castable as xs:dayTimeDuration'
CastableAs445;PRSC Error: Failed to parse query 'xs:gYearMonth("1999-05Z") castable as xs:dateTime'
CastableAs446;PRSC Error: Failed to parse query 'xs:gYearMonth("1999-05Z") castable as xs:time'
CastableAs447;PRSC Error: Failed to parse query 'xs:gYearMonth("1999-05Z") castable as xs:date'
CastableAs448;PRSC Error: Failed to parse query 'xs:gYearMonth("1999-05") castable as xs:gYearMonth'
CastableAs449;PRSC Error: Failed to parse query 'xs:gYearMonth("-0012-12-05:00") castable as xs:gYearMonth'
CastableAs450;PRSC Error: Failed to parse query 'xs:gYearMonth("1999-05Z") castable as xs:gYearMonth'
CastableAs451;PRSC Error: Failed to parse query 'xs:gYearMonth("1999-05Z") castable as xs:gYear'
CastableAs452;PRSC Error: Failed to parse query 'xs:gYearMonth("1999-05Z") castable as xs:gMonthDay'
CastableAs453;PRSC Error: Failed to parse query 'xs:gYearMonth("1999-05Z") castable as xs:gDay'
CastableAs454;PRSC Error: Failed to parse query 'xs:gYearMonth("1999-05Z") castable as xs:gMonth'
CastableAs455;PRSC Error: Failed to parse query 'xs:gYearMonth("1999-05Z") castable as xs:boolean'
CastableAs456;PRSC Error: Failed to parse query 'xs:gYearMonth("1999-05Z") castable as xs:base64Binary'
CastableAs457;PRSC Error: Failed to parse query 'xs:gYearMonth("1999-05Z") castable as xs:hexBinary'
CastableAs458;PRSC Error: Failed to parse query 'xs:gYearMonth("1999-05Z") castable as xs:anyURI'
CastableAs459;PRSC Error: Failed to parse query 'xs:gYear("1999") castable as xs:untypedAtomic'
CastableAs460;PRSC Error: Failed to parse query 'xs:gYear("1999") castable as xs:string'
CastableAs461;PRSC Error: Failed to parse query 'xs:gYear("1999") castable as xs:float'
CastableAs462;PRSC Error: Failed to parse query 'xs:gYear("1999") castable as xs:double'
CastableAs463;PRSC Error: Failed to parse query 'xs:gYear("1999") castable as xs:decimal'
CastableAs464;PRSC Error: Failed to parse query 'xs:gYear("1999") castable as xs:integer'
CastableAs465;PRSC Error: Failed to parse query 'xs:gYear("1999") castable as xs:duration'
CastableAs466;PRSC Error: Failed to parse query 'xs:gYear("1999") castable as xs:yearMonthDuration'
CastableAs467;PRSC Error: Failed to parse query 'xs:gYear("1999") castable as xs:dateTime'
CastableAs468;PRSC Error: Failed to parse query 'xs:gYear("1999") castable as xs:time'
CastableAs469;PRSC Error: Failed to parse query 'xs:gYear("1999") castable as xs:date'
CastableAs470;PRSC Error: Failed to parse query 'xs:gYear("1999") castable as xs:gYearMonth'
CastableAs471;PRSC Error: Failed to parse query 'xs:gYear("1999") castable as xs:gYear'
CastableAs472;PRSC Error: Failed to parse query 'xs:gYear("-0012-05:00") castable as xs:gYear'
CastableAs473;PRSC Error: Failed to parse query 'xs:gYear("1999Z") castable as xs:gYear'
CastableAs474;PRSC Error: Failed to parse query 'xs:gYear("1999") castable as xs:gMonthDay'
CastableAs475;PRSC Error: Failed to parse query 'xs:gYear("1999") castable as xs:gDay'
CastableAs476;PRSC Error: Failed to parse query 'xs:gYear("1999") castable as xs:gMonth'
CastableAs477;PRSC Error: Failed to parse query 'xs:gYear("1999") castable as xs:boolean'
CastableAs478;PRSC Error: Failed to parse query 'xs:gYear("1999") castable as xs:base64Binary'
CastableAs479;PRSC Error: Failed to parse query 'xs:gYear("1999") castable as xs:hexBinary'
CastableAs480;PRSC Error: Failed to parse query 'xs:gYear("1999") castable as xs:anyURI'
CastableAs481;PRSC Error: Failed to parse query 'xs:gMonthDay("--05-31") castable as xs:untypedAtomic'
CastableAs482;PRSC Error: Failed to parse query 'xs:gMonthDay("--05-31") castable as xs:string'
CastableAs483;PRSC Error: Failed to parse query 'xs:gMonthDay("--05-31") castable as xs:float'
CastableAs484;PRSC Error: Failed to parse query 'xs:gMonthDay("--05-31") castable as xs:double'
CastableAs485;PRSC Error: Failed to parse query 'xs:gMonthDay("--05-31") castable as xs:decimal'
CastableAs486;PRSC Error: Failed to parse query 'xs:gMonthDay("--05-31") castable as xs:integer'
CastableAs487;PRSC Error: Failed to parse query 'xs:gMonthDay("--05-31") castable as xs:duration'
CastableAs488;PRSC Error: Failed to parse query 'xs:gMonthDay("--05-31") castable as xs:yearMonthDuration'
CastableAs489;PRSC Error: Failed to parse query 'xs:gMonthDay("--05-31") castable as xs:dayTimeDuration'
CastableAs490;PRSC Error: Failed to parse query 'xs:gMonthDay("--05-31") castable as xs:dateTime'
CastableAs491;PRSC Error: Failed to parse query 'xs:gMonthDay("--05-31") castable as xs:time'
CastableAs492;PRSC Error: Failed to parse query 'xs:gMonthDay("--05-31") castable as xs:date'
CastableAs493;PRSC Error: Failed to parse query 'xs:gMonthDay("--05-31") castable as xs:gYearMonth'
CastableAs494;PRSC Error: Failed to parse query 'xs:gMonthDay("--05-31") castable as xs:gYear'
CastableAs495;PRSC Error: Failed to parse query 'xs:gMonthDay("--05-31") castable as xs:gMonthDay'
CastableAs496;PRSC Error: Failed to parse query 'xs:gMonthDay("--12-03-05:00") castable as xs:gMonthDay'
CastableAs497;PRSC Error: Failed to parse query 'xs:gMonthDay("--05-31Z") castable as xs:gMonthDay'
CastableAs498;PRSC Error: Failed to parse query 'xs:gMonthDay("--05-31") castable as xs:gDay'
CastableAs499;PRSC Error: Failed to parse query 'xs:gMonthDay("--05-31") castable as xs:gMonth'
CastableAs500;PRSC Error: Failed to parse query 'xs:gMonthDay("--05-31") castable as xs:boolean'
CastableAs501;PRSC Error: Failed to parse query 'xs:gMonthDay("--05-31") castable as xs:base64Binary'
CastableAs502;PRSC Error: Failed to parse query 'xs:gMonthDay("--05-31") castable as xs:hexBinary'
CastableAs503;PRSC Error: Failed to parse query 'xs:gMonthDay("--05-31") castable as xs:anyURI'
CastableAs504;PRSC Error: Failed to parse query 'xs:gDay("---31") castable as xs:untypedAtomic'
CastableAs505;PRSC Error: Failed to parse query 'xs:gDay("---31") castable as xs:string'
CastableAs506;PRSC Error: Failed to parse query 'xs:gDay("---31") castable as xs:float'
CastableAs507;PRSC Error: Failed to parse query 'xs:gDay("---31") castable as xs:double'
CastableAs508;PRSC Error: Failed to parse query 'xs:gDay("---31") castable as xs:decimal'
CastableAs509;PRSC Error: Failed to parse query 'xs:gDay("---31") castable as xs:integer'
CastableAs510;PRSC Error: Failed to parse query 'xs:gDay("---31") castable as xs:duration'
CastableAs511;PRSC Error: Failed to parse query 'xs:gDay("---31") castable as xs:yearMonthDuration'
CastableAs512;PRSC Error: Failed to parse query 'xs:gDay("---31") castable as xs:dayTimeDuration'
CastableAs513;PRSC Error: Failed to parse query 'xs:gDay("---31") castable as xs:dateTime'
CastableAs514;PRSC Error: Failed to parse query 'xs:gDay("---31") castable as xs:time'
CastableAs515;PRSC Error: Failed to parse query 'xs:gDay("---31") castable as xs:date'
CastableAs516;PRSC Error: Failed to parse query 'xs:gDay("---31") castable as xs:gYearMonth'
CastableAs517;PRSC Error: Failed to parse query 'xs:gDay("---31") castable as xs:gYear'
CastableAs518;PRSC Error: Failed to parse query 'xs:gDay("---31") castable as xs:gMonthDay'
CastableAs519;PRSC Error: Failed to parse query 'xs:gDay("---31") castable as xs:gDay'
CastableAs520;PRSC Error: Failed to parse query 'xs:gDay("---03-05:00") castable as xs:gDay'
CastableAs521;PRSC Error: Failed to parse query 'xs:gDay("---31Z") castable as xs:gDay'
CastableAs522;PRSC Error: Failed to parse query 'xs:gDay("---31") castable as xs:gMonth'
CastableAs523;PRSC Error: Failed to parse query 'xs:gDay("---31") castable as xs:boolean'
CastableAs524;PRSC Error: Failed to parse query 'xs:gDay("---31") castable as xs:base64Binary'
CastableAs525;PRSC Error: Failed to parse query 'xs:gDay("---31") castable as xs:hexBinary'
CastableAs526;PRSC Error: Failed to parse query 'xs:gDay("---31") castable as xs:anyURI'
CastableAs527;PRSC Error: Failed to parse query 'xs:gMonth("--05") castable as xs:untypedAtomic'
CastableAs528;PRSC Error: Failed to parse query 'xs:gMonth("--05") castable as xs:string'
CastableAs529;PRSC Error: Failed to parse query 'xs:gMonth("--05") castable as xs:float'
CastableAs530;PRSC Error: Failed to parse query 'xs:gMonth("--05") castable as xs:double'
CastableAs531;PRSC Error: Failed to parse query 'xs:gMonth("--05") castable as xs:decimal'
CastableAs532;PRSC Error: Failed to parse query 'xs:gMonth("--05") castable as xs:integer'
CastableAs533;PRSC Error: Failed to parse query 'xs:gMonth("--05") castable as xs:duration'
CastableAs534;PRSC Error: Failed to parse query 'xs:gMonth("--05") castable as xs:yearMonthDuration'
CastableAs535;PRSC Error: Failed to parse query 'xs:gMonth("--05") castable as xs:dayTimeDuration'
CastableAs536;PRSC Error: Failed to parse query 'xs:gMonth("--05") castable as xs:dateTime'
CastableAs537;PRSC Error: Failed to parse query 'xs:gMonth("--05") castable as xs:time'
CastableAs538;PRSC Error: Failed to parse query 'xs:gMonth("--05") castable as xs:date'
CastableAs539;PRSC Error: Failed to parse query 'xs:gMonth("--05") castable as xs:gYearMonth'
CastableAs540;PRSC Error: Failed to parse query 'xs:gMonth("--05") castable as xs:gYear'
CastableAs541;PRSC Error: Failed to parse query 'xs:gMonth("--05") castable as xs:gMonthDay'
CastableAs542;PRSC Error: Failed to parse query 'xs:gMonth("--05") castable as xs:gDay'
CastableAs543;PRSC Error: Failed to parse query 'xs:gMonth("--05") castable as xs:gMonth'
CastableAs544;PRSC Error: Failed to parse query 'xs:gMonth("--12-05:00") castable as xs:gMonth'
CastableAs545;PRSC Error: Failed to parse query 'xs:gMonth("--05Z") castable as xs:gMonth'
CastableAs546;PRSC Error: Failed to parse query 'xs:gMonth("--05") castable as xs:boolean'
CastableAs547;PRSC Error: Failed to parse query 'xs:gMonth("--05") castable as xs:base64Binary'
CastableAs548;PRSC Error: Failed to parse query 'xs:gMonth("--05") castable as xs:hexBinary'
CastableAs549;PRSC Error: Failed to parse query 'xs:gMonth("--05") castable as xs:anyURI'
CastableAs550;PRSC Error: Failed to parse query 'xs:boolean("true") castable as xs:untypedAtomic'
CastableAs551;PRSC Error: Failed to parse query 'xs:boolean("true") castable as xs:string'
CastableAs552;PRSC Error: Failed to parse query 'xs:boolean("true") castable as xs:float'
CastableAs553;PRSC Error: Failed to parse query 'xs:boolean("false") castable as xs:float'
CastableAs554;PRSC Error: Failed to parse query 'xs:boolean("true") castable as xs:double'
CastableAs555;PRSC Error: Failed to parse query 'xs:boolean("false") castable as xs:double'
CastableAs556;PRSC Error: Failed to parse query 'xs:boolean("true") castable as xs:decimal'
CastableAs557;PRSC Error: Failed to parse query 'xs:boolean("false") castable as xs:decimal'
CastableAs558;PRSC Error: Failed to parse query 'xs:boolean("true") castable as xs:integer'
CastableAs559;PRSC Error: Failed to parse query 'xs:boolean("false") castable as xs:integer'
CastableAs560;PRSC Error: Failed to parse query 'xs:boolean("true") castable as xs:duration'
CastableAs561;PRSC Error: Failed to parse query 'xs:boolean("true") castable as xs:yearMonthDuration'
CastableAs562;PRSC Error: Failed to parse query 'xs:boolean("true") castable as xs:dayTimeDuration'
CastableAs563;PRSC Error: Failed to parse query 'xs:boolean("true") castable as xs:dateTime'
CastableAs564;PRSC Error: Failed to parse query 'xs:boolean("true") castable as xs:time'
CastableAs565;PRSC Error: Failed to parse query 'xs:boolean("true") castable as xs:date'
CastableAs566;PRSC Error: Failed to parse query 'xs:boolean("true") castable as xs:gYearMonth'
CastableAs567;PRSC Error: Failed to parse query 'xs:boolean("true") castable as xs:gYear'
CastableAs568;PRSC Error: Failed to parse query 'xs:boolean("true") castable as xs:gMonthDay'
CastableAs569;PRSC Error: Failed to parse query 'xs:boolean("true") castable as xs:gDay'
CastableAs570;PRSC Error: Failed to parse query 'xs:boolean("true") castable as xs:gMonth'
CastableAs571;PRSC Error: Failed to parse query 'xs:boolean("true") castable as xs:boolean'
CastableAs572;PRSC Error: Failed to parse query 'xs:boolean("false") castable as xs:boolean'
CastableAs573;PRSC Error: Failed to parse query 'xs:boolean("true") castable as xs:base64Binary'
CastableAs574;PRSC Error: Failed to parse query 'xs:boolean("true") castable as xs:hexBinary'
CastableAs575;PRSC Error: Failed to parse query 'xs:boolean("true") castable as xs:anyURI'
CastableAs576;PRSC Error: Failed to parse query 'xs:base64Binary("01001010") castable as xs:untypedAtomic'
CastableAs577;PRSC Error: Failed to parse query 'xs:base64Binary("0FB7") castable as xs:untypedAtomic'
CastableAs578;PRSC Error: Failed to parse query 'xs:base64Binary("01001010") castable as xs:string'
CastableAs579;PRSC Error: Failed to parse query 'xs:base64Binary("0FB7") castable as xs:string'
CastableAs580;PRSC Error: Failed to parse query 'xs:base64Binary("10010101") castable as xs:float'
CastableAs581;PRSC Error: Failed to parse query 'xs:base64Binary("10010101") castable as xs:double'
CastableAs582;PRSC Error: Failed to parse query 'xs:base64Binary("10010101") castable as xs:decimal'
CastableAs583;PRSC Error: Failed to parse query 'xs:base64Binary("10010101") castable as xs:integer'
CastableAs584;PRSC Error: Failed to parse query 'xs:base64Binary("10010101") castable as xs:duration'
CastableAs585;PRSC Error: Failed to parse query 'xs:base64Binary("10010101") castable as xs:yearMonthDuration'
CastableAs586;PRSC Error: Failed to parse query 'xs:base64Binary("10010101") castable as xs:dayTimeDuration'
CastableAs587;PRSC Error: Failed to parse query 'xs:base64Binary("10010101") castable as xs:dateTime'
CastableAs588;PRSC Error: Failed to parse query 'xs:base64Binary("10010101") castable as xs:time'
CastableAs589;PRSC Error: Failed to parse query 'xs:base64Binary("10010101") castable as xs:date'
CastableAs590;PRSC Error: Failed to parse query 'xs:base64Binary("10010101") castable as xs:gYearMonth'
CastableAs591;PRSC Error: Failed to parse query 'xs:base64Binary("10010101") castable as xs:gYear'
CastableAs592;PRSC Error: Failed to parse query 'xs:base64Binary("10010101") castable as xs:gMonthDay'
CastableAs593;PRSC Error: Failed to parse query 'xs:base64Binary("10010101") castable as xs:gDay'
CastableAs594;PRSC Error: Failed to parse query 'xs:base64Binary("10010101") castable as xs:gMonth'
CastableAs595;PRSC Error: Failed to parse query 'xs:base64Binary("10010101") castable as xs:boolean'
CastableAs596;PRSC Error: Failed to parse query 'xs:base64Binary("01001010") castable as xs:base64Binary'
CastableAs597;PRSC Error: Failed to parse query 'xs:base64Binary("0FB7") castable as xs:base64Binary'
CastableAs598;PRSC Error: Failed to parse query 'xs:base64Binary("00000000") castable as xs:hexBinary'
CastableAs599;PRSC Error: Failed to parse query 'xs:base64Binary("10010101") castable as xs:hexBinary'
CastableAs600;PRSC Error: Failed to parse query 'xs:base64Binary("aA+zZ/09") castable as xs:hexBinary'
CastableAs601;PRSC Error: Failed to parse query 'xs:base64Binary("0FB7") castable as xs:hexBinary'
CastableAs602;PRSC Error: Failed to parse query 'xs:base64Binary("10010101") castable as xs:anyURI'
CastableAs603;PRSC Error: Failed to parse query 'xs:hexBinary("D74D35D35D35") castable as xs:untypedAtomic'
CastableAs604;PRSC Error: Failed to parse query 'xs:hexBinary("D74D35D35D35") castable as xs:string'
CastableAs605;PRSC Error: Failed to parse query 'xs:hexBinary("D74D35D35D35") castable as xs:float'
CastableAs606;PRSC Error: Failed to parse query 'xs:hexBinary("D74D35D35D35") castable as xs:double'
CastableAs607;PRSC Error: Failed to parse query 'xs:hexBinary("D74D35D35D35") castable as xs:decimal'
CastableAs608;PRSC Error: Failed to parse query 'xs:hexBinary("D74D35D35D35") castable as xs:integer'
CastableAs609;PRSC Error: Failed to parse query 'xs:hexBinary("D74D35D35D35") castable as xs:duration'
CastableAs610;PRSC Error: Failed to parse query 'xs:hexBinary("D74D35D35D35") castable as xs:yearMonthDuration'
CastableAs611;PRSC Error: Failed to parse query 'xs:hexBinary("D74D35D35D35") castable as xs:dayTimeDuration'
CastableAs612;PRSC Error: Failed to parse query 'xs:hexBinary("D74D35D35D35") castable as xs:dateTime'
CastableAs613;PRSC Error: Failed to parse query 'xs:hexBinary("D74D35D35D35") castable as xs:time'
CastableAs614;PRSC Error: Failed to parse query 'xs:hexBinary("D74D35D35D35") castable as xs:date'
CastableAs615;PRSC Error: Failed to parse query 'xs:hexBinary("D74D35D35D35") castable as xs:gYearMonth'
CastableAs616;PRSC Error: Failed to parse query 'xs:hexBinary("D74D35D35D35") castable as xs:gYear'
CastableAs617;PRSC Error: Failed to parse query 'xs:hexBinary("D74D35D35D35") castable as xs:gMonthDay'
CastableAs618;PRSC Error: Failed to parse query 'xs:hexBinary("D74D35D35D35") castable as xs:gDay'
CastableAs619;PRSC Error: Failed to parse query 'xs:hexBinary("D74D35D35D35") castable as xs:gMonth'
CastableAs620;PRSC Error: Failed to parse query 'xs:hexBinary("D74D35D35D35") castable as xs:boolean'
CastableAs621;PRSC Error: Failed to parse query 'xs:hexBinary("D74D35D35D35") castable as xs:base64Binary'
CastableAs622;PRSC Error: Failed to parse query 'xs:hexBinary("0fb7") castable as xs:base64Binary'
CastableAs623;PRSC Error: Failed to parse query 'xs:hexBinary("D74D35D35D35") castable as xs:hexBinary'
CastableAs624;PRSC Error: Failed to parse query 'xs:hexBinary("d74d35d35d35") castable as xs:hexBinary'
CastableAs625;PRSC Error: Failed to parse query 'xs:hexBinary("D74D35D35D35") castable as xs:anyURI'
CastableAs626;PRSC Error: Failed to parse query 'xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:untypedAtomic'
CastableAs627;PRSC Error: Failed to parse query 'xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:string'
CastableAs628;PRSC Error: Failed to parse query 'xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:float'
CastableAs629;PRSC Error: Failed to parse query 'xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:double'
CastableAs630;PRSC Error: Failed to parse query 'xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:decimal'
CastableAs631;PRSC Error: Failed to parse query 'xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:integer'
CastableAs632;PRSC Error: Failed to parse query 'xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:duration'
CastableAs633;PRSC Error: Failed to parse query 'xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:yearMonthDuration'
CastableAs634;PRSC Error: Failed to parse query 'xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:dayTimeDuration'
CastableAs635;PRSC Error: Failed to parse query 'xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:dateTime'
CastableAs636;PRSC Error: Failed to parse query 'xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:time'
CastableAs637;PRSC Error: Failed to parse query 'xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:date'
CastableAs638;PRSC Error: Failed to parse query 'xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:gYearMonth'
CastableAs639;PRSC Error: Failed to parse query 'xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:gYear'
CastableAs640;PRSC Error: Failed to parse query 'xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:gMonthDay'
CastableAs641;PRSC Error: Failed to parse query 'xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:gDay'
CastableAs642;PRSC Error: Failed to parse query 'xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:gMonth'
CastableAs643;PRSC Error: Failed to parse query 'xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:boolean'
CastableAs644;PRSC Error: Failed to parse query 'xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:base64Binary'
CastableAs645;PRSC Error: Failed to parse query 'xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:hexBinary'
CastableAs646;PRSC Error: Failed to parse query 'xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:anyURI'
CastableAs647;PRSC Error: Failed to parse query '"ABC" castable as xs:QName'
CastableAs648;PRSC Error: Failed to parse query 'for $var in "ABC" return $var castable as xs:QName'
CastableAs648a;PRSC Error: Failed to parse query 'let $var := "ABC" return $var castable as xs:QName'
CastableAs649;PRSC Error: Failed to parse query 'count(//employee[salary castable as xs:integer][xs:integer(salary) gt 65000]) = 3'
CastableAs650;PRSC Error: Failed to parse query 'count(//employee[if (salary castable as xs:integer) then xs:integer(salary) gt 65000 else false()]) = 3'
CastableAs651;PRSC Error: Failed to parse query '\n        import schema namespace d="http://www.w3.org/XQueryTest/derivedTypes";\n        93.7 castable as d:canonicalDecimal\n      '
CastableAs652;PRSC Error: Failed to parse query '\n        import schema namespace d="http://www.w3.org/XQueryTest/derivedTypes";\n        -93.7 castable as d:canonicalDecimal\n      '
CastableAs653;PRSC Error: Failed to parse query '\n        import schema namespace d="http://www.w3.org/XQueryTest/derivedTypes";\n        12 castable as d:canonicalDecimal\n      '
CastableAs654;PRSC Error: Failed to parse query '\n        import schema namespace d="http://www.w3.org/XQueryTest/derivedTypes";\n        -12 castable as d:canonicalDecimal\n      '
CastableAs655;PRSC Error: Failed to parse query '\n        import schema namespace d="http://www.w3.org/XQueryTest/derivedTypes";\n        93.7 castable as d:canonicalDouble\n      '
CastableAs656;PRSC Error: Failed to parse query '\n        import schema namespace d="http://www.w3.org/XQueryTest/derivedTypes";\n        -93.7 castable as d:canonicalDouble\n      '
CastableAs657;PRSC Error: Failed to parse query '\n        import schema namespace d="http://www.w3.org/XQueryTest/derivedTypes";\n        0.0e0 castable as d:canonicalDouble\n      '
CastableAs658;PRSC Error: Failed to parse query '\n        import schema namespace d="http://www.w3.org/XQueryTest/derivedTypes";\n        -0.0e0 castable as d:canonicalDouble\n      '
CastableAs659;PRSC Error: Failed to parse query '\n        import schema namespace d="http://www.w3.org/XQueryTest/derivedTypes";\n        1e7 castable as d:canonicalDouble\n      '
CastableAs660;PRSC Error: Failed to parse query '\n        import schema namespace d="http://www.w3.org/XQueryTest/derivedTypes";\n        -1e7 castable as d:canonicalDouble\n      '
CastableAs661;PRSC Error: Failed to parse query '\n        import schema namespace d="http://www.w3.org/XQueryTest/derivedTypes";\n        1e-7 castable as d:canonicalDouble\n      '
CastableAs662;PRSC Error: Failed to parse query '\n        import schema namespace d="http://www.w3.org/XQueryTest/derivedTypes";\n        -1e-7 castable as d:canonicalDouble\n      '
CastableAs663;PRSC Error: Failed to parse query '\n         (1 to 5) castable as xs:integer\n      '
CastableAs664;PRSC Error: Failed to parse query '\n         [1,2,3,4,5] castable as xs:integer\n      '
CastableAs665;PRSC Error: Failed to parse query '\n         [5] castable as xs:integer\n      '
CastableAs666;Expected error code: FOTY0013. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         map{} castable as xs:integer\n      '
CastableAs667;PRSC Error: Failed to parse query '\n         [[], (), [[3, ()]]] castable as xs:integer\n      '
CastableAs668;Expected error code: FOTY0013. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         [[], (), [[3, map{}]]] castable as xs:integer\n      '
CastAs-ListType-1;PRSC Error: Failed to parse query 'deep-equal((\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         s:decimalListType1("2 2.3")\n       ), (2, 2.3))'
CastAs-ListType-10;Expected base expression of a function call to evaluate to a sequence of single function item
CastAs-ListType-11;Atomic Value for XsIdRefs is not implemented yet.
CastAs-ListType-12;Atomic Value for XsNmTokens is not implemented yet.
CastAs-ListType-13;Expected XPathException with code FORG0001, but got Atomic Value for XsNmTokens is not implemented yet.
CastAs-ListType-14;Atomic Value for XsEntities is not implemented yet.
CastAs-ListType-15;Expected XPathException with code FORG0001, but got Atomic Value for XsEntities is not implemented yet.
CastAs-ListType-16;Expected XPathException with code FORG0001, but got Atomic Value for XsEntities is not implemented yet.
CastAs-ListType-17;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
CastAs-ListType-18;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
CastAs-ListType-19;Expected XPathException with code XPTY0004, but got Atomic Value for XsEntities is not implemented yet.
CastAs-ListType-2;PRSC Error: Failed to parse query 'deep-equal((\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        s:myRestrictedList1("123 987 567 456")), (123, 987, 567, 456))'
CastAs-ListType-20;Expected XPathException with code XPST0051, but got Atomic Value for XsNmTokens is not implemented yet.
CastAs-ListType-21;PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         let $result := ("a b xs:integer" cast as s:listOfUnions)\n         return count($result) eq 3 and $result[1] eq "a" and $result[1] instance of xs:NCName\n           and $result[1] instance of s:sensitiveUnion\n       '
CastAs-ListType-22;PRSC Error: Failed to parse query 'deep-equal((\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        ("123 987 567 456") cast as s:myRestrictedList1\n        ), (123, 987, 567, 456))'
CastAs-ListType-23;Expected error code: FORG0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         ("123 987 567 456 877") cast as s:myRestrictedList1\n       '
CastAs-ListType-24;PRSC Error: Failed to parse query 'deep-equal((\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n       let $f := function-lookup(QName('http://www.w3.org/XQueryTest/unionListDefined', 'myRestrictedList1'), 1)\n       return $f("123 987 567 456")), (123, 987, 567, 456))'
CastAs-ListType-25;Expected error code: FORG0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        s:myRestrictedList1("123 987 567 456 877")'
CastAs-ListType-26;PRSC Error: Failed to parse query 'deep-equal((\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n       let $f as function(xs:string) as xs:integer* := function-lookup(QName('http://www.w3.org/XQueryTest/unionListDefined', 'myRestrictedList1'), 1)\n       return $f("123 987 567 456")), (123, 987, 567, 456))'
CastAs-ListType-27;PRSC Error: Failed to parse query '\n         let $f as function(xs:anyAtomicType) as xs:NMTOKEN* := xs:NMTOKENS#1\n         let $v as xs:NMTOKEN* := $f("a b c")\n         return count($v)\n        = 3'
CastAs-ListType-28;PRSC Error: Failed to parse query '\n         "a b c" castable as xs:NMTOKENS\n       '
CastAs-ListType-29;PRSC Error: Failed to parse query '\n         "a b 12" castable as xs:IDREFS\n       '
CastAs-ListType-3;Expected error code: FORG0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        s:myRestrictedList1("123 987 567 456 877")'
CastAs-ListType-30;PRSC Error: Failed to parse query '\n         " " castable as xs:NMTOKENS\n       '
CastAs-ListType-31;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n       "123 987 567 456 229" castable as s:myRestrictedList1\n       '
CastAs-ListType-32;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n       "  123 987 567 456  " castable as s:myRestrictedList1\n       '
CastAs-ListType-4;PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n          "text1 text2 text3" cast as s:strListType1\n       '
CastAs-ListType-5;Expected error code: FORG0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        "1.1 2.1 text3" cast as s:decimalListType1'
CastAs-ListType-6;Expected error code: FORG0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        "1.1 2.1 3.1" cast as s:intListType1'
CastAs-ListType-7;Atomic Value for XsIdRefs is not implemented yet.
CastAs-ListType-8;Expected XPathException with code FORG0001, but got Atomic Value for XsIdRefs is not implemented yet.
CastAs-ListType-9;Atomic Value for XsIdRefs is not implemented yet.
CastAs-UnionType-1;PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         123 cast as s:myUnionType1\n       '
CastAs-UnionType-10;PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         namespace-uri-from-QName("xs:integer" cast as s:sensitiveUnion)\n       '
CastAs-UnionType-11;PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         namespace-uri-from-QName(s:sensitiveUnion('xs:integer'))\n       '
CastAs-UnionType-12;PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         s:sensitiveUnion('xs:integer') instance of s:sensitiveUnion\n       '
CastAs-UnionType-13;Expected error code: FORG0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         declare function local:f($f as function(*)) as item()* {\n           <a xmlns:pre="http://example.com/ns">{namespace-uri-from-QName($f('pre:local'))}</a>\n         };\n         local:f(function-lookup(xs:QName('s:sensitiveUnion'), 1))\n       '
CastAs-UnionType-14;Expected error code: FORG0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         declare function local:f($f as function(*)) as item()* {\n           <a xmlns:pre="http://example.com/ns">{namespace-uri-from-QName($f('pre:local'))}</a>\n         };\n         local:f(s:sensitiveUnion#1)\n       '
CastAs-UnionType-15;Expected error code: FORG0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         declare function local:f($f as function(*)) as item()* {\n           <a xmlns:pre="http://example.com/ns">{namespace-uri-from-QName($f('pre:local'))}</a>\n         };\n         local:f(s:sensitiveUnion(?))\n       '
CastAs-UnionType-16;PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         s:lowercaseName('xs:integer') instance of s:sensitiveUnion\n       '
CastAs-UnionType-17;Expected error code: XPST0051. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         s:lowercaseName('xs:integer') instance of s:lowercaseName\n       '
CastAs-UnionType-18;PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         let $f as function(xs:anyAtomicType?) as s:sensitiveUnion? := s:sensitiveUnion#1\n         return $f('candlewick')\n        = 'candlewick''
CastAs-UnionType-19;PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         node-name(<a/>) castable as s:sensitiveUnion\n       '
CastAs-UnionType-2;PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         "123" cast as s:myUnionType1\n       '
CastAs-UnionType-20;PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         local-name-from-QName(s:sensitiveUnion(node-name(<a/>)))\n       '
CastAs-UnionType-21;PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         s:sensitiveUnion(xs:ID("zorobastic"))\n       '
CastAs-UnionType-22;Expected error code: FORG0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         s:lowercaseName('xs:QName')\n       '
CastAs-UnionType-23;Expected error code: FORG0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         s:lowercaseName(xs:NCName('ABC123'))\n       '
CastAs-UnionType-24;Expected error code: FORG0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         let $cast := s:lowercaseName#1\n         return $cast(xs:NCName('ABC123'))\n       '
CastAs-UnionType-25;PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         let $e := <p:a xmlns:p="http://www.example.com/"/>\n         return node-name($e) castable as s:sensitiveUnion\n       '
CastAs-UnionType-26;PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         let $f as function(xs:anyAtomicType?) as s:sensitiveUnion? := s:lowercaseName#1\n         return $f('candlewick')\n        = 'candlewick''
CastAs-UnionType-27;PRSC Error: Failed to parse query 'deep-equal((\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         "a b c" cast as s:unionOfLists\n       ), ('a', 'b', 'c'))'
CastAs-UnionType-28;PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         let $result := ("a b xs:integer" cast as s:unionOfLists)\n         return count($result) eq 3 and ($result instance of Q{http://www.w3.org/XQueryTest/unionListDefined}sensitiveUnion*)\n       '
CastAs-UnionType-29;PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         let $result := s:unionOfLists("a b xs:integer")\n         return count($result) eq 3 and ($result instance of Q{http://www.w3.org/XQueryTest/unionListDefined}sensitiveUnion*)\n       '
CastAs-UnionType-3;PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         123.12 cast as s:myUnionType1\n       '
CastAs-UnionType-30;PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         let $fn := s:unionOfLists#1\n         let $result := $fn("a b xs:integer")\n         return count($result) eq 3 and ($result instance of Q{http://www.w3.org/XQueryTest/unionListDefined}sensitiveUnion*)\n       '
CastAs-UnionType-31;PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         let $fn := function-lookup(QName('http://www.w3.org/XQueryTest/unionListDefined', 'unionOfLists'), 1)\n         let $result := $fn("a b xs:integer")\n         return count($result) eq 3 and ($result instance of s:sensitiveUnion*)\n       '
CastAs-UnionType-32;PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         let $fn as function(xs:string?) as xs:anyAtomicType* := \n               function-lookup(QName('http://www.w3.org/XQueryTest/unionListDefined', 'unionOfLists'), 1)\n         let $result := $fn(xs:untypedAtomic("a b xs:integer"))\n         return count($result) eq 3 and ($result instance of s:sensitiveUnion*)\n       '
CastAs-UnionType-33;PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         let $element := validate type xs:QName {<a xmlns:p="http://example.com">p:space</a>}\n         return\n           local-name-from-QName(s:sensitiveUnion($element))\n       '
CastAs-UnionType-34;PRSC Error: Failed to parse query '(\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         s:restrictedUnion('2012-10-08')\n       ) instance of $xs:date'
CastAs-UnionType-35;Expected error code: FORG0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         s:restrictedUnion('1912-10-08')\n       '
CastAs-UnionType-36;PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         declare function local:f($a as s:dateOrDateTime) as xs:string { $a cast as xs:string };\n         local:f(xs:date('2001-01-01'))\n        = "2001-01-01"'
CastAs-UnionType-37;PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         declare function local:f($a as s:dateOrDateTime) as xs:dateTime { $a cast as xs:dateTime };\n         local:f(xs:date('2001-01-01'))\n        = xs:dateTime("2001-01-01T00:00:00")'
CastAs-UnionType-38;PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         declare function local:f($a as s:dateOrDateTime) as xs:date { $a cast as xs:date };\n         local:f(xs:date('2001-01-01'))\n        = xs:date("2001-01-01")'
CastAs-UnionType-4;Expected error code: FORG0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         "123.12" cast as s:myUnionType1\n       '
CastAs-UnionType-5;PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        "IB123456789" cast as s:myUnionType2\n       '
CastAs-UnionType-5a;Expected error code: FORG0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         "AD123456789" cast as s:myUnionType2\n       '
CastAs-UnionType-6;PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         s:myUnionType1(123.12) \n       '
CastAs-UnionType-7;PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         let $f := s:myUnionType1#1\n         return $f(123.12) \n       '
CastAs-UnionType-8;PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         let $f := function-lookup(QName("http://www.w3.org/XQueryTest/unionListDefined", "myUnionType1"), 1)\n         return $f(123.12) \n       '
CastAs-UnionType-9;PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         let $f := s:myUnionType1(?)\n         return $f(123.12) \n       '
CastAs008;Expected XPath xs:untypedAtomic("NaN") cast as xs:float to resolve to NaN, but instead got Infinity
CastAs009;Expected XPath xs:untypedAtomic("1e-5") cast as xs:float to resolve to 0.00001, but instead got 1E-05
CastAs010;Expected XPath xs:untypedAtomic("-10000000") cast as xs:float to resolve to -1.0E7, but instead got -10000000
CastAs011;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
CastAs013;Expected XPath xs:untypedAtomic("NaN") cast as xs:double to resolve to NaN, but instead got Infinity
CastAs014;Expected XPath xs:untypedAtomic("1e-5") cast as xs:double to resolve to 0.00001, but instead got 1E-05
CastAs015;Expected XPath xs:untypedAtomic("-10000000") cast as xs:double to resolve to -1.0E7, but instead got -10000000
CastAs016;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
CastAs017;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
CastAs018;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
CastAs019;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
CastAs021;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
CastAs025;Expected error code: FORG0001. Found error code: FOCA0001 with error message: Overflow when creating a Int64 from -1.1234.
CastAs027;Expected XPath xs:untypedAtomic("P1Y2M3DT10H30M23S") cast as xs:duration to resolve to P1Y2M3DT10H30M23S, but instead got PT
CastAs028;Input string was not in a correct format.
CastAs029;Expected error code: FORG0001. Query succeeded with result: PT
CastAs030;Expected error code: FORG0001. Query succeeded with result: P
CastAs031;Expected XPath xs:untypedAtomic("P24M") cast as xs:yearMonthDuration to resolve to P2Y, but instead got P
CastAs032;Expected XPath xs:untypedAtomic("-P21M") cast as xs:yearMonthDuration to resolve to -P1Y9M, but instead got P
CastAs034;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
CastAs035;Expected XPath xs:untypedAtomic("P3DT10H30M") cast as xs:dayTimeDuration to resolve to P3DT10H30M, but instead got PT
CastAs036;Expected XPath xs:untypedAtomic("-PT100M") cast as xs:dayTimeDuration to resolve to -PT1H40M, but instead got PT
CastAs039;The string '-1999-05-31T13:20:00+14:00' is not a valid AllXsd value.
CastAs041;Expected XPathException with code FORG0001, but got The string 'true' is not a valid AllXsd value.
CastAs045;Expected XPathException with code FORG0001, but got The string 'true' is not a valid AllXsd value.
CastAs047;The string '-0012-12-03-05:00' is not a valid AllXsd value.
CastAs049;Expected XPathException with code FORG0001, but got The string 'true' is not a valid AllXsd value.
CastAs051;The string '-0012-12-05:00' is not a valid AllXsd value.
CastAs053;Expected XPathException with code FORG0001, but got The string 'true' is not a valid AllXsd value.
CastAs055;The string '-0012-05:00' is not a valid AllXsd value.
CastAs057;Expected XPathException with code FORG0001, but got The string 'true' is not a valid AllXsd value.
CastAs061;Expected XPathException with code FORG0001, but got The string 'true' is not a valid AllXsd value.
CastAs065;Expected XPathException with code FORG0001, but got The string 'true' is not a valid AllXsd value.
CastAs069;Expected XPathException with code FORG0001, but got The string 'true' is not a valid AllXsd value.
CastAs070;Expected error code: FORG0001. Found error code: XPTY0004 with error message: Casting not supported from given type to xs:boolean or any of its derived types.
CastAs073;Type casting to XsBase64Binary has not been implemented yet.
CastAs074;Type casting to XsBase64Binary has not been implemented yet.
CastAs075;Type casting to XsBase64Binary has not been implemented yet.
CastAs076;Expected XPathException with code FORG0001, but got Type casting to XsHexBinary has not been implemented yet.
CastAs077;Expected XPathException with code FORG0001, but got Type casting to XsHexBinary has not been implemented yet.
CastAs078;Type casting to XsHexBinary has not been implemented yet.
CastAs079;Type casting to XsHexBinary has not been implemented yet.
CastAs080;Type casting to XsAnyUri has not been implemented yet.
CastAs081;Type casting to XsAnyUri has not been implemented yet.
CastAs082;Type casting to XsAnyUri has not been implemented yet.
CastAs090;Expected XPath xs:string("NaN") cast as xs:float to resolve to NaN, but instead got Infinity
CastAs091;Expected XPath xs:string("1e-5") cast as xs:float to resolve to 0.00001, but instead got 1E-05
CastAs092;Expected XPath xs:string("-10000000") cast as xs:float to resolve to -1.0E7, but instead got -10000000
CastAs093;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
CastAs095;Expected XPath xs:string("NaN") cast as xs:double to resolve to NaN, but instead got Infinity
CastAs096;Expected XPath xs:string("1e-5") cast as xs:double to resolve to 0.00001, but instead got 1E-05
CastAs097;Expected XPath xs:string("-10000000") cast as xs:double to resolve to -1.0E7, but instead got -10000000
CastAs098;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
CastAs099;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
CastAs100;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
CastAs101;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
CastAs103;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
CastAs107;Expected error code: FORG0001. Found error code: FOCA0001 with error message: Overflow when creating a Int64 from -1.1234.
CastAs109;Expected XPath xs:string("P1Y2M3DT10H30M23S") cast as xs:duration to resolve to P1Y2M3DT10H30M23S, but instead got PT
CastAs110;Input string was not in a correct format.
CastAs111;Expected error code: FORG0001. Query succeeded with result: PT
CastAs112;Expected error code: FORG0001. Query succeeded with result: P
CastAs113;Expected XPath xs:string("P24M") cast as xs:yearMonthDuration to resolve to P2Y, but instead got P
CastAs114;Expected XPath xs:string("-P21M") cast as xs:yearMonthDuration to resolve to -P1Y9M, but instead got P
CastAs116;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
CastAs117;Expected XPath xs:string("P3DT10H30M") cast as xs:dayTimeDuration to resolve to P3DT10H30M, but instead got PT
CastAs118;Expected XPath xs:string("-PT100M") cast as xs:dayTimeDuration to resolve to -PT1H40M, but instead got PT
CastAs121;The string '-1999-05-31T13:20:00+14:00' is not a valid AllXsd value.
CastAs123;Expected XPathException with code FORG0001, but got The string 'true' is not a valid AllXsd value.
CastAs127;Expected XPathException with code FORG0001, but got The string 'true' is not a valid AllXsd value.
CastAs129;The string '-0012-12-03-05:00' is not a valid AllXsd value.
CastAs131;Expected XPathException with code FORG0001, but got The string 'true' is not a valid AllXsd value.
CastAs133;The string '-0012-12-05:00' is not a valid AllXsd value.
CastAs135;Expected XPathException with code FORG0001, but got The string 'true' is not a valid AllXsd value.
CastAs137;The string '-0012-05:00' is not a valid AllXsd value.
CastAs139;Expected XPathException with code FORG0001, but got The string 'true' is not a valid AllXsd value.
CastAs143;Expected XPathException with code FORG0001, but got The string 'true' is not a valid AllXsd value.
CastAs147;Expected XPathException with code FORG0001, but got The string 'true' is not a valid AllXsd value.
CastAs151;Expected XPathException with code FORG0001, but got The string 'true' is not a valid AllXsd value.
CastAs152;Expected error code: FORG0001. Found error code: XPTY0004 with error message: Casting not supported from given type to xs:boolean or any of its derived types.
CastAs155;Type casting to XsBase64Binary has not been implemented yet.
CastAs156;Type casting to XsBase64Binary has not been implemented yet.
CastAs157;Type casting to XsBase64Binary has not been implemented yet.
CastAs158;Expected XPathException with code FORG0001, but got Type casting to XsHexBinary has not been implemented yet.
CastAs159;Expected XPathException with code FORG0001, but got Type casting to XsHexBinary has not been implemented yet.
CastAs160;Type casting to XsHexBinary has not been implemented yet.
CastAs161;Type casting to XsHexBinary has not been implemented yet.
CastAs162;Type casting to XsAnyUri has not been implemented yet.
CastAs163;Type casting to XsAnyUri has not been implemented yet.
CastAs164;Type casting to XsAnyUri has not been implemented yet.
CastAs166;Expected XPath xs:float("-INF") cast as xs:untypedAtomic to resolve to -INF, but instead got -Infinity
CastAs168;Expected XPath xs:float("NaN") cast as xs:string to resolve to NaN, but instead got Infinity
CastAs171;Expected XPath xs:float("INF") cast as xs:float to resolve to INF, but instead got Infinity
CastAs173;Expected XPath xs:float("-INF") cast as xs:double to resolve to -INF, but instead got -Infinity
CastAs195;Expected XPath xs:float("NaN") cast as xs:boolean to resolve to false
CastAs196;Expected executing the XPath 'xs:float("5.4321E-100") cast as xs:base64Binary' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
CastAs197;Expected executing the XPath 'xs:float("5.4321E-100") cast as xs:hexBinary' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
CastAs198;Expected executing the XPath 'xs:float("5.4321E-100") cast as xs:anyURI' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
CastAs200;Expected XPath xs:double("INF") cast as xs:untypedAtomic to resolve to INF, but instead got Infinity
CastAs201;Expected XPath xs:double("1e8") cast as xs:string to resolve to 1.0E8, but instead got 100000000
CastAs202;Expected XPath xs:double("INF") cast as xs:string to resolve to INF, but instead got Infinity
CastAs207;Expected XPath xs:double("NaN") cast as xs:float to resolve to NaN, but instead got Infinity
CastAs209;Expected XPath xs:double("INF") cast as xs:double to resolve to INF, but instead got Infinity
CastAs231;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
CastAs232;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
CastAs233;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
CastAs253;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
CastAs254;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
CastAs255;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
CastAs274;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
CastAs275;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
CastAs276;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
CastAs277;Expected XPath xs:duration("P1Y2M3DT10H30M23S") cast as xs:untypedAtomic to resolve to P1Y2M3DT10H30M23S, but instead got PT
CastAs278;Expected XPath xs:duration("P1Y2M3DT10H30M23S") cast as xs:string to resolve to P1Y2M3DT10H30M23S, but instead got PT
CastAs283;Expected XPath xs:duration("P1Y2M3DT10H30M23S") cast as xs:duration to resolve to P1Y2M3DT10H30M23S, but instead got PT
CastAs284;Expected XPath xs:duration("PT10H") cast as xs:duration to resolve to PT10H, but instead got PT
CastAs285;Expected XPath xs:duration("P1Y2M3DT10H30M23S") cast as xs:yearMonthDuration to resolve to P1Y2M, but instead got P
CastAs286;Expected XPath xs:duration("PT10H") cast as xs:yearMonthDuration to resolve to P0M, but instead got P
CastAs287;Expected XPath xs:duration("P24M") cast as xs:yearMonthDuration to resolve to P2Y, but instead got P
CastAs288;Expected XPath xs:duration("P1Y2M3DT10H30M23S") cast as xs:dayTimeDuration to resolve to P3DT10H30M23S, but instead got PT
CastAs289;Expected XPath xs:duration("PT10H") cast as xs:dayTimeDuration to resolve to PT10H, but instead got PT
CastAs290;Expected XPath xs:duration("P24M") cast as xs:dayTimeDuration to resolve to PT0S, but instead got PT
CastAs300;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
CastAs301;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
CastAs302;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
CastAs303;Expected XPath xs:yearMonthDuration("P1Y2M") cast as xs:untypedAtomic to resolve to P1Y2M, but instead got P
CastAs304;Expected XPath xs:yearMonthDuration("P1Y2M") cast as xs:string to resolve to P1Y2M, but instead got P
CastAs309;Expected XPath xs:yearMonthDuration("P1Y2M") cast as xs:duration to resolve to P1Y2M, but instead got PT
CastAs310;Expected XPath xs:yearMonthDuration("P1Y2M") cast as xs:yearMonthDuration to resolve to P1Y2M, but instead got P
CastAs311;Expected XPath xs:yearMonthDuration("-P21M") cast as xs:yearMonthDuration to resolve to -P1Y9M, but instead got P
CastAs312;Input string was not in a correct format.
CastAs322;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
CastAs323;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
CastAs324;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
CastAs325;Expected XPath xs:dayTimeDuration("P3DT10H30M") cast as xs:untypedAtomic to resolve to P3DT10H30M, but instead got PT
CastAs326;Expected XPath xs:dayTimeDuration("-PT100M") cast as xs:untypedAtomic to resolve to -PT1H40M, but instead got PT
CastAs327;Expected XPath xs:dayTimeDuration("P3DT10H30M") cast as xs:string to resolve to P3DT10H30M, but instead got PT
CastAs328;Expected XPath xs:dayTimeDuration("-PT100M") cast as xs:string to resolve to -PT1H40M, but instead got PT
CastAs333;Expected XPath xs:dayTimeDuration("P3DT10H30M") cast as xs:duration to resolve to P3DT10H30M, but instead got PT
CastAs334;Expected XPath xs:dayTimeDuration("PT24H") cast as xs:duration to resolve to P1D, but instead got PT
CastAs335;Expected XPath xs:dayTimeDuration("-PT100M") cast as xs:duration to resolve to -PT1H40M, but instead got PT
CastAs336;Expected XPath xs:dayTimeDuration("P3DT10H30M") cast as xs:yearMonthDuration to resolve to P0M, but instead got P
CastAs337;Expected XPath xs:dayTimeDuration("P3DT10H30M") cast as xs:dayTimeDuration to resolve to P3DT10H30M, but instead got PT
CastAs338;Expected XPath xs:dayTimeDuration("P14D") cast as xs:dayTimeDuration to resolve to P14D, but instead got PT
CastAs339;Expected XPath xs:dayTimeDuration("-PT100M") cast as xs:dayTimeDuration to resolve to -PT1H40M, but instead got PT
CastAs349;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
CastAs350;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
CastAs351;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
CastAs353;The string '-1999-05-31T13:20:00+14:00' is not a valid AllXsd value.
CastAs355;The string '-1999-05-31T13:20:00+14:00' is not a valid AllXsd value.
CastAs364;Casting not supported from given type to xs:time or any of its derived types.
CastAs365;The string '-1999-05-31T13:20:00+14:00' is not a valid AllXsd value.
CastAs367;The string '-1999-05-31T13:20:00+14:00' is not a valid AllXsd value.
CastAs369;The string '-1999-05-31T13:20:00+14:00' is not a valid AllXsd value.
CastAs371;The string '-1999-05-31T13:20:00+14:00' is not a valid AllXsd value.
CastAs373;The string '-1999-05-31T13:20:00+14:00' is not a valid AllXsd value.
CastAs375;The string '-1999-05-31T13:20:00+14:00' is not a valid AllXsd value.
CastAs377;The string '-1999-05-31T13:20:00+14:00' is not a valid AllXsd value.
CastAs379;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
CastAs380;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
CastAs381;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
CastAs402;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
CastAs403;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
CastAs404;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
CastAs406;Expected executing the XPath 'xs:date("-0012-12-03-05:00") cast as xs:untypedAtomic' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPathException with code FODT0001, but got The string '-0012-12-03-05:00' is not a valid AllXsd value.
CastAs408;Expected executing the XPath 'xs:date("-0012-12-03-05:00") cast as xs:string' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPathException with code FODT0001, but got The string '-0012-12-03-05:00' is not a valid AllXsd value.
CastAs416;Casting not supported from given type to xs:dateTime or any of its derived types.
CastAs419;Expected executing the XPath 'xs:date("-0012-12-03-05:00") cast as xs:date' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPathException with code FODT0001, but got The string '-0012-12-03-05:00' is not a valid AllXsd value.
CastAs421;Casting not supported from given type to xs:gYearMonth or any of its derived types.
CastAs422;Casting not supported from given type to xs:gYear or any of its derived types.
CastAs423;Expected executing the XPath 'xs:date("-0012-12-03-05:00") cast as xs:gYear' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPathException with code FODT0001, but got The string '-0012-12-03-05:00' is not a valid AllXsd value.
CastAs424;Casting not supported from given type to xs:gYear or any of its derived types.
CastAs425;Casting not supported from given type to xs:gMonthDay or any of its derived types.
CastAs426;Expected executing the XPath 'xs:date("-0012-12-03-05:00") cast as xs:gMonthDay' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPathException with code FODT0001, but got The string '-0012-12-03-05:00' is not a valid AllXsd value.
CastAs427;Casting not supported from given type to xs:gMonthDay or any of its derived types.
CastAs428;Casting not supported from given type to xs:gDay or any of its derived types.
CastAs429;Expected executing the XPath 'xs:date("-0012-12-03-05:00") cast as xs:gMonth' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPathException with code FODT0001, but got The string '-0012-12-03-05:00' is not a valid AllXsd value.
CastAs430;Casting not supported from given type to xs:gMonth or any of its derived types.
CastAs432;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
CastAs433;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
CastAs434;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
CastAs449;The string '-0012-12-05:00' is not a valid AllXsd value.
CastAs456;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
CastAs457;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
CastAs458;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
CastAs472;The string '-0012-05:00' is not a valid AllXsd value.
CastAs478;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
CastAs479;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
CastAs480;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
CastAs501;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
CastAs502;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
CastAs503;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
CastAs524;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
CastAs525;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
CastAs526;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
CastAs547;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
CastAs548;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
CastAs549;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
CastAs550;Expected XPath xs:boolean("true") cast as xs:untypedAtomic to resolve to true, but instead got True
CastAs551;Expected XPath xs:boolean("true") cast as xs:string to resolve to true, but instead got True
CastAs573;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
CastAs574;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
CastAs575;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
CastAs576;Type casting to XsBase64Binary has not been implemented yet.
CastAs577;Type casting to XsBase64Binary has not been implemented yet.
CastAs578;Type casting to XsBase64Binary has not been implemented yet.
CastAs579;Type casting to XsBase64Binary has not been implemented yet.
CastAs580;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
CastAs581;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
CastAs582;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
CastAs583;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
CastAs584;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
CastAs585;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
CastAs586;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
CastAs587;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
CastAs588;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
CastAs589;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
CastAs590;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
CastAs591;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
CastAs592;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
CastAs593;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
CastAs594;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
CastAs595;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
CastAs596;Type casting to XsBase64Binary has not been implemented yet.
CastAs597;Type casting to XsBase64Binary has not been implemented yet.
CastAs598;Type casting to XsBase64Binary has not been implemented yet.
CastAs599;Type casting to XsBase64Binary has not been implemented yet.
CastAs600;Type casting to XsBase64Binary has not been implemented yet.
CastAs601;Type casting to XsBase64Binary has not been implemented yet.
CastAs602;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
CastAs603;Type casting to XsHexBinary has not been implemented yet.
CastAs604;Type casting to XsHexBinary has not been implemented yet.
CastAs605;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
CastAs606;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
CastAs607;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
CastAs608;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
CastAs609;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
CastAs610;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
CastAs611;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
CastAs612;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
CastAs613;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
CastAs614;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
CastAs615;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
CastAs616;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
CastAs617;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
CastAs618;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
CastAs619;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
CastAs620;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
CastAs621;Type casting to XsHexBinary has not been implemented yet.
CastAs622;Type casting to XsHexBinary has not been implemented yet.
CastAs623;Type casting to XsHexBinary has not been implemented yet.
CastAs624;Type casting to XsHexBinary has not been implemented yet.
CastAs625;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
CastAs626;Type casting to XsAnyUri has not been implemented yet.
CastAs627;Type casting to XsAnyUri has not been implemented yet.
CastAs628;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
CastAs629;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
CastAs630;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
CastAs631;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
CastAs632;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
CastAs633;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
CastAs634;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
CastAs635;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
CastAs636;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
CastAs637;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
CastAs638;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
CastAs639;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
CastAs640;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
CastAs641;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
CastAs642;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
CastAs643;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
CastAs644;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
CastAs645;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
CastAs646;Type casting to XsAnyUri has not been implemented yet.
CastAs670;Expected executing the XPath 'let $d1 := '2006-07-12' cast as xs:date let $oneky := xs:yearMonthDuration('P1000Y') let $d2 := $d1 + $oneky let $d3 := $d2 + $oneky let $d4 := $d3 + $oneky let $d5 := $d4 + $oneky let $d6 := $d5 + $oneky let $d7 := $d6 + $oneky let $d8 := $d7 + $oneky let $d9 := $d8 + $oneky let $d10 := $d9 + $oneky return $d10' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'let $d1 := '2006-07-12' cast as xs:date let $oneky := xs:yearMonthDuration('P1000Y') let $d2 := $d1 + $oneky let $d3 := $d2 + $oneky let $d4 := $d3 + $oneky let $d5 := $d4 + $oneky let $d6 := $d5 + $oneky let $d7 := $d6 + $oneky let $d8 := $d7 + $oneky let $d9 := $d8 + $oneky let $d10 := $d9 + $oneky return $d10'
CastAs671;Atomic Value for XsEntity is not implemented yet.
CastAs673a;Expected XPathException with code XPTY0004, but got Type casting to XsQName has not been implemented yet.
CastAs673b;Type casting to XsQName has not been implemented yet.
CastAs674;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'let $var := <e>xml:space</e> return $var cast as xs:QName'
CastAs674a;PRSC Error: Failed to parse query 'let $var := <e>xml:space</e> return $var cast as xs:QName'
CastAs675;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:clarkname($q as xs:QName) as xs:string { \n          concat('{', namespace-uri-from-QName($q), '}', local-name-from-QName($q)) \n        }; \n        let $var := <e>xml:space</e> \n        return (local:clarkname(node-name($var)), local:clarkname(xs:untypedAtomic($var)))'
CastAs675a;Expected error code: XPTY0117. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:clarkname($q as xs:QName) as xs:string { \n          concat('{', namespace-uri-from-QName($q), '}', local-name-from-QName($q)) \n        }; \n        let $var := <e>xml:space</e> \n        return (local:clarkname(node-name($var)), local:clarkname(xs:untypedAtomic($var)))'
CastAs677;Atomic Value for XsNormalizedString is not implemented yet.
CastAs678;Atomic Value for XsToken is not implemented yet.
CastAsNamespaceSensitiveType-1;Expected error code: XPTY0117. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      declare function local:clarkname($q as xs:QName) as xs:string { \n      concat('{', namespace-uri-from-QName($q), '}', local-name-from-QName($q)) \n      }; \n      local:clarkname(xs:untypedAtomic("xs:integer"))\n    '
CastAsNamespaceSensitiveType-10;PRSC Error: Failed to parse query '\n      import schema namespace ntn="http://www.w3.org/XQueryTest/Cast/Notation" at "notation.xsd";\n      declare function local:is-jpg($q as ntn:qnames) as xs:boolean { \n        $q eq ntn:qnames("ntn:jpg")\n      }; \n      local:is-jpg(validate {\n        <ntn:qname xmlns:ntn="http://www.w3.org/XQueryTest/Cast/Notation"\n                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n                   xsi:schemaLocation="http://www.w3.org/XQueryTest/Cast/Notation CastExpr/notation.xsd">ntn:jpg</ntn:qname>\n      })\n    '
CastAsNamespaceSensitiveType-11;Expected error code: XPTY0117. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      import schema namespace ntn="http://www.w3.org/XQueryTest/Cast/Notation" at "notation.xsd";\n      declare function local:is-jpg($q as ntn:qnames) as xs:boolean { \n        $q eq ntn:qnames("ntn:jpg")\n      }; \n      local:is-jpg(xs:untypedAtomic("ntn:picture"))\n    '
CastAsNamespaceSensitiveType-12;Expected error code: XPTY0117. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      import schema namespace ntn="http://www.w3.org/XQueryTest/Cast/Notation" at "notation.xsd";\n      declare function local:is-jpg($q as ntn:qnames) as xs:boolean { \n        $q eq ntn:qnames("ntn:jpg")\n      }; \n      local:is-jpg(<tag>ntn:picture</tag>)\n    '
CastAsNamespaceSensitiveType-2;Expected error code: XPTY0117. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      declare function local:clarkname($q as xs:QName) as xs:string { \n      concat('{', namespace-uri-from-QName($q), '}', local-name-from-QName($q)) \n      }; \n      local:clarkname(<tag>xs:integer</tag>)\n    '
CastAsNamespaceSensitiveType-3;PRSC Error: Failed to parse query '\n      declare function local:clarkname($q as xs:QName) as xs:string { \n      concat('{', namespace-uri-from-QName($q), '}', local-name-from-QName($q)) \n      }; \n      local:clarkname(xs:QName("xs:integer"))\n    '
CastAsNamespaceSensitiveType-4;Expected error code: XPTY0117. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      declare function local:clarkname($q as xs:NOTATION) as xs:string { \n        $q cast as xs:string\n      }; \n      local:clarkname(xs:untypedAtomic("xs:integer"))\n    '
CastAsNamespaceSensitiveType-5;Expected error code: XPTY0117. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      declare function local:clarkname($q as xs:NOTATION) as xs:string { \n        $q cast as xs:string\n      }; \n      local:clarkname(<tag>xs:integer</tag>)\n    '
CastAsNamespaceSensitiveType-6;PRSC Error: Failed to parse query '\n      import schema namespace ntn="http://www.w3.org/XQueryTest/Cast/Notation" at "notation.xsd";\n      declare function local:is-jpg($q as xs:NOTATION) as xs:boolean { \n        $q eq ntn:pictures("ntn:jpg")\n      }; \n      local:is-jpg(validate {\n        <ntn:notation xmlns:ntn="http://www.w3.org/XQueryTest/Cast/Notation"\n                      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n                      xsi:schemaLocation="http://www.w3.org/XQueryTest/Cast/Notation CastExpr/notation.xsd">ntn:jpg</ntn:notation>\n      })\n    '
CastAsNamespaceSensitiveType-7;PRSC Error: Failed to parse query '\n      import schema namespace ntn="http://www.w3.org/XQueryTest/Cast/Notation" at "notation.xsd";\n      declare function local:is-jpg($q as ntn:pictures) as xs:boolean { \n        $q eq ntn:pictures("ntn:jpg")\n      }; \n      local:is-jpg(validate {\n        <ntn:notation xmlns:ntn="http://www.w3.org/XQueryTest/Cast/Notation"\n                      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n                      xsi:schemaLocation="http://www.w3.org/XQueryTest/Cast/Notation CastExpr/notation.xsd">ntn:jpg</ntn:notation>\n      })\n    '
CastAsNamespaceSensitiveType-8;Expected error code: XPTY0117. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      import schema namespace ntn="http://www.w3.org/XQueryTest/Cast/Notation" at "notation.xsd";\n      declare function local:is-jpg($q as ntn:pictures) as xs:boolean { \n        $q eq ntn:pictures("ntn:jpg")\n      }; \n      local:is-jpg(xs:untypedAtomic("ntn:picture"))\n    '
CastAsNamespaceSensitiveType-9;Expected error code: XPTY0117. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      import schema namespace ntn="http://www.w3.org/XQueryTest/Cast/Notation" at "notation.xsd";\n      declare function local:is-jpg($q as ntn:pictures) as xs:boolean { \n        $q eq ntn:pictures("ntn:jpg")\n      }; \n      local:is-jpg(<tag>ntn:picture</tag>)\n    '
CastFOCA0003-1;Expected executing the XPath 'xs:integer(99e100)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: Overflow when creating a Int64 from 9.9E+101.
casthc10;PRSC Error: Failed to parse query 'xs:float(2.1E3) cast as xs:double = 2100'
casthc11;PRSC Error: Failed to parse query 'xs:float(2.1E3) cast as xs:boolean'
casthc12;PRSC Error: Failed to parse query 'xs:double(1267.43233E12) cast as xs:double'
casthc13;PRSC Error: Failed to parse query 'xs:double(1267.43233E12) cast as xs:string'
casthc14;PRSC Error: Failed to parse query '(xs:double(1267.43233E12) cast as xs:float) eq xs:float(1267.43233E12)'
casthc15;PRSC Error: Failed to parse query 'xs:double(1267.43233E12) cast as xs:boolean'
casthc17;Expected XPath xs:decimal(12678967.543233) cast as xs:float to resolve to 1.2678968E7, but instead got 12678970
casthc18;Expected XPath xs:decimal(12678967.543233) cast as xs:double to resolve to 1.2678967543233E7, but instead got 12678967.543233
casthc24;Expected XPath xs:integer(12678967543233) cast as xs:double to resolve to 1.2678967543233E13, but instead got 12678967543233
casthc30;Casting not supported from given type to xs:time or any of its derived types.
casthc33;Casting not supported from given type to xs:dateTime or any of its derived types.
casthc37;Expected XPath fn:true() cast as xs:string to resolve to true, but instead got True
casthc8;PRSC Error: Failed to parse query 'xs:float(2.1E3) cast as xs:float = 2100'
casthc9;PRSC Error: Failed to parse query 'xs:float(2.1E3) cast as xs:string'
casthcds1;PRSC Error: Failed to parse query 'import schema namespace atomic="http://www.w3.org/XQueryTest"; (/atomic:root/atomic:integer) cast as xs:integer = 12678967543233'
casthcds10;PRSC Error: Failed to parse query 'import schema namespace atomic="http://www.w3.org/XQueryTest"; xs:float(((/atomic:root/atomic:float) cast as xs:double)) eq xs:float(1267.43233E12)'
casthcds11;PRSC Error: Failed to parse query 'import schema namespace atomic="http://www.w3.org/XQueryTest"; (/atomic:root/atomic:float) cast as xs:boolean'
casthcds12;PRSC Error: Failed to parse query 'import schema namespace atomic="http://www.w3.org/XQueryTest"; (/atomic:root/atomic:double) cast as xs:double'
casthcds13;PRSC Error: Failed to parse query 'import schema namespace atomic="http://www.w3.org/XQueryTest"; ((/atomic:root/atomic:double) cast as xs:string) eq xs:string("A String Function")'
casthcds14;PRSC Error: Failed to parse query 'import schema namespace atomic="http://www.w3.org/XQueryTest"; ((/atomic:root/atomic:double) cast as xs:float) eq xs:float(1267.43233E12)'
casthcds15;PRSC Error: Failed to parse query 'import schema namespace atomic="http://www.w3.org/XQueryTest"; (/atomic:root/atomic:double) cast as xs:boolean'
casthcds16;PRSC Error: Failed to parse query 'import schema namespace atomic="http://www.w3.org/XQueryTest"; (/atomic:root/atomic:decimal) cast as xs:string'
casthcds17;PRSC Error: Failed to parse query 'import schema namespace atomic="http://www.w3.org/XQueryTest"; (/atomic:root/atomic:decimal) cast as xs:float'
casthcds18;PRSC Error: Failed to parse query 'import schema namespace atomic="http://www.w3.org/XQueryTest"; (/atomic:root/atomic:decimal) cast as xs:double'
casthcds19;PRSC Error: Failed to parse query 'import schema namespace atomic="http://www.w3.org/XQueryTest"; (/atomic:root/atomic:decimal) cast as xs:decimal'
casthcds2;PRSC Error: Failed to parse query 'import schema namespace atomic="http://www.w3.org/XQueryTest"; \n      ((/atomic:root/atomic:integer) cast as xs:float) eq xs:float(12678967543233)'
casthcds20;Expected executing the XPath 'import schema namespace atomic="http://www.w3.org/XQueryTest"; (/atomic:root/atomic:decimal) cast as xs:integer' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'import schema namespace atomic="http://www.w3.org/XQueryTest"; (/atomic:root/atomic:decimal) cast as xs:integer = 12678967'
casthcds21;PRSC Error: Failed to parse query 'import schema namespace atomic="http://www.w3.org/XQueryTest"; (/atomic:root/atomic:decimal) cast as xs:boolean'
casthcds22;PRSC Error: Failed to parse query 'import schema namespace atomic="http://www.w3.org/XQueryTest"; (/atomic:root/atomic:integer) cast as xs:string'
casthcds23;PRSC Error: Failed to parse query 'import schema namespace atomic="http://www.w3.org/XQueryTest"; ((/atomic:root/atomic:integer) cast as xs:float) eq xs:float(12678967543233)'
casthcds24;PRSC Error: Failed to parse query 'import schema namespace atomic="http://www.w3.org/XQueryTest"; (/atomic:root/atomic:integer) cast as xs:double'
casthcds25;PRSC Error: Failed to parse query 'import schema namespace atomic="http://www.w3.org/XQueryTest"; (/atomic:root/atomic:integer) cast as xs:decimal = 12678967543233'
casthcds26;PRSC Error: Failed to parse query 'import schema namespace atomic="http://www.w3.org/XQueryTest"; (/atomic:root/atomic:integer) cast as xs:integer = 12678967543233'
casthcds27;PRSC Error: Failed to parse query 'import schema namespace atomic="http://www.w3.org/XQueryTest"; (/atomic:root/atomic:integer) cast as xs:boolean'
casthcds28;PRSC Error: Failed to parse query 'import schema namespace atomic="http://www.w3.org/XQueryTest"; (/atomic:root/atomic:dateTime) cast as xs:string'
casthcds29;PRSC Error: Failed to parse query 'import schema namespace atomic="http://www.w3.org/XQueryTest"; (/atomic:root/atomic:dateTime) cast as xs:dateTime'
casthcds3;PRSC Error: Failed to parse query 'import schema namespace atomic="http://www.w3.org/XQueryTest"; \n      (/atomic:root/atomic:integer) cast as xs:boolean'
casthcds30;PRSC Error: Failed to parse query 'import schema namespace atomic="http://www.w3.org/XQueryTest"; (/atomic:root/atomic:dateTime) cast as xs:time'
casthcds31;PRSC Error: Failed to parse query 'import schema namespace atomic="http://www.w3.org/XQueryTest"; (/atomic:root/atomic:dateTime) cast as xs:date'
casthcds32;PRSC Error: Failed to parse query 'import schema namespace atomic="http://www.w3.org/XQueryTest"; (/atomic:root/atomic:date) cast as xs:string'
casthcds33;PRSC Error: Failed to parse query 'import schema namespace atomic="http://www.w3.org/XQueryTest"; (/atomic:root/atomic:date) cast as xs:dateTime'
casthcds34;PRSC Error: Failed to parse query 'import schema namespace atomic="http://www.w3.org/XQueryTest"; (/atomic:root/atomic:date) cast as xs:date'
casthcds35;PRSC Error: Failed to parse query 'import schema namespace atomic="http://www.w3.org/XQueryTest"; (/atomic:root/atomic:time) cast as xs:string'
casthcds36;PRSC Error: Failed to parse query 'import schema namespace atomic="http://www.w3.org/XQueryTest"; (/atomic:root/atomic:time) cast as xs:time'
casthcds37;PRSC Error: Failed to parse query '\n        import schema namespace atomic="http://www.w3.org/XQueryTest"; \n        (/atomic:root/atomic:boolean) cast as xs:string'
casthcds38;PRSC Error: Failed to parse query 'import schema namespace atomic="http://www.w3.org/XQueryTest"; (/atomic:root/atomic:boolean) cast as xs:float = 1'
casthcds39;PRSC Error: Failed to parse query 'import schema namespace atomic="http://www.w3.org/XQueryTest"; (/atomic:root/atomic:boolean) cast as xs:double = 1'
casthcds4;PRSC Error: Failed to parse query 'import schema namespace atomic="http://www.w3.org/XQueryTest"; (/atomic:root/atomic:integer) cast as xs:double'
casthcds40;PRSC Error: Failed to parse query 'import schema namespace atomic="http://www.w3.org/XQueryTest"; (/atomic:root/atomic:boolean) cast as xs:decimal = 1'
casthcds41;PRSC Error: Failed to parse query 'import schema namespace atomic="http://www.w3.org/XQueryTest"; (/atomic:root/atomic:boolean) cast as xs:integer = 1'
casthcds42;PRSC Error: Failed to parse query 'import schema namespace atomic="http://www.w3.org/XQueryTest"; (/atomic:root/atomic:boolean) cast as xs:boolean'
casthcds5;PRSC Error: Failed to parse query 'import schema namespace atomic="http://www.w3.org/XQueryTest"; (/atomic:root/atomic:integer) cast as xs:decimal = 12678967543233'
casthcds6;PRSC Error: Failed to parse query 'import schema namespace atomic="http://www.w3.org/XQueryTest"; (/atomic:root/atomic:integer) cast as xs:string'
casthcds7;PRSC Error: Failed to parse query 'import schema namespace atomic="http://www.w3.org/XQueryTest"; (/atomic:root/atomic:string) cast as xs:string'
casthcds8;PRSC Error: Failed to parse query 'import schema namespace atomic="http://www.w3.org/XQueryTest"; ((/atomic:root/atomic:float) cast as xs:float) eq xs:float(1267.43233E12)'
casthcds9;Expected executing the XPath 'import schema namespace atomic="http://www.w3.org/XQueryTest"; ((/atomic:root/atomic:float) cast as xs:string)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'import schema namespace atomic="http://www.w3.org/XQueryTest"; ((/atomic:root/atomic:float) cast as xs:string)'
Catalog001;PRSC Error: Failed to parse query '(\n        declare namespace fots = "http://www.w3.org/2010/09/qt-fots-catalog";\n        let $testsets := //fots:test-set/@file/doc(resolve-uri(., base-uri(..))),\n            $tests := $testsets//fots-test-case,\n            $environments := (//fots:environment | $testsets//fots:environment)[@name],\n            $refs := $testsets//fots:environment[@ref]\n            return $refs[not(@ref = $environments/@name)]\n      ) => empty()'
Catalog002;PRSC Error: Failed to parse query '(\n        import schema namespace fots = "http://www.w3.org/2010/09/qt-fots-catalog";\n        let $testsets := //fots:test-set/@file/(validate{doc(resolve-uri(., base-uri(..)))})\n        for $test in $testsets//fots:test-case[not(fots:result/fots:error)][\n                contains(test, "declare variable") or\n                contains(test, "declare function") or\n                matches(test, "<.+>") or\n                contains(test, "typeswitch")]\n        where empty($test/(fots:dependency | ../fots:dependency)) or\n              exists($test/(fots:dependency | ../fots:dependency)[contains(., "XP")])\n        return $test\n      ) => empty()'
Catalog003;PRSC Error: Failed to parse query '(\n        declare namespace fots = "http://www.w3.org/2010/09/qt-fots-catalog";\n        let $testsets := //fots:test-set/@file/doc(resolve-uri(., base-uri(..)))\n        for $test in $testsets//fots:test-case[contains(test, "import schema")]\n        where empty($test/(fots:dependency | ../fots:dependency)[@type='feature' and @value="schemaImport"]) \n        return $test\n      ) => empty()'
Catalog004;PRSC Error: Failed to parse query '(\n        declare namespace fots = "http://www.w3.org/2010/09/qt-fots-catalog";\n        let $testsets := //fots:test-set/@file/doc(resolve-uri(., base-uri(..)))\n        for $schema in (.|$testsets)//fots:environment/fots:schema\n        let $targetNamespace := doc(resolve-uri($schema/@file, base-uri($schema)))/*/@targetNamespace\n        where not($schema/@uri eq $targetNamespace or (empty($targetNamespace) and string(@uri)=''))\n        return ($schema, <file>{base-uri($schema)}</file>)\n      ) => empty()'
Catalog005;PRSC Error: Failed to parse query '(\n        declare namespace fots = "http://www.w3.org/2010/09/qt-fots-catalog";\n        (: ask whether a test is XQuery-only :)\n        declare function local:needs-xq($t as element(fots:test-case)) as xs:boolean {\n            let $spec := $t/fots:dependency[@type='spec'][1]\n            return exists($spec) and contains($spec/@value, 'XQ') and not(contains($spec/@value, 'XP'))\n               and not(starts-with($t/@name, 'fo-test-' (: special exemption for generated tests :)))\n        };\n        let $testsets := //fots:test-set/@file/doc(resolve-uri(., base-uri(..)))\n        let $nsenvs :=\n            for $t in ($testsets|.)\n            for $e in $t//fots:environment[@name]\n            where exists($e/fots:namespace) \n            return concat($t/*/@name, '~', $e/@name/string())\n        let $xq-testcases := $testsets//fots:test-case [local:needs-xq(.)]\n        for $tc in $xq-testcases [concat(/*/@name, '~', fots:environment/@ref) = $nsenvs or fots:environment[fots:namespace]]\n        return $tc/@name/string()\n      ) => empty()'
Catalog006;PRSC Error: Failed to parse query '(\n        declare namespace fots = "http://www.w3.org/2010/09/qt-fots-catalog";\n        (: ask whether a test is XQuery-only :)\n        declare function local:needs-xq($t as element(fots:test-case)) as xs:boolean {\n            let $spec := $t/fots:dependency[@type='spec'][1]\n            return exists($spec) and contains($spec/@value, 'XQ') and not(contains($spec/@value, 'XP'))\n               and not(starts-with($t/@name, 'fo-test-' (: special exemption for generated tests :)))\n        };\n        let $testsets := //fots:test-set/@file/doc(resolve-uri(., base-uri(..)))\n        let $nsenvs :=\n            for $t in ($testsets|.)\n            for $e in $t//fots:environment\n            where exists($e/fots:decimal-format) \n            return $e/@name/string()\n        let $xq-testcases := $testsets//fots:test-case [local:needs-xq(.)]\n        for $tc in $xq-testcases [fots:environment/@ref = $nsenvs or fots:environment[fots:decimal-format]]\n        return $tc/@name/string()\n      ) => empty()'
Catalog007;PRSC Error: Failed to parse query '(\n        xquery version "3.0";\n        (: output the non-unique test names. There should be none :)\n        declare namespace fots = "http://www.w3.org/2010/09/qt-fots-catalog";\n        let $testsets := //fots:test-set/@file/doc(resolve-uri(., base-uri(..)))\n        for $xq-testcase in $testsets//fots:test-case\n        let $testname := $xq-testcase/@name\n        group by $testname\n        where count($xq-testcase) gt 1\n        return ($testname || "(" || count($xq-testcase) || ")")\n      ) => empty()'
Catalog008;PRSC Error: Failed to parse query '(\n        declare namespace fots = "http://www.w3.org/2010/09/qt-fots-catalog";\n\n        for $xq-testcase in //fots:test-set\n        let $testname := $xq-testcase/@name\n        let $testfile := $xq-testcase/@file/doc(resolve-uri(., base-uri(..)))\n        let $file-testname := $testfile/fots:test-set/@name\n        where $testname != $file-testname\n        return <out catalog-name="{string($testname)}" test-name="{string($file-testname)}"/>\n      ) => empty()'
Catalog009;PRSC Error: Failed to parse query '(\n        xquery version "3.0";\n        declare namespace fots = "http://www.w3.org/2010/09/qt-fots-catalog";\n        let $testsets := //fots:test-set/@file/doc(resolve-uri(., base-uri(..)))\n        for $dependencyTS in $testsets//fots:dependency\n        let $name := $dependencyTS/@type\n        let $value := $dependencyTS/@value\n        group by $name, $value\n        order by $name, $value\n\n        return <dependency type='{$name}' value='{$value}' />\n\n      ) instance of $element()*'
Catalog010;PRSC Error: Failed to parse query '(\n        declare namespace fots = "http://www.w3.org/2010/09/qt-fots-catalog";\n        let $changes := doc('../changes.xml')//change/@id/string()\n        for $xq-test in //fots:test-set\n        let $testfile := $xq-test/@file/doc(resolve-uri(., base-uri(..)))\n        let $testset := $testfile/fots:test-set\n        let $testcases := $testset/fots:test-case\n        for $token in distinct-values((tokenize($testset/@covers-30, ' '), $testcases/@covers-30/tokenize(., ' '), tokenize($testset/@covers, ' '), $testcases/@covers/tokenize(., ' ')))\n        where not($token = $changes)\n        return <out test-set="{string($testset/@name)}" bad-covers-value="{$token}"/>\n      ) => empty()'
Catalog011;PRSC Error: Failed to parse query '\n    declare namespace fots = "http://www.w3.org/2010/09/qt-fots-catalog";\n    <r>{\n        let $changes := doc('../changes.xml')//spec[contains(@name, '31')]/change\n        let $changesid := $changes/@id/string()\n        let $testfiles := //fots:test-set/@file/doc(resolve-uri(., base-uri(..)))\n        let $testsets := $testfiles/fots:test-set\n        for $token in distinct-values($changesid)\n        let $relevant-testsets := $testsets[tokenize(@covers, ' ') = $token]\n        let $relevant-testcases := $testsets/fots:test-case[tokenize(@covers, ' ') = $token]\n        let $count := count($relevant-testsets/fots:test-case) + count($relevant-testcases)\n        where $count lt 5\n        return <out spec="{$changes[@id=$token]/../@name}" change="{$token}" tests="{$count}" names="{$relevant-testcases/@name}">\n        {$changes[@id=$token]/text()}\n        </out>\n     }</r>\n      '
Catalog012;PRSC Error: Failed to parse query '(\n      declare namespace fots = "http://www.w3.org/2010/09/qt-fots-catalog";\n      let $testsets := //fots:test-set/@file/doc(resolve-uri(., base-uri(..)))\n      return $testsets//fots:test-case[.//fots:assert-xml[starts-with(., '<?xml')]]\n    ) => empty()'
Catalog013;PRSC Error: Failed to parse query '(\n      declare namespace fots = "http://www.w3.org/2010/09/qt-fots-catalog";\n      let $testsets := //fots:test-set/@file/doc(resolve-uri(., base-uri(..)))\n      return $testsets//fots:dependency[@type='spec']\n             [tokenize(normalize-space(@value), ' ')[not (. =\n                          ('XP20', 'XP20+', 'XP30', 'XP30+', 'XP31', 'XP31+', \n                           'XQ10', 'XQ10+', 'XQ30', 'XQ30+', 'XQ31', 'XQ31+',\n                           'XT30', 'XT30+'))]]/\n                           concat(../@name, ' => ', @value)\n    ) => empty()'
Catalog014;PRSC Error: Failed to parse query '(\n    declare namespace fots = "http://www.w3.org/2010/09/qt-fots-catalog";\n        let $testsets := //fots:test-set/@file/doc(resolve-uri(., base-uri(..)))\n        for $test in $testsets//fots:test-case\n        where not(exists($test/(@covers | ../@covers)))\n        where exists($test/((fots:dependency | ../fots:dependency)[@type='spec' and contains(@value, '31')]))\n        where not(starts-with($test/@name, 'fo-test-' (: special exemption for generated tests :)))\n        where xs:date($test/created/@on) le xs:date('2018-01-01')  (: no point keeping this requirement any longer :)\n        return <out test="{$test/@name}"/>\n      ) => empty()'
cbcl-add-dayTimeDurations-001;PRSC Error: Failed to parse query 'declare function local:dayTimeDuration($days as xs:integer, $hours as xs:integer ) { xs:dayTimeDuration(concat('P', $days, 'DT', $hours, 'H')) }; local:dayTimeDuration(1, 1) + xs:dayTimeDuration("P0D")'
cbcl-add-dayTimeDurations-002;PRSC Error: Failed to parse query 'declare function local:dayTimeDuration($days as xs:integer, $hours as xs:integer ) { xs:dayTimeDuration(concat('P', $days, 'DT', $hours, 'H')) }; xs:dayTimeDuration("P0D") + local:dayTimeDuration(1, 1)'
cbcl-add-dayTimeDurations-003;PRSC Error: Failed to parse query 'declare function local:dayTimeDuration($days as xs:integer, $hours as xs:integer ) { xs:dayTimeDuration(concat('P', $days, 'DT', $hours, 'H')) }; local:dayTimeDuration(1, 1) + local:dayTimeDuration(1, 1)'
cbcl-add-yearMonthDurations-001;PRSC Error: Failed to parse query '\n        declare function local:yearMonthDuration($years as xs:integer, $months as xs:integer ) { xs:yearMonthDuration(concat('P', $years, 'Y', $months, 'M')) };\n        local:yearMonthDuration(1, 1) + xs:yearMonthDuration("P0Y")'
cbcl-add-yearMonthDurations-002;PRSC Error: Failed to parse query '\n        declare function local:yearMonthDuration($years as xs:integer, $months as xs:integer ) { xs:yearMonthDuration(concat('P', $years, 'Y', $months, 'M')) };\n        xs:yearMonthDuration("P0Y") + local:yearMonthDuration(1, 1)'
cbcl-add-yearMonthDurations-003;PRSC Error: Failed to parse query '\n        declare function local:yearMonthDuration($years as xs:integer, $months as xs:integer ) { xs:yearMonthDuration(concat('P', $years, 'Y', $months, 'M')) };\n        local:yearMonthDuration(1, 1) + local:yearMonthDuration(1, 1)'
cbcl-anyURI-002;Type casting to XsAnyUri has not been implemented yet.
cbcl-anyURI-003;Type casting to XsAnyUri has not been implemented yet.
cbcl-anyURI-004;Type casting to XsAnyUri has not been implemented yet.
cbcl-anyURI-004b;Type casting to XsAnyUri has not been implemented yet.
cbcl-anyURI-005;Type casting to XsAnyUri has not been implemented yet.
cbcl-anyURI-006;Type casting to XsAnyUri has not been implemented yet.
cbcl-anyURI-006b;Type casting to XsAnyUri has not been implemented yet.
cbcl-anyURI-007;Type casting to XsAnyUri has not been implemented yet.
cbcl-anyURI-008;Type casting to XsAnyUri has not been implemented yet.
cbcl-anyURI-009;Type casting to XsAnyUri has not been implemented yet.
cbcl-anyURI-009b;Type casting to XsAnyUri has not been implemented yet.
cbcl-anyURI-010;Type casting to XsAnyUri has not been implemented yet.
cbcl-anyURI-011;Type casting to XsAnyUri has not been implemented yet.
cbcl-anyURI-012;Type casting to XsAnyUri has not been implemented yet.
cbcl-anyURI-012b;Type casting to XsAnyUri has not been implemented yet.
cbcl-anyURI-013;Type casting to XsAnyUri has not been implemented yet.
cbcl-avg-001;Expected executing the XPath 'fn:avg((xs:decimal("79000000000000000000000000000"),\n                    xs:decimal("79000000000000000000000000000")))\n            eq 79000000000000000000000000000' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: Overflow when creating a Int64 from 79000000000000000000000000000.
cbcl-avg-002;Expected XPathException with code FODT0002, but got Value was either too large or too small for an Int32.
cbcl-avg-003;Expected XPathException with code FODT0002, but got Value was either too large or too small for an Int32.
cbcl-avg-004;Expected XPath fn:avg((xs:dayTimeDuration("P1DT2H"), xs:dayTimeDuration("PT22H"), xs:dayTimeDuration("P1D"))) to resolve to P1D, but instead got PT
cbcl-avg-006;Expected XPath fn:avg((xs:yearMonthDuration("P1Y1M"), xs:yearMonthDuration("P11M"), xs:yearMonthDuration("P1Y"))) to resolve to P1Y, but instead got P
cbcl-avg-008;PRSC Error: Failed to parse query 'typeswitch (fn:avg((xs:float(1), xs:double(2), xs:float(3)))) case $x as xs:double return $x default return "FAIL"'
cbcl-avg-010;Expected executing the XPath 'avg((xs:double("NaN"), current-date() - xs:date("1997-01-01") ))' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: FORG0006. Found error code: XPST0017 with error message: The function current-date with arity 0 is not registered.
cbcl-avg-011;The function day-from-date with arity 1 is not registered.
cbcl-avg-012;The function day-from-date with arity 1 is not registered.
cbcl-base64Binary-equal-001;PRSC Error: Failed to parse query '\n      declare function local:base64Binary-value($arg as xs:boolean) as xs:base64Binary { \n      	if ($arg) then xs:base64Binary('aGVsbG8=') else xs:base64Binary('Z29vZGJ5ZQ==') \n      }; \n      local:base64Binary-value(true()) eq local:base64Binary-value(false())'
cbcl-base64Binary-equal-002;PRSC Error: Failed to parse query '\n      	declare function local:base64Binary-value($arg as xs:boolean) as xs:base64Binary { \n      		if ($arg) then xs:base64Binary('aGVsbG8=') else xs:base64Binary('Z29vZGJ5ZQ==') \n      	}; \n      	not(local:base64Binary-value(true()) eq local:base64Binary-value(false()))'
cbcl-base64Binary-equal-003;PRSC Error: Failed to parse query '\n      	declare function local:base64Binary-value($arg as xs:boolean) as xs:base64Binary { \n      		if ($arg) then xs:base64Binary('aGVsbG8=') else xs:base64Binary('Z29vZGJ5ZQ==') \n      	}; \n      	not(local:base64Binary-value(true()) ne local:base64Binary-value(false()))'
cbcl-boolean-001;PRSC Error: Failed to parse query '\n      	declare function local:generate($count as xs:integer) {\n      		if ($count < 0) then "string" \n      		else for $x in 1 to $count \n      			 return \n      			 	if ($x mod 3 = 0) then <a /> \n      			 	else if ($x mod 3 = 1) then <b /> \n      			 	else <c /> \n      	}; \n      	fn:boolean(fn:reverse( local:generate(5) ))\n      '
cbcl-boolean-002;PRSC Error: Failed to parse query '\n      	declare function local:generate($count as xs:integer) {\n      		for $x in 1 to $count \n      		return \n      			if ($x mod 3 = 0) then <a /> \n      			else if ($x mod 3 = 1) then <b /> \n      			else <c /> \n      	}; \n      	fn:boolean(fn:count( local:generate(5) ))\n      '
cbcl-boolean-003;Expected executing the XPath 'declare function local:f() { (<a/>, "a") }; boolean(local:f())' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare function local:f() { (<a/>, "a") }; boolean(local:f())'
cbcl-boolean-005;PRSC Error: Failed to parse query '\n      declare function local:repeat($count as xs:integer, $arg as xs:string) { for $x in 1 to $count return $arg }; \n      fn:boolean( text { local:repeat(0, "string") } )\n      '
cbcl-boolean-006;PRSC Error: Failed to parse query '\n      declare function local:repeat($count as xs:integer, $arg as xs:string) as item()* { \n      	if ($count lt 0) then '$count must not be negative' \n      	else text { for $x in 1 to $count return $arg }\n      }; \n      fn:boolean( local:repeat(0, "string") )'
cbcl-boolean-equal-001;PRSC Error: Failed to parse query '\n      declare function local:is-even($arg as xs:integer) as xs:boolean { (($arg mod 2) eq 0) }; \n      fn:false() eq local:is-even(17)'
cbcl-boolean-equal-002;PRSC Error: Failed to parse query '\n      declare function local:is-even($arg as xs:integer) as xs:boolean { (($arg mod 2) eq 0) }; \n      not(local:is-even(13) eq local:is-even(17))'
cbcl-boolean-equal-003;PRSC Error: Failed to parse query '\n      declare function local:is-even($arg as xs:integer) as xs:boolean { (($arg mod 2) eq 0) }; \n      fn:true() ne local:is-even(17)'
cbcl-boolean-equal-004;PRSC Error: Failed to parse query '\n      declare function local:is-even($arg as xs:integer) as xs:boolean { (($arg mod 2) eq 0) }; \n      local:is-even(17) ne fn:true()'
cbcl-boolean-equal-005;PRSC Error: Failed to parse query '\n      declare function local:is-even($arg as xs:integer) as xs:boolean { (($arg mod 2) eq 0) }; \n      local:is-even(17) ne fn:false()'
cbcl-boolean-equal-006;PRSC Error: Failed to parse query '\n      declare function local:is-even($arg as xs:integer) as xs:boolean { (($arg mod 2) eq 0) }; \n      not(not(local:is-even(17) eq local:is-even(16)))'
cbcl-boolean-greater-than-001;PRSC Error: Failed to parse query '\n      declare function local:is-even($arg as xs:integer) as xs:boolean { (($arg mod 2) eq 0) }; \n      not(local:is-even(15) ge local:is-even(17))'
cbcl-boolean-greater-than-002;PRSC Error: Failed to parse query '\n      declare function local:is-even($arg as xs:integer) as xs:boolean { (($arg mod 2) eq 0) }; \n      fn:true() ge local:is-even(17)'
cbcl-boolean-greater-than-003;PRSC Error: Failed to parse query '\n      declare function local:is-even($arg as xs:integer) as xs:boolean { (($arg mod 2) eq 0) }; \n      fn:false() ge local:is-even(17)'
cbcl-boolean-greater-than-004;PRSC Error: Failed to parse query '\n      declare function local:is-even($arg as xs:integer) as xs:boolean { (($arg mod 2) eq 0) }; \n      not(local:is-even(15) gt local:is-even(17))'
cbcl-boolean-greater-than-005;PRSC Error: Failed to parse query '\n      declare function local:is-even($arg as xs:integer) as xs:boolean { (($arg mod 2) eq 0) }; \n      fn:true() gt local:is-even(17)'
cbcl-boolean-greater-than-006;PRSC Error: Failed to parse query '\n      declare function local:is-even($arg as xs:integer) as xs:boolean { (($arg mod 2) eq 0) }; \n      fn:false() gt local:is-even(17)'
cbcl-boolean-greater-than-007;PRSC Error: Failed to parse query '\n      declare function local:is-even($arg as xs:integer) as xs:boolean { (($arg mod 2) eq 0) }; \n      local:is-even(17) ge fn:true()'
cbcl-boolean-greater-than-008;PRSC Error: Failed to parse query '\n      declare function local:is-even($arg as xs:integer) as xs:boolean { (($arg mod 2) eq 0) }; \n      local:is-even(17) ge fn:false()'
cbcl-boolean-greater-than-009;PRSC Error: Failed to parse query 'declare function local:is-even($arg as xs:integer) as xs:boolean { (($arg mod 2) eq 0) }; \n      local:is-even(17) gt fn:true()'
cbcl-boolean-greater-than-010;PRSC Error: Failed to parse query '\n      declare function local:is-even($arg as xs:integer) as xs:boolean { (($arg mod 2) eq 0) }; \n      local:is-even(17) gt fn:false()'
cbcl-boolean-less-than-001;PRSC Error: Failed to parse query 'declare function local:is-even($arg as xs:integer) as xs:boolean { (($arg mod 2) eq 0) }; \n      not(local:is-even(15) le local:is-even(17))'
cbcl-boolean-less-than-002;PRSC Error: Failed to parse query 'declare function local:is-even($arg as xs:integer) as xs:boolean { (($arg mod 2) eq 0) }; \n      fn:true() le local:is-even(17)'
cbcl-boolean-less-than-003;PRSC Error: Failed to parse query 'declare function local:is-even($arg as xs:integer) as xs:boolean { (($arg mod 2) eq 0) }; \n      fn:false() le local:is-even(17)'
cbcl-boolean-less-than-004;PRSC Error: Failed to parse query 'declare function local:is-even($arg as xs:integer) as xs:boolean { (($arg mod 2) eq 0) }; \n      not(local:is-even(15) lt local:is-even(17))'
cbcl-boolean-less-than-005;PRSC Error: Failed to parse query 'declare function local:is-even($arg as xs:integer) as xs:boolean { (($arg mod 2) eq 0) }; \n      fn:true() lt local:is-even(17)'
cbcl-boolean-less-than-006;PRSC Error: Failed to parse query 'declare function local:is-even($arg as xs:integer) as xs:boolean { (($arg mod 2) eq 0) }; \n      fn:false() lt local:is-even(17)'
cbcl-boolean-less-than-007;PRSC Error: Failed to parse query 'declare function local:is-even($arg as xs:integer) as xs:boolean { (($arg mod 2) eq 0) }; \n      local:is-even(17) le fn:true()'
cbcl-boolean-less-than-008;PRSC Error: Failed to parse query 'declare function local:is-even($arg as xs:integer) as xs:boolean { (($arg mod 2) eq 0) }; \n      local:is-even(17) le fn:false()'
cbcl-boolean-less-than-009;PRSC Error: Failed to parse query 'declare function local:is-even($arg as xs:integer) as xs:boolean { (($arg mod 2) eq 0) }; \n      local:is-even(17) lt fn:true()'
cbcl-boolean-less-than-010;PRSC Error: Failed to parse query 'declare function local:is-even($arg as xs:integer) as xs:boolean { (($arg mod 2) eq 0) }; \n      local:is-even(17) lt fn:false()'
cbcl-case-anyUri-001;Type casting to XsAnyUri has not been implemented yet.
cbcl-cast-byte-001;Expected error code: FORG0001. Query succeeded with result: 128
cbcl-cast-byte-002;Expected error code: FORG0001. Query succeeded with result: -129
cbcl-cast-byte-003;Expected error code: FORG0001. Query succeeded with result: 128
cbcl-cast-byte-004;Expected error code: FORG0001. Query succeeded with result: -129
cbcl-cast-date-001;Expected XPathException with code FODT0001, but got The string '-25252734927766555-06-06' is not a valid AllXsd value.
cbcl-cast-date-002;Expected XPathException with code FODT0001, but got The string '25252734927766555-07-29' is not a valid AllXsd value.
cbcl-cast-date-003;Expected XPathException with code FODT0001, but got The string '18446744073709551616-05-15' is not a valid AllXsd value.
cbcl-cast-date-004;Expected executing the XPath '"18446744073709551616-QQ-15" cast as xs:date' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPathException with code FORG0001, but got The string '18446744073709551616-QQ-15' is not a valid AllXsd value.
cbcl-cast-dateTime-001;Expected XPathException with code FODT0001, but got The string '-25252734927766555-06-06T00:00:00Z' is not a valid AllXsd value.
cbcl-cast-dateTime-002;Expected XPathException with code FODT0001, but got The string '25252734927766555-07-29T00:00:00Z' is not a valid AllXsd value.
cbcl-cast-dateTime-003;Expected XPathException with code FODT0001, but got The string '18446744073709551616-05-15T16:15:00' is not a valid AllXsd value.
cbcl-cast-dateTime-004;Expected executing the XPath '"18446744073709551616-QQ-15T16:15:00" cast as xs:dateTime' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPathException with code FORG0001, but got The string '18446744073709551616-QQ-15T16:15:00' is not a valid AllXsd value.
cbcl-cast-dayTimeDuration-001;Expected executing the XPath '"P11768614336404564651D" cast as xs:dayTimeDuration' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPathException with code FODT0002, but got Value was either too large or too small for an Int32.
cbcl-cast-dayTimeDuration-002;Expected XPathException with code FODT0002, but got Value was either too large or too small for an Int32.
cbcl-cast-decimal-001;Expected executing the XPath '1.7976931348623157E+308 cast as xs:decimal' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: FOCA0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '1.7976931348623157E+308 cast as xs:decimal'
cbcl-cast-decimal-002;Expected executing the XPath '-1.7976931348623157E+308 cast as xs:decimal' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: FOCA0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '-1.7976931348623157E+308 cast as xs:decimal'
cbcl-cast-derived-001;PRSC Error: Failed to parse query '\n        import schema namespace derivedType="http://www.w3.org/XQueryTest/derivedTypes";\n        16 cast as derivedType:integer, \n        16 cast as derivedType:double, \n        16 cast as derivedType:decimal, \n        16 cast as derivedType:float, \n        "aaaaaaaaaaaa" cast as derivedType:base64Binary, \n        "aaaaaaaaaa" cast as derivedType:hexBinary, \n        "http://news.bbc.co.uk/" cast as derivedType:anyURI, \n        true() cast as derivedType:boolean, \n        xs:dateTime("2001-01-01T09:00:00") cast as derivedType:dateTime, \n        xs:time("10:00:00") cast as derivedType:time, \n        "valid value 1" cast as derivedType:string, \n        "value1" cast as derivedType:QName, \n        "derivedType:value1" cast as derivedType:NOTATION,\n         "---01" cast as derivedType:gDay, \n         "--12-25" cast as derivedType:gMonthDay, \n         "--12" cast as derivedType:gMonth, \n         "2004" cast as derivedType:gYear, \n         "2004-02" cast as derivedType:gYearMonth, \n         "P1D" cast as derivedType:duration, \n         "1" cast as derivedType:positiveInteger, \n         "-1" cast as derivedType:nonPositiveInteger, \n         "1" cast as derivedType:nonNegativeInteger, \n         "-1" cast as derivedType:negativeInteger, \n         "1" cast as derivedType:long, \n         "1" cast as derivedType:short, \n         "1" cast as derivedType:unsignedByte, \n         "1" cast as derivedType:byte, \n         "1" cast as derivedType:unsignedInt, \n         "1" cast as derivedType:unsignedLong, \n         "1" cast as derivedType:unsignedShort\n      '
cbcl-cast-duration-001;Expected XPathException with code FODT0002, but got Value was either too large or too small for an Int32.
cbcl-cast-duration-002;Expected XPathException with code FODT0002, but got Value was either too large or too small for an Int32.
cbcl-cast-entity-001;Atomic Value for XsNcName is not implemented yet.
cbcl-cast-entity-002;Expected error code: FORG0001. Found error code: XPST0017 with error message: The function fn:current-time with arity 0 is not registered.
cbcl-cast-gYear-001;Expected XPathException with code FODT0001, but got The string '99999999999999999999999999999' is not a valid AllXsd value.
cbcl-cast-gYear-002;Expected XPathException with code FORG0001, but got The string '0000' is not a valid AllXsd value.
cbcl-cast-gYear-003;Expected XPathException with code FORG0001, but got The string '-0000' is not a valid AllXsd value.
cbcl-cast-gYear-003a;Expected executing the XPath '"-0000" cast as xs:gYear' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPathException with code FODT0001, but got The string '-0000' is not a valid AllXsd value.
cbcl-cast-gYearMonth-001;Expected XPathException with code FODT0001, but got The string '99999999999999999999999999999-01' is not a valid AllXsd value.
cbcl-cast-gYearMonth-002;Expected XPathException with code FORG0001, but got The string '99999999999999999999999999999-XX' is not a valid AllXsd value.
cbcl-cast-gYearMonth-003;Expected XPathException with code FORG0001, but got The string '0000-05' is not a valid AllXsd value.
cbcl-cast-gYearMonth-004;The string '-0000-05' is not a valid AllXsd value.
cbcl-cast-id-001;Atomic Value for XsNcName is not implemented yet.
cbcl-cast-id-002;Expected error code: FORG0001. Found error code: XPST0017 with error message: The function fn:current-time with arity 0 is not registered.
cbcl-cast-idref-001;Atomic Value for XsNcName is not implemented yet.
cbcl-cast-idref-002;Expected error code: FORG0001. Found error code: XPST0017 with error message: The function fn:current-time with arity 0 is not registered.
cbcl-cast-int-001;Expected error code: FORG0001. Query succeeded with result: 2147483648
cbcl-cast-int-002;Expected error code: FORG0001. Query succeeded with result: -2147483649
cbcl-cast-int-003;Expected error code: FORG0001. Query succeeded with result: 2147483648
cbcl-cast-int-004;Expected error code: FORG0001. Query succeeded with result: -2147483649
cbcl-cast-integer-001;Expected executing the XPath '1.7976931348623157E+308 cast as xs:integer' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: FOCA0003. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '1.7976931348623157E+308 cast as xs:integer'
cbcl-cast-integer-002;Expected executing the XPath '-1.7976931348623157E+308 cast as xs:integer' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: FOCA0003. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '-1.7976931348623157E+308 cast as xs:integer'
cbcl-cast-integer-003;Expected executing the XPath 'xs:float('3.402823e38') cast as xs:integer' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: FOCA0003. Found error code: FOCA0001 with error message: Overflow when creating a Int64 from 3.4028230607370965E+38.
cbcl-cast-integer-004;Expected executing the XPath 'xs:float('-3.402823e38') cast as xs:integer' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: FOCA0003. Found error code: FOCA0001 with error message: Overflow when creating a Int64 from -3.4028230607370965E+38.
cbcl-cast-language-001;Atomic Value for XsLanguage is not implemented yet.
cbcl-cast-long-001;Expected executing the XPath 'xs:long(9223372036854775808)' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: FORG0001. Found error code: FOCA0001 with error message: Overflow when creating a Int64 from 9223372036854775808.
cbcl-cast-long-002;Expected executing the XPath 'xs:long(-9223372036854775809)' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: FORG0001. Found error code: FOCA0001 with error message: Overflow when creating a Int64 from 9223372036854775809.
cbcl-cast-long-003;Expected error code: FORG0001. Found error code: FOCA0001 with error message: Overflow when creating a Int64 from 9223372036854775808.
cbcl-cast-long-004;Expected error code: FORG0001. Found error code: FOCA0001 with error message: Overflow when creating a Int64 from -9223372036854775809.
cbcl-cast-name-001;Atomic Value for XsNcName is not implemented yet.
cbcl-cast-name-002;Expected error code: FORG0001. Found error code: XPST0017 with error message: The function fn:current-time with arity 0 is not registered.
cbcl-cast-ncname-001;Atomic Value for XsId is not implemented yet.
cbcl-cast-ncname-002;Expected error code: FORG0001. Found error code: XPST0017 with error message: The function fn:current-time with arity 0 is not registered.
cbcl-cast-negativeInteger-001;Expected error code: FORG0001. Query succeeded with result: 0
cbcl-cast-negativeInteger-002;Expected error code: FORG0001. Query succeeded with result: 0
cbcl-cast-nmtoken-001;Atomic Value for XsToken is not implemented yet.
cbcl-cast-nmtoken-001b;Atomic Value for XsToken is not implemented yet.
cbcl-cast-nmtoken-002;Atomic Value for XsNmToken is not implemented yet.
cbcl-cast-nonNegativeInteger-001;Expected error code: FORG0001. Query succeeded with result: -1
cbcl-cast-nonNegativeInteger-002;Expected error code: FORG0001. Query succeeded with result: -1
cbcl-cast-nonPositiveInteger-001;Expected error code: FORG0001. Query succeeded with result: 1
cbcl-cast-nonPositiveInteger-002;Expected error code: FORG0001. Query succeeded with result: 1
cbcl-cast-normalizedString-001;Atomic Value for XsNormalizedString is not implemented yet.
cbcl-cast-normalizedString-001b;Atomic Value for XsNormalizedString is not implemented yet.
cbcl-cast-positiveInteger-001;Expected error code: FORG0001. Query succeeded with result: 0
cbcl-cast-positiveInteger-002;Expected error code: FORG0001. Query succeeded with result: 0
cbcl-cast-short-001;Expected error code: FORG0001. Query succeeded with result: 32768
cbcl-cast-short-002;Expected error code: FORG0001. Query succeeded with result: -32769
cbcl-cast-short-003;Expected error code: FORG0001. Query succeeded with result: 32768
cbcl-cast-short-004;Expected error code: FORG0001. Query succeeded with result: -32769
cbcl-cast-token-001;Atomic Value for XsToken is not implemented yet.
cbcl-cast-token-001b;Atomic Value for XsToken is not implemented yet.
cbcl-cast-unsignedByte-001;Expected error code: FORG0001. Query succeeded with result: 256
cbcl-cast-unsignedByte-002;Expected error code: FORG0001. Query succeeded with result: -1
cbcl-cast-unsignedByte-003;Expected error code: FORG0001. Query succeeded with result: 256
cbcl-cast-unsignedByte-004;Expected error code: FORG0001. Query succeeded with result: -1
cbcl-cast-unsignedInt-001;Expected error code: FORG0001. Query succeeded with result: 4294967296
cbcl-cast-unsignedInt-002;Expected error code: FORG0001. Query succeeded with result: -1
cbcl-cast-unsignedInt-003;Expected error code: FORG0001. Query succeeded with result: 4294967296
cbcl-cast-unsignedInt-004;Expected error code: FORG0001. Query succeeded with result: -1
cbcl-cast-unsignedLong-001;Expected executing the XPath 'xs:unsignedLong(18446744073709551616)' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: FORG0001. Found error code: FOCA0001 with error message: Overflow when creating a Int64 from 18446744073709551616.
cbcl-cast-unsignedLong-002;Expected error code: FORG0001. Query succeeded with result: -1
cbcl-cast-unsignedLong-003;Expected error code: FORG0001. Found error code: FOCA0001 with error message: Overflow when creating a Int64 from 18446744073709551616.
cbcl-cast-unsignedLong-004;Expected error code: FORG0001. Query succeeded with result: -1
cbcl-cast-unsignedShort-001;Expected error code: FORG0001. Query succeeded with result: 65536
cbcl-cast-unsignedShort-002;Expected error code: FORG0001. Query succeeded with result: -1
cbcl-cast-unsignedShort-003;Expected error code: FORG0001. Query succeeded with result: 65536
cbcl-cast-unsignedShort-004;Expected error code: FORG0001. Query succeeded with result: -1
cbcl-cast-yearMonthDuration-001;Expected XPathException with code FODT0002, but got Value was either too large or too small for an Int32.
cbcl-cast-yearMonthDuration-002;Expected XPathException with code FODT0002, but got Value was either too large or too small for an Int32.
cbcl-castable-byte-001;PRSC Error: Failed to parse query '128 castable as xs:byte'
cbcl-castable-byte-002;PRSC Error: Failed to parse query '-129 castable as xs:byte'
cbcl-castable-byte-003;PRSC Error: Failed to parse query '"128" castable as xs:byte'
cbcl-castable-byte-004;PRSC Error: Failed to parse query '"-129" castable as xs:byte'
cbcl-castable-date-001;PRSC Error: Failed to parse query '"-25252734927766555-06-06" castable as xs:date'
cbcl-castable-date-002;PRSC Error: Failed to parse query '"25252734927766555-07-29" castable as xs:date'
cbcl-castable-dateTime-001;PRSC Error: Failed to parse query '"-25252734927766555-06-06T00:00:00Z" castable as xs:dateTime'
cbcl-castable-dateTime-002;PRSC Error: Failed to parse query '"25252734927766555-07-29T00:00:00Z" castable as xs:dateTime'
cbcl-castable-dayTimeDuration-001;PRSC Error: Failed to parse query '"P11768614336404564651D" castable as xs:dayTimeDuration'
cbcl-castable-dayTimeDuration-002;PRSC Error: Failed to parse query '"-P11768614336404564651D" castable as xs:duration'
cbcl-castable-decimal-001;PRSC Error: Failed to parse query 'xs:float('NaN') castable as xs:decimal'
cbcl-castable-decimal-002;PRSC Error: Failed to parse query 'xs:float('-INF') castable as xs:decimal'
cbcl-castable-decimal-003;PRSC Error: Failed to parse query 'xs:float('INF') castable as xs:decimal'
cbcl-castable-decimal-004;PRSC Error: Failed to parse query 'xs:double('NaN') castable as xs:decimal'
cbcl-castable-decimal-005;PRSC Error: Failed to parse query 'xs:double('-INF') castable as xs:decimal'
cbcl-castable-decimal-006;PRSC Error: Failed to parse query 'xs:double('INF') castable as xs:decimal'
cbcl-castable-decimal-007;Expected executing the XPath '1.7976931348623157E+308 castable as xs:decimal' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '1.7976931348623157E+308 castable as xs:decimal'
cbcl-castable-decimal-008;Expected executing the XPath '-1.7976931348623157E+308 castable as xs:decimal' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '-1.7976931348623157E+308 castable as xs:decimal'
cbcl-castable-decimal-009;Expected executing the XPath 'xs:float('3.402823e38') castable as xs:decimal' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'xs:float('3.402823e38') castable as xs:decimal'
cbcl-castable-decimal-010;Expected executing the XPath 'xs:float('-3.402823e38') castable as xs:decimal' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'xs:float('-3.402823e38') castable as xs:decimal'
cbcl-castable-duration-001;PRSC Error: Failed to parse query '"-P768614336404564651Y" castable as xs:duration'
cbcl-castable-duration-002;PRSC Error: Failed to parse query '"P768614336404564651Y" castable as xs:duration'
cbcl-castable-ENTITIES-001;PRSC Error: Failed to parse query '\n        "a b c" castable as xs:ENTITIES'
cbcl-castable-ENTITIES-002;PRSC Error: Failed to parse query '\n        "1 2 3" castable as xs:ENTITIES'
cbcl-castable-ENTITIES-003;PRSC Error: Failed to parse query '\n        "" castable as xs:ENTITIES'
cbcl-castable-ENTITIES-004;PRSC Error: Failed to parse query '\n        xs:untypedAtomic("a b c") castable as xs:ENTITIES'
cbcl-castable-ENTITIES-005;PRSC Error: Failed to parse query '\n        xs:untypedAtomic("1 2 3") castable as xs:ENTITIES'
cbcl-castable-ENTITIES-006;PRSC Error: Failed to parse query '\n        xs:untypedAtomic("") castable as xs:ENTITIES'
cbcl-castable-ENTITIES-007;PRSC Error: Failed to parse query '\n        (xs:ENTITY("a"), xs:ENTITY("B"), xs:ENTITY("C")) castable as xs:ENTITIES'
cbcl-castable-ENTITIES-008;PRSC Error: Failed to parse query '\n        () castable as xs:ENTITIES'
cbcl-castable-ENTITIES-009;PRSC Error: Failed to parse query '\n        xs:ENTITY("a") castable as xs:ENTITIES'
cbcl-castable-ENTITIES-010;PRSC Error: Failed to parse query '\n        xs:ENTITIES("a b c") castable as xs:ENTITIES'
cbcl-castable-ENTITIES-011;PRSC Error: Failed to parse query '\n        "a b c" castable as xs:ENTITIES?'
cbcl-castable-ENTITIES-012;PRSC Error: Failed to parse query '\n        "1 2 3" castable as xs:ENTITIES?'
cbcl-castable-ENTITIES-013;PRSC Error: Failed to parse query '\n        "" castable as xs:ENTITIES?'
cbcl-castable-ENTITIES-014;PRSC Error: Failed to parse query '\n        xs:untypedAtomic("a b c") castable as xs:ENTITIES?'
cbcl-castable-ENTITIES-015;PRSC Error: Failed to parse query '\n        xs:untypedAtomic("1 2 3") castable as xs:ENTITIES?'
cbcl-castable-ENTITIES-016;PRSC Error: Failed to parse query '\n        xs:untypedAtomic("") castable as xs:ENTITIES?'
cbcl-castable-ENTITIES-017;PRSC Error: Failed to parse query '\n        (xs:ENTITY("a"), xs:ENTITY("B"), xs:ENTITY("C")) castable as xs:ENTITIES?'
cbcl-castable-ENTITIES-018;PRSC Error: Failed to parse query '\n        () castable as xs:ENTITIES?'
cbcl-castable-ENTITIES-019;PRSC Error: Failed to parse query '\n        xs:ENTITY("a") castable as xs:ENTITIES?'
cbcl-castable-ENTITIES-020;PRSC Error: Failed to parse query '\n        xs:ENTITIES("a b c") castable as xs:ENTITIES?'
cbcl-castable-gYear-001;PRSC Error: Failed to parse query '"99999999999999999999999999999" castable as xs:gYear'
cbcl-castable-gYear-002;Expected executing the XPath '"0000" castable as xs:gYear' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '"0000" castable as xs:gYear'
cbcl-castable-gYear-003;Expected executing the XPath '"-0000" castable as xs:gYear' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '"-0000" castable as xs:gYear'
cbcl-castable-gYearMonth-001;PRSC Error: Failed to parse query '"99999999999999999999999999999-01" castable as xs:gYearMonth'
cbcl-castable-gYearMonth-002;PRSC Error: Failed to parse query '"99999999999999999999999999999-XX" castable as xs:gYearMonth'
cbcl-castable-gYearMonth-003;Expected executing the XPath '"0000-05" castable as xs:gYearMonth' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '"0000-05" castable as xs:gYearMonth'
cbcl-castable-gYearMonth-004;Expected executing the XPath '"-0000-05" castable as xs:gYearMonth' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '"-0000-05" castable as xs:gYearMonth'
cbcl-castable-IDREFS-001;PRSC Error: Failed to parse query '\n        "a b c" castable as xs:IDREFS'
cbcl-castable-IDREFS-002;PRSC Error: Failed to parse query '\n        "1 2 3" castable as xs:IDREFS'
cbcl-castable-IDREFS-003;PRSC Error: Failed to parse query '\n        "" castable as xs:IDREFS'
cbcl-castable-IDREFS-004;PRSC Error: Failed to parse query '\n        xs:untypedAtomic("a b c") castable as xs:IDREFS'
cbcl-castable-IDREFS-005;PRSC Error: Failed to parse query '\n        xs:untypedAtomic("1 2 3") castable as xs:IDREFS'
cbcl-castable-IDREFS-006;PRSC Error: Failed to parse query '\n        xs:untypedAtomic("") castable as xs:IDREFS'
cbcl-castable-IDREFS-007;PRSC Error: Failed to parse query '\n        (xs:IDREF("a"), xs:IDREF("B"), xs:IDREF("C")) castable as xs:IDREFS'
cbcl-castable-IDREFS-008;PRSC Error: Failed to parse query '\n        () castable as xs:IDREFS'
cbcl-castable-IDREFS-009;PRSC Error: Failed to parse query '\n        xs:IDREF("a") castable as xs:IDREFS'
cbcl-castable-IDREFS-010;PRSC Error: Failed to parse query '\n        xs:IDREFS("a b c") castable as xs:IDREFS'
cbcl-castable-IDREFS-011;PRSC Error: Failed to parse query '\n        "a b c" castable as xs:IDREFS?'
cbcl-castable-IDREFS-012;PRSC Error: Failed to parse query '\n        "1 2 3" castable as xs:IDREFS?'
cbcl-castable-IDREFS-013;PRSC Error: Failed to parse query '\n        "" castable as xs:IDREFS?'
cbcl-castable-IDREFS-014;PRSC Error: Failed to parse query '\n        xs:untypedAtomic("a b c") castable as xs:IDREFS?'
cbcl-castable-IDREFS-015;PRSC Error: Failed to parse query '\n        xs:untypedAtomic("1 2 3") castable as xs:IDREFS?'
cbcl-castable-IDREFS-016;PRSC Error: Failed to parse query '\n        xs:untypedAtomic("") castable as xs:IDREFS?'
cbcl-castable-IDREFS-017;PRSC Error: Failed to parse query '\n        (xs:IDREF("a"), xs:IDREF("B"), xs:IDREF("C")) castable as xs:IDREFS?'
cbcl-castable-IDREFS-018;PRSC Error: Failed to parse query '\n        () castable as xs:IDREFS?'
cbcl-castable-IDREFS-019;PRSC Error: Failed to parse query '\n        xs:IDREF("a") castable as xs:IDREFS?'
cbcl-castable-IDREFS-020;PRSC Error: Failed to parse query '\n        xs:IDREFS("a b c") castable as xs:IDREFS?'
cbcl-castable-impure-001;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        xs:date("2001-01-01") castable as s:impureUnionType'
cbcl-castable-impure-002;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        "2001-01-01" castable as s:impureUnionType'
cbcl-castable-impure-003;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        "" castable as s:impureUnionType'
cbcl-castable-impure-004;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        xs:untypedAtomic("2001-01-01") castable as s:impureUnionType'
cbcl-castable-impure-005;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        xs:untypedAtomic("1 2 3") castable as s:impureUnionType'
cbcl-castable-impure-006;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        xs:untypedAtomic("") castable as s:impureUnionType'
cbcl-castable-impure-007;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        (1.1, 1.2, 1.3) castable as s:impureUnionType'
cbcl-castable-impure-008;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        () castable as s:impureUnionType'
cbcl-castable-impure-009;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        xs:decimal("1") castable as s:impureUnionType'
cbcl-castable-impure-010;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        s:impureUnionType("1 2 3") castable as s:impureUnionType'
cbcl-castable-impure-011;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        xs:date("2001-01-01") castable as s:impureUnionType?'
cbcl-castable-impure-012;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        "2001-01-01" castable as s:impureUnionType?'
cbcl-castable-impure-013;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        "" castable as s:impureUnionType?'
cbcl-castable-impure-014;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        xs:untypedAtomic("2001-01-01") castable as s:impureUnionType?'
cbcl-castable-impure-015;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        xs:untypedAtomic("1 2 3") castable as s:impureUnionType?'
cbcl-castable-impure-016;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        xs:untypedAtomic("") castable as s:impureUnionType?'
cbcl-castable-impure-017;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        (1.1, 1.2, 1.3) castable as s:impureUnionType?'
cbcl-castable-impure-018;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        () castable as s:impureUnionType?'
cbcl-castable-impure-019;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        xs:decimal("1") castable as s:impureUnionType?'
cbcl-castable-impure-020;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        s:impureUnionType("1 2 3") castable as s:impureUnionType?'
cbcl-castable-int-001;PRSC Error: Failed to parse query '2147483648 castable as xs:int'
cbcl-castable-int-002;PRSC Error: Failed to parse query '-2147483649 castable as xs:int'
cbcl-castable-int-003;PRSC Error: Failed to parse query '"2147483648" castable as xs:int'
cbcl-castable-int-004;PRSC Error: Failed to parse query '"-2147483649" castable as xs:int'
cbcl-castable-integer-001;Expected executing the XPath '1.7976931348623157E+308 castable as xs:integer' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '1.7976931348623157E+308 castable as xs:integer'
cbcl-castable-integer-002;Expected executing the XPath '-1.7976931348623157E+308 castable as xs:integer' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '-1.7976931348623157E+308 castable as xs:integer'
cbcl-castable-integer-003;Expected executing the XPath 'xs:float('3.402823e38') castable as xs:integer' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'xs:float('3.402823e38') castable as xs:integer'
cbcl-castable-integer-004;Expected executing the XPath 'xs:float('-3.402823e38') castable as xs:integer' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'xs:float('-3.402823e38') castable as xs:integer'
cbcl-castable-language-001;PRSC Error: Failed to parse query 'xs:language('en-gb') castable as xs:language'
cbcl-castable-language-002;PRSC Error: Failed to parse query '1.0 castable as xs:language'
cbcl-castable-language-003;PRSC Error: Failed to parse query ''en-gb' castable as xs:language'
cbcl-castable-language-004;PRSC Error: Failed to parse query '"gobbledygook" castable as xs:language'
cbcl-castable-long-001;Expected executing the XPath '9223372036854775808 castable as xs:long' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '9223372036854775808 castable as xs:long'
cbcl-castable-long-002;Expected executing the XPath '-9223372036854775809 castable as xs:long' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '-9223372036854775809 castable as xs:long'
cbcl-castable-long-003;PRSC Error: Failed to parse query '"9223372036854775808" castable as xs:long'
cbcl-castable-long-004;PRSC Error: Failed to parse query '"-9223372036854775809" castable as xs:long'
cbcl-castable-name-001;PRSC Error: Failed to parse query 'xs:NCName('NCName') castable as xs:Name'
cbcl-castable-name-002;PRSC Error: Failed to parse query 'fn:current-time() castable as xs:Name'
cbcl-castable-name-003;PRSC Error: Failed to parse query ''NCName' castable as xs:Name'
cbcl-castable-name-004;PRSC Error: Failed to parse query ''N A M E' castable as xs:Name'
cbcl-castable-ncname-001;PRSC Error: Failed to parse query 'xs:ID('id') castable as xs:NCName'
cbcl-castable-ncname-002;PRSC Error: Failed to parse query 'fn:current-time() castable as xs:NCName'
cbcl-castable-ncname-003;PRSC Error: Failed to parse query ''NCName' castable as xs:NCName'
cbcl-castable-ncname-004;PRSC Error: Failed to parse query ''NC:Name' castable as xs:NCName'
cbcl-castable-negativeInteger-001;PRSC Error: Failed to parse query '0 castable as xs:negativeInteger'
cbcl-castable-negativeInteger-002;PRSC Error: Failed to parse query '"0" castable as xs:negativeInteger'
cbcl-castable-nmtoken-001;PRSC Error: Failed to parse query 'xs:NMTOKEN('NMTOKEN') castable as xs:NMTOKEN'
cbcl-castable-nmtoken-002;PRSC Error: Failed to parse query '\n        "&#xD;&#xA;&#x9; foobar &#xA;&#xD;&#x9;" castable as xs:NMTOKEN'
cbcl-castable-nmtoken-002b;PRSC Error: Failed to parse query '"\n	 foobar \n\n	" castable as xs:NMTOKEN'
cbcl-castable-NMTOKENS-001;PRSC Error: Failed to parse query '\n        "a b c" castable as xs:NMTOKENS'
cbcl-castable-NMTOKENS-002;PRSC Error: Failed to parse query '\n        "1 ; 2" castable as xs:NMTOKENS'
cbcl-castable-NMTOKENS-003;PRSC Error: Failed to parse query '\n        "" castable as xs:NMTOKENS'
cbcl-castable-NMTOKENS-004;PRSC Error: Failed to parse query '\n        xs:untypedAtomic("a b c") castable as xs:NMTOKENS'
cbcl-castable-NMTOKENS-005;PRSC Error: Failed to parse query '\n        xs:untypedAtomic("1 ; 2") castable as xs:NMTOKENS'
cbcl-castable-NMTOKENS-006;PRSC Error: Failed to parse query '\n        xs:untypedAtomic("") castable as xs:NMTOKENS'
cbcl-castable-NMTOKENS-007;PRSC Error: Failed to parse query '\n        (xs:NMTOKEN("a"), xs:NMTOKEN("B"), xs:NMTOKEN("C")) castable as xs:NMTOKENS'
cbcl-castable-NMTOKENS-008;PRSC Error: Failed to parse query '\n        () castable as xs:NMTOKENS'
cbcl-castable-NMTOKENS-009;PRSC Error: Failed to parse query '\n        xs:NMTOKEN("a") castable as xs:NMTOKENS'
cbcl-castable-NMTOKENS-010;PRSC Error: Failed to parse query '\n        xs:NMTOKENS("a b c") castable as xs:NMTOKENS'
cbcl-castable-NMTOKENS-011;PRSC Error: Failed to parse query '\n        "a b c" castable as xs:NMTOKENS?'
cbcl-castable-NMTOKENS-012;PRSC Error: Failed to parse query '\n        "1 ; 2" castable as xs:NMTOKENS?'
cbcl-castable-NMTOKENS-013;PRSC Error: Failed to parse query '\n        "" castable as xs:NMTOKENS?'
cbcl-castable-NMTOKENS-014;PRSC Error: Failed to parse query '\n        xs:untypedAtomic("a b c") castable as xs:NMTOKENS?'
cbcl-castable-NMTOKENS-015;PRSC Error: Failed to parse query '\n        xs:untypedAtomic("1 ; 2") castable as xs:NMTOKENS?'
cbcl-castable-NMTOKENS-016;PRSC Error: Failed to parse query '\n        xs:untypedAtomic("") castable as xs:NMTOKENS?'
cbcl-castable-NMTOKENS-017;PRSC Error: Failed to parse query '\n        (xs:NMTOKEN("a"), xs:NMTOKEN("B"), xs:NMTOKEN("C")) castable as xs:NMTOKENS?'
cbcl-castable-NMTOKENS-018;PRSC Error: Failed to parse query '\n        () castable as xs:NMTOKENS?'
cbcl-castable-NMTOKENS-019;PRSC Error: Failed to parse query '\n        xs:NMTOKEN("a") castable as xs:NMTOKENS?'
cbcl-castable-NMTOKENS-020;PRSC Error: Failed to parse query '\n        xs:NMTOKENS("a b c") castable as xs:NMTOKENS?'
cbcl-castable-nonNegativeInteger-001;PRSC Error: Failed to parse query '-1 castable as xs:nonNegativeInteger'
cbcl-castable-nonNegativeInteger-002;PRSC Error: Failed to parse query '"-1" castable as xs:nonNegativeInteger'
cbcl-castable-nonNegativeInteger-003;PRSC Error: Failed to parse query '"-00" castable as xs:nonNegativeInteger'
cbcl-castable-nonPositiveInteger-001;PRSC Error: Failed to parse query '1 castable as xs:nonPositiveInteger'
cbcl-castable-nonPositiveInteger-002;PRSC Error: Failed to parse query '"1" castable as xs:nonPositiveInteger'
cbcl-castable-nonPositiveInteger-003;PRSC Error: Failed to parse query '"+00" castable as xs:nonPositiveInteger'
cbcl-castable-positiveInteger-001;PRSC Error: Failed to parse query '0 castable as xs:positiveInteger'
cbcl-castable-positiveInteger-002;PRSC Error: Failed to parse query '"0" castable as xs:positiveInteger'
cbcl-castable-restricted-union-001;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        xs:date("2001-01-01") castable as s:restrictedUnion'
cbcl-castable-restricted-union-002;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        xs:date("1970-01-01") castable as s:restrictedUnion'
cbcl-castable-restricted-union-003;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        "2001-01-01" castable as s:restrictedUnion'
cbcl-castable-restricted-union-004;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        "1970-01-01" castable as s:restrictedUnion'
cbcl-castable-restricted-union-005;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        xs:untypedAtomic("2001-01-01") castable as s:restrictedUnion'
cbcl-castable-restricted-union-006;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        xs:untypedAtomic("1970-01-01") castable as s:restrictedUnion'
cbcl-castable-restricted-union-007;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        xs:gYear("2001") castable as s:restrictedUnion'
cbcl-castable-restricted-union-008;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        xs:gYear("1970") castable as s:restrictedUnion'
cbcl-castable-restricted-union-009;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        () castable as s:restrictedUnion'
cbcl-castable-restricted-union-010;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        s:restrictedUnion("2001-01-01") castable as s:restrictedUnion'
cbcl-castable-restricted-union-011;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        xs:date("2001-01-01") castable as s:restrictedUnion?'
cbcl-castable-restricted-union-012;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        xs:date("1970-01-01") castable as s:restrictedUnion?'
cbcl-castable-restricted-union-013;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        "2001-01-01" castable as s:restrictedUnion?'
cbcl-castable-restricted-union-014;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        "1970-01-01" castable as s:restrictedUnion?'
cbcl-castable-restricted-union-015;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        xs:untypedAtomic("2001-01-01") castable as s:restrictedUnion?'
cbcl-castable-restricted-union-016;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        xs:untypedAtomic("1970-01-01") castable as s:restrictedUnion?'
cbcl-castable-restricted-union-017;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        xs:gYear("2001") castable as s:restrictedUnion?'
cbcl-castable-restricted-union-018;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        xs:gYear("1970") castable as s:restrictedUnion?'
cbcl-castable-restricted-union-019;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        () castable as s:restrictedUnion?'
cbcl-castable-restricted-union-020;PRSC Error: Failed to parse query '\n       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n        s:restrictedUnion("2001-01-01") castable as s:restrictedUnion?'
cbcl-castable-short-001;PRSC Error: Failed to parse query '32768 castable as xs:short'
cbcl-castable-short-002;PRSC Error: Failed to parse query '-32769 castable as xs:short'
cbcl-castable-short-003;PRSC Error: Failed to parse query '"32769" castable as xs:short'
cbcl-castable-short-004;PRSC Error: Failed to parse query '"-32769" castable as xs:short'
cbcl-castable-unsignedByte-001;PRSC Error: Failed to parse query '256 castable as xs:unsignedByte'
cbcl-castable-unsignedByte-002;PRSC Error: Failed to parse query '-1 castable as xs:unsignedByte'
cbcl-castable-unsignedByte-003;PRSC Error: Failed to parse query '"256" castable as xs:unsignedByte'
cbcl-castable-unsignedByte-004;PRSC Error: Failed to parse query '"-1" castable as xs:unsignedByte'
cbcl-castable-unsignedByte-005;PRSC Error: Failed to parse query '"-00" castable as xs:unsignedByte'
cbcl-castable-unsignedInt-001;PRSC Error: Failed to parse query '4294967296 castable as xs:unsignedInt'
cbcl-castable-unsignedInt-002;PRSC Error: Failed to parse query '-1 castable as xs:unsignedInt'
cbcl-castable-unsignedInt-003;PRSC Error: Failed to parse query '"4294967296" castable as xs:unsignedInt'
cbcl-castable-unsignedInt-004;PRSC Error: Failed to parse query '"-1" castable as xs:unsignedInt'
cbcl-castable-unsignedInt-005;PRSC Error: Failed to parse query '"-00" castable as xs:unsignedInt'
cbcl-castable-unsignedLong-001;Expected executing the XPath '18446744073709551616 castable as xs:unsignedLong' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '18446744073709551616 castable as xs:unsignedLong'
cbcl-castable-unsignedLong-002;PRSC Error: Failed to parse query '-1 castable as xs:unsignedLong'
cbcl-castable-unsignedLong-003;PRSC Error: Failed to parse query '"18446744073709551616" castable as xs:unsignedLong'
cbcl-castable-unsignedLong-004;PRSC Error: Failed to parse query '"-1" castable as xs:unsignedLong'
cbcl-castable-unsignedLong-005;PRSC Error: Failed to parse query '"-00" castable as xs:unsignedLong'
cbcl-castable-unsignedShort-001;PRSC Error: Failed to parse query '65536 castable as xs:unsignedShort'
cbcl-castable-unsignedShort-002;PRSC Error: Failed to parse query '-1 castable as xs:unsignedShort'
cbcl-castable-unsignedShort-003;PRSC Error: Failed to parse query '"65536" castable as xs:unsignedShort'
cbcl-castable-unsignedShort-004;PRSC Error: Failed to parse query '"-1" castable as xs:unsignedShort'
cbcl-castable-unsignedShort-005;PRSC Error: Failed to parse query '"-00" castable as xs:unsignedShort'
cbcl-castable-yearMonthDuration-001;PRSC Error: Failed to parse query '"-P768614336404564651Y" castable as xs:yearMonthDuration'
cbcl-castable-yearMonthDuration-002;PRSC Error: Failed to parse query '"P768614336404564651Y" castable as xs:yearMonthDuration'
cbcl-childAxis-001;Expected executing the XPath 'count(<a b="blah"/>/child::attribute(b))' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'count(<a b="blah"/>/child::attribute(b)) = 0'
cbcl-codepoint-equal-001;PRSC Error: Failed to parse query 'declare function local:yes-empty($arg as xs:boolean) as xs:string? { if ($arg) then 'yes' else () }; \n      empty(fn:codepoint-equal( local:yes-empty(fn:false()), local:yes-empty(fn:true()) ) )'
cbcl-codepoint-equal-002;PRSC Error: Failed to parse query 'declare function local:yes-empty($arg as xs:boolean) as xs:string? { if ($arg) then 'yes' else () }; \n      empty(fn:codepoint-equal( local:yes-empty(fn:true()), local:yes-empty(fn:false()) ) )'
cbcl-codepoint-equal-003;PRSC Error: Failed to parse query 'declare function local:yes-no($arg as xs:boolean) as xs:string { if ($arg) then 'yes' else 'no' }; \n      fn:codepoint-equal( local:yes-no(fn:true()), local:yes-no(fn:false()) ) = false()'
cbcl-codepoint-equal-004;PRSC Error: Failed to parse query 'declare function local:yes-empty($arg as xs:boolean) as xs:string? { if ($arg) then 'yes' else () }; \n      boolean(fn:codepoint-equal( local:yes-empty(fn:true()), local:yes-empty(fn:false()) ) )'
cbcl-codepoint-equal-005;PRSC Error: Failed to parse query 'declare function local:yes-empty($arg as xs:boolean) as xs:string? { if ($arg) then 'yes' else () }; \n      boolean(fn:codepoint-equal( local:yes-empty(fn:false()), local:yes-empty(fn:true()) ) )'
cbcl-codepoint-equal-006;PRSC Error: Failed to parse query 'declare function local:yes-no($arg as xs:boolean) as xs:string { if ($arg) then 'yes' else 'no' }; \n      fn:index-of( (fn:true(), fn:false()), fn:codepoint-equal( local:yes-no(fn:false()), local:yes-no(fn:true()) ) )'
cbcl-codepoints-to-string-001;Expected error code: FOCH0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:test($test as xs:integer) as xs:integer? { \n          if ($test = 1) then ( 0 ) else if ($test = 2) then ( 9 ) else if ($test = 3) then ( 13 ) else if ($test = 4) then ( 16 ) else () \n        }; \n        fn:codepoints-to-string( local:test(1) to 32 )'
cbcl-codepoints-to-string-002;Expected error code: FOCH0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:test($test as xs:integer) as xs:integer? { \n          if ($test = 1) then ( 0 ) else if ($test = 2) then ( 9 ) else if ($test = 3) then ( 13 ) else if ($test = 4) then ( 16 ) else () \n        }; \n        fn:codepoints-to-string( local:test(2) to 32 )'
cbcl-codepoints-to-string-003;Expected error code: FOCH0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      declare function local:test($test as xs:integer) as xs:integer? { \n        if ($test = 1) then ( 0 ) else if ($test = 2) then ( 9 ) else if ($test = 3) then ( 13 )else if ($test = 4) then ( 16 ) else () \n      }; \n      fn:codepoints-to-string( local:test(3) to 32 )'
cbcl-codepoints-to-string-004;Expected error code: FOCH0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:test($test as xs:integer) as xs:integer? { \n        if ($test = 1) then ( 0 ) else if ($test = 2) then ( 9 ) else if ($test = 3) then ( 13 ) else if ($test = 4) then ( 16 ) else () \n      }; \n      fn:codepoints-to-string( local:test(4) to 32 )'
cbcl-codepoints-to-string-017;Expected XPath for $x in 32 to 64 return boolean(codepoints-to-string($x to $x + 10)) to resolve to true true true true true true true true true true true true true true true true true true true true true true true true true true true true true true true true true, but instead got True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True
cbcl-codepoints-to-string-020;Expected XPath for $x in 65 to 75 return boolean(codepoints-to-string($x[. mod 2 = 0] to ($x+9)[. mod 2 = 0])) to resolve to false false false false false false false false false false false, but instead got False False False False False False False False False False False
cbcl-codepoints-to-string-021;Expected executing the XPath 'let $y := 65536*65536 return for $x in $y to $y+10 return codepoints-to-string(65 to $x)' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPathException with code FOCH0001, but got Value was either too large or too small for an Int32.
cbcl-codepoints-to-string-022;Expected XPathException with code FOCH0001, but got Value was either too large or too small for an Int32.
cbcl-codepoints-to-string-026;Expected XPath for $x in 13 to 13 return codepoints-to-string($x to $x) to resolve to <empty string>, but instead got 
cbcl-constr-compattr-001;Expected error code: XQDY0044. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'for $a in attribute { fn:QName("http://www.w3.org/2000/xmlns/", "namespace:foo") } { "bar" } return name($a)'
cbcl-constr-compattr-002;Expected error code: XQDY0044. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'for $a in attribute { fn:QName("http://www.example.com/", "xmlns:foo") } { "bar" } return name($a)'
cbcl-constr-compattr-003;Expected error code: XQDY0044. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'for $a in attribute { "xmlns" } { "bar" } return name($a)'
cbcl-constr-compattr-005;Expected error code: XQDY0044. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	for $a in attribute { fn:QName("http://www.example.com/", "xml:foo") } { "bar" } \n      	return name($a)\n      '
cbcl-constr-compattr-006;Expected error code: XQDY0044. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	for $a in attribute { fn:QName("http://www.w3.org/XML/1998/namespace", "sgml:foo") } { "bar" } \n      	return name($a)\n      '
cbcl-constr-compattr-007;PRSC Error: Failed to parse query '\n      	<element xmlns:sgml="http://www.example.com/other"> { \n      		for $a in attribute { fn:QName("http://www.example.com/", "sgml:foo") } { } \n      		return concat(name($a), "=", namespace-uri($a)) } \n      	</element>\n      '
cbcl-constr-compattr-008;PRSC Error: Failed to parse query '\n      	declare function local:factorial($arg as xs:integer) as xs:integer { \n      		if ($arg le 1) then 1 else $arg * local:factorial($arg - 1) \n      	}; \n      	<element> { attribute { fn:QName("http://www.example.com/", "sgml:foo") } { local:factorial(5) } } </element>\n      '
cbcl-constr-compattr-009;PRSC Error: Failed to parse query '\n      	declare function local:even-range($arg as xs:integer) as xs:integer* { (1 to $arg)[. mod 2 = 9] }; \n      	<element> { attribute { 'attr' } { local:even-range(0) } } </element>\n      '
cbcl-constr-compcomment-001;Expected error code: XQDY0072. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<element> { comment { '-', '-' } } </element>'
cbcl-constr-compcomment-002;Expected error code: XQDY0072. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	declare function local:tag($arg) as element() { element { 'tag' } { $arg } }; \n      	<element> { comment { 'comment', local:tag('--') } } </element>\n      '
cbcl-constr-comppi-001;Expected error code: XQDY0026. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	<element> { processing-instruction { 'pi' } { <element>?&gt;</element> } } </element>\n      '
cbcl-constr-comppi-002;Expected error code: XQDY0026. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	declare function local:tag($arg) as element() { element { 'tag' } { $arg } }; \n      	<element> { processing-instruction { 'pi' } { "content", local:tag('?&gt;') } } </element>\n      '
cbcl-contains-001;No collations are supported
cbcl-contains-002;No collations are supported
cbcl-contains-003;No collations are supported
cbcl-count-002;PRSC Error: Failed to parse query 'declare function local:generate($arg as xs:integer?) { if ($arg = 0) then (1, 2, 3) else $arg }; fn:count( ( (), local:generate( () ), local:generate( 0 ), (1 to 10000000), local:generate( () ), local:generate(1)) )'
cbcl-count-003;The function year-from-date with arity 1 is not registered.
cbcl-count-005;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) lt 25'
cbcl-count-006;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) le 25'
cbcl-count-007;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) eq 25'
cbcl-count-008;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) ge 25'
cbcl-count-009;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) gt 25'
cbcl-count-010;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) ne 25'
cbcl-count-011;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(count(local:primes(100)) lt 25)'
cbcl-count-012;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(count(local:primes(100)) le 25)'
cbcl-count-013;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(count(local:primes(100)) eq 25)'
cbcl-count-014;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(count(local:primes(100)) ge 25)'
cbcl-count-015;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(count(local:primes(100)) gt 25)'
cbcl-count-016;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(count(local:primes(100)) ne 25)'
cbcl-count-017;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; 25 lt count(local:primes(100))'
cbcl-count-018;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; 25 le count(local:primes(100))'
cbcl-count-019;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; 25 eq count(local:primes(100))'
cbcl-count-020;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; 25 ge count(local:primes(100))'
cbcl-count-021;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; 25 gt count(local:primes(100))'
cbcl-count-022;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; 25 ne count(local:primes(100))'
cbcl-count-023;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(25 lt count(local:primes(100)))'
cbcl-count-024;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(25 le count(local:primes(100)))'
cbcl-count-025;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(25 eq count(local:primes(100)))'
cbcl-count-026;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(25 ge count(local:primes(100)))'
cbcl-count-027;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(25 gt count(local:primes(100)))'
cbcl-count-028;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(25 ne count(local:primes(100)))'
cbcl-count-029;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:integer) { $n * $n }; count(local:primes(100)) lt local:square(5)'
cbcl-count-030;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:integer) { $n * $n }; count(local:primes(100)) le local:square(5)'
cbcl-count-031;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:integer) { $n * $n }; count(local:primes(100)) eq local:square(5)'
cbcl-count-032;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:integer) { $n * $n }; count(local:primes(100)) ge local:square(5)'
cbcl-count-033;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:integer) { $n * $n }; count(local:primes(100)) gt local:square(5)'
cbcl-count-034;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:integer) { $n * $n }; count(local:primes(100)) ne local:square(5)'
cbcl-count-035;PRSC Error: Failed to parse query 'declare function local:primes($s as xs:integer, $n as xs:integer) { let $start := if ($s lt 2) then 2 else $s return for $i in $s to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(2, 100)) lt count(local:primes(100, 200))'
cbcl-count-036;PRSC Error: Failed to parse query 'declare function local:primes($s as xs:integer, $n as xs:integer) { let $start := if ($s lt 2) then 2 else $s return for $i in $s to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(2, 100)) le count(local:primes(100, 200))'
cbcl-count-037;PRSC Error: Failed to parse query 'declare function local:primes($s as xs:integer, $n as xs:integer) { let $start := if ($s lt 2) then 2 else $s return for $i in $s to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(2, 100)) eq count(local:primes(100, 200))'
cbcl-count-038;PRSC Error: Failed to parse query 'declare function local:primes($s as xs:integer, $n as xs:integer) { let $start := if ($s lt 2) then 2 else $s return for $i in $s to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(2, 100)) ge count(local:primes(100, 200))'
cbcl-count-039;PRSC Error: Failed to parse query 'declare function local:primes($s as xs:integer, $n as xs:integer) { let $start := if ($s lt 2) then 2 else $s return for $i in $s to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(2, 100)) gt count(local:primes(100, 200))'
cbcl-count-040;PRSC Error: Failed to parse query 'declare function local:primes($s as xs:integer, $n as xs:integer) { let $start := if ($s lt 2) then 2 else $s return for $i in $s to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(2, 100)) ne count(local:primes(100, 200))'
cbcl-count-041;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) lt -1'
cbcl-count-042;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) le -1'
cbcl-count-043;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) eq -1'
cbcl-count-044;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) ge -1'
cbcl-count-045;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) gt -1'
cbcl-count-046;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) ne -1'
cbcl-count-047;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:integer) { $n * $n }; count(local:primes(100)) lt -local:square(5)'
cbcl-count-048;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:integer) { $n * $n }; count(local:primes(100)) le -local:square(5)'
cbcl-count-049;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:integer) { $n * $n }; count(local:primes(100)) eq -local:square(5)'
cbcl-count-050;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:integer) { $n * $n }; count(local:primes(100)) ge -local:square(5)'
cbcl-count-051;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:integer) { $n * $n }; count(local:primes(100)) gt -local:square(5)'
cbcl-count-052;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:integer) { $n * $n }; count(local:primes(100)) ne -local:square(5)'
cbcl-count-053;PRSC Error: Failed to parse query 'declare function local:primes($s as xs:integer, $n as xs:integer) { let $start := if ($s lt 2) then 2 else $s return for $i in $s to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(count(local:primes(2, 100)) lt count(local:primes(100, 200)))'
cbcl-count-054;PRSC Error: Failed to parse query 'declare function local:primes($s as xs:integer, $n as xs:integer) { let $start := if ($s lt 2) then 2 else $s return for $i in $s to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(count(local:primes(2, 100)) le count(local:primes(100, 200)))'
cbcl-count-055;PRSC Error: Failed to parse query 'declare function local:primes($s as xs:integer, $n as xs:integer) { let $start := if ($s lt 2) then 2 else $s return for $i in $s to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(count(local:primes(2, 100)) eq count(local:primes(100, 200)))'
cbcl-count-056;PRSC Error: Failed to parse query 'declare function local:primes($s as xs:integer, $n as xs:integer) { let $start := if ($s lt 2) then 2 else $s return for $i in $s to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(count(local:primes(2, 100)) ge count(local:primes(100, 200)))'
cbcl-count-057;PRSC Error: Failed to parse query 'declare function local:primes($s as xs:integer, $n as xs:integer) { let $start := if ($s lt 2) then 2 else $s return for $i in $s to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(count(local:primes(2, 100)) gt count(local:primes(100, 200)))'
cbcl-count-058;PRSC Error: Failed to parse query 'declare function local:primes($s as xs:integer, $n as xs:integer) { let $start := if ($s lt 2) then 2 else $s return for $i in $s to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(count(local:primes(2, 100)) ne count(local:primes(100, 200)))'
cbcl-count-059;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) lt 25.5'
cbcl-count-060;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) le 25.5'
cbcl-count-061;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) eq 25.5'
cbcl-count-062;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) ge 25.5'
cbcl-count-063;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) gt 25.5'
cbcl-count-064;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) ne 25.5'
cbcl-count-065;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(count(local:primes(100)) lt 25.5)'
cbcl-count-066;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(count(local:primes(100)) le 25.5)'
cbcl-count-067;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(count(local:primes(100)) eq 25.5)'
cbcl-count-068;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(count(local:primes(100)) ge 25.5)'
cbcl-count-069;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(count(local:primes(100)) gt 25.5)'
cbcl-count-070;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(count(local:primes(100)) ne 25.5)'
cbcl-count-071;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; 24.5 lt count(local:primes(100))'
cbcl-count-072;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; 24.5 le count(local:primes(100))'
cbcl-count-073;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; 24.5 eq count(local:primes(100))'
cbcl-count-074;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; 24.5 ge count(local:primes(100))'
cbcl-count-075;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; 24.5 gt count(local:primes(100))'
cbcl-count-076;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; 24.5 ne count(local:primes(100))'
cbcl-count-077;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(24.5 lt count(local:primes(100)))'
cbcl-count-078;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(24.5 le count(local:primes(100)))'
cbcl-count-079;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(24.5 eq count(local:primes(100)))'
cbcl-count-080;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(24.5 ge count(local:primes(100)))'
cbcl-count-081;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(24.5 gt count(local:primes(100)))'
cbcl-count-082;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(24.5 ne count(local:primes(100)))'
cbcl-count-083;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:decimal) { $n * $n }; count(local:primes(100)) lt local:square(5.1)'
cbcl-count-084;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:decimal) { $n * $n }; count(local:primes(100)) le local:square(5.1)'
cbcl-count-085;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:decimal) { $n * $n }; count(local:primes(100)) eq local:square(5.1)'
cbcl-count-086;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:decimal) { $n * $n }; count(local:primes(100)) ge local:square(5.1)'
cbcl-count-087;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:decimal) { $n * $n }; count(local:primes(100)) gt local:square(5.1)'
cbcl-count-088;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:decimal) { $n * $n }; count(local:primes(100)) ne local:square(5.1)'
cbcl-count-089;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) lt -1.5'
cbcl-count-090;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) le -1.5'
cbcl-count-091;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) eq -1.5'
cbcl-count-092;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) ge -1.5'
cbcl-count-093;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) gt -1.5'
cbcl-count-094;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) ne -1.5'
cbcl-count-095;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:decimal) { $n * $n }; count(local:primes(100)) lt -local:square(5.0)'
cbcl-count-096;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:decimal) { $n * $n }; count(local:primes(100)) le -local:square(5.0)'
cbcl-count-097;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:decimal) { $n * $n }; count(local:primes(100)) eq -local:square(5.0)'
cbcl-count-098;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:decimal) { $n * $n }; count(local:primes(100)) ge -local:square(5.0)'
cbcl-count-099;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:decimal) { $n * $n }; count(local:primes(100)) gt -local:square(5.0)'
cbcl-count-100;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:decimal) { $n * $n }; count(local:primes(100)) ne -local:square(5.0)'
cbcl-count-101;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:decimal) { $n * $n }; count(local:primes(100)) ge 1.0'
cbcl-count-102;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) lt xs:float("25.5")'
cbcl-count-103;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) le xs:float("25.5")'
cbcl-count-104;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) eq xs:float("25.5")'
cbcl-count-105;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) ge xs:float("25.5")'
cbcl-count-106;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) gt xs:float("25.5")'
cbcl-count-107;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) ne xs:float("25.5")'
cbcl-count-108;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(count(local:primes(100)) lt xs:float("25.5"))'
cbcl-count-109;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(count(local:primes(100)) le xs:float("25.5"))'
cbcl-count-110;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(count(local:primes(100)) eq xs:float("25.5"))'
cbcl-count-111;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(count(local:primes(100)) ge xs:float("25.5"))'
cbcl-count-112;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(count(local:primes(100)) gt xs:float("25.5"))'
cbcl-count-113;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(count(local:primes(100)) ne xs:float("25.5"))'
cbcl-count-114;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; xs:float("24.5") lt count(local:primes(100))'
cbcl-count-115;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; xs:float("24.5") le count(local:primes(100))'
cbcl-count-116;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; xs:float("24.5") eq count(local:primes(100))'
cbcl-count-117;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; xs:float("24.5") ge count(local:primes(100))'
cbcl-count-118;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; xs:float("24.5") gt count(local:primes(100))'
cbcl-count-119;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; xs:float("24.5") ne count(local:primes(100))'
cbcl-count-120;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(xs:float("24.5") lt count(local:primes(100)))'
cbcl-count-121;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(xs:float("24.5") le count(local:primes(100)))'
cbcl-count-122;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(xs:float("24.5") eq count(local:primes(100)))'
cbcl-count-123;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(xs:float("24.5") ge count(local:primes(100)))'
cbcl-count-124;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(xs:float("24.5") gt count(local:primes(100)))'
cbcl-count-125;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(xs:float("24.5") ne count(local:primes(100)))'
cbcl-count-126;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:float) { $n * $n }; count(local:primes(100)) lt local:square(xs:float("4.9"))'
cbcl-count-127;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:float) { $n * $n }; count(local:primes(100)) le local:square(xs:float("4.9"))'
cbcl-count-128;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:float) { $n * $n }; count(local:primes(100)) eq local:square(xs:float("4.9"))'
cbcl-count-129;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:float) { $n * $n }; count(local:primes(100)) ge local:square(xs:float("4.9"))'
cbcl-count-130;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:float) { $n * $n }; count(local:primes(100)) gt local:square(xs:float("4.9"))'
cbcl-count-131;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:float) { $n * $n }; count(local:primes(100)) ne local:square(xs:float("4.9"))'
cbcl-count-132;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) lt xs:float("-1.5")'
cbcl-count-133;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) le xs:float("-1.5")'
cbcl-count-134;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) eq xs:float("-1.5")'
cbcl-count-135;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) ge xs:float("-1.5")'
cbcl-count-136;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) gt xs:float("-1.5")'
cbcl-count-137;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) ne xs:float("-1.5")'
cbcl-count-138;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:float) { $n * $n }; count(local:primes(100)) lt -local:square(5.0)'
cbcl-count-139;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:float) { $n * $n }; count(local:primes(100)) le -local:square(5.0)'
cbcl-count-140;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:float) { $n * $n }; count(local:primes(100)) eq -local:square(5.0)'
cbcl-count-141;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:float) { $n * $n }; count(local:primes(100)) ge -local:square(5.0)'
cbcl-count-142;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:float) { $n * $n }; count(local:primes(100)) gt -local:square(5.0)'
cbcl-count-143;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:float) { $n * $n }; count(local:primes(100)) ne -local:square(5.0)'
cbcl-count-144;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) ge xs:float("1.0")'
cbcl-count-145;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) lt xs:double("25.5")'
cbcl-count-146;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) le xs:double("25.5")'
cbcl-count-147;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) eq xs:double("25.5")'
cbcl-count-148;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) ge xs:double("25.5")'
cbcl-count-149;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) gt xs:double("25.5")'
cbcl-count-150;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) ne xs:double("25.5")'
cbcl-count-151;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(count(local:primes(100)) lt xs:double("25.5"))'
cbcl-count-152;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(count(local:primes(100)) le xs:double("25.5"))'
cbcl-count-153;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(count(local:primes(100)) eq xs:double("25.5"))'
cbcl-count-154;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(count(local:primes(100)) ge xs:double("25.5"))'
cbcl-count-155;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(count(local:primes(100)) gt xs:double("25.5"))'
cbcl-count-156;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(count(local:primes(100)) ne xs:double("25.5"))'
cbcl-count-157;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; xs:double("24.5") lt count(local:primes(100))'
cbcl-count-158;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; xs:double("24.5") le count(local:primes(100))'
cbcl-count-159;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; xs:double("24.5") eq count(local:primes(100))'
cbcl-count-160;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; xs:double("24.5") ge count(local:primes(100))'
cbcl-count-161;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; xs:double("24.5") gt count(local:primes(100))'
cbcl-count-162;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; xs:double("24.5") ne count(local:primes(100))'
cbcl-count-163;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(xs:double("24.5") lt count(local:primes(100)))'
cbcl-count-164;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(xs:double("24.5") le count(local:primes(100)))'
cbcl-count-165;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(xs:double("24.5") eq count(local:primes(100)))'
cbcl-count-166;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(xs:double("24.5") ge count(local:primes(100)))'
cbcl-count-167;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(xs:double("24.5") gt count(local:primes(100)))'
cbcl-count-168;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; not(xs:double("24.5") ne count(local:primes(100)))'
cbcl-count-169;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:double) { $n * $n }; count(local:primes(100)) lt local:square(xs:double("4.9"))'
cbcl-count-170;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:double) { $n * $n }; count(local:primes(100)) le local:square(xs:double("4.9"))'
cbcl-count-171;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:double) { $n * $n }; count(local:primes(100)) eq local:square(xs:double("4.9"))'
cbcl-count-172;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:double) { $n * $n }; count(local:primes(100)) ge local:square(xs:double("4.9"))'
cbcl-count-173;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:double) { $n * $n }; count(local:primes(100)) gt local:square(xs:double("4.9"))'
cbcl-count-174;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:double) { $n * $n }; count(local:primes(100)) ne local:square(xs:double("4.9"))'
cbcl-count-175;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) lt xs:double("-1.5")'
cbcl-count-176;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) le xs:double("-1.5")'
cbcl-count-177;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) eq xs:double("-1.5")'
cbcl-count-178;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) ge xs:double("-1.5")'
cbcl-count-179;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) gt xs:double("-1.5")'
cbcl-count-180;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) ne xs:double("-1.5")'
cbcl-count-181;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:double) { $n * $n }; count(local:primes(100)) lt -local:square(5.0)'
cbcl-count-182;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:double) { $n * $n }; count(local:primes(100)) le -local:square(5.0)'
cbcl-count-183;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:double) { $n * $n }; count(local:primes(100)) eq -local:square(5.0)'
cbcl-count-184;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:double) { $n * $n }; count(local:primes(100)) ge -local:square(5.0)'
cbcl-count-185;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:double) { $n * $n }; count(local:primes(100)) gt -local:square(5.0)'
cbcl-count-186;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:square($n as xs:double) { $n * $n }; count(local:primes(100)) ne -local:square(5.0)'
cbcl-count-187;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) ge xs:double("1.0")'
cbcl-count-188;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) ge 1'
cbcl-count-189;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) lt xs:double("NaN")'
cbcl-count-190;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) le xs:double("NaN")'
cbcl-count-191;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) eq xs:double("NaN")'
cbcl-count-192;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) ge xs:double("NaN")'
cbcl-count-193;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) gt xs:double("NaN")'
cbcl-count-194;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) ne xs:double("NaN")'
cbcl-count-195;PRSC Error: Failed to parse query '\n         declare function local:primes($n as xs:integer) { \n           if ($n lt 2) \n           then 1 \n           else for $i in 2 to $n \n                return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) \n                       then $i \n                       else () \n         }; \n         count(local:primes(100)) lt xs:double("INF")'
cbcl-count-196;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) le xs:double("INF")'
cbcl-count-197;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) eq xs:double("INF")'
cbcl-count-198;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) ge xs:double("INF")'
cbcl-count-199;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) gt xs:double("INF")'
cbcl-count-200;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) ne xs:double("INF")'
cbcl-count-201;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) lt xs:float("NaN")'
cbcl-count-202;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) le xs:float("NaN")'
cbcl-count-203;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) eq xs:float("NaN")'
cbcl-count-204;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) ge xs:float("NaN")'
cbcl-count-205;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) gt xs:float("NaN")'
cbcl-count-206;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) ne xs:float("NaN")'
cbcl-count-207;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) lt xs:float("INF")'
cbcl-count-208;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) le xs:float("INF")'
cbcl-count-209;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) eq xs:float("INF")'
cbcl-count-210;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) ge xs:float("INF")'
cbcl-count-211;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) gt xs:float("INF")'
cbcl-count-212;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) ne xs:float("INF")'
cbcl-count-213;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:strange($n as xs:boolean) as xs:double { if ($n) then xs:double('NaN') else xs:double('INF') }; count(local:primes(100)) lt local:strange(true())'
cbcl-count-214;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:strange($n as xs:boolean) as xs:double { if ($n) then xs:double('NaN') else xs:double('INF') }; count(local:primes(100)) le local:strange(true())'
cbcl-count-215;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:strange($n as xs:boolean) as xs:double { if ($n) then xs:double('NaN') else xs:double('INF') }; count(local:primes(100)) eq local:strange(true())'
cbcl-count-216;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:strange($n as xs:boolean) as xs:double { if ($n) then xs:double('NaN') else xs:double('INF') }; count(local:primes(100)) ge local:strange(true())'
cbcl-count-217;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:strange($n as xs:boolean) as xs:double { if ($n) then xs:double('NaN') else xs:double('INF') }; count(local:primes(100)) gt local:strange(true())'
cbcl-count-218;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:strange($n as xs:boolean) as xs:double { if ($n) then xs:double('NaN') else xs:double('INF') }; count(local:primes(100)) ne local:strange(true())'
cbcl-count-219;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:strange($n as xs:boolean) as xs:double { if ($n) then xs:double('NaN') else xs:double('INF') }; count(local:primes(100)) lt local:strange(false())'
cbcl-count-220;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:strange($n as xs:boolean) as xs:double { if ($n) then xs:double('NaN') else xs:double('INF') }; count(local:primes(100)) le local:strange(false())'
cbcl-count-221;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:strange($n as xs:boolean) as xs:double { if ($n) then xs:double('NaN') else xs:double('INF') }; count(local:primes(100)) eq local:strange(false())'
cbcl-count-222;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:strange($n as xs:boolean) as xs:double { if ($n) then xs:double('NaN') else xs:double('INF') }; count(local:primes(100)) ge local:strange(false())'
cbcl-count-223;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:strange($n as xs:boolean) as xs:double { if ($n) then xs:double('NaN') else xs:double('INF') }; count(local:primes(100)) gt local:strange(false())'
cbcl-count-224;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:strange($n as xs:boolean) as xs:double { if ($n) then xs:double('NaN') else xs:double('INF') }; count(local:primes(100)) ne local:strange(false())'
cbcl-count-225;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:strange($n as xs:boolean) as xs:float { if ($n) then xs:float('NaN') else xs:float('INF') }; count(local:primes(100)) lt local:strange(true())'
cbcl-count-226;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:strange($n as xs:boolean) as xs:float { if ($n) then xs:float('NaN') else xs:float('INF') }; count(local:primes(100)) le local:strange(true())'
cbcl-count-227;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:strange($n as xs:boolean) as xs:float { if ($n) then xs:float('NaN') else xs:float('INF') }; count(local:primes(100)) eq local:strange(true())'
cbcl-count-228;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:strange($n as xs:boolean) as xs:float { if ($n) then xs:float('NaN') else xs:float('INF') }; count(local:primes(100)) ge local:strange(true())'
cbcl-count-229;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:strange($n as xs:boolean) as xs:float { if ($n) then xs:float('NaN') else xs:float('INF') }; count(local:primes(100)) gt local:strange(true())'
cbcl-count-230;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:strange($n as xs:boolean) as xs:float { if ($n) then xs:float('NaN') else xs:float('INF') }; count(local:primes(100)) ne local:strange(true())'
cbcl-count-231;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:strange($n as xs:boolean) as xs:float { if ($n) then xs:float('NaN') else xs:float('INF') }; count(local:primes(100)) lt local:strange(false())'
cbcl-count-232;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:strange($n as xs:boolean) as xs:float { if ($n) then xs:float('NaN') else xs:float('INF') }; count(local:primes(100)) le local:strange(false())'
cbcl-count-233;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:strange($n as xs:boolean) as xs:float { if ($n) then xs:float('NaN') else xs:float('INF') }; count(local:primes(100)) eq local:strange(false())'
cbcl-count-234;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:strange($n as xs:boolean) as xs:float { if ($n) then xs:float('NaN') else xs:float('INF') }; count(local:primes(100)) ge local:strange(false())'
cbcl-count-235;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:strange($n as xs:boolean) as xs:float { if ($n) then xs:float('NaN') else xs:float('INF') }; count(local:primes(100)) gt local:strange(false())'
cbcl-count-236;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; declare function local:strange($n as xs:boolean) as xs:float { if ($n) then xs:float('NaN') else xs:float('INF') }; count(local:primes(100)) ne local:strange(false())'
cbcl-count-238;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) lt -1'
cbcl-count-239;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) le -1'
cbcl-count-240;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) eq -1'
cbcl-count-241;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) ge -1'
cbcl-count-242;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) gt -1'
cbcl-count-243;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) ne -1'
cbcl-count-244;PRSC Error: Failed to parse query 'declare function local:primes($n as xs:integer) { if ($n lt 2) then 1 else for $i in 2 to $n return if (every $x in 2 to ($i - 1) satisfies ($i mod $x ne 0)) then $i else () }; count(local:primes(100)) ge 1'
cbcl-data-001;Expected executing the XPath 'fn:data(fn:error()) instance of xs:integer' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function fn:error with arity 0 is not registered.
cbcl-data-002;PRSC Error: Failed to parse query '\n      	import schema namespace cd="http://www.cbcl.co.uk/XQueryTest/complexData"; \n      	let $x := validate strict {.} \n      	return string-length(data($x//cd:complexTypeWithSimpleContent))'
cbcl-data-003;PRSC Error: Failed to parse query '\n      	import schema namespace cd="http://www.cbcl.co.uk/XQueryTest/complexData"; \n      	let $x := validate strict {.} \n      	return data($x//cd:unionType) instance of xs:string'
cbcl-data-004;PRSC Error: Failed to parse query '\n      	import schema namespace cd="http://www.cbcl.co.uk/XQueryTest/complexData"; \n      	let $x := validate strict {.} \n      	return sum($x//cd:listType)'
cbcl-data-005;PRSC Error: Failed to parse query '\n      	import schema namespace cd="http://www.cbcl.co.uk/XQueryTest/complexData"; \n      	let $x := validate strict {.} \n      	return count(data($x//cd:unionWithList))\n      '
cbcl-data-006;PRSC Error: Failed to parse query '\n      	import schema namespace cd="http://www.cbcl.co.uk/XQueryTest/complexData";      \n      	let $x := validate strict {.} \n      	return string-length($x//cd:extendedComplexTypeWithSimpleUnionContent)\n      '
cbcl-data-007;PRSC Error: Failed to parse query '\n      	import schema namespace cd="http://www.cbcl.co.uk/XQueryTest/complexData"; \n      	let $x := validate strict {.} \n      	return count(data($x//cd:listOfUnion)[. instance of xs:integer])'
cbcl-date-eq-001;Expected executing the XPath 'xs:date("-25252734927766555-06-07+02:00") = xs:date("25252734927766555-07-28")' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPathException with code FODT0001, but got The string '-25252734927766555-06-07+02:00' is not a valid AllXsd value.
cbcl-date-equal-001;PRSC Error: Failed to parse query 'declare function local:two-digit($number as xs:integer) { let $string := string($number) return if (string-length($string) lt 2) then concat('0', $string) else $string }; declare function local:date($year as xs:integer, $month as xs:integer, $day as xs:integer) { let $m := local:two-digit($month), $d := local:two-digit($day) return xs:date(concat($year, '-', $m, '-', $d)) }; not(local:date(2008, 05, 12) eq xs:date("1972-12-15"))'
cbcl-date-equal-006;PRSC Error: Failed to parse query 'declare function local:two-digit($number as xs:integer) { let $string := string($number) return if (string-length($string) lt 2) then concat('0', $string) else $string }; declare function local:date($year as xs:integer, $month as xs:integer, $day as xs:integer) { let $m := local:two-digit($month), $d := local:two-digit($day) return xs:date(concat($year, '-', $m, '-', $d)) }; not(local:date(2008, 05, 12) ne xs:date("1972-12-15"))'
cbcl-date-equal-011;PRSC Error: Failed to parse query 'declare function local:date($date as xs:date, $null as xs:boolean) { if ($null) then () else $date }; exists(local:date(xs:date("1972-12-15"), fn:true()) eq xs:date("1972-12-15"))'
cbcl-date-equal-012;PRSC Error: Failed to parse query 'declare function local:date($date as xs:date, $null as xs:boolean) { if ($null) then () else $date }; local:date(xs:date("1972-12-15"), fn:false()) eq xs:date("1972-12-15")'
cbcl-date-equal-013;PRSC Error: Failed to parse query 'declare function local:date($date as xs:date, $null as xs:boolean) { if ($null) then () else $date }; exists(local:date(xs:date("1972-12-15"), fn:true()) ne xs:date("1972-12-15"))'
cbcl-date-equal-014;PRSC Error: Failed to parse query 'declare function local:date($date as xs:date, $null as xs:boolean) { if ($null) then () else $date }; local:date(xs:date("1972-12-15"), fn:false()) ne xs:date("1972-12-15")'
cbcl-date-equal-015;PRSC Error: Failed to parse query 'declare function local:date($date as xs:string, $timezone as xs:string) { xs:date( concat($date, $timezone) ) }; adjust-date-to-timezone(local:date("1972-12-14", "-12:00")) eq adjust-date-to-timezone(xs:date("1972-12-15+12:00"))'
cbcl-date-equal-016;PRSC Error: Failed to parse query 'declare function local:date($date as xs:string, $timezone as xs:string) { xs:date( concat($date, $timezone) ) }; adjust-date-to-timezone(local:date("1972-12-14", "-12:00")) ne adjust-date-to-timezone(xs:date("1972-12-15+12:00"))'
cbcl-date-ge-001;Expected executing the XPath 'xs:date("25252734927766555-07-28") >= xs:date("-25252734927766555-06-07+02:00")' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPathException with code FODT0001, but got The string '25252734927766555-07-28' is not a valid AllXsd value.
cbcl-date-greater-equal-001;PRSC Error: Failed to parse query '\n      	declare function local:two-digit($number as xs:integer) { let $string := string($number) return if (string-length($string) lt 2) then concat('0', $string) else $string }; declare function local:date($year as xs:integer, $month as xs:integer, $day as xs:integer) { let $m := local:two-digit($month), $d := local:two-digit($day) return xs:date(concat($year, '-', $m, '-', $d)) }; \n      	not(local:date(2008, 05, 12) lt xs:date("1972-12-15"))\n      '
cbcl-date-greater-equal-006;PRSC Error: Failed to parse query '\n      	declare function local:two-digit($number as xs:integer) { let $string := string($number) return if (string-length($string) lt 2) then concat('0', $string) else $string }; \n      	declare function local:date($year as xs:integer, $month as xs:integer, $day as xs:integer) { let $m := local:two-digit($month), $d := local:two-digit($day) return xs:date(concat($year, '-', $m, '-', $d)) }; \n      	not(local:date(2008, 05, 12) ge xs:date("1972-12-15"))\n      '
cbcl-date-greater-than-011;PRSC Error: Failed to parse query '\n      	declare function local:date($date as xs:date, $null as xs:boolean) { if ($null) then () else $date }; \n      	exists(local:date(xs:date("1972-12-15"), fn:true()) gt xs:date("1972-12-15"))\n      '
cbcl-date-greater-than-012;PRSC Error: Failed to parse query '\n      	declare function local:date($date as xs:date, $null as xs:boolean) { if ($null) then () else $date }; \n      	local:date(xs:date("1972-12-15"), fn:false()) gt xs:date("1972-12-15")\n      '
cbcl-date-greater-than-013;PRSC Error: Failed to parse query '\n      	declare function local:date($date as xs:date, $null as xs:boolean) { if ($null) then () else $date }; \n      	exists(local:date(xs:date("1972-12-15"), fn:true()) le xs:date("1972-12-15"))\n      '
cbcl-date-greater-than-014;PRSC Error: Failed to parse query '\n      	declare function local:date($date as xs:date, $null as xs:boolean) { if ($null) then () else $date }; \n      	local:date(xs:date("1972-12-15"), fn:false()) le xs:date("1972-12-15")\n      '
cbcl-date-greater-than-015;PRSC Error: Failed to parse query '\n      	declare function local:date($date as xs:string, $timezone as xs:string) { xs:date( concat($date, $timezone) ) }; \n      	adjust-date-to-timezone(local:date("1972-12-14", "-12:00")) gt adjust-date-to-timezone(xs:date("1972-12-15+12:00"))\n      '
cbcl-date-greater-than-016;PRSC Error: Failed to parse query '\n      	declare function local:date($date as xs:string, $timezone as xs:string) { xs:date( concat($date, $timezone) ) }; \n      	adjust-date-to-timezone(local:date("1972-12-14", "-12:00")) ge adjust-date-to-timezone(xs:date("1972-12-15+12:00"))\n      '
cbcl-date-gt-001;Expected executing the XPath 'xs:date("25252734927766555-07-28") > xs:date("-25252734927766555-06-07+02:00")' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPathException with code FODT0001, but got The string '25252734927766555-07-28' is not a valid AllXsd value.
cbcl-date-le-001;Expected executing the XPath 'xs:date("-25252734927766555-06-07+02:00") <= xs:date("25252734927766555-07-28")' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPathException with code FODT0001, but got The string '-25252734927766555-06-07+02:00' is not a valid AllXsd value.
cbcl-date-less-than-001;PRSC Error: Failed to parse query '\n      	declare function local:two-digit($number as xs:integer) { \n      		let $string := string($number) return if (string-length($string) lt 2) then concat('0', $string) else $string \n      	}; \n      	declare function local:date($year as xs:integer, $month as xs:integer, $day as xs:integer) { \n      		let $m := local:two-digit($month), $d := local:two-digit($day) return xs:date(concat($year, '-', $m, '-', $d)) \n      	}; \n      	not(local:date(2008, 05, 12) lt xs:date("1972-12-15"))\n      '
cbcl-date-less-than-006;PRSC Error: Failed to parse query '\n      	declare function local:two-digit($number as xs:integer) { let $string := string($number) return if (string-length($string) lt 2) then concat('0', $string) else $string }; \n      	declare function local:date($year as xs:integer, $month as xs:integer, $day as xs:integer) { let $m := local:two-digit($month), $d := local:two-digit($day) return xs:date(concat($year, '-', $m, '-', $d)) }; \n      	not(local:date(2008, 05, 12) le xs:date("1972-12-15"))\n      '
cbcl-date-less-than-011;PRSC Error: Failed to parse query '\n      	declare function local:date($date as xs:date, $null as xs:boolean) { if ($null) then () else $date }; \n      	exists(local:date(xs:date("1972-12-15"), fn:true()) lt xs:date("1972-12-15"))\n      '
cbcl-date-less-than-012;PRSC Error: Failed to parse query '\n      	declare function local:date($date as xs:date, $null as xs:boolean) { if ($null) then () else $date }; \n      	local:date(xs:date("1972-12-15"), fn:false()) lt xs:date("1972-12-15")\n      '
cbcl-date-less-than-013;PRSC Error: Failed to parse query '\n      	declare function local:date($date as xs:date, $null as xs:boolean) { if ($null) then () else $date }; \n      	exists(local:date(xs:date("1972-12-15"), fn:true()) ge xs:date("1972-12-15"))\n      '
cbcl-date-less-than-014;PRSC Error: Failed to parse query '\n      	declare function local:date($date as xs:date, $null as xs:boolean) { if ($null) then () else $date }; \n      	local:date(xs:date("1972-12-15"), fn:false()) ge xs:date("1972-12-15")\n      '
cbcl-date-less-than-015;PRSC Error: Failed to parse query '\n      	declare function local:date($date as xs:string, $timezone as xs:string) { xs:date( concat($date, $timezone) ) }; \n      	adjust-date-to-timezone(local:date("1972-12-14", "-12:00")) lt adjust-date-to-timezone(xs:date("1972-12-15+12:00"))\n      '
cbcl-date-less-than-016;PRSC Error: Failed to parse query '\n      	declare function local:date($date as xs:string, $timezone as xs:string) { xs:date( concat($date, $timezone) ) }; \n      	adjust-date-to-timezone(local:date("1972-12-14", "-12:00")) le adjust-date-to-timezone(xs:date("1972-12-15+12:00"))\n      '
cbcl-date-lt-001;Expected executing the XPath 'xs:date("-25252734927766555-06-07+02:00") < xs:date("25252734927766555-07-28")' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPathException with code FODT0001, but got The string '-25252734927766555-06-07+02:00' is not a valid AllXsd value.
cbcl-date-ne-001;Expected executing the XPath 'xs:date("25252734927766555-07-28") != xs:date("-25252734927766555-06-07+02:00")' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPathException with code FODT0001, but got The string '25252734927766555-07-28' is not a valid AllXsd value.
cbcl-dateTime-001;The function fn:current-dateTime with arity 0 is not registered.
cbcl-dateTime-002;Expected error code: FORG0008. Found error code: XPST0017 with error message: The function fn:current-dateTime with arity 0 is not registered.
cbcl-dateTime-equal-001;PRSC Error: Failed to parse query '\n      	declare function local:two-digit($number as xs:integer) { \n      		let $string := string($number) \n      		return if (string-length($string) lt 2) then concat('0', $string) else $string \n      	}; \n      	declare function local:dateTime($year as xs:integer, $month as xs:integer, $day as xs:integer) { \n      		let $m := local:two-digit($month), $d := local:two-digit($day) \n      		return xs:dateTime(concat($year, '-', $m, '-', $d, "T12:00:00")) \n      	}; \n      	not(local:dateTime(2008, 05, 12) eq xs:dateTime("1972-12-15T12:00:00"))'
cbcl-dateTime-equal-006;PRSC Error: Failed to parse query '\n      	declare function local:two-digit($number as xs:integer) { \n      		let $string := string($number) \n      		return if (string-length($string) lt 2) then concat('0', $string) else $string \n      	}; \n      	declare function local:dateTime($year as xs:integer, $month as xs:integer, $day as xs:integer) { \n      		let $m := local:two-digit($month), $d := local:two-digit($day) \n      		return xs:dateTime(concat($year, '-', $m, '-', $d, "T12:00:00")) \n      	}; \n      	not(local:dateTime(2008, 05, 12) ne xs:dateTime("1972-12-15T12:00:00"))'
cbcl-dateTime-equal-011;PRSC Error: Failed to parse query 'declare function local:dateTime($dateTime as xs:dateTime, $null as xs:boolean) { if ($null) then () else $dateTime }; exists(local:dateTime(xs:dateTime("1972-12-15T12:00:00"), fn:true()) eq xs:dateTime("1972-12-15T12:00:00"))'
cbcl-dateTime-equal-012;PRSC Error: Failed to parse query 'declare function local:dateTime($dateTime as xs:dateTime, $null as xs:boolean) { if ($null) then () else $dateTime }; local:dateTime(xs:dateTime("1972-12-15T12:00:00"), fn:false()) eq xs:dateTime("1972-12-15T12:00:00")'
cbcl-dateTime-equal-013;PRSC Error: Failed to parse query 'declare function local:dateTime($dateTime as xs:dateTime, $null as xs:boolean) { if ($null) then () else $dateTime }; exists(local:dateTime(xs:dateTime("1972-12-15T12:00:00"), fn:true()) ne xs:dateTime("1972-12-15T12:00:00"))'
cbcl-dateTime-equal-014;PRSC Error: Failed to parse query 'declare function local:dateTime($dateTime as xs:dateTime, $null as xs:boolean) { if ($null) then () else $dateTime }; local:dateTime(xs:dateTime("1972-12-15T12:00:00"), fn:false()) ne xs:dateTime("1972-12-15T12:00:00")'
cbcl-dateTime-equal-015;PRSC Error: Failed to parse query '\n      	declare function local:dateTime($dateTime as xs:string, $timezone as xs:string) { \n      		xs:dateTime( concat($dateTime, $timezone) ) \n      	}; \n      	adjust-dateTime-to-timezone(local:dateTime("1972-12-14T00:00:00", "-12:00")) eq \n      	adjust-dateTime-to-timezone(xs:dateTime("1972-12-15T00:00:00+12:00"))\n      '
cbcl-dateTime-equal-016;PRSC Error: Failed to parse query '\n      	declare function local:dateTime($dateTime as xs:string, $timezone as xs:string) { \n      		xs:dateTime( concat($dateTime, $timezone) ) \n      	}; \n      	adjust-dateTime-to-timezone(local:dateTime("1972-12-14T00:00:00", "-12:00")) ne \n      	adjust-dateTime-to-timezone(xs:dateTime("1972-12-15T00:00:00+12:00"))\n      '
cbcl-dateTime-greater-than-001;PRSC Error: Failed to parse query 'declare function local:two-digit($number as xs:integer) { let $string := string($number) return if (string-length($string) lt 2) then concat('0', $string) else $string }; declare function local:dateTime($year as xs:integer, $month as xs:integer, $day as xs:integer) { let $m := local:two-digit($month), $d := local:two-digit($day) return xs:dateTime(concat($year, '-', $m, '-', $d, "T12:00:00")) }; not(local:dateTime(2008, 05, 12) gt xs:dateTime("1972-12-15T12:00:00"))'
cbcl-dateTime-greater-than-006;PRSC Error: Failed to parse query 'declare function local:two-digit($number as xs:integer) { let $string := string($number) return if (string-length($string) lt 2) then concat('0', $string) else $string }; declare function local:dateTime($year as xs:integer, $month as xs:integer, $day as xs:integer) { let $m := local:two-digit($month), $d := local:two-digit($day) return xs:dateTime(concat($year, '-', $m, '-', $d, "T12:00:00")) }; not(local:dateTime(2008, 05, 12) ge xs:dateTime("1972-12-15T12:00:00"))'
cbcl-dateTime-greater-than-011;PRSC Error: Failed to parse query 'declare function local:dateTime($dateTime as xs:dateTime, $null as xs:boolean) { if ($null) then () else $dateTime }; exists(local:dateTime(xs:dateTime("1972-12-15T12:00:00"), fn:true()) gt xs:dateTime("1972-12-15T12:00:00"))'
cbcl-dateTime-greater-than-012;PRSC Error: Failed to parse query 'declare function local:dateTime($dateTime as xs:dateTime, $null as xs:boolean) { if ($null) then () else $dateTime }; local:dateTime(xs:dateTime("1972-12-15T12:00:00"), fn:false()) gt xs:dateTime("1972-12-15T12:00:00")'
cbcl-dateTime-greater-than-013;PRSC Error: Failed to parse query 'declare function local:dateTime($dateTime as xs:dateTime, $null as xs:boolean) { if ($null) then () else $dateTime }; exists(local:dateTime(xs:dateTime("1972-12-15T12:00:00"), fn:true()) le xs:dateTime("1972-12-15T12:00:00"))'
cbcl-dateTime-greater-than-014;PRSC Error: Failed to parse query 'declare function local:dateTime($dateTime as xs:dateTime, $null as xs:boolean) { if ($null) then () else $dateTime }; local:dateTime(xs:dateTime("1972-12-15T12:00:00"), fn:false()) le xs:dateTime("1972-12-15T12:00:00")'
cbcl-dateTime-greater-than-015;PRSC Error: Failed to parse query 'declare function local:dateTime($dateTime as xs:string, $timezone as xs:string) { xs:dateTime( concat($dateTime, $timezone) ) }; adjust-dateTime-to-timezone(local:dateTime("1972-12-14T00:00:00", "-12:00")) gt adjust-dateTime-to-timezone(xs:dateTime("1972-12-15T00:00:00+12:00"))'
cbcl-dateTime-greater-than-016;PRSC Error: Failed to parse query 'declare function local:dateTime($dateTime as xs:string, $timezone as xs:string) { xs:dateTime( concat($dateTime, $timezone) ) }; adjust-dateTime-to-timezone(local:dateTime("1972-12-14T00:00:00", "-12:00")) ge adjust-dateTime-to-timezone(xs:dateTime("1972-12-15T00:00:00+12:00"))'
cbcl-dateTime-less-than-001;PRSC Error: Failed to parse query 'declare function local:two-digit($number as xs:integer) { let $string := string($number) return if (string-length($string) lt 2) then concat('0', $string) else $string }; declare function local:dateTime($year as xs:integer, $month as xs:integer, $day as xs:integer) { let $m := local:two-digit($month), $d := local:two-digit($day) return xs:dateTime(concat($year, '-', $m, '-', $d, "T12:00:00")) }; not(local:dateTime(2008, 05, 12) lt xs:dateTime("1972-12-15T12:00:00"))'
cbcl-dateTime-less-than-006;PRSC Error: Failed to parse query 'declare function local:two-digit($number as xs:integer) { let $string := string($number) return if (string-length($string) lt 2) then concat('0', $string) else $string }; declare function local:dateTime($year as xs:integer, $month as xs:integer, $day as xs:integer) { let $m := local:two-digit($month), $d := local:two-digit($day) return xs:dateTime(concat($year, '-', $m, '-', $d, "T12:00:00")) }; not(local:dateTime(2008, 05, 12) le xs:dateTime("1972-12-15T12:00:00"))'
cbcl-dateTime-less-than-011;PRSC Error: Failed to parse query 'declare function local:dateTime($dateTime as xs:dateTime, $null as xs:boolean) { if ($null) then () else $dateTime }; exists(local:dateTime(xs:dateTime("1972-12-15T12:00:00"), fn:true()) lt xs:dateTime("1972-12-15T12:00:00"))'
cbcl-dateTime-less-than-012;PRSC Error: Failed to parse query 'declare function local:dateTime($dateTime as xs:dateTime, $null as xs:boolean) { if ($null) then () else $dateTime }; local:dateTime(xs:dateTime("1972-12-15T12:00:00"), fn:false()) lt xs:dateTime("1972-12-15T12:00:00")'
cbcl-dateTime-less-than-013;PRSC Error: Failed to parse query 'declare function local:dateTime($dateTime as xs:dateTime, $null as xs:boolean) { if ($null) then () else $dateTime }; exists(local:dateTime(xs:dateTime("1972-12-15T12:00:00"), fn:true()) ge xs:dateTime("1972-12-15T12:00:00"))'
cbcl-dateTime-less-than-014;PRSC Error: Failed to parse query 'declare function local:dateTime($dateTime as xs:dateTime, $null as xs:boolean) { if ($null) then () else $dateTime }; local:dateTime(xs:dateTime("1972-12-15T12:00:00"), fn:false()) ge xs:dateTime("1972-12-15T12:00:00")'
cbcl-dateTime-less-than-015;PRSC Error: Failed to parse query 'declare function local:dateTime($dateTime as xs:string, $timezone as xs:string) { xs:dateTime( concat($dateTime, $timezone) ) }; adjust-dateTime-to-timezone(local:dateTime("1972-12-14T00:00:00", "-12:00")) lt adjust-dateTime-to-timezone(xs:dateTime("1972-12-15T00:00:00+12:00"))'
cbcl-dateTime-less-than-016;PRSC Error: Failed to parse query 'declare function local:dateTime($dateTime as xs:string, $timezone as xs:string) { xs:dateTime( concat($dateTime, $timezone) ) }; adjust-dateTime-to-timezone(local:dateTime("1972-12-14T00:00:00", "-12:00")) le adjust-dateTime-to-timezone(xs:dateTime("1972-12-15T00:00:00+12:00"))'
cbcl-days-from-duration-001;The function fn:days-from-duration with arity 1 is not registered.
cbcl-dayTimeDuration-equal-001;PRSC Error: Failed to parse query 'declare function local:dayTimeDuration($days as xs:integer, $hours as xs:integer ) { xs:dayTimeDuration(concat('P', $days, 'DT', $hours, 'H')) }; not(local:dayTimeDuration(1, 1) eq xs:dayTimeDuration("P0D"))'
cbcl-dayTimeDuration-equal-002;PRSC Error: Failed to parse query 'declare function local:dayTimeDuration($days as xs:integer, $hours as xs:integer ) { xs:dayTimeDuration(concat('P', $days, 'DT', $hours, 'H')) }; not(local:dayTimeDuration(1, 1) ne xs:dayTimeDuration("P0D"))'
cbcl-dayTimeDuration-equal-003;PRSC Error: Failed to parse query 'declare function local:dayTimeDuration($dayTimeDuration as xs:dayTimeDuration, $null as xs:boolean) { if ($null) then () else $dayTimeDuration }; exists(local:dayTimeDuration(xs:dayTimeDuration("P0D"), fn:true()) eq xs:dayTimeDuration("P0D"))'
cbcl-dayTimeDuration-equal-004;PRSC Error: Failed to parse query 'declare function local:dayTimeDuration($dayTimeDuration as xs:dayTimeDuration, $null as xs:boolean) { if ($null) then () else $dayTimeDuration }; local:dayTimeDuration(xs:dayTimeDuration("P0D"), fn:false()) eq xs:dayTimeDuration("P0D")'
cbcl-dayTimeDuration-equal-005;PRSC Error: Failed to parse query 'declare function local:dayTimeDuration($dayTimeDuration as xs:dayTimeDuration, $null as xs:boolean) { if ($null) then () else $dayTimeDuration }; exists(local:dayTimeDuration(xs:dayTimeDuration("P0D"), fn:true()) ne xs:dayTimeDuration("P0D"))'
cbcl-dayTimeDuration-equal-006;PRSC Error: Failed to parse query 'declare function local:dayTimeDuration($dayTimeDuration as xs:dayTimeDuration, $null as xs:boolean) { if ($null) then () else $dayTimeDuration }; local:dayTimeDuration(xs:dayTimeDuration("P0D"), fn:false()) ne xs:dayTimeDuration("P0D")'
cbcl-dayTimeDuration-greater-than-001;PRSC Error: Failed to parse query 'declare function local:dayTimeDuration($days as xs:integer, $hours as xs:integer ) { xs:dayTimeDuration(concat('P', $days, 'DT', $hours, 'H')) }; \n         not(local:dayTimeDuration(1, 1) gt xs:dayTimeDuration("P0D"))'
cbcl-dayTimeDuration-greater-than-002;PRSC Error: Failed to parse query 'declare function local:dayTimeDuration($days as xs:integer, $hours as xs:integer ) { xs:dayTimeDuration(concat('P', $days, 'DT', $hours, 'H')) }; \n         not(local:dayTimeDuration(1, 1) ge xs:dayTimeDuration("P0D"))'
cbcl-dayTimeDuration-greater-than-003;PRSC Error: Failed to parse query 'declare function local:dayTimeDuration($dayTimeDuration as xs:dayTimeDuration, $null as xs:boolean) { if ($null) then () else $dayTimeDuration }; \n         exists(local:dayTimeDuration(xs:dayTimeDuration("P0D"), fn:true()) gt xs:dayTimeDuration("P0D"))'
cbcl-dayTimeDuration-greater-than-004;PRSC Error: Failed to parse query 'declare function local:dayTimeDuration($dayTimeDuration as xs:dayTimeDuration, $null as xs:boolean) { if ($null) then () else $dayTimeDuration }; \n         local:dayTimeDuration(xs:dayTimeDuration("P0D"), fn:false()) gt xs:dayTimeDuration("P0D")'
cbcl-dayTimeDuration-greater-than-005;PRSC Error: Failed to parse query 'declare function local:dayTimeDuration($dayTimeDuration as xs:dayTimeDuration, $null as xs:boolean) { if ($null) then () else $dayTimeDuration }; \n         exists(local:dayTimeDuration(xs:dayTimeDuration("P0D"), fn:true()) le xs:dayTimeDuration("P0D"))'
cbcl-dayTimeDuration-greater-than-006;PRSC Error: Failed to parse query 'declare function local:dayTimeDuration($dayTimeDuration as xs:dayTimeDuration, $null as xs:boolean) { if ($null) then () else $dayTimeDuration }; \n         local:dayTimeDuration(xs:dayTimeDuration("P0D"), fn:false()) le xs:dayTimeDuration("P0D")'
cbcl-dayTimeDuration-less-than-001;PRSC Error: Failed to parse query 'declare function local:dayTimeDuration($days as xs:integer, $hours as xs:integer ) { xs:dayTimeDuration(concat('P', $days, 'DT', $hours, 'H')) }; not(local:dayTimeDuration(1, 1) lt xs:dayTimeDuration("P0D"))'
cbcl-dayTimeDuration-less-than-002;PRSC Error: Failed to parse query 'declare function local:dayTimeDuration($days as xs:integer, $hours as xs:integer ) { xs:dayTimeDuration(concat('P', $days, 'DT', $hours, 'H')) }; not(local:dayTimeDuration(1, 1) le xs:dayTimeDuration("P0D"))'
cbcl-dayTimeDuration-less-than-003;PRSC Error: Failed to parse query 'declare function local:dayTimeDuration($dayTimeDuration as xs:dayTimeDuration, $null as xs:boolean) { if ($null) then () else $dayTimeDuration }; exists(local:dayTimeDuration(xs:dayTimeDuration("P0D"), fn:true()) lt xs:dayTimeDuration("P0D"))'
cbcl-dayTimeDuration-less-than-004;PRSC Error: Failed to parse query 'declare function local:dayTimeDuration($dayTimeDuration as xs:dayTimeDuration, $null as xs:boolean) { if ($null) then () else $dayTimeDuration }; local:dayTimeDuration(xs:dayTimeDuration("P0D"), fn:false()) lt xs:dayTimeDuration("P0D")'
cbcl-dayTimeDuration-less-than-005;PRSC Error: Failed to parse query 'declare function local:dayTimeDuration($dayTimeDuration as xs:dayTimeDuration, $null as xs:boolean) { if ($null) then () else $dayTimeDuration }; exists(local:dayTimeDuration(xs:dayTimeDuration("P0D"), fn:true()) le xs:dayTimeDuration("P0D"))'
cbcl-dayTimeDuration-less-than-006;PRSC Error: Failed to parse query 'declare function local:dayTimeDuration($dayTimeDuration as xs:dayTimeDuration, $null as xs:boolean) { if ($null) then () else $dayTimeDuration }; local:dayTimeDuration(xs:dayTimeDuration("P0D"), fn:false()) le xs:dayTimeDuration("P0D")'
cbcl-declare-namespace-001;Expected error code: XPST0081. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	declare default element namespace "http://www.example.org"; \n      	declare namespace test=""; \n      	<test:a />\n      '
cbcl-deep-equal-001;PRSC Error: Failed to parse query 'let $doc1 := <doc><?processing-instruction content ?></doc> let $doc2 := <doc><!--comment--></doc> return deep-equal($doc1, $doc2)'
cbcl-deep-equal-002;PRSC Error: Failed to parse query 'let $doc1 := <?cheese brie?> let $doc2 := <?cheese stilton?> return deep-equal($doc1, $doc2)'
cbcl-deep-equal-003;PRSC Error: Failed to parse query 'let $doc1 := <?foo test?> let $doc2 := <?bar test?> return deep-equal($doc1, $doc2)'
cbcl-deep-equal-004;PRSC Error: Failed to parse query 'let $doc1 := <?foo bar?> let $doc2 := <?foo bar?> return deep-equal($doc1, $doc2)'
cbcl-deep-equal-005;PRSC Error: Failed to parse query 'declare function local:f($x as xs:integer)as xs:integer* { 1 to $x }; deep-equal((local:f(3), 2, local:f(1)), (local:f(3), 2))'
cbcl-deep-equal-006;PRSC Error: Failed to parse query 'declare function local:f($x as xs:integer) as xs:integer* { 1 to $x }; deep-equal((local:f(3), 2), (local:f(3), 2, local:f(1)))'
cbcl-deep-equal-007;The function implicit-timezone with arity 0 is not registered.
cbcl-deep-equal-009;PRSC Error: Failed to parse query 'fn:deep-equal(<a b="b" c="c" />, <a b="b" />)'
cbcl-deep-equal-010;PRSC Error: Failed to parse query 'deep-equal((<a />, xs:untypedAtomic("a"), xs:untypedAtomic("P1Y"), 2.0), (<a />, xs:untypedAtomic("a"), xs:yearMonthDuration("P12M"), xs:untypedAtomic(" 2")))'
cbcl-directconelem-001;PRSC Error: Failed to parse query '\ndeclare default element namespace "http://example.com/0"; \ndeclare namespace a = "http://example.com/1"; \ndeclare namespace b = "http://example.com/2"; \ndeclare copy-namespaces preserve,no-inherit;\n\ndeclare function local:in-scope-namespace-bindings($arg)\n{\n  for $i in in-scope-prefixes($arg) \n  order by $i \n  return \n  concat("xmlns",\n         if (string-length($i) = 0)\n         then ""\n         else ":",\n         $i,\n         '="', namespace-uri-for-prefix($i, $arg), '"')\n};\n\n<a:outer b:outer="attr" xmlns:c="http://example.com/3" c:outer="attr">\n  <inner a="a:attr" b="b:attr" />\n</a:outer>/(local:in-scope-namespace-bindings(.),\n            '|', \n            local:in-scope-namespace-bindings((./*)[1]))\n'
cbcl-directconelem-002;PRSC Error: Failed to parse query '\ndeclare default element namespace "http://example.com/0"; \ndeclare namespace a = "http://example.com/1"; \ndeclare namespace b = "http://example.com/2"; \ndeclare copy-namespaces preserve,inherit;\n\ndeclare function local:in-scope-namespace-bindings($arg)\n{\n  for $i in in-scope-prefixes($arg) \n  order by $i \n  return \n  concat("xmlns",\n         if (string-length($i) = 0)\n         then ""\n         else ":",\n         $i,\n         '="', namespace-uri-for-prefix($i, $arg), '"')\n};\n\n<a:outer b:outer="attr" xmlns:c="http://example.com/3" c:outer="attr">\n  <inner a="a:attr" b="b:attr" />\n</a:outer>/(local:in-scope-namespace-bindings(.),\n            '|', \n            local:in-scope-namespace-bindings((./*)[1]))\n'
cbcl-div-001;PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1Y") else xs:yearMonthDuration("P1Y") }; local:f(false()) div xs:yearMonthDuration("P1M")'
cbcl-div-002;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1Y") else xs:yearMonthDuration("P1Y") }; local:f(true()) div xs:yearMonthDuration("P1M")'
cbcl-div-003;PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:dayTimeDuration("P1D") }; local:f(false()) div xs:dayTimeDuration("PT1H")'
cbcl-div-004;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:dayTimeDuration("P1D") }; local:f(true()) div xs:dayTimeDuration("PT1H")'
cbcl-div-005;PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:yearMonthDuration("P1M") }; xs:yearMonthDuration("P1Y") div local:f(false())'
cbcl-div-006;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:yearMonthDuration("P1M") }; xs:yearMonthDuration("P1Y") div local:f(true())'
cbcl-div-007;PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:dayTimeDuration("PT1H") }; xs:dayTimeDuration("P1D") div local:f(false())'
cbcl-div-008;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:dayTimeDuration("PT1H") }; xs:dayTimeDuration("P1D") div local:f(true())'
cbcl-div-009;PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:yearMonthDuration("P1M") }; local:f(false()) div local:f(false())'
cbcl-div-010;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:yearMonthDuration("P1M") }; local:f(true()) div local:f(false())'
cbcl-div-011;PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:dayTimeDuration("PT1H") }; local:f(false()) div local:f(false())'
cbcl-div-012;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:dayTimeDuration("PT1H") }; local:f(false()) div local:f(true())'
cbcl-div-013;PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P2M") else xs:yearMonthDuration("P2M") }; local:f(false()) div 2'
cbcl-div-014;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P2M") else xs:yearMonthDuration("P2M") }; local:f(true()) div 2'
cbcl-div-015;PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:dayTimeDuration("P1D") }; local:f(false()) div 2'
cbcl-div-016;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:dayTimeDuration("P1D") }; local:f(true()) div 2'
cbcl-divide-dayTimeDuration-001;Expected error code: FODT0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:dayTimeDuration($days as xs:integer) as xs:dayTimeDuration { xs:dayTimeDuration(concat("P", $days, "D")) }; local:dayTimeDuration(2) div 0'
cbcl-divide-dayTimeDuration-002;PRSC Error: Failed to parse query 'declare function local:dayTimeDuration($days as xs:integer) as xs:dayTimeDuration { xs:dayTimeDuration(concat("P", $days, "D")) }; local:dayTimeDuration(2) div 1'
cbcl-divide-dayTimeDuration-003;Expected executing the XPath 'xs:dayTimeDuration("P9223372036854775807D") div 0.5' to resolve to one of the expected results, but got System.OverflowException: Value was either too large or too small for an Int32.
cbcl-divide-dayTimeDuration-by-dayTimeDuration-001;Expected executing the XPath 'xs:dayTimeDuration("P9223372036854775807D") div xs:dayTimeDuration("P0D")' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPathException with code FOAR0001, but got Value was either too large or too small for an Int32.
cbcl-divide-dayTimeDuration-by-dayTimeDuration-002;Expected executing the XPath 'xs:dayTimeDuration("P9223372036854775807D") div xs:dayTimeDuration("P0DT0H0M0.000000001S")' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPathException with code FOAR0002, but got Value was either too large or too small for an Int32.
cbcl-divide-dayTimeDuration-by-dayTimeDuration-003;Expected executing the XPath 'xs:dayTimeDuration("P9223372036854775806D") div xs:dayTimeDuration("P4611686018427387903D")' to resolve to one of the expected results, but got System.OverflowException: Value was either too large or too small for an Int32.
cbcl-divide-yearMonthDuration-001;Expected error code: FODT0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:yearMonthDuration($years as xs:integer) as xs:yearMonthDuration { xs:yearMonthDuration(concat("P", $years, "Y")) };\n        local:yearMonthDuration(2) div 0'
cbcl-divide-yearMonthDuration-002;PRSC Error: Failed to parse query '\n        declare function local:yearMonthDuration($years as xs:integer) as xs:yearMonthDuration { xs:yearMonthDuration(concat("P", $years, "Y")) };\n        local:yearMonthDuration(2) div 1'
cbcl-divide-yearMonthDuration-003;Expected error code: FODT0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:yearMonthDuration($years as xs:integer) as xs:yearMonthDuration { xs:yearMonthDuration(concat("P", $years, "Y")) };\n        local:yearMonthDuration(768614336404564650) div 0.5'
cbcl-divide-yearMonthDuration-by-yearMonthDuration-001;Expected XPathException with code FOAR0001, but got Attempted to divide by zero.
cbcl-duration-equal-001;PRSC Error: Failed to parse query 'declare function local:duration($days as xs:integer, $hours as xs:integer) { xs:duration(concat('P', $days, 'DT', $hours, 'H')) }; not(local:duration(1, 1) eq xs:dayTimeDuration("P0D"))'
cbcl-duration-equal-002;PRSC Error: Failed to parse query 'declare function local:duration($days as xs:integer, $hours as xs:integer) { xs:duration(concat('P', $days, 'DT', $hours, 'H')) }; not(local:duration(1, 1) ne xs:dayTimeDuration("P0D"))'
cbcl-duration-equal-003;PRSC Error: Failed to parse query 'declare function local:duration($duration as xs:duration, $null as xs:boolean) { if ($null) then () else $duration }; exists(local:duration(xs:duration("P1DT1H"), fn:true()) eq xs:duration("P1DT1H"))'
cbcl-duration-equal-004;PRSC Error: Failed to parse query 'declare function local:duration($duration as xs:duration, $null as xs:boolean) { if ($null) then () else $duration }; local:duration(xs:duration("P1DT1H"), fn:false()) eq xs:duration("P1DT1H")'
cbcl-duration-equal-005;PRSC Error: Failed to parse query 'declare function local:duration($duration as xs:duration, $null as xs:boolean) { if ($null) then () else $duration }; exists(local:duration(xs:duration("P1DT1H"), fn:true()) ne xs:duration("P1DT1H"))'
cbcl-duration-equal-006;PRSC Error: Failed to parse query 'declare function local:duration($duration as xs:duration, $null as xs:boolean) { if ($null) then () else $duration }; local:duration(xs:duration("P1DT1H"), fn:false()) ne xs:duration("P1DT1H")'
cbcl-empty-func-001;PRSC Error: Failed to parse query '\n      	declare function local:generate($arg as xs:integer?) { if ($arg = 0) then (1, 2, 3) else $arg }; \n      	fn:empty( ((), local:generate( () ), local:generate( 0 ), (1 to 10000000), local:generate( () ), local:generate(1)) )\n      '
cbcl-empty-func-004;PRSC Error: Failed to parse query 'empty(text {(1 to 10)[. mod 2 = 0]})'
cbcl-ends-with-001;No collations are supported
cbcl-error-001;Expected executing the XPath 'declare function local:ignore($arg) { true() }; local:ignore( fn:error() )' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare function local:ignore($arg) { true() }; local:ignore( fn:error() )'
cbcl-error-002;Expected executing the XPath 'empty(() + fn:error())' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function fn:error with arity 0 is not registered.
cbcl-error-003;Expected executing the XPath 'empty(fn:error() + ())' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function fn:error with arity 0 is not registered.
cbcl-error-004;Expected executing the XPath 'empty(() eq fn:error())' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function fn:error with arity 0 is not registered.
cbcl-error-005;Expected executing the XPath 'empty(fn:error() eq ())' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function fn:error with arity 0 is not registered.
cbcl-error-006;Expected executing the XPath 'fn:error() = ()' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function fn:error with arity 0 is not registered.
cbcl-error-007;Expected executing the XPath '() = fn:error()' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function fn:error with arity 0 is not registered.
cbcl-error-008;Expected executing the XPath 'empty(fn:error() is ())' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function fn:error with arity 0 is not registered.
cbcl-error-009;Expected executing the XPath 'empty(() is fn:error())' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function fn:error with arity 0 is not registered.
cbcl-error-010;Expected executing the XPath 'fn:error() and false()' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function fn:error with arity 0 is not registered.
cbcl-error-011;Expected executing the XPath 'false() and fn:error()' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function fn:error with arity 0 is not registered.
cbcl-error-012;Expected executing the XPath 'fn:error() or true()' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function fn:error with arity 0 is not registered.
cbcl-error-013;Expected executing the XPath 'true() or fn:error()' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function fn:error with arity 0 is not registered.
cbcl-error-014;Expected executing the XPath 'for $x in fn:error() return true()' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function fn:error with arity 0 is not registered.
cbcl-error-015;Expected executing the XPath 'for $x at $p in fn:error() return true()' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function fn:error with arity 0 is not registered.
cbcl-error-016;Expected executing the XPath 'let $x := fn:error() return true()' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function fn:error with arity 0 is not registered.
cbcl-error-017;Expected executing the XPath 'if (fn:error()) then true() else true()' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function fn:error with arity 0 is not registered.
cbcl-error-018;Expected executing the XPath 'some $x in fn:error() satisfies false()' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function fn:error with arity 0 is not registered.
cbcl-error-019;Expected executing the XPath 'every $x in fn:error() satisfies true()' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function fn:error with arity 0 is not registered.
cbcl-error-020;Expected executing the XPath 'fn:error() instance of xs:integer' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function fn:error with arity 0 is not registered.
cbcl-error-021;Expected executing the XPath 'typeswitch ( fn:error() ) case xs:integer return true() default return false()' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'typeswitch ( fn:error() ) case xs:integer return true() default return false()'
cbcl-error-022;Expected executing the XPath 'typeswitch ( fn:error() ) case xs:integer return true() default return false()' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'typeswitch ( fn:error() ) case xs:integer return true() default return false()'
cbcl-error-023;Expected executing the XPath 'empty(fn:error()[2])' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function fn:error with arity 0 is not registered.
cbcl-error-024;Expected executing the XPath 'empty(fn:error()[false()])' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function fn:error with arity 0 is not registered.
cbcl-error-025;Expected executing the XPath 'empty((1 div 0)[false()])' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: Overflow when creating a Decimal from Infinity.
cbcl-error-026;Expected executing the XPath 'empty( if (current-date() lt xs:date('2009-01-01')) then fn:error() else ())' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function current-date with arity 0 is not registered.
cbcl-error-027;Expected executing the XPath 'empty( if (current-date() lt xs:date('2009-01-01')) then () else fn:error())' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function current-date with arity 0 is not registered.
cbcl-error-028;Expected executing the XPath 'declare function local:item() { if (current-date() lt xs:date('2012-10-10')) then 1 else "one" }; empty( typeswitch ( local:item() ) case xs:integer return fn:error() default return ())' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare function local:item() { if (current-date() lt xs:date('2012-10-10')) then 1 else "one" }; empty( typeswitch ( local:item() ) case xs:integer return fn:error() default return ())'
cbcl-error-029;PRSC Error: Failed to parse query 'declare function local:item() { if (current-date() gt xs:date('1900-01-01')) then 1 else "one" }; empty( typeswitch ( local:item() ) case xs:integer return () default return fn:error())'
cbcl-error-030;Expected executing the XPath 'empty(fn:remove( fn:error(), 1))' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function fn:error with arity 0 is not registered.
cbcl-error-031;Expected executing the XPath 'empty(fn:subsequence( fn:error(), 2, 2))' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function fn:error with arity 0 is not registered.
cbcl-error-032;Expected executing the XPath 'empty(fn:error() except fn:error() )' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function fn:error with arity 0 is not registered.
cbcl-error-033;Expected executing the XPath 'empty(fn:error() intersect fn:error() )' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function fn:error with arity 0 is not registered.
cbcl-error-034;Expected executing the XPath 'empty( fn:zero-or-one(fn:error()) )' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function fn:error with arity 0 is not registered.
cbcl-error-035;Expected executing the XPath 'empty( fn:error() treat as empty-sequence() )' to resolve to one of the expected results, but got System.NotImplementedException: TreatExpr AST to Expression not yet implemented
cbcl-exactly-one-001;PRSC Error: Failed to parse query 'boolean( exactly-one( remove( (<a/>, 1), 1 ) ) )'
cbcl-exactly-one-002;PRSC Error: Failed to parse query '\n      	declare function local:generate($arg as xs:integer) { if ($arg = 0) then (1, 2, 3) else $arg }; \n      	fn:exactly-one(fn:unordered( local:generate(1) ))\n      '
cbcl-exactly-one-003;PRSC Error: Failed to parse query '\n      	declare function local:generate($arg as xs:integer?) { if ($arg = 0) then () else if ($arg = 1) then $arg else ($arg, $arg) }; \n      	1 + fn:exactly-one(fn:one-or-more( local:generate( 1 ) ))\n      '
cbcl-exactly-one-004;PRSC Error: Failed to parse query '\n      	declare function local:generate($arg as xs:integer?) { if ($arg = 0) then () else if ($arg = 1) then $arg else ($arg, $arg) }; \n      	1 + fn:exactly-one(fn:zero-or-one( local:generate( 1 ) ))\n      '
cbcl-except-001;PRSC Error: Failed to parse query '\n      let $x := <a><b/><c/><d/></a> return count(($x/(node() except b) | $x/(node() except b)))\n   '
cbcl-exists-001;PRSC Error: Failed to parse query '\n      	declare function local:generate($arg as xs:integer?) { if ($arg = 0) then (1, 2, 3) else $arg }; \n      	fn:exists( ( (), local:generate( () ), local:generate( 0 ), (1 to 10000000), local:generate( () ), local:generate(1)) )'
cbcl-exists-003;PRSC Error: Failed to parse query 'exists(text {(1 to 10)[. mod 2 = 0]})'
cbcl-filterexpr-001;PRSC Error: Failed to parse query '\n      	declare function local:nan() { xs:float("NaN") }; \n      	(1 to 10)[not(position() < xs:float("NaN"))]\n      '
cbcl-first-in-sequence-001;PRSC Error: Failed to parse query 'declare function local:generate($arg as xs:integer?) { if ($arg = 0) then (1, 2, 3) else () }; ( local:generate(0), 1, local:generate(0) )[1]'
cbcl-first-in-sequence-002;PRSC Error: Failed to parse query 'declare function local:generate($arg as xs:integer?) as xs:integer* { if ($arg = 0) then (1, 2, 3) else $arg }; ( local:generate(()), for $x in local:generate(0) return $x + 2 )[1]'
cbcl-first-in-sequence-003;PRSC Error: Failed to parse query 'declare function local:generate($arg as xs:integer?) as xs:integer? { if ($arg = 0) then 0 else () }; ( local:generate(()), for $x in local:generate(0) return $x + 2 )[1]'
cbcl-first-in-sequence-004;PRSC Error: Failed to parse query 'declare function local:generate($arg as xs:integer?) as xs:integer* { if ($arg = 0) then ( 1, 2, 3 ) else ( $arg ) }; ( local:generate(()), for $x at $p in local:generate(0) return $p + $x)[1]'
cbcl-first-in-sequence-005;PRSC Error: Failed to parse query 'declare function local:generate($arg as xs:integer?) as xs:integer? { if ($arg = 0) then 1 else $arg }; ( local:generate(()), for $x at $p in local:generate(0) return $p + $x)[1]'
cbcl-first-in-sequence-006;PRSC Error: Failed to parse query 'declare function local:generate($arg as xs:integer?) as xs:string* { if ($arg = 0) then ('a', 'b', 'c') else ('d' ) }; ( if (local:generate(1) = 'd') then () else 1, for $x in local:generate(0) return fn:lower-case($x))[1]'
cbcl-first-in-sequence-007;PRSC Error: Failed to parse query 'declare function local:generate($arg as xs:integer?) as xs:integer? { $arg }; ( if (local:generate(0) = 0) then () else 1, for $x in local:generate(0) return -$x)[1]'
cbcl-first-in-sequence-008;PRSC Error: Failed to parse query '( (<a><b>cheese</b></a>)/b )[1]'
cbcl-first-in-sequence-009;PRSC Error: Failed to parse query 'declare function local:generate($arg as xs:integer?) as xs:string* { if ($arg = 0) then ('a', 'b', 'c') else () }; ( local:generate(()), for $x in local:generate(0) return 3)[1]'
cbcl-first-in-sequence-010;PRSC Error: Failed to parse query 'declare function local:generate($arg as xs:integer?) as xs:string* { if ($arg = 0) then ('a', 'b', 'c') else () }; boolean(local:generate(0)[1])'
cbcl-first-in-sequence-011;PRSC Error: Failed to parse query 'declare function local:generate($arg as xs:integer?) as xs:string* { if ($arg = 0) then ('a', 'b', 'c') else () }; boolean(local:generate(1)[1])'
cbcl-first-in-sequence-012;PRSC Error: Failed to parse query 'declare function local:generate($arg as xs:boolean) as xs:string+ { if ($arg) then ('a', 'b', 'c') else ('A', 'B', 'C') }; ( for $x in local:generate(true()) return 3)[1]'
cbcl-float-002;Expected XPath xs:float(xs:double('-INF')),xs:float(xs:double('INF')) to resolve to -INF INF, but instead got -Infinity Infinity
cbcl-fn-replace-001;Using flags in 'replace' is not supported
cbcl-fn-replace-004;Expected XPathException with code FORX0003, but got Using flags in 'replace' is not supported
cbcl-fn-replace-005;Expected XPathException with code FORX0003, but got Using flags in 'replace' is not supported
cbcl-fn-string-join-001;PRSC Error: Failed to parse query '\n        declare function local:repeat($count as xs:integer, $arg as xs:string) as xs:string* { if ($count le 0) then "" else for $x in 1 to $count return $arg };\n        string-join( for $x in 0 to 4 return local:repeat($x, 'a') , ' ') and string-join( for $x in 0 to 4 return local:repeat($x, 'a') , '')'
cbcl-fn-translate-002;Index was outside the bounds of the array.
cbcl-fn-union-001;Expected executing the XPath 'declare variable $x := <b/>;\n        declare variable $y := <a/>;\n        ($x union $y) union $x, ($x intersect $y) union $x, ($x except $y) union $x, ($y except $x) union $x, $x union ($x union $y), $x union ($x intersect $y), $x union ($x except $y), $x union ($y except $x)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n        declare variable $x := <b/>;\n        declare variable $y := <a/>;\n        ($x union $y) union $x, ($x intersect $y) union $x, ($x except $y) union $x, ($y except $x) union $x, $x union ($x union $y), $x union ($x intersect $y), $x union ($x except $y), $x union ($y except $x)'
cbcl-fn-union-002;PRSC Error: Failed to parse query '\n        declare variable $doc := <root><test><x/><y/></test></root>;\n        $doc/test[x] union $doc/test[y]'
cbcl-fn-unordered-002;PRSC Error: Failed to parse query 'local-name(unordered(<a><b/><c/></a>/*[1]))'
cbcl-followingAxis-001;PRSC Error: Failed to parse query 'count(<a><b/><b/></a>/b[1]/following-sibling::*)'
cbcl-function-decl-001;PRSC Error: Failed to parse query 'declare function local:nothing() as empty-sequence() { () }; empty(local:nothing())'
cbcl-function-declaration-002;PRSC Error: Failed to parse query 'declare function local:count($x) { count($x) }; local:count((1 to 100000, 1 to 100000))'
cbcl-gDay-equal-001;PRSC Error: Failed to parse query 'declare function local:gDay($day as xs:integer) { if ($day lt 10) then xs:gDay(concat("---0", $day)) else xs:gDay(concat("---", $day)) }; not(local:gDay(1) eq xs:gDay("---31"))'
cbcl-gDay-equal-002;The function implicit-timezone with arity 0 is not registered.
cbcl-gDay-equal-003;The function implicit-timezone with arity 0 is not registered.
cbcl-gDay-equal-004;The function implicit-timezone with arity 0 is not registered.
cbcl-gDay-equal-005;The function implicit-timezone with arity 0 is not registered.
cbcl-gDay-equal-006;PRSC Error: Failed to parse query 'declare function local:gDay($day as xs:integer) { if ($day lt 10) then xs:gDay(concat("---0", $day)) else xs:gDay(concat("---", $day)) }; not(local:gDay(1) ne xs:gDay("---31"))'
cbcl-gDay-equal-007;The function implicit-timezone with arity 0 is not registered.
cbcl-gDay-equal-008;The function implicit-timezone with arity 0 is not registered.
cbcl-gDay-equal-009;The function implicit-timezone with arity 0 is not registered.
cbcl-gDay-equal-010;The function implicit-timezone with arity 0 is not registered.
cbcl-gDay-equal-011;PRSC Error: Failed to parse query 'declare function local:gDay($gDay as xs:gDay, $null as xs:boolean) { if ($null) then () else $gDay }; exists(local:gDay(xs:gDay("---31"), fn:true()) eq xs:gDay("---31"))'
cbcl-gDay-equal-012;PRSC Error: Failed to parse query 'declare function local:gDay($gDay as xs:gDay, $null as xs:boolean) { if ($null) then () else $gDay }; local:gDay(xs:gDay("---31"), fn:false()) eq xs:gDay("---31")'
cbcl-gDay-equal-013;PRSC Error: Failed to parse query 'declare function local:gDay($gDay as xs:gDay, $null as xs:boolean) { if ($null) then () else $gDay }; exists(local:gDay(xs:gDay("---31"), fn:true()) ne xs:gDay("---31"))'
cbcl-gDay-equal-014;PRSC Error: Failed to parse query 'declare function local:gDay($gDay as xs:gDay, $null as xs:boolean) { if ($null) then () else $gDay }; local:gDay(xs:gDay("---31"), fn:false()) ne xs:gDay("---31")'
cbcl-gDay-equal-019;The function implicit-timezone with arity 0 is not registered.
cbcl-gDay-equal-020;The function implicit-timezone with arity 0 is not registered.
cbcl-gMonth-equal-001;PRSC Error: Failed to parse query 'declare function local:gMonth($month as xs:integer) { if ($month lt 10) then xs:gMonth(concat("--0", $month)) else xs:gMonth(concat("--", $month)) }; not(local:gMonth(1) eq xs:gMonth("--06"))'
cbcl-gMonth-equal-002;The function implicit-timezone with arity 0 is not registered.
cbcl-gMonth-equal-003;The function implicit-timezone with arity 0 is not registered.
cbcl-gMonth-equal-004;The function implicit-timezone with arity 0 is not registered.
cbcl-gMonth-equal-005;The function implicit-timezone with arity 0 is not registered.
cbcl-gMonth-equal-006;PRSC Error: Failed to parse query 'declare function local:gMonth($month as xs:integer) { if ($month lt 10) then xs:gMonth(concat("--0", $month)) else xs:gMonth(concat("--", $month)) }; not(local:gMonth(1) ne xs:gMonth("--06"))'
cbcl-gMonth-equal-007;The function implicit-timezone with arity 0 is not registered.
cbcl-gMonth-equal-008;The function implicit-timezone with arity 0 is not registered.
cbcl-gMonth-equal-009;The function implicit-timezone with arity 0 is not registered.
cbcl-gMonth-equal-010;The function implicit-timezone with arity 0 is not registered.
cbcl-gMonth-equal-011;PRSC Error: Failed to parse query 'declare function local:gMonth($gMonth as xs:gMonth, $null as xs:boolean) { if ($null) then () else $gMonth }; exists(local:gMonth(xs:gMonth("--12"), fn:true()) eq xs:gMonth("--12"))'
cbcl-gMonth-equal-012;PRSC Error: Failed to parse query 'declare function local:gMonth($gMonth as xs:gMonth, $null as xs:boolean) { if ($null) then () else $gMonth }; local:gMonth(xs:gMonth("--12"), fn:false()) eq xs:gMonth("--12")'
cbcl-gMonth-equal-013;PRSC Error: Failed to parse query 'declare function local:gMonth($gMonth as xs:gMonth, $null as xs:boolean) { if ($null) then () else $gMonth }; exists(local:gMonth(xs:gMonth("--12"), fn:true()) ne xs:gMonth("--12"))'
cbcl-gMonth-equal-014;PRSC Error: Failed to parse query 'declare function local:gMonth($gMonth as xs:gMonth, $null as xs:boolean) { if ($null) then () else $gMonth }; local:gMonth(xs:gMonth("--12"), fn:false()) ne xs:gMonth("--12")'
cbcl-gMonthDay-equal-001;PRSC Error: Failed to parse query 'declare function local:gMonthDay($day as xs:integer) { if ($day lt 10) then xs:gMonthDay(concat("--12-0", $day)) else xs:gMonthDay(concat("--12-", $day)) }; not(local:gMonthDay(1) eq xs:gMonthDay("--12-31"))'
cbcl-gMonthDay-equal-002;The function implicit-timezone with arity 0 is not registered.
cbcl-gMonthDay-equal-003;The function implicit-timezone with arity 0 is not registered.
cbcl-gMonthDay-equal-004;The function implicit-timezone with arity 0 is not registered.
cbcl-gMonthDay-equal-005;The function implicit-timezone with arity 0 is not registered.
cbcl-gMonthDay-equal-006;PRSC Error: Failed to parse query 'declare function local:gMonthDay($day as xs:integer) { if ($day lt 10) then xs:gMonthDay(concat("--12-0", $day)) else xs:gMonthDay(concat("--12-", $day)) }; not(local:gMonthDay(1) ne xs:gMonthDay("--12-31"))'
cbcl-gMonthDay-equal-007;The function implicit-timezone with arity 0 is not registered.
cbcl-gMonthDay-equal-008;The function implicit-timezone with arity 0 is not registered.
cbcl-gMonthDay-equal-009;The function implicit-timezone with arity 0 is not registered.
cbcl-gMonthDay-equal-010;The function implicit-timezone with arity 0 is not registered.
cbcl-gMonthDay-equal-011;PRSC Error: Failed to parse query 'declare function local:gMonthDay($gMonthDay as xs:gMonthDay, $null as xs:boolean) { if ($null) then () else $gMonthDay }; exists(local:gMonthDay(xs:gMonthDay("--12-31"), fn:true()) eq xs:gMonthDay("--12-31"))'
cbcl-gMonthDay-equal-012;PRSC Error: Failed to parse query 'declare function local:gMonthDay($gMonthDay as xs:gMonthDay, $null as xs:boolean) { if ($null) then () else $gMonthDay }; local:gMonthDay(xs:gMonthDay("--12-31"), fn:false()) eq xs:gMonthDay("--12-31")'
cbcl-gMonthDay-equal-013;PRSC Error: Failed to parse query 'declare function local:gMonthDay($gMonthDay as xs:gMonthDay, $null as xs:boolean) { if ($null) then () else $gMonthDay }; exists(local:gMonthDay(xs:gMonthDay("--12-31"), fn:true()) ne xs:gMonthDay("--12-31"))'
cbcl-gMonthDay-equal-014;PRSC Error: Failed to parse query 'declare function local:gMonthDay($gMonthDay as xs:gMonthDay, $null as xs:boolean) { if ($null) then () else $gMonthDay }; local:gMonthDay(xs:gMonthDay("--12-31"), fn:false()) ne xs:gMonthDay("--12-31")'
cbcl-gMonthDay-equal-019;The function implicit-timezone with arity 0 is not registered.
cbcl-gMonthDay-equal-020;The function implicit-timezone with arity 0 is not registered.
cbcl-group-by-key-001;PRSC Error: Failed to parse query 'declare function local:get-words() { tokenize("she sells sea shells by the sea shore", "\s+") }; let $words := local:get-words() let $distinct-words := distinct-values($words) for $word in $distinct-words return <word word="{$word}" count="{count($words[. = $word])}" />'
cbcl-group-by-key-002;Use of XQuery FLWOR expressions in XPath is not allowed
cbcl-group-by-key-003;Use of XQuery FLWOR expressions in XPath is not allowed
cbcl-group-by-key-004;Use of XQuery FLWOR expressions in XPath is not allowed
cbcl-gYear-equal-001;PRSC Error: Failed to parse query 'declare function local:gYear($year as xs:integer) { xs:gYear(string(2000 + $year)) }; not(local:gYear(7) eq xs:gYear("2008"))'
cbcl-gYear-equal-002;The function implicit-timezone with arity 0 is not registered.
cbcl-gYear-equal-003;The function implicit-timezone with arity 0 is not registered.
cbcl-gYear-equal-004;The function implicit-timezone with arity 0 is not registered.
cbcl-gYear-equal-005;The function implicit-timezone with arity 0 is not registered.
cbcl-gYear-equal-006;PRSC Error: Failed to parse query 'declare function local:gYear($year as xs:integer) { xs:gYear(string(2000 + $year)) }; not(local:gYear(7) ne xs:gYear("2008"))'
cbcl-gYear-equal-007;The function implicit-timezone with arity 0 is not registered.
cbcl-gYear-equal-008;The function implicit-timezone with arity 0 is not registered.
cbcl-gYear-equal-009;The function implicit-timezone with arity 0 is not registered.
cbcl-gYear-equal-010;The function implicit-timezone with arity 0 is not registered.
cbcl-gYear-equal-011;PRSC Error: Failed to parse query 'declare function local:gYear($gYear as xs:gYear, $null as xs:boolean) { if ($null) then () else $gYear }; exists(local:gYear(xs:gYear("1972"), fn:true()) eq xs:gYear("1972"))'
cbcl-gYear-equal-012;PRSC Error: Failed to parse query 'declare function local:gYear($gYear as xs:gYear, $null as xs:boolean) { if ($null) then () else $gYear }; local:gYear(xs:gYear("1972"), fn:false()) ne xs:gYear("1972")'
cbcl-gYear-equal-013;PRSC Error: Failed to parse query 'declare function local:gYear($gYear as xs:gYear, $null as xs:boolean) { if ($null) then () else $gYear }; exists(local:gYear(xs:gYear("1972"), fn:true()) ne xs:gYear("1972"))'
cbcl-gYear-equal-014;PRSC Error: Failed to parse query 'declare function local:gYear($gYear as xs:gYear, $null as xs:boolean) { if ($null) then () else $gYear }; local:gYear(xs:gYear("1972"), fn:false()) ne xs:gYear("1972")'
cbcl-gYearMonth-equal-001;PRSC Error: Failed to parse query 'declare function local:gYearMonth($year as xs:integer) { xs:gYearMonth(concat(string(2000 + $year), "-01")) }; not(local:gYearMonth(7) eq xs:gYearMonth("2008-01"))'
cbcl-gYearMonth-equal-002;The function implicit-timezone with arity 0 is not registered.
cbcl-gYearMonth-equal-003;The function implicit-timezone with arity 0 is not registered.
cbcl-gYearMonth-equal-004;The function implicit-timezone with arity 0 is not registered.
cbcl-gYearMonth-equal-005;The function implicit-timezone with arity 0 is not registered.
cbcl-gYearMonth-equal-006;PRSC Error: Failed to parse query 'declare function local:gYearMonth($year as xs:integer) { xs:gYearMonth(concat(string(2000 + $year), "-01")) }; not(local:gYearMonth(7) ne xs:gYearMonth("2008-01"))'
cbcl-gYearMonth-equal-007;The function implicit-timezone with arity 0 is not registered.
cbcl-gYearMonth-equal-008;The function implicit-timezone with arity 0 is not registered.
cbcl-gYearMonth-equal-009;The function implicit-timezone with arity 0 is not registered.
cbcl-gYearMonth-equal-010;The function implicit-timezone with arity 0 is not registered.
cbcl-gYearMonth-equal-011;PRSC Error: Failed to parse query 'declare function local:gYearMonth($gYearMonth as xs:gYearMonth, $null as xs:boolean) { if ($null) then () else $gYearMonth }; exists(local:gYearMonth(xs:gYearMonth("1972-12"), fn:true()) eq xs:gYearMonth("1972-12"))'
cbcl-gYearMonth-equal-012;PRSC Error: Failed to parse query 'declare function local:gYearMonth($gYearMonth as xs:gYearMonth, $null as xs:boolean) { if ($null) then () else $gYearMonth }; local:gYearMonth(xs:gYearMonth("1972-12"), fn:false()) eq xs:gYearMonth("1972-12")'
cbcl-gYearMonth-equal-013;PRSC Error: Failed to parse query 'declare function local:gYearMonth($gYearMonth as xs:gYearMonth, $null as xs:boolean) { if ($null) then () else $gYearMonth }; exists(local:gYearMonth(xs:gYearMonth("1972-12"), fn:true()) ne xs:gYearMonth("1972-12"))'
cbcl-gYearMonth-equal-014;PRSC Error: Failed to parse query 'declare function local:gYearMonth($gYearMonth as xs:gYearMonth, $null as xs:boolean) { if ($null) then () else $gYearMonth }; local:gYearMonth(xs:gYearMonth("1972-12"), fn:false()) ne xs:gYearMonth("1972-12")'
cbcl-hash-join-005;PRSC Error: Failed to parse query 'declare function local:durationOrFloat($i as xs:integer) { (xs:float(123), xs:float(234), xs:duration("P1D"))[$i] }; for $x in (xs:untypedAtomic("123"), xs:untypedAtomic("234")) for $y in (for $z in (1,2) return local:durationOrFloat($z)) where $x = $y return $x'
cbcl-hash-join-006;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:sequence($arg as xs:integer) as item()* { if ($arg mod 2 eq 0) then (1, 3, 5, 7, 9) else ("a", "b", "c") }; for $x in local:sequence(2) for $y in local:sequence(3) where $x = $y return ($x, $y)'
cbcl-hash-join-007;PRSC Error: Failed to parse query 'declare function local:sequence($arg as xs:integer) as item()* { if ($arg mod 2 eq 0) then (1, 3, 5, 7, 9) else ("a", "b", "c") }; for $x in local:sequence(2) for $y in local:sequence(2) where $x = $y return ($x, $y)'
cbcl-hash-join-008;PRSC Error: Failed to parse query 'declare function local:sequence($arg as xs:integer) as item()* { if ($arg mod 2 eq 0) then (1, 3, 5, 7, 9, "cheese") else (xs:untypedAtomic("1"), xs:untypedAtomic("2")) }; for $x in local:sequence(2) for $y in local:sequence(3) where $x = $y return ($x, $y)'
cbcl-hash-join-009;Expected error code: XPTY0004. Found error code: XPST0003 with error message: Use of XQuery FLWOR expressions in XPath is not allowed
cbcl-hash-join-010;Expected error code: XPTY0004. Found error code: XPST0003 with error message: Use of XQuery FLWOR expressions in XPath is not allowed
cbcl-hash-join-011;PRSC Error: Failed to parse query 'for $x in <t><r><d>1</d><d>1</d><d>1</d></r><r><d>1</d><d>2</d><d>3</d></r><r><d>2</d><d>3</d><d>4</d></r></t>/r, $y in <t><r><d>1</d><d>1</d><d>1</d></r><r><d>2</d><d>4</d><d>6</d></r><r><d>3</d><d>2</d><d>1</d></r></t>/r where $x/d/string(.) = $y/d/string(.) return concat($x, '=', $y)'
cbcl-hash-join-012;PRSC Error: Failed to parse query 'declare variable $strings := ('1','2'); declare variable $untypeds := (<untyped>1</untyped>,<untyped>2</untyped>); for $string in $strings for $untyped in $untypeds where $untyped = $string return $string'
cbcl-hash-join-1;Expected executing the XPath 'for $x in (xs:untypedAtomic("123"), xs:untypedAtomic("234")) for $y in (xs:string("123"), xs:float(123), xs:double(123)) where $x = $y return $x' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: Use of XQuery FLWOR expressions in XPath is not allowed
cbcl-hash-join-2;Use of XQuery FLWOR expressions in XPath is not allowed
cbcl-hash-join-3;Use of XQuery FLWOR expressions in XPath is not allowed
cbcl-hash-join-4;Expected executing the XPath 'for $x in (xs:untypedAtomic("2.0"), xs:untypedAtomic("3"), xs:double("3.0")) for $y in (xs:untypedAtomic("2"), xs:untypedAtomic("3"), xs:double("3")) where $x = $y return $x' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: Use of XQuery FLWOR expressions in XPath is not allowed
cbcl-hexBinary-equal-001;PRSC Error: Failed to parse query '\n         declare function local:hexBinary-value($arg as xs:boolean) as xs:hexBinary { \n            if ($arg) then xs:hexBinary('68656c6c6f') else xs:hexBinary('676f6f64627965') \n         }; \n         local:hexBinary-value(true()) eq local:hexBinary-value(false())'
cbcl-hexBinary-equal-002;PRSC Error: Failed to parse query '\n         declare function local:hexBinary-value($arg as xs:boolean) as xs:hexBinary { \n            if ($arg) then xs:hexBinary('68656c6c6f') else xs:hexBinary('676f6f64627965') \n         }; \n         not(local:hexBinary-value(true()) eq local:hexBinary-value(false()))'
cbcl-hexBinary-equal-003;PRSC Error: Failed to parse query '\n         declare function local:hexBinary-value($arg as xs:boolean) as xs:hexBinary { \n            if ($arg) then xs:hexBinary('68656c6c6f') else xs:hexBinary('676f6f64627965') \n         }; \n         not(local:hexBinary-value(true()) ne local:hexBinary-value(false()))'
cbcl-hours-from-duration-001;The function fn:hours-from-duration with arity 1 is not registered.
cbcl-id-001;PRSC Error: Failed to parse query '\n      	declare function local:generate($arg as xs:integer?) as xs:string* { if ($arg = 0) then () else 'id1', 'id2' }; \n      	let $doc := document { <root /> } return fn:empty( fn:id( local:generate(0), $doc) )\n      '
cbcl-id-002;Expected executing the XPath 'let $doc := document { <root /> } return fn:empty( fn:id( (), $doc) )' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n      	let $doc := document { <root /> } return fn:empty( fn:id( (), $doc) )\n      '
cbcl-id-003;PRSC Error: Failed to parse query '\n      	declare function local:generate($arg as xs:integer?) as xs:string* { if ($arg = 0) then () else 'id1', 'id2' }; \n      	let $doc := document { <root /> } return fn:empty( $doc/fn:id( local:generate(0)) )\n      '
cbcl-idref-001;PRSC Error: Failed to parse query '\n      	declare function local:generate($arg as xs:integer?) as xs:string* { if ($arg = 0) then () else 'id1', 'id2' }; \n      	let $doc := document { <root /> } return fn:empty( fn:idref( local:generate(0), $doc) )\n      '
cbcl-idref-002;Expected executing the XPath 'let $doc := document { <root /> } return fn:empty( fn:idref( (), $doc) )' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n      	let $doc := document { <root /> } return fn:empty( fn:idref( (), $doc) )\n      '
cbcl-idref-003;PRSC Error: Failed to parse query '\n      	declare function local:generate($arg as xs:integer?) as xs:string* { if ($arg = 0) then () else 'id1', 'id2' }; \n      	let $doc := document { <root /> } return fn:empty( $doc/fn:idref( local:generate(0)) )\n      '
cbcl-instance-of-001;Expected XPath for $x in (xs:integer(1), xs:decimal(1)) return (((($x + 1) * 2) - 1) instance of xs:integer) to resolve to true false, but instead got True False
cbcl-is-same-node-001;PRSC Error: Failed to parse query '\n      	declare function local:f() as node() { <a/> }; \n      	local:f() is local:f()\n      '
cbcl-last-in-sequence-001;PRSC Error: Failed to parse query '\n      	declare function local:generate($arg as xs:integer?) { if ($arg = 0) then (1, 2, 3) else () }; \n      	( local:generate(0), 1, local:generate(0) )[last()]\n      '
cbcl-last-in-sequence-002;PRSC Error: Failed to parse query '\n      	declare function local:generate($arg as xs:integer?) as xs:integer* { if ($arg = 0) then (1, 2, 3) else $arg }; \n      	( local:generate(()), for $x in local:generate(0) return $x + 2 )[last()]\n      '
cbcl-last-in-sequence-003;PRSC Error: Failed to parse query '\n      	declare function local:generate($arg as xs:integer?) as xs:integer? { if ($arg = 0) then 0 else () }; \n      	( local:generate(()), for $x in local:generate(0) return $x + 2 )[last()]\n      '
cbcl-last-in-sequence-004;PRSC Error: Failed to parse query '\n      	declare function local:generate($arg as xs:integer?) as xs:integer* { if ($arg = 0) then ( 1, 2, 3 ) else ( $arg ) }; \n      	( local:generate(()), for $x at $p in local:generate(0) return $p + $x)[last()]\n      '
cbcl-last-in-sequence-005;PRSC Error: Failed to parse query '\n      	declare function local:generate($arg as xs:integer?) as xs:integer? { if ($arg = 0) then 1 else $arg }; \n      	( local:generate(()), for $x at $p in local:generate(0) return $p + $x)[last()]\n      '
cbcl-last-in-sequence-006;PRSC Error: Failed to parse query '\n      	declare function local:generate($arg as xs:integer?) as xs:string* { if ($arg = 0) then ('a', 'b', 'c') else ('d' ) }; \n      	( if (local:generate(1) = 'd') then () else 1, for $x in local:generate(0) return fn:lower-case($x))[last()]\n      '
cbcl-last-in-sequence-007;PRSC Error: Failed to parse query '\n      	declare function local:generate($arg as xs:integer?) as xs:integer? { $arg }; \n      	( if (local:generate(0) = 0) then () else 1, for $x in local:generate(0) return -$x)[last()]\n      '
cbcl-last-in-sequence-008;PRSC Error: Failed to parse query '( (<a><b>cheese</b></a>)/b )[last()]'
cbcl-last-in-sequence-009;PRSC Error: Failed to parse query '\n      	declare function local:generate($arg as xs:integer?) as xs:string* { if ($arg = 0) then ('a', 'b', 'c') else () }; \n      	( local:generate(()), for $x in local:generate(0) return 3)[last()]\n      '
cbcl-last-in-sequence-010;PRSC Error: Failed to parse query '\n      	declare function local:generate($arg as xs:integer?) as xs:string* { if ($arg = 0) then ('a', 'b', 'c') else () }; \n      	boolean(local:generate(0)[last()])\n      '
cbcl-last-in-sequence-011;PRSC Error: Failed to parse query 'declare function local:generate($arg as xs:integer?) as xs:string* { if ($arg = 0) then ('a', 'b', 'c') else () }; boolean(local:generate(1)[last()])'
cbcl-last-in-sequence-012;PRSC Error: Failed to parse query 'declare function local:generate($arg as xs:boolean) as xs:string+ { if ($arg) then ('a', 'b', 'c') else ('A', 'B', 'C') }; ( for $x in local:generate(true()) return 3)[last()]'
cbcl-left-outer-join-001;Use of XQuery FLWOR expressions in XPath is not allowed
cbcl-left-outer-join-002;PRSC Error: Failed to parse query '<e> { for $x in 1 to 10 return <a>{for $y in 1 to 10 where $x > 7 and $y = $x return $y}</a> } </e>'
cbcl-left-outer-join-003;PRSC Error: Failed to parse query '<e> { for $x in 1 to 10 where $x > 7 return <a>{for $y in 1 to 10 where $y = $x return $y}</a> } </e>'
cbcl-left-outer-join-004;PRSC Error: Failed to parse query '<tbody> { \n         let $rows := <tables> <table> <row> <entry>Acetazolamide</entry> <entry>Acetazolamide</entry> </row> <row> <entry>Acetazolamide sodium</entry> <entry>Acetazolamide sodium</entry> </row> </table> <table> <row> <entry>Acetylcholine chloride</entry> <entry>Acetylcholine chloride</entry> </row> </table> <table> <row> <entry>Acetylcysteine</entry> <entry>Acetylcysteine</entry> </row> <row> <entry>Acetylcysteine sodium</entry> <entry>Acetylcysteine sodium</entry> </row> </table> </tables>/table/row \n         return for $g in distinct-values($rows/entry[2][string(.)])  \n                order by $g \n                return let $matches := for $row in $rows \n                                       where $g = string($row/entry[2][string(.)]) \n                                       return $row/entry[1] \n                       return <entry> { $matches/( <link> { node() } </link>, text { if (position() lt last()) then '; ' else () } ) } </entry> \n         } </tbody>'
cbcl-literals-001;Expected error code: XPST0003. Query succeeded with result: &#x100000000x
cbcl-literals-002;Expected error code: XPST0003. Query succeeded with result: &#x100000000
cbcl-literals-003;Expected error code: XPST0003. Query succeeded with result: &#x;
cbcl-literals-004;Expected error code: XQST0090. Query succeeded with result: &#x0;
cbcl-literals-005;Expected error code: XPST0003. Query succeeded with result: &#100000000x
cbcl-literals-006;Expected error code: XPST0003. Query succeeded with result: &#100000000
cbcl-literals-007;Expected error code: XPST0003. Query succeeded with result: &#;
cbcl-literals-008;Expected error code: XQST0090. Query succeeded with result: &#x0;
cbcl-logical-and-002;PRSC Error: Failed to parse query 'declare function local:times-table($n as xs:integer) as xs:integer* { for $x in 1 to 12 return $x * $n }; (every $x in local:times-table(15) satisfies ($x mod 3 eq 0)) and (every $y in local:times-table(15) satisfies ($y mod 5 eq 0))'
cbcl-logical-and-003;PRSC Error: Failed to parse query 'declare function local:factorial($n as xs:integer) as xs:integer { if ($n le 1) then 1 else $n * local:factorial($n - 1) }; declare function local:is-divisible($n as xs:integer, $d as xs:integer) { $n mod $d eq 0 }; not(local:is-divisible(local:factorial(5), 3)) and not(local:is-divisible(local:factorial(5), 2))'
cbcl-logical-or-001;PRSC Error: Failed to parse query 'declare function local:times-table($n as xs:integer) as xs:integer* { for $x in 1 to 12 return $x * $n }; (some $x in local:times-table(15) satisfies ($x mod 2 eq 0)) or (some $y in local:times-table(15) satisfies ($y mod 3 eq 0))'
cbcl-logical-or-002;PRSC Error: Failed to parse query 'declare function local:factorial($n as xs:integer) as xs:integer? { if ($n lt 1) then () else if ($n eq 1) then 1 else $n * local:factorial($n - 1) }; (every $x in local:factorial(5) satisfies ($x mod 3 eq 0)) or (every $y in local:factorial(5) satisfies ($y mod 5 eq 0))'
cbcl-logical-or-003;PRSC Error: Failed to parse query 'declare function local:factorial($n as xs:integer) as xs:integer { if ($n le 1) then 1 else $n * local:factorial($n - 1) }; declare function local:is-divisible($n as xs:integer, $d as xs:integer) { $n mod $d eq 0 }; not(local:is-divisible(local:factorial(5), 3)) or not(local:is-divisible(local:factorial(5), 2))'
cbcl-map-concat-001;PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then true() else () }; declare function local:g($x) { if ($x) then "true" else "false" }; let $x := local:g(true()) for $y in local:f($x) return ($y, $x)'
cbcl-map-concat-002;PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then true() else () }; empty(for $x in local:f(false()), $y in 1 to 10 return ($x, $y))'
cbcl-map-concat-003;PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then true() else () }; for $x in local:f(true()), $y in 1 to 10 return ($x, $y)'
cbcl-matches-001;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-002;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-003;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-004;Expected executing the XPath 'fn:matches('aaa', 'a{99999999999999999999999999}')' to resolve to one of the expected results, but got System.NotImplementedException: BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-005;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-006;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-006b;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-007;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-008;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-009;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-010;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-011;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-012;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-013;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-014;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-015;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-016;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-017;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-018;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-019;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-020;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-021;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-022;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-023;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-024;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-025;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-026;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-027;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-028;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-029;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-030;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-031;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-032;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-033;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-034;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-035;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-036;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-037;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-038;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-039;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-040;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-041;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-041b;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-042;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-043;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-044;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-045;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-046;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-047;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-047b;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-048;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-049;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-050;The function fn:matches with arity 3 is not registered.
cbcl-matches-051;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-052;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
cbcl-matches-053;The function fn:matches with arity 3 is not registered.
cbcl-max-001;PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) { \n      		if ($x = 0) then true() else false() \n      	}; \n      	max(for $x in (1,2,3) return local:f($x))\n      '
cbcl-max-002;PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) { \n      		if ($x = 2) then true() else false() \n      	}; \n      	max(for $x in (1,2,3) return local:f($x))\n      '
cbcl-max-003;Expected error code: FORG0006. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) { \n      		if ($x = 3) then $x else false() \n      	}; \n      	max(for $x in (1,2,3) return local:f($x))\n      '
cbcl-max-004;Expected error code: FORG0006. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) {\n      		 if ($x < 3) then current-date() else current-time() \n      	}; \n      	max(for $x in (1,2,3) return local:f($x))\n      '
cbcl-max-005;PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) { \n      		if ($x = 2) then xs:dateTime("3000-12-01T12:00:00") else current-dateTime() \n      	}; \n      	max(for $x in (1,2,3) return local:f($x))\n      '
cbcl-max-006;Expected error code: FORG0006. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) { \n      		if ($x < 3) then current-dateTime() else xs:dayTimeDuration("PT3S") \n      	}; \n      	max(for $x in (1,2,3) return local:f($x))\n      '
cbcl-max-007;PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) { \n      		if ($x = 2) then xs:dayTimeDuration("P1D") else xs:dayTimeDuration("PT3S") \n      	}; \n      	max(for $x in (1,2,3) return local:f($x))\n      '
cbcl-max-008;Expected error code: FORG0006. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) {\n      		 if ($x = 3) then xs:duration("P1D") else xs:dayTimeDuration("PT3S") \n      	}; \n      	max(for $x in (1,2,3) return local:f($x))\n      '
cbcl-max-009;PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) {\n      		 (xs:decimal(1.1), xs:float(2.2), xs:double(1.4), xs:integer(2))[$x] \n      	}; \n      	max(for $x in (1,2,3) return local:f($x)) instance of xs:double\n      '
cbcl-max-010;PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) { \n      		(xs:decimal(1.3), xs:float(1.2), xs:double(1.4), xs:integer(2))[$x] \n      	}; \n      	max(for $x in (1,2,3) return local:f($x)) instance of xs:double\n      '
cbcl-max-011;Expected error code: FORG0006. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) {\n      		 (xs:decimal(1.1), xs:float(1.2), xs:double(0.4), xs:string("2"))[$x] \n      	}; \n      	max(for $x in (1,4,2,3) return local:f($x))\n      '
cbcl-max-012;PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) { \n      		(xs:decimal(1.1), xs:float(1.2), xs:double(0.4), xs:integer("-3"))[$x] \n      	}; \n      	max(for $x in (4,2,1,3) return local:f($x)) instance of xs:double\n      '
cbcl-max-013;PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) { \n      		if ($x = 2) then xs:time("12:00:00-01:00") else xs:time("12:00:00+01:00") \n      	}; \n      	max(for $x in (1,2,3) return local:f($x))\n      '
cbcl-max-014;Expected error code: FORG0006. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) { \n      		if ($x < 3) then current-time() else xs:dayTimeDuration("PT3S") \n      	}; \n      	max(for $x in (1,2,3) return local:f($x))\n      '
cbcl-max-015;PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) { \n      		if ($x = 2) then xs:yearMonthDuration("P13M") else xs:yearMonthDuration("P1Y") \n      	};\n      	max(for $x in (1,2,3) return local:f($x))\n      '
cbcl-max-016;Expected error code: FORG0006. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) { \n      		if ($x = 3) then xs:duration("P1Y") else xs:yearMonthDuration("P11M") \n      	}; \n      	max(for $x in (1,2,3) return local:f($x))\n      '
cbcl-max-017;Expected error code: FORG0006. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) as xs:duration { \n      		if ($x = 1) then xs:duration("P1Y") else xs:yearMonthDuration("P11M") \n      	}; \n      	max(for $x in (1,2,3) return local:f($x))'
cbcl-max-018;PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) as xs:integer { $x }; \n      	max(local:f(4) to local:f(10))'
cbcl-min-001;PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) { if ($x = 0) then false() else true() }; \n      	min(for $x in (1,2,3) return local:f($x))\n      '
cbcl-min-002;PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) { if ($x = 2) then false() else true() }; \n      	min(for $x in (1,2,3) return local:f($x))\n      '
cbcl-min-003;Expected error code: FORG0006. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) { if ($x = 3) then $x else false() }; \n      	min(for $x in (1,2,3) return local:f($x))\n      '
cbcl-min-004;Expected error code: FORG0006. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) { if ($x < 3) then current-date() else current-time() }; \n      	min(for $x in (1,2,3) return local:f($x))\n      '
cbcl-min-005;PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) { if ($x = 2) then xs:dateTime("1996-12-01T12:00:00") else current-dateTime() }; \n      	min(for $x in (1,2,3) return local:f($x))\n      '
cbcl-min-006;Expected error code: FORG0006. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) { if ($x < 3) then current-dateTime() else xs:dayTimeDuration("PT3S") }; \n      	min(for $x in (1,2,3) return local:f($x))\n      '
cbcl-min-007;PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) { if ($x = 2) then xs:dayTimeDuration("P1D") else xs:dayTimeDuration("PT3S") }; \n      	min(for $x in (1,2,3) return local:f($x))\n      '
cbcl-min-008;Expected error code: FORG0006. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) { if ($x = 3) then xs:duration("P1D") else xs:dayTimeDuration("PT3S") }; \n      	min(for $x in (1,2,3) return local:f($x))\n      '
cbcl-min-009;PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) { (xs:decimal(1.1), xs:float(2.2), xs:double(1.4), xs:integer(2))[$x] }; \n      	min(for $x in (1,2,3) return local:f($x)) instance of xs:double\n      '
cbcl-min-010;PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) { (xs:decimal(1.3), xs:float(1.2), xs:double(1.4), xs:integer(2))[$x] }; \n      	min(for $x in (1,2,3) return local:f($x)) instance of xs:double'
cbcl-min-011;Expected error code: FORG0006. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) { (xs:decimal(1.1), xs:float(1.2), xs:double(0.4), xs:string("2"))[$x] }; \n      	min(for $x in (1,4,2,3) return local:f($x))\n      '
cbcl-min-012;PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) { (xs:decimal(1.1), xs:float(1.2), xs:double(0.4), xs:integer("-3"))[$x] }; \n      	min(for $x in (4,2,1,3) return local:f($x)) instance of xs:double\n      '
cbcl-min-013;PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) { if ($x = 2) then xs:time("12:00:00-01:00") else xs:time("12:00:00+01:00") }; \n      	min(for $x in (1,2,3) return local:f($x))\n      '
cbcl-min-014;Expected error code: FORG0006. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) { if ($x < 3) then current-time() else xs:dayTimeDuration("PT3S") }; \n      	min(for $x in (1,2,3) return local:f($x))\n      '
cbcl-min-015;PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) { if ($x = 2) then xs:yearMonthDuration("P11M") else xs:yearMonthDuration("P1Y") }; \n      	min(for $x in (1,2,3) return local:f($x))\n      '
cbcl-min-016;Expected error code: FORG0006. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) { if ($x = 3) then xs:duration("P1Y") else xs:yearMonthDuration("P11M") }; \n      	min(for $x in (1,2,3) return local:f($x))\n      '
cbcl-min-017;Expected error code: FORG0006. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) as xs:duration { if ($x = 1) then xs:duration("P1Y") else xs:yearMonthDuration("P11M") }; \n      	min(for $x in (1,2,3) return local:f($x))\n      '
cbcl-min-018;PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) as xs:integer { $x }; \n      	min(local:f(4) to local:f(10))\n      '
cbcl-minus-001;PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:dayTimeDuration("P1D") }; xs:date("1997-01-01") - local:f(false())'
cbcl-minus-002;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:dayTimeDuration("P1D") }; xs:date("1997-01-01") - local:f(true())'
cbcl-minus-003;PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:yearMonthDuration("P1M") }; xs:date("1997-01-01") - local:f(false())'
cbcl-minus-004;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:yearMonthDuration("P1M") }; xs:date("1997-01-01") - local:f(true())'
cbcl-minus-005;PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:dayTimeDuration("P1D") }; xs:dateTime("1997-01-01T12:00:00") - local:f(false())'
cbcl-minus-006;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:dayTimeDuration("P1D") }; xs:dateTime("1997-01-01T12:00:00") - local:f(true())'
cbcl-minus-007;PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:yearMonthDuration("P1M") }; xs:dateTime("1997-01-01T12:00:00") - local:f(false())'
cbcl-minus-008;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:yearMonthDuration("P1M") }; xs:dateTime("1997-01-01T12:00:00") - local:f(true())'
cbcl-minus-009;PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:dayTimeDuration("PT1H") }; xs:time("12:00:00") - local:f(false())'
cbcl-minus-010;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:dayTimeDuration("P1H") }; xs:time("12:00:00") - local:f(true())'
cbcl-minus-011;PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:dayTimeDuration("P1D") }; xs:dayTimeDuration("PT1H") - local:f(false())'
cbcl-minus-012;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:dayTimeDuration("P1D") }; xs:dayTimeDuration("PT1H") - local:f(true())'
cbcl-minus-013;PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:yearMonthDuration("P1M") }; xs:yearMonthDuration("P1Y") - local:f(false())'
cbcl-minus-014;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:yearMonthDuration("P1M") }; xs:yearMonthDuration("P1Y") - local:f(true())'
cbcl-minus-015;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:dayTimeDuration("P1D") }; local:f(false()) - xs:date("1997-01-01")'
cbcl-minus-016;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:dayTimeDuration("P1D") }; local:f(true()) - xs:date("1997-01-01")'
cbcl-minus-017;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:yearMonthDuration("P1M") }; local:f(false()) - xs:date("1997-01-01")'
cbcl-minus-018;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:yearMonthDuration("P1M") }; local:f(true()) - xs:date("1997-01-01")'
cbcl-minus-019;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:dayTimeDuration("P1D") }; local:f(false()) - xs:dateTime("1997-01-01T12:00:00")'
cbcl-minus-020;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:dayTimeDuration("P1D") }; local:f(true()) - xs:dateTime("1997-01-01T12:00:00")'
cbcl-minus-021;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:yearMonthDuration("P1M") }; local:f(false()) - xs:dateTime("1997-01-01T12:00:00")'
cbcl-minus-022;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:yearMonthDuration("P1M") }; local:f(true()) - xs:dateTime("1997-01-01T12:00:00")'
cbcl-minus-023;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:dayTimeDuration("PT1H") }; local:f(false()) - xs:time("12:00:00")'
cbcl-minus-024;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:dayTimeDuration("P1H") }; local:f(true()) - xs:time("12:00:00")'
cbcl-minus-025;PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:dayTimeDuration("P1D") }; local:f(false()) - xs:dayTimeDuration("PT1H")'
cbcl-minus-026;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:dayTimeDuration("P1D") }; local:f(true()) - xs:dayTimeDuration("PT1H")'
cbcl-minus-027;PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:yearMonthDuration("P1M") }; local:f(false()) - xs:yearMonthDuration("P1Y")'
cbcl-minus-028;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:yearMonthDuration("P1M") }; local:f(true()) - xs:yearMonthDuration("P1Y")'
cbcl-minus-029;PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:yearMonthDuration("P1M") }; local:f(false()) - local:f(false())'
cbcl-minus-030;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:yearMonthDuration("P1M") }; local:f(true()) - local:f(true())'
cbcl-minus-031;PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:dayTimeDuration("P1D") }; local:f(false()) - local:f(false())'
cbcl-minus-032;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:dayTimeDuration("P1D") }; local:f(true()) - local:f(true())'
cbcl-minus-033;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:dayTimeDuration("P1D") }; declare function local:g($x) { if ($x) then xs:duration("P1M") else xs:yearMonthDuration("P1M") }; local:f(false()) - local:g(false())'
cbcl-minus-034;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:dayTimeDuration("P1D") }; declare function local:g($x) { if ($x) then xs:duration("P1M") else xs:yearMonthDuration("P1M") }; local:f(true()) - local:g(true())'
cbcl-minutes-from-duration-001;The function fn:minutes-from-duration with arity 1 is not registered.
cbcl-months-from-duration-001;The function fn:months-from-duration with arity 1 is not registered.
cbcl-multiply-dayTimeDuration-001;PRSC Error: Failed to parse query 'declare function local:dayTimeDuration($days as xs:integer) as xs:dayTimeDuration { xs:dayTimeDuration(concat("P", $days, "D")) }; local:dayTimeDuration(2) * 0'
cbcl-multiply-dayTimeDuration-002;PRSC Error: Failed to parse query 'declare function local:dayTimeDuration($days as xs:integer) as xs:dayTimeDuration { xs:dayTimeDuration(concat("P", $days, "D")) }; local:dayTimeDuration(2) * 1'
cbcl-multiply-dayTimeDuration-003;Expected error code: FOCA0005. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:dayTimeDuration($days as xs:integer) as xs:dayTimeDuration { xs:dayTimeDuration(concat("P", $days, "D")) }; local:dayTimeDuration(2) * xs:double("NaN")'
cbcl-multiply-dayTimeDuration-004;PRSC Error: Failed to parse query 'declare function local:dayTimeDuration($days as xs:integer) as xs:dayTimeDuration { xs:dayTimeDuration(concat("P", $days, "D")) }; 0 * local:dayTimeDuration(2)'
cbcl-multiply-dayTimeDuration-005;PRSC Error: Failed to parse query 'declare function local:dayTimeDuration($days as xs:integer) as xs:dayTimeDuration { xs:dayTimeDuration(concat("P", $days, "D")) }; 1 * local:dayTimeDuration(2)'
cbcl-multiply-dayTimeDuration-006;Expected error code: FOCA0005. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:dayTimeDuration($days as xs:integer) as xs:dayTimeDuration { xs:dayTimeDuration(concat("P", $days, "D")) }; xs:double("NaN") * local:dayTimeDuration(2)'
cbcl-multiply-yearMonthDuration-001;PRSC Error: Failed to parse query '\n        declare function local:yearMonthDuration($years as xs:integer) as xs:yearMonthDuration { xs:yearMonthDuration(concat("P", $years, "Y")) };\n        local:yearMonthDuration(2) * 0'
cbcl-multiply-yearMonthDuration-002;PRSC Error: Failed to parse query '\n        declare function local:yearMonthDuration($years as xs:integer) as xs:yearMonthDuration { xs:yearMonthDuration(concat("P", $years, "Y")) };\n        local:yearMonthDuration(2) * 1'
cbcl-multiply-yearMonthDuration-004;PRSC Error: Failed to parse query '\n        declare function local:yearMonthDuration($years as xs:integer) as xs:yearMonthDuration { xs:yearMonthDuration(concat("P", $years, "Y")) };\n        0 * local:yearMonthDuration(2)'
cbcl-multiply-yearMonthDuration-005;PRSC Error: Failed to parse query '\n        declare function local:yearMonthDuration($years as xs:integer) as xs:yearMonthDuration { xs:yearMonthDuration(concat("P", $years, "Y")) };\n        1 * local:yearMonthDuration(2)'
cbcl-node-after-001;PRSC Error: Failed to parse query '\n      	let $node := <a> <b/> <c/> </a> \n      	return not(exactly-one($node/b[1]) >> exactly-one($node/c[1]))\n      '
cbcl-node-after-002;PRSC Error: Failed to parse query '\n      	let $node := <a> <b/> <c/> </a> \n      	return not(not(exactly-one($node/b[1]) >> exactly-one($node/c[1])))\n      '
cbcl-node-before-001;PRSC Error: Failed to parse query '\n      	let $node := <a> <b/> <c/> </a> \n      	return not(exactly-one($node/b[1]) << exactly-one($node/c[1]))\n      '
cbcl-node-before-002;PRSC Error: Failed to parse query '\n      	let $node := <a> <b/> <c/> </a> \n      	return not(not(exactly-one($node/b[1]) << exactly-one($node/c[1])))\n      '
cbcl-node-name-001;PRSC Error: Failed to parse query 'empty(node-name( comment { "comments have no name " } ) )'
cbcl-node-same-001;PRSC Error: Failed to parse query '\n      	let $node := <a> <b/> <c/> </a> \n      	return not(exactly-one($node/b[1]) is exactly-one($node/c[1]))\n      '
cbcl-node-same-002;PRSC Error: Failed to parse query '\n      	let $node := <a> <b/> <c/> </a> \n      	return not(not(exactly-one($node/b[1]) is exactly-one($node/c[1])))\n      '
cbcl-normalizedstring-001;Atomic Value for XsNormalizedString is not implemented yet.
cbcl-normalizedstring-002;Atomic Value for XsNormalizedString is not implemented yet.
cbcl-normalizedstring-002b;Atomic Value for XsNormalizedString is not implemented yet.
cbcl-normalizedstring-003;Atomic Value for XsNormalizedString is not implemented yet.
cbcl-normalizedstring-004;PRSC Error: Failed to parse query '"&#x9;" castable as xs:normalizedString'
cbcl-normalizedstring-005;PRSC Error: Failed to parse query '5 castable as xs:normalizedString'
cbcl-normalizedstring-006;PRSC Error: Failed to parse query 'xs:normalizedString("test") castable as xs:normalizedString'
cbcl-not-001;PRSC Error: Failed to parse query 'fn:not(for $x in 1 to 10 return <e>{$x}</e>)'
cbcl-not-003;The function current-date with arity 0 is not registered.
cbcl-not-004;PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) as xs:integer { $x }; \n      	not(not(local:f(1)))\n      '
cbcl-not-005;PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) as xs:integer* { 1 to $x }; \n      	not(exists(local:f(0)))\n      '
cbcl-ns-fixup-1;PRSC Error: Failed to parse query ' \n      	let $x := <ns:foo xmlns:ns="http://www.w3.org/foo" ns:attr="foo" /> \n      	return let $y := <ns:foo xmlns:ns="http://www.w3.org/bar" ns:attr="bar" /> \n      	return let $z := <root> { $x/@*, $y/@* } </root> \n      	return count(distinct-values(in-scope-prefixes($z)))\n       = 3'
cbcl-numeric-divide-001;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:double) as xs:double { $arg * $arg }; \n      	xs:double('NaN') div local:square(7)\n      '
cbcl-numeric-divide-002;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:double) as xs:double { $arg * $arg }; \n      	local:square(7) div xs:double('NaN')\n      '
cbcl-numeric-divide-003;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:double) as xs:double { $arg * $arg }; \n      	local:square(7) div 1e0\n      	'
cbcl-numeric-divide-004;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:double) as xs:double { $arg * $arg }; \n      	local:square(7) div -1e0\n      '
cbcl-numeric-divide-005;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:float) as xs:float { $arg * $arg }; \n      	xs:float('NaN') div local:square(7)\n      '
cbcl-numeric-divide-006;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:float) as xs:float { $arg * $arg }; \n      	local:square(7) div xs:float('NaN')\n      '
cbcl-numeric-divide-007;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:float) as xs:float { $arg * $arg }; \n      	local:square(7) div xs:float(1)\n      '
cbcl-numeric-divide-008;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:float) as xs:float { $arg * $arg }; \n      	local:square(7) div xs:float(-1)\n      '
cbcl-numeric-divide-009;Expected error code: FOAR0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:decimal) as xs:decimal { $arg * $arg }; \n      	local:square(2.0) div 0.0\n      '
cbcl-numeric-divide-010;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:decimal) as xs:decimal { $arg * $arg }; \n      	local:square(7.0) div 1.0\n      '
cbcl-numeric-divide-011;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:decimal) as xs:decimal { $arg * $arg }; \n      	local:square(7.0) div -1.0\n      '
cbcl-numeric-divide-012;Expected error code: FOAR0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; \n      	local:square(2) div 0\n      '
cbcl-numeric-divide-013;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; \n      	local:square(7) div 1\n      '
cbcl-numeric-divide-014;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; \n      	local:square(7) div -1\n      '
cbcl-numeric-divide-015;Expected executing the XPath '10000000000000000000000000000.0 div 0.1 gt 0' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: FOAR0002. Found error code: FOCA0001 with error message: Overflow when creating a Decimal from 1E+29.
cbcl-numeric-equal-001;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:double) as xs:double { $arg * $arg }; \n      	not( local:square(1e0) eq local:square(2e0) )'
cbcl-numeric-equal-002;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:float) as xs:float { $arg * $arg }; \n      	not( local:square(xs:float(1e0)) eq local:square(xs:float(2e0)) )'
cbcl-numeric-equal-003;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:decimal) as xs:decimal { $arg * $arg }; \n      	not( local:square(1.0) eq local:square(2.0) )'
cbcl-numeric-equal-004;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; \n      	not( local:square(1) eq local:square(2) )'
cbcl-numeric-equal-005;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:double) as xs:double { $arg * $arg }; \n      	not( local:square(1e0) ne local:square(2e0) )'
cbcl-numeric-equal-006;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:float) as xs:float { $arg * $arg }; \n      	not( local:square(xs:float(1e0)) ne local:square(xs:float(2e0)) )'
cbcl-numeric-equal-007;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:decimal) as xs:decimal { $arg * $arg }; \n      	not( local:square(1.0) ne local:square(2.0) )'
cbcl-numeric-equal-008;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; \n      	not( local:square(1) ne local:square(2) )'
cbcl-numeric-equal-009;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; \n      	let $x := local:square(4) return 0 eq $x - 1'
cbcl-numeric-equal-010;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; \n      	let $x := local:square(4) return 0 eq $x + 1'
cbcl-numeric-equal-011;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; \n      	let $x := local:square(4) return 4 eq $x + 1'
cbcl-numeric-equal-012;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; \n      	let $x := local:square(4) return 4 eq 1 + $x'
cbcl-numeric-equal-013;Expected executing the XPath 'declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; \n      \tlet $x := local:square(4) return -52676506002282294014967032012 eq $x + 52676506002282294014967032012' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; \n      	let $x := local:square(4) return -52676506002282294014967032012 eq $x + 52676506002282294014967032012'
cbcl-numeric-equal-014;Expected executing the XPath 'declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; \n      \tlet $x := local:square(4) return -52676506002282294014967032012 eq 52676506002282294014967032012 + $x' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; \n      	let $x := local:square(4) return -52676506002282294014967032012 eq 52676506002282294014967032012 + $x'
cbcl-numeric-equal-015;Expected executing the XPath 'declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; \n      \tlet $x := local:square(4) return 4 eq 1 - $x' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; \n      	let $x := local:square(4) return 4 eq 1 - $x'
cbcl-numeric-equal-016;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; \n      	let $x := local:square(4) return 4 eq $x - 1'
cbcl-numeric-equal-017;Expected executing the XPath 'declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; \n      \tlet $x := local:square(4) return -52676506002282294014967032012 eq 52676506002282294014967032012 - $x' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; \n      	let $x := local:square(4) return -52676506002282294014967032012 eq 52676506002282294014967032012 - $x'
cbcl-numeric-equal-018;Expected executing the XPath 'declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; \n      \tlet $x := local:square(4) return 52676506002282294014967032012 eq $x - 52676506002282294014967032012' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; \n      	let $x := local:square(4) return 52676506002282294014967032012 eq $x - 52676506002282294014967032012'
cbcl-numeric-greater-than-001;PRSC Error: Failed to parse query 'declare function local:square($arg as xs:double) as xs:double { $arg * $arg }; not( local:square(1e0) gt local:square(2e0) )'
cbcl-numeric-greater-than-002;PRSC Error: Failed to parse query 'declare function local:square($arg as xs:float) as xs:float { $arg * $arg }; not( local:square(xs:float(1e0)) gt local:square(xs:float(2e0)) )'
cbcl-numeric-greater-than-003;PRSC Error: Failed to parse query 'declare function local:square($arg as xs:decimal) as xs:decimal { $arg * $arg }; not( local:square(1.0) gt local:square(2.0) )'
cbcl-numeric-greater-than-004;PRSC Error: Failed to parse query 'declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; not( local:square(1) gt local:square(2) )'
cbcl-numeric-greater-than-005;PRSC Error: Failed to parse query 'declare function local:square($arg as xs:double) as xs:double { $arg * $arg }; not( local:square(1e0) le local:square(2e0) )'
cbcl-numeric-greater-than-006;PRSC Error: Failed to parse query 'declare function local:square($arg as xs:float) as xs:float { $arg * $arg }; not( local:square(xs:float(1e0)) le local:square(xs:float(2e0)) )'
cbcl-numeric-greater-than-007;PRSC Error: Failed to parse query 'declare function local:square($arg as xs:decimal) as xs:decimal { $arg * $arg }; not( local:square(1.0) le local:square(2.0) )'
cbcl-numeric-greater-than-008;PRSC Error: Failed to parse query 'declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; not( local:square(1) le local:square(2) )'
cbcl-numeric-greater-than-009;PRSC Error: Failed to parse query 'declare function local:square($arg as xs:double) as xs:double { $arg * $arg }; not(not( local:square(1e0) gt local:square(2e0) ))'
cbcl-numeric-greater-than-010;PRSC Error: Failed to parse query 'declare function local:square($arg as xs:float) as xs:float { $arg * $arg }; not(not( local:square(xs:float(1e0)) gt local:square(xs:float(2e0)) ))'
cbcl-numeric-greater-than-011;PRSC Error: Failed to parse query 'declare function local:square($arg as xs:double) as xs:double { $arg * $arg }; not(not( local:square(1e0) le local:square(2e0) ))'
cbcl-numeric-greater-than-012;PRSC Error: Failed to parse query 'declare function local:square($arg as xs:float) as xs:float { $arg * $arg }; not(not( local:square(xs:float(1e0)) le local:square(xs:float(2e0)) ))'
cbcl-numeric-greater-than-013;PRSC Error: Failed to parse query 'declare function local:factorial($arg as xs:integer) as xs:integer { if ($arg lt 1) then 1 else $arg * local:factorial($arg - 1) }; let $x := local:factorial(5) return $x + 1 gt 121'
cbcl-numeric-greater-than-014;PRSC Error: Failed to parse query 'declare function local:factorial($arg as xs:integer) as xs:integer { if ($arg lt 1) then 1 else $arg * local:factorial($arg - 1) }; let $x := local:factorial(5) return $x - 1 gt 121'
cbcl-numeric-greater-than-015;PRSC Error: Failed to parse query 'declare function local:factorial($arg as xs:integer) as xs:integer { if ($arg lt 1) then 1 else $arg * local:factorial($arg - 1) }; let $x := local:factorial(5) return 121 gt $x + 1'
cbcl-numeric-greater-than-016;PRSC Error: Failed to parse query 'declare function local:factorial($arg as xs:integer) as xs:integer { if ($arg lt 1) then 1 else $arg * local:factorial($arg - 1) }; let $x := local:factorial(5) return 121 gt 1 + $x'
cbcl-numeric-greater-than-017;PRSC Error: Failed to parse query 'declare function local:factorial($arg as xs:integer) as xs:integer { if ($arg lt 1) then 1 else $arg * local:factorial($arg - 1) }; let $x := local:factorial(5) return $x + 1 le 121'
cbcl-numeric-greater-than-018;PRSC Error: Failed to parse query 'declare function local:factorial($arg as xs:integer) as xs:integer { if ($arg lt 1) then 1 else $arg * local:factorial($arg - 1) }; let $x := local:factorial(5) return $x - 1 le 121'
cbcl-numeric-greater-than-019;PRSC Error: Failed to parse query 'declare function local:factorial($arg as xs:integer) as xs:integer { if ($arg lt 1) then 1 else $arg * local:factorial($arg - 1) }; let $x := local:factorial(5) return 121 le $x + 1'
cbcl-numeric-greater-than-020;PRSC Error: Failed to parse query 'declare function local:factorial($arg as xs:integer) as xs:integer { if ($arg lt 1) then 1 else $arg * local:factorial($arg - 1) }; let $x := local:factorial(5) return 121 le 1 + $x'
cbcl-numeric-greater-than-021;PRSC Error: Failed to parse query 'declare function local:factorial($arg as xs:integer) as xs:integer { if ($arg lt 1) then 1 else $arg * local:factorial($arg - 1) }; let $x := local:factorial(5) return 121 gt $x - 1'
cbcl-numeric-greater-than-022;PRSC Error: Failed to parse query 'declare function local:factorial($arg as xs:integer) as xs:integer { if ($arg lt 1) then 1 else $arg * local:factorial($arg - 1) }; let $x := local:factorial(5) return 1 + $x gt 121'
cbcl-numeric-greater-than-023;PRSC Error: Failed to parse query 'declare function local:factorial($arg as xs:integer) as xs:integer { if ($arg lt 1) then 1 else $arg * local:factorial($arg - 1) }; let $x := local:factorial(5) return 1 + $x le 121'
cbcl-numeric-greater-than-024;PRSC Error: Failed to parse query 'declare function local:factorial($arg as xs:integer) as xs:integer { if ($arg lt 1) then 1 else $arg * local:factorial($arg - 1) }; let $x := local:factorial(5) return 121 le $x - 1'
cbcl-numeric-idivide-001;Expected executing the XPath 'declare function local:square($arg as xs:decimal) as xs:decimal { $arg * $arg }; \n      \tlocal:square(4294967296.0) idiv 0.0000000000005 gt 0' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:decimal) as xs:decimal { $arg * $arg }; \n      	local:square(4294967296.0) idiv 0.0000000000005 gt 0'
cbcl-numeric-idivide-002;Expected executing the XPath 'declare function local:square($arg as xs:double) as xs:double { $arg * $arg }; \n      \tlocal:square(1e100) idiv 5e-100' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: FOAR0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:double) as xs:double { $arg * $arg }; \n      	local:square(1e100) idiv 5e-100'
cbcl-numeric-idivide-003;Expected error code: FOAR0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:float) as xs:float { $arg * $arg }; \n      	local:square(xs:float(1e30)) idiv xs:float(5e-30)'
cbcl-numeric-idivide-004;PRSC Error: Failed to parse query '\n      	declare function local:integer($x as xs:decimal) { if ($x mod 1 eq 0) then xs:integer($x) else $x };\n      	 (local:integer(2) idiv local:integer(2)) instance of xs:integer'
cbcl-numeric-idivide-008;Expected executing the XPath 'xs:float('1e38') idiv xs:float('1e-37')' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPathException with code FOAR0002, but got Value was either too large or too small for a Decimal.
cbcl-numeric-idivide-009;Expected executing the XPath 'declare function local:value($number as xs:boolean) { if ($number) then 1 else xs:string('1') }; \n      \tlocal:value(true()) idiv local:value(true())' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n      	declare function local:value($number as xs:boolean) { if ($number) then 1 else xs:string('1') }; \n      	local:value(true()) idiv local:value(true())\n       = 1'
cbcl-numeric-less-than-001;PRSC Error: Failed to parse query 'declare function local:square($arg as xs:double) as xs:double { $arg * $arg }; not( local:square(1e0) lt local:square(2e0) )'
cbcl-numeric-less-than-002;PRSC Error: Failed to parse query 'declare function local:square($arg as xs:float) as xs:float { $arg * $arg }; not( local:square(xs:float(1e0)) lt local:square(xs:float(2e0)) )'
cbcl-numeric-less-than-003;PRSC Error: Failed to parse query 'declare function local:square($arg as xs:decimal) as xs:decimal { $arg * $arg }; not( local:square(1.0) lt local:square(2.0) )'
cbcl-numeric-less-than-004;PRSC Error: Failed to parse query 'declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; not( local:square(1) lt local:square(2) )'
cbcl-numeric-less-than-005;PRSC Error: Failed to parse query 'declare function local:square($arg as xs:double) as xs:double { $arg * $arg }; not( local:square(1e0) ge local:square(2e0) )'
cbcl-numeric-less-than-006;PRSC Error: Failed to parse query 'declare function local:square($arg as xs:float) as xs:float { $arg * $arg }; not( local:square(xs:float(1e0)) ge local:square(xs:float(2e0)) )'
cbcl-numeric-less-than-007;PRSC Error: Failed to parse query 'declare function local:square($arg as xs:decimal) as xs:decimal { $arg * $arg }; not( local:square(1.0) ge local:square(2.0) )'
cbcl-numeric-less-than-008;PRSC Error: Failed to parse query 'declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; not( local:square(1) ge local:square(2) )'
cbcl-numeric-less-than-009;PRSC Error: Failed to parse query 'declare function local:square($arg as xs:double) as xs:double { $arg * $arg }; not(not( local:square(1e0) lt local:square(2e0) ))'
cbcl-numeric-less-than-010;PRSC Error: Failed to parse query 'declare function local:square($arg as xs:float) as xs:float { $arg * $arg }; not(not( local:square(xs:float(1e0)) lt local:square(xs:float(2e0)) ))'
cbcl-numeric-less-than-011;PRSC Error: Failed to parse query 'declare function local:square($arg as xs:double) as xs:double { $arg * $arg }; not(not( local:square(1e0) ge local:square(2e0) ))'
cbcl-numeric-less-than-012;PRSC Error: Failed to parse query 'declare function local:square($arg as xs:float) as xs:float { $arg * $arg }; not(not( local:square(xs:float(1e0)) ge local:square(xs:float(2e0)) ))'
cbcl-numeric-less-than-013;PRSC Error: Failed to parse query 'declare function local:factorial($arg as xs:integer) as xs:integer { if ($arg lt 1) then 1 else $arg * local:factorial($arg - 1) }; let $x := local:factorial(5) return $x + 1 lt 121'
cbcl-numeric-less-than-014;PRSC Error: Failed to parse query 'declare function local:factorial($arg as xs:integer) as xs:integer { if ($arg lt 1) then 1 else $arg * local:factorial($arg - 1) }; let $x := local:factorial(5) return $x - 1 lt 121'
cbcl-numeric-less-than-015;PRSC Error: Failed to parse query 'declare function local:factorial($arg as xs:integer) as xs:integer { if ($arg lt 1) then 1 else $arg * local:factorial($arg - 1) }; let $x := local:factorial(5) return 121 lt $x + 1'
cbcl-numeric-less-than-016;PRSC Error: Failed to parse query 'declare function local:factorial($arg as xs:integer) as xs:integer { if ($arg lt 1) then 1 else $arg * local:factorial($arg - 1) }; let $x := local:factorial(5) return 121 lt 1 + $x'
cbcl-numeric-less-than-017;PRSC Error: Failed to parse query 'declare function local:factorial($arg as xs:integer) as xs:integer { if ($arg lt 1) then 1 else $arg * local:factorial($arg - 1) }; let $x := local:factorial(5) return $x + 1 ge 121'
cbcl-numeric-less-than-018;PRSC Error: Failed to parse query 'declare function local:factorial($arg as xs:integer) as xs:integer { if ($arg lt 1) then 1 else $arg * local:factorial($arg - 1) }; let $x := local:factorial(5) return $x - 1 ge 121'
cbcl-numeric-less-than-019;PRSC Error: Failed to parse query 'declare function local:factorial($arg as xs:integer) as xs:integer { if ($arg lt 1) then 1 else $arg * local:factorial($arg - 1) }; let $x := local:factorial(5) return 121 ge $x + 1'
cbcl-numeric-less-than-020;PRSC Error: Failed to parse query 'declare function local:factorial($arg as xs:integer) as xs:integer { if ($arg lt 1) then 1 else $arg * local:factorial($arg - 1) }; let $x := local:factorial(5) return 121 ge 1 + $x'
cbcl-numeric-less-than-021;PRSC Error: Failed to parse query 'declare function local:factorial($arg as xs:integer) as xs:integer { if ($arg lt 1) then 1 else $arg * local:factorial($arg - 1) }; let $x := local:factorial(5) return $x + 2 lt 121'
cbcl-numeric-less-than-022;PRSC Error: Failed to parse query 'declare function local:factorial($arg as xs:integer) as xs:integer { if ($arg lt 1) then 1 else $arg * local:factorial($arg - 1) }; let $x := local:factorial(5) return $x - 2 lt 12'
cbcl-numeric-less-than-023;PRSC Error: Failed to parse query 'declare function local:factorial($arg as xs:integer) as xs:integer { if ($arg lt 1) then 1 else $arg * local:factorial($arg - 1) }; let $x := local:factorial(5) return 121 lt $x + 2'
cbcl-numeric-less-than-024;PRSC Error: Failed to parse query 'declare function local:factorial($arg as xs:integer) as xs:integer { if ($arg lt 1) then 1 else $arg * local:factorial($arg - 1) }; let $x := local:factorial(5) return 121 lt 2 + $x'
cbcl-numeric-less-than-025;PRSC Error: Failed to parse query 'declare function local:factorial($arg as xs:integer) as xs:integer { if ($arg lt 1) then 1 else $arg * local:factorial($arg - 1) }; let $x := local:factorial(5) return $x + 2 ge 121'
cbcl-numeric-less-than-026;PRSC Error: Failed to parse query 'declare function local:factorial($arg as xs:integer) as xs:integer { if ($arg lt 1) then 1 else $arg * local:factorial($arg - 1) }; let $x := local:factorial(5) return $x - 2 ge 12'
cbcl-numeric-less-than-027;PRSC Error: Failed to parse query 'declare function local:factorial($arg as xs:integer) as xs:integer { if ($arg lt 1) then 1 else $arg * local:factorial($arg - 1) }; let $x := local:factorial(5) return 121 ge $x + 2'
cbcl-numeric-less-than-028;PRSC Error: Failed to parse query 'declare function local:factorial($arg as xs:integer) as xs:integer { if ($arg lt 1) then 1 else $arg * local:factorial($arg - 1) }; let $x := local:factorial(5) return 121 ge $x + 1'
cbcl-numeric-less-than-029;PRSC Error: Failed to parse query 'declare function local:factorial($arg as xs:integer) as xs:integer { if ($arg lt 1) then 1 else $arg * local:factorial($arg - 1) }; let $x := local:factorial(5) return 121 ge 2 + $x'
cbcl-numeric-mod-001;PRSC Error: Failed to parse query '\n      	declare function local:integer($x as xs:decimal) { if ($x mod 1 eq 0) then xs:integer($x) else $x }; \n      	(local:integer(3) mod local:integer(2)) instance of xs:integer'
cbcl-numeric-mod-002;PRSC Error: Failed to parse query '\n      	declare function local:integer($x as xs:decimal) { if ($x mod 1 eq 0) then xs:integer($x) else $x }; \n      	(local:integer(3.5) mod local:integer(2)) instance of xs:integer'
cbcl-numeric-mod-003;Expected executing the XPath 'declare function local:value($number as xs:boolean) { if ($number) then 1 else xs:string('1') }; \n      \tlocal:value(true()) mod local:value(true())' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n      	declare function local:value($number as xs:boolean) { if ($number) then 1 else xs:string('1') }; \n      	local:value(true()) mod local:value(true())'
cbcl-numeric-multiply-001;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:double) as xs:double { $arg * $arg }; \n      	xs:double('NaN') * local:square(7)'
cbcl-numeric-multiply-002;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:double) as xs:double { $arg * $arg }; \n      	local:square(7) * xs:double('NaN')'
cbcl-numeric-multiply-003;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:double) as xs:double { $arg * $arg }; \n      	local:square(7) * 1e0'
cbcl-numeric-multiply-004;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:double) as xs:double { $arg * $arg }; \n      	1e0 * local:square(7)'
cbcl-numeric-multiply-005;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:double) as xs:double { $arg * $arg }; \n      	local:square(7) * -1e0'
cbcl-numeric-multiply-006;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:double) as xs:double { $arg * $arg }; \n      	-1e0 * local:square(7)'
cbcl-numeric-multiply-007;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:float) as xs:float { $arg * $arg }; \n      	xs:float('NaN') * local:square(7)'
cbcl-numeric-multiply-008;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:float) as xs:float { $arg * $arg }; \n      	local:square(7) * xs:float('NaN')'
cbcl-numeric-multiply-009;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:float) as xs:float { $arg * $arg }; \n      	local:square(7) * xs:float(1)'
cbcl-numeric-multiply-010;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:float) as xs:float { $arg * $arg }; \n      	xs:float(1) * local:square(7)'
cbcl-numeric-multiply-011;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:float) as xs:float { $arg * $arg }; \n      	local:square(7) * xs:float(-1)'
cbcl-numeric-multiply-012;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:float) as xs:float { $arg * $arg }; \n      	xs:float(-1) * local:square(7)'
cbcl-numeric-multiply-013;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:decimal) as xs:decimal { $arg * $arg }; \n      	local:square(2.0) * 0.0'
cbcl-numeric-multiply-014;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:decimal) as xs:decimal { $arg * $arg }; \n      	0.0 * local:square(7.0)'
cbcl-numeric-multiply-015;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:decimal) as xs:decimal { $arg * $arg }; \n      	local:square(7.0) * 1.0'
cbcl-numeric-multiply-016;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:decimal) as xs:decimal { $arg * $arg }; \n      	1.0 * local:square(7.0)'
cbcl-numeric-multiply-017;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:decimal) as xs:decimal { $arg * $arg }; \n      	local:square(7.0) * -1.0'
cbcl-numeric-multiply-018;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:decimal) as xs:decimal { $arg * $arg }; \n      	-1.0 * local:square(7.0)'
cbcl-numeric-multiply-019;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; \n      	local:square(2) * 0'
cbcl-numeric-multiply-020;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; \n      	0 * local:square(2)'
cbcl-numeric-multiply-021;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; \n      	local:square(7) * 1'
cbcl-numeric-multiply-022;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; \n      	1 * local:square(7)'
cbcl-numeric-multiply-023;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; \n      	local:square(7) * -1'
cbcl-numeric-multiply-024;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; \n      	-1 * local:square(7)'
cbcl-numeric-multiply-025;Expected executing the XPath 'declare function local:square($arg as xs:decimal) as xs:decimal { $arg * $arg }; \n      \tlocal:square(9223372036854775808.1) gt 0' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:decimal) as xs:decimal { $arg * $arg }; \n      	local:square(9223372036854775808.1) gt 0'
cbcl-numeric-multiply-026;Expected executing the XPath 'declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; \n      \tlocal:square(9223372036854775808) gt 0' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; \n      	local:square(9223372036854775808) gt 0'
cbcl-numeric-multiply-027;PRSC Error: Failed to parse query '\n      	declare function local:integer($x as xs:decimal) { if ($x mod 1 eq 0) then xs:integer($x) else $x }; \n      	(local:integer(2) * local:integer(2)) instance of xs:integer'
cbcl-numeric-subtract-001;Expected executing the XPath '-79228162514264337593543950335.0 - 1.0 lt 0.0' to resolve to one of the expected results, but got System.OverflowException: Value was either too large or too small for a Decimal.
cbcl-numeric-subtract-002;Expected executing the XPath '-79228162514264337593543950335 - 1 lt 0' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: Overflow when creating a Int64 from 79228162514264337593543950335.
cbcl-numeric-subtract-003;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:decimal) as xs:decimal { $arg * $arg }; \n      	local:square(7.5) - 0.0'
cbcl-numeric-subtract-004;PRSC Error: Failed to parse query '\n      	declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; \n      	local:square(7) - 0'
cbcl-numeric-subtract-005;PRSC Error: Failed to parse query '\n      	declare function local:integer($x as xs:decimal) { if ($x mod 1 eq 0) then xs:integer($x) else $x }; \n      	(local:integer(2) - local:integer(2)) instance of xs:integer'
cbcl-numeric-subtract-006;PRSC Error: Failed to parse query '\n      	declare function local:integer($x as xs:decimal) { if ($x mod 1 eq 0) then xs:integer($x) else $x }; \n      	-(local:integer(2)) - -(local:integer(4))'
cbcl-numeric-subtract-007;PRSC Error: Failed to parse query '\n      	declare function local:integer($x as xs:decimal) { if ($x mod 1 eq 0) then xs:integer($x) else $x }; \n      	local:integer(2) - -(local:integer(4))'
cbcl-numeric-subtract-008;PRSC Error: Failed to parse query '\n      	declare function local:integer($x as xs:decimal) { if ($x mod 1 eq 0) then xs:integer($x) else $x }; \n      	-(local:integer(2)) - local:integer(4)'
cbcl-numeric-unary-minus-001;Expected executing the XPath 'declare function local:value($number as xs:boolean) { if ($number) then 1 else xs:string('1') }; -(local:value(true()))' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare function local:value($number as xs:boolean) { if ($number) then 1 else xs:string('1') }; -(local:value(true()))'
cbcl-numeric-unary-plus-001;Expected executing the XPath 'declare function local:value($number as xs:boolean) { if ($number) then 1 else xs:string('1') }; \n      \t+(local:value(true()))' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n      	declare function local:value($number as xs:boolean) { if ($number) then 1 else xs:string('1') }; \n      	+(local:value(true()))'
cbcl-one-or-more-001;PRSC Error: Failed to parse query '\n        declare function local:generate($arg as xs:integer?) { if ($arg = 0) then (1, 2, 3) else $arg };\n        fn:one-or-more(fn:reverse( local:generate( 0 ) ))'
cbcl-one-or-more-002;Expected error code: FORG0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:generate($arg as xs:integer?) { if ($arg = 0) then (1, 2, 3) else $arg };\n        fn:one-or-more(fn:zero-or-one( local:generate( () ) ))'
cbcl-one-or-more-003;PRSC Error: Failed to parse query '\n      boolean(one-or-more(for $x in 1 to month-from-date(current-date()) return <a/>))\n   '
cbcl-one-or-more-004;Expected error code: FORG0004. Found error code: XPST0017 with error message: The function month-from-date with arity 1 is not registered.
cbcl-path-nodes-and-atomics;Expected executing the XPath 'declare function local:f($x) { if ($x mod 2 = 1) then <a/> else "a" };\n        let $y := for $x in (1 to 10) return <e>{$x}</e> return $y/local:f(.)/a' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XPTY0018. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x mod 2 = 1) then <a/> else "a" };\n        let $y := for $x in (1 to 10) return <e>{$x}</e> return $y/local:f(.)/a'
cbcl-plus-001;PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:dayTimeDuration("P1D") };\n        xs:date("1997-01-01") + local:f(false())'
cbcl-plus-002;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:dayTimeDuration("P1D") };\n        xs:date("1997-01-01") + local:f(true())'
cbcl-plus-003;PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:yearMonthDuration("P1M") };\n        xs:date("1997-01-01") + local:f(false())'
cbcl-plus-004;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:yearMonthDuration("P1M") };\n        xs:date("1997-01-01") + local:f(true())'
cbcl-plus-005;PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:dayTimeDuration("P1D") };\n        xs:dateTime("1997-01-01T12:00:00") + local:f(false())'
cbcl-plus-006;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:dayTimeDuration("P1D") };\n        xs:dateTime("1997-01-01T12:00:00") + local:f(true())'
cbcl-plus-007;PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:yearMonthDuration("P1M") };\n        xs:dateTime("1997-01-01T12:00:00") + local:f(false())'
cbcl-plus-008;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:yearMonthDuration("P1M") };\n        xs:dateTime("1997-01-01T12:00:00") + local:f(true())'
cbcl-plus-009;PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:dayTimeDuration("PT1H") };\n        xs:time("12:00:00") + local:f(false())'
cbcl-plus-010;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:dayTimeDuration("P1H") };\n        xs:time("12:00:00") + local:f(true())'
cbcl-plus-011;PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:dayTimeDuration("P1D") };\n        xs:dayTimeDuration("PT1H") + local:f(false())'
cbcl-plus-012;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:dayTimeDuration("P1D") };\n        xs:dayTimeDuration("PT1H") + local:f(true())'
cbcl-plus-013;PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:yearMonthDuration("P1M") };\n        xs:yearMonthDuration("P1Y") + local:f(false())'
cbcl-plus-014;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:yearMonthDuration("P1M") };\n        xs:yearMonthDuration("P1Y") + local:f(true())'
cbcl-plus-015;PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:dayTimeDuration("P1D") };\n        local:f(false()) + xs:date("1997-01-01")'
cbcl-plus-016;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:dayTimeDuration("P1D") };\n        local:f(true()) + xs:date("1997-01-01")'
cbcl-plus-017;PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:yearMonthDuration("P1M") };\n        local:f(false()) + xs:date("1997-01-01")'
cbcl-plus-018;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:yearMonthDuration("P1M") };\n        local:f(true()) + xs:date("1997-01-01")'
cbcl-plus-019;PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:dayTimeDuration("P1D") };\n        local:f(false()) + xs:dateTime("1997-01-01T12:00:00")'
cbcl-plus-020;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:dayTimeDuration("P1D") };\n        local:f(true()) + xs:dateTime("1997-01-01T12:00:00")'
cbcl-plus-021;PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:yearMonthDuration("P1M") };\n        local:f(false()) + xs:dateTime("1997-01-01T12:00:00")'
cbcl-plus-022;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:yearMonthDuration("P1M") };\n        local:f(true()) + xs:dateTime("1997-01-01T12:00:00")'
cbcl-plus-023;PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:dayTimeDuration("PT1H") };\n        local:f(false()) + xs:time("12:00:00")'
cbcl-plus-024;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:dayTimeDuration("PT1H") };\n        local:f(true()) + xs:time("12:00:00")'
cbcl-plus-025;PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:dayTimeDuration("P1D") };\n        local:f(false()) + xs:dayTimeDuration("PT1H")'
cbcl-plus-026;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:dayTimeDuration("P1D") };\n        local:f(true()) + xs:dayTimeDuration("PT1H")'
cbcl-plus-027;PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:yearMonthDuration("P1M") };\n        local:f(false()) + xs:yearMonthDuration("P1Y")'
cbcl-plus-028;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:yearMonthDuration("P1M") };\n        local:f(true()) + xs:yearMonthDuration("P1Y")'
cbcl-plus-029;PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:yearMonthDuration("P1M") };\n        local:f(false()) + local:f(false())'
cbcl-plus-030;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:yearMonthDuration("P1M") };\n        local:f(true()) + local:f(true())'
cbcl-plus-031;PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:dayTimeDuration("P1D") };\n        local:f(false()) + local:f(false())'
cbcl-plus-032;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:dayTimeDuration("P1D") };\n        local:f(true()) + local:f(true())'
cbcl-plus-033;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:dayTimeDuration("P1D") };\n        declare function local:g($x) { if ($x) then xs:duration("P1M") else xs:yearMonthDuration("P1M") };\n        local:f(false()) + local:g(false())'
cbcl-plus-034;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1D") else xs:dayTimeDuration("P1D") };\n        declare function local:g($x) { if ($x) then xs:duration("P1M") else xs:yearMonthDuration("P1M") };\n        local:f(true()) + local:g(true())'
cbcl-precedingAxis-001;PRSC Error: Failed to parse query 'count(<a><b/><b/></a>/b[2]/preceding-sibling::*)'
cbcl-precedingAxis-002;PRSC Error: Failed to parse query 'count(<a><b/><b/></a>/b[2]/preceding-sibling::b)'
cbcl-precedingAxis-003;PRSC Error: Failed to parse query 'count(<a><b/><b/></a>/b[1]/preceding-sibling::b)'
cbcl-product-001;PRSC Error: Failed to parse query 'declare function local:odds($arg as xs:integer*) as xs:integer* { $arg[. mod 2 eq 1] }; boolean(zero-or-one(for $x in local:odds((2,4,8)),$y in local:odds((2,4,8)) return ($x,$y)))'
cbcl-promotion-001;Type casting to XsAnyUri has not been implemented yet.
cbcl-promotion-002;PRSC Error: Failed to parse query '\n        declare function local:index-of($seq as xs:double*, $item as xs:double) { for $x at $p in $seq return if ($x eq $item) then $p else () };\n        declare function local:sequence($x as xs:integer) { ("string", 1, 2.0, xs:float(3))[$x] };\n        local:index-of(for $x in (2,3,4) return local:sequence($x), 2)'
cbcl-promotion-003;PRSC Error: Failed to parse query '\n        declare function local:index-of($seq as xs:integer*, $item as xs:integer?) as xs:float* { \n          if (empty($item)) \n            then -1\n            else for $x at $p in $seq return if ($x eq $item) then $p else () \n        };\n        local:index-of(1 to 10, 3)'
cbcl-promotion-004;PRSC Error: Failed to parse query '\n        declare function local:f() as xs:double* { \n          if (day-from-date(current-date()) < 32) then xs:integer(3) else -1\n        };\n        local:f() + 1'
cbcl-promotion-005;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:index-of($seq, $item) as xs:double? { for $x at $p in $seq return if ($x eq $item) then $p else () };\n        local:index-of((1, 2.0, xs:float(3), 2), 2)'
cbcl-promotion-006;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:f($arg as xs:anyAtomicType?) { $arg };\n        local:f(index-of((1,2,3,2),2))'
cbcl-promotion-007;PRSC Error: Failed to parse query '\n        declare function local:f($v as xs:double*) as xs:double+ { if (empty($v)) then 0 else $v };\n        declare function local:g($v as xs:double*) as xs:double+ { local:f($v) };\n        local:g((1,2,3))'
cbcl-qname-001;Expected XPathException with code FOCA0002, but got Haven't implemented Qnames from:  :
cbcl-QName-equal-001;PRSC Error: Failed to parse query '\n        declare function local:QName-value($arg as xs:boolean) as xs:QName { if ($arg) then QName("example.com/", "p:ncname") else QName("example.com/", "q:ncname") };\n        not(local:QName-value(true()) eq local:QName-value(false()))'
cbcl-QName-equal-002;PRSC Error: Failed to parse query '\n        declare function local:QName-value($arg as xs:boolean) as xs:QName { if ($arg) then QName("example.com/", "p:ncname") else QName("example.com/", "q:ncname") };\n        not(local:QName-value(true()) ne local:QName-value(false()))'
cbcl-round-half-to-even-001;PRSC Error: Failed to parse query 'fn:round-half-to-even(3.567812E+3, 4294967296)'
cbcl-round-half-to-even-012;Value was either too large or too small for an Int32.
cbcl-seconds-from-duration-001;The function fn:seconds-from-duration with arity 1 is not registered.
cbcl-selfAxis-001;PRSC Error: Failed to parse query '<a> { <a b="blah"/>/@*/self::attribute(b) } </a>'
cbcl-set-from-optional-item-001;PRSC Error: Failed to parse query 'declare function local:odds($arg as xs:integer?) as xs:integer? { $arg[. mod 2 eq 1] }; boolean(for $x in local:odds(2) where $x < 3 return $x + 1)'
cbcl-starts-with-001;No collations are supported
cbcl-string-equal-001;The function current-time with arity 0 is not registered.
cbcl-string-equal-002;The function current-time with arity 0 is not registered.
cbcl-string-equal-003;The function current-time with arity 0 is not registered.
cbcl-string-equal-004;The function current-time with arity 0 is not registered.
cbcl-string-greater-than-001;The function current-time with arity 0 is not registered.
cbcl-string-greater-than-002;The function current-time with arity 0 is not registered.
cbcl-string-greater-than-003;The function current-time with arity 0 is not registered.
cbcl-string-greater-than-004;The function current-time with arity 0 is not registered.
cbcl-string-less-than-001;The function current-time with arity 0 is not registered.
cbcl-string-less-than-002;The function current-time with arity 0 is not registered.
cbcl-string-less-than-003;The function current-time with arity 0 is not registered.
cbcl-string-less-than-004;The function current-time with arity 0 is not registered.
cbcl-subsequence-006;The function year-from-date with arity 1 is not registered.
cbcl-subsequence-010;Expected executing the XPath 'count(subsequence(1 to 3000000000, -2147483648, 2147483647))' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPathException with code XPDY0130, but got Value was either too large or too small for an Int32.
cbcl-subsequence-011;Expected executing the XPath 'count(subsequence(1 to 3000000000, -2147483649))' to resolve to one of the expected results, but got System.OverflowException: Value was either too large or too small for an Int32.
cbcl-subsequence-012;Expected executing the XPath 'count(subsequence(1 to 3000000000, 2147483648))' to resolve to one of the expected results, but got System.OverflowException: Value was either too large or too small for an Int32.
cbcl-subsequence-013;Expected executing the XPath 'count(subsequence(1 to 3000000000, 2147483647))' to resolve to one of the expected results, but got System.OverflowException: Value was either too large or too small for an Int32.
cbcl-subsequence-014;Expected executing the XPath 'subsequence(1 to 3000000000, 2147483647, 5)' to resolve to one of the expected results, but got System.OverflowException: Value was either too large or too small for an Int32.
cbcl-subsequence-025;PRSC Error: Failed to parse query 'count(<a><b/></a>/*/subsequence(.,1,1)/..)'
cbcl-subsequence-026;Expected XPath let $x := (1 to 10)[. mod 2 = 0] return subsequence((0,$x),3,count($x) div 2) to resolve to 4 6 8, but instead got 4 6
cbcl-substring-001;Index and length must refer to a location within the string. (Parameter 'length')
cbcl-substring-002;Index and length must refer to a location within the string. (Parameter 'length')
cbcl-substring-after-001;The function fn:substring-after with arity 3 is not registered.
cbcl-substring-before-001;The function fn:substring-before with arity 3 is not registered.
cbcl-subtract-dates-001;Expected XPathException with code FODT0001, but got The string '-25252734927766554-12-31' is not a valid AllXsd value.
cbcl-subtract-dates-002;Expected XPathException with code FODT0001, but got The string '-25252734927766554-12-31' is not a valid AllXsd value.
cbcl-subtract-dates-003;The function implicit-timezone with arity 0 is not registered.
cbcl-subtract-dates-004;The function implicit-timezone with arity 0 is not registered.
cbcl-subtract-dateTimes-001;Expected XPathException with code FODT0001, but got The string '-25252734927766554-12-31T12:00:00' is not a valid AllXsd value.
cbcl-subtract-dateTimes-002;Expected XPathException with code FODT0001, but got The string '-25252734927766554-12-31T12:00:00' is not a valid AllXsd value.
cbcl-subtract-dateTimes-003;The function implicit-timezone with arity 0 is not registered.
cbcl-subtract-dateTimes-004;The function implicit-timezone with arity 0 is not registered.
cbcl-subtract-dayTimeDurations-001;PRSC Error: Failed to parse query 'declare function local:dayTimeDuration($days as xs:integer, $hours as xs:integer ) { xs:dayTimeDuration(concat('P', $days, 'DT', $hours, 'H')) }; local:dayTimeDuration(1, 1) - xs:dayTimeDuration("P0D")'
cbcl-subtract-dayTimeDurations-002;PRSC Error: Failed to parse query 'declare function local:dayTimeDuration($days as xs:integer, $hours as xs:integer ) { xs:dayTimeDuration(concat('P', $days, 'DT', $hours, 'H')) }; local:dayTimeDuration(1, 1) - local:dayTimeDuration(1, 1)'
cbcl-subtract-dayTimeDurations-003;Expected error code: FODT0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:dayTimeDuration($days as xs:integer, $hours as xs:integer ) { xs:dayTimeDuration(concat('P', $days, 'DT', $hours, 'H')) }; xs:dayTimeDuration("-P5000000000000000000D") - local:dayTimeDuration(5000000000000000000, 1)'
cbcl-subtract-times-001;The function implicit-timezone with arity 0 is not registered.
cbcl-subtract-times-002;The function implicit-timezone with arity 0 is not registered.
cbcl-subtract-times-003;The function fn:adjust-time-to-timezone with arity 1 is not registered.
cbcl-subtract-times-004;The function fn:adjust-time-to-timezone with arity 2 is not registered.
cbcl-subtract-yearMonthDurations-001;PRSC Error: Failed to parse query '\n        declare function local:yearMonthDuration($years as xs:integer, $months as xs:integer ) { xs:yearMonthDuration(concat('P', $years, 'Y', $months, 'M')) };\n        local:yearMonthDuration(1, 1) - xs:yearMonthDuration("P0Y")'
cbcl-subtract-yearMonthDurations-002;PRSC Error: Failed to parse query '\n        declare function local:yearMonthDuration($years as xs:integer, $months as xs:integer ) { xs:yearMonthDuration(concat('P', $years, 'Y', $months, 'M')) };\n        local:yearMonthDuration(1, 1) - local:yearMonthDuration(1, 1)'
cbcl-subtract-yearMonthDurations-003;Expected error code: FODT0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:yearMonthDuration($years as xs:integer, $months as xs:integer ) { xs:yearMonthDuration(concat('P', $years, 'Y', $months, 'M')) };\n        xs:yearMonthDuration("-P768614336404564650Y") - local:yearMonthDuration(768614336404564650, 1)'
cbcl-times-001;PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:yearMonthDuration("P1M") };\n        local:f(false()) * 2'
cbcl-times-002;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:yearMonthDuration("P1M") };\n        local:f(true()) * 2'
cbcl-times-003;PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:dayTimeDuration("P1D") };\n        local:f(false()) * 2'
cbcl-times-004;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:dayTimeDuration("P1D") };\n        local:f(true()) * 2'
cbcl-times-005;PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:yearMonthDuration("P1M") };\n        2 * local:f(false())'
cbcl-times-006;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:yearMonthDuration("P1M") };\n        2 * local:f(true())'
cbcl-times-007;PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:dayTimeDuration("P1D") };\n        2 * local:f(false())'
cbcl-times-008;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:dayTimeDuration("P1D") };\n        2 * local:f(true())'
cbcl-timezone-from-date-001;The function timezone-from-date with arity 1 is not registered.
cbcl-timezone-from-date-002;Expected error code: FODT0003. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:timezone($arg as xs:integer) { if ($arg gt 0) then xs:dayTimeDuration(concat('PT', $arg, 'H')) else if ($arg lt 0) then xs:dayTimeDuration(concat('-PT', -$arg, 'H')) else xs:dayTimeDuration('PT0H') };\n        timezone-from-date( adjust-date-to-timezone( fn:current-date(), local:timezone(15)))'
cbcl-timezone-from-date-003;PRSC Error: Failed to parse query '\n        declare function local:timezone($arg as xs:integer) { if ($arg gt 0) then xs:dayTimeDuration(concat('PT', $arg, 'H')) else if ($arg lt 0) then xs:dayTimeDuration(concat('-PT', -$arg, 'H')) else xs:dayTimeDuration('PT0H') };\n        timezone-from-date( adjust-date-to-timezone( fn:current-date(), local:timezone(14)))'
cbcl-timezone-from-date-004;PRSC Error: Failed to parse query '\n        declare function local:timezone($arg as xs:integer) { if ($arg gt 0) then xs:dayTimeDuration(concat('PT', $arg, 'H')) else if ($arg lt 0) then xs:dayTimeDuration(concat('-PT', -$arg, 'H')) else xs:dayTimeDuration('PT0H') };\n        timezone-from-date( adjust-date-to-timezone( fn:current-date(), timezone-from-date( adjust-date-to-timezone( xs:date('1970-01-01'), local:timezone(-12)))))'
cbcl-timezone-from-date-005;PRSC Error: Failed to parse query '\n        declare function local:date($arg as xs:boolean) { if ($arg) then xs:date('1970-01-01Z') else fn:current-date() };\n        timezone-from-date( adjust-date-to-timezone( xs:date('2008-08-01'), timezone-from-date(local:date(true()))))'
cbcl-timezone-from-date-006;PRSC Error: Failed to parse query '\n        declare function local:dateTime($arg as xs:boolean) { if ($arg) then xs:dateTime('1970-01-01T00:00:00Z') else fn:current-dateTime() };\n        timezone-from-date( adjust-date-to-timezone( xs:date('2008-08-01'), timezone-from-dateTime(local:dateTime(true()))))'
cbcl-timezone-from-date-007;PRSC Error: Failed to parse query '\n        declare function local:time($arg as xs:boolean) { if ($arg) then xs:time('12:00:00Z') else fn:current-time() };\n        timezone-from-date( adjust-date-to-timezone( xs:date('2008-08-01'), timezone-from-time(local:time(true()))))'
cbcl-token-001;Atomic Value for XsToken is not implemented yet.
cbcl-token-002;Atomic Value for XsToken is not implemented yet.
cbcl-token-002b;Atomic Value for XsToken is not implemented yet.
cbcl-token-003;Atomic Value for XsToken is not implemented yet.
cbcl-token-004;PRSC Error: Failed to parse query '"&#x9;" castable as xs:token'
cbcl-token-005;PRSC Error: Failed to parse query '5 castable as xs:token'
cbcl-token-006;PRSC Error: Failed to parse query 'xs:token("test") castable as xs:token'
cbcl-typeswitch-001;PRSC Error: Failed to parse query '\n        upper-case(typeswitch ((1 to 10)[. mod 2 = 0]) case xs:integer+ return "int" default return "false")\n      '
cbcl-typeswitch-002;PRSC Error: Failed to parse query '\n        upper-case(typeswitch ((1 to 10)[. div 2 = 0]) case xs:integer+ return "int" default return "false")\n      '
cbcl-typeswitch-003;PRSC Error: Failed to parse query '\n        typeswitch ((1 to 10)[. mod 2 = 0]) case xs:integer+ return true() default return true()\n      '
cbcl-typeswitch-004;PRSC Error: Failed to parse query '\n        typeswitch ((1 to 10)[. mod 2 = 0]) case xs:integer+ return false() default return true()\n      '
cbcl-typeswitch-006;Expected XPath xs:string((1 to 10)[. mod 2 = 0] instance of xs:integer+) to resolve to true, but instead got True
cbcl-value-greater-equal-001;PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:yearMonthDuration("P1M") };\n        local:f(false()) ge xs:yearMonthDuration("P1Y")'
cbcl-value-greater-equal-002;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:yearMonthDuration("P1M") };\n        local:f(true()) ge xs:yearMonthDuration("P1Y")'
cbcl-value-greater-equal-003;PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:dayTimeDuration("PT1H") };\n        local:f(false()) ge xs:dayTimeDuration("P1D")'
cbcl-value-greater-equal-004;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:dayTimeDuration("PT1H") };\n        local:f(true()) ge xs:dayTimeDuration("P1D")'
cbcl-value-greater-equal-005;PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:yearMonthDuration("P1M") };\n        xs:yearMonthDuration("P1Y") ge local:f(false())'
cbcl-value-greater-equal-006;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:yearMonthDuration("P1M") };\n        xs:yearMonthDuration("P1Y") ge local:f(true())'
cbcl-value-greater-equal-007;PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:dayTimeDuration("PT1H") };\n        xs:dayTimeDuration("P1D") ge local:f(false())'
cbcl-value-greater-equal-008;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:dayTimeDuration("PT1H") };\n        xs:dayTimeDuration("P1D") ge local:f(true())'
cbcl-value-greater-equal-009;PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:yearMonthDuration("P1M") };\n        local:f(false()) ge local:f(false())'
cbcl-value-greater-equal-010;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:yearMonthDuration("P1M") };\n        local:f(true()) ge local:f(false())'
cbcl-value-greater-equal-011;PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:dayTimeDuration("PT1H") };\n        local:f(false()) ge local:f(false())'
cbcl-value-greater-equal-012;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:dayTimeDuration("PT1H") };\n        local:f(false()) ge local:f(true())'
cbcl-value-greater-than-001;PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:yearMonthDuration("P1M") };\n        local:f(false()) gt xs:yearMonthDuration("P1Y")'
cbcl-value-greater-than-002;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:yearMonthDuration("P1M") };\n        local:f(true()) gt xs:yearMonthDuration("P1Y")'
cbcl-value-greater-than-003;PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:dayTimeDuration("PT1H") };\n        local:f(false()) gt xs:dayTimeDuration("P1D")'
cbcl-value-greater-than-004;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:dayTimeDuration("PT1H") };\n        local:f(true()) gt xs:dayTimeDuration("P1D")'
cbcl-value-greater-than-005;PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:yearMonthDuration("P1M") };\n        xs:yearMonthDuration("P1Y") gt local:f(false())'
cbcl-value-greater-than-006;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:yearMonthDuration("P1M") };\n        xs:yearMonthDuration("P1Y") gt local:f(true())'
cbcl-value-greater-than-007;PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:dayTimeDuration("PT1H") };\n        xs:dayTimeDuration("P1D") gt local:f(false())'
cbcl-value-greater-than-008;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:dayTimeDuration("PT1H") };\n        xs:dayTimeDuration("P1D") gt local:f(true())'
cbcl-value-greater-than-009;PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:yearMonthDuration("P1M") };\n        local:f(false()) gt local:f(false())'
cbcl-value-greater-than-010;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:yearMonthDuration("P1M") };\n        local:f(true()) gt local:f(false())'
cbcl-value-greater-than-011;PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:dayTimeDuration("PT1H") };\n        local:f(false()) gt local:f(false())'
cbcl-value-greater-than-012;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:dayTimeDuration("PT1H") };\n        local:f(false()) gt local:f(true())'
cbcl-value-less-equal-001;PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:yearMonthDuration("P1M") };\n        local:f(false()) le xs:yearMonthDuration("P1Y")'
cbcl-value-less-equal-002;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:yearMonthDuration("P1M") };\n        local:f(true()) le xs:yearMonthDuration("P1Y")'
cbcl-value-less-equal-003;PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:dayTimeDuration("PT1H") };\n        local:f(false()) le xs:dayTimeDuration("P1D")'
cbcl-value-less-equal-004;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:dayTimeDuration("PT1H") };\n        local:f(true()) le xs:dayTimeDuration("P1D")'
cbcl-value-less-equal-005;PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:yearMonthDuration("P1M") };\n        xs:yearMonthDuration("P1Y") le local:f(false())'
cbcl-value-less-equal-006;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:yearMonthDuration("P1M") };\n        xs:yearMonthDuration("P1Y") le local:f(true())'
cbcl-value-less-equal-007;PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:dayTimeDuration("PT1H") };\n        xs:dayTimeDuration("P1D") le local:f(false())'
cbcl-value-less-equal-008;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:dayTimeDuration("PT1H") };\n        xs:dayTimeDuration("P1D") le local:f(true())'
cbcl-value-less-equal-009;PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:yearMonthDuration("P1M") };\n        local:f(false()) le local:f(false())'
cbcl-value-less-equal-010;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:yearMonthDuration("P1M") };\n        local:f(true()) le local:f(false())'
cbcl-value-less-equal-011;PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:dayTimeDuration("PT1H") };\n        local:f(false()) le local:f(false())'
cbcl-value-less-equal-012;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:f($x) { if ($x) then xs:duration("P1M") else xs:dayTimeDuration("PT1H") };\n        local:f(false()) le local:f(true())'
cbcl-wild-001;PRSC Error: Failed to parse query '\n        declare namespace foo="test";\n        let $x := <a><foo:b/><c/><d/></a> return count($x/foo:* | $x/foo:*)'
cbcl-wild-002;PRSC Error: Failed to parse query '\n        declare namespace foo="http://localhost/";\n        <a><foo:b/><foo:c/></a>/foo:b/self::foo:*'
cbcl-yearMonthDuration-equal-001;PRSC Error: Failed to parse query '\n        declare function local:yearMonthDuration($years as xs:integer, $months as xs:integer ) { xs:yearMonthDuration(concat('P', $years, 'Y', $months, 'M')) };\n        not(local:yearMonthDuration(1, 1) eq xs:yearMonthDuration("P0Y"))'
cbcl-yearMonthDuration-equal-002;PRSC Error: Failed to parse query '\n        declare function local:yearMonthDuration($years as xs:integer, $months as xs:integer ) { xs:yearMonthDuration(concat('P', $years, 'Y', $months, 'M')) };\n        not(local:yearMonthDuration(1, 1) ne xs:yearMonthDuration("P0Y"))'
cbcl-yearMonthDuration-greater-than-001;PRSC Error: Failed to parse query '\n        declare function local:yearMonthDuration($years as xs:integer, $months as xs:integer ) { xs:yearMonthDuration(concat('P', $years, 'Y', $months, 'M')) };\n        not(local:yearMonthDuration(1, 1) gt xs:yearMonthDuration("P0Y"))'
cbcl-yearMonthDuration-greater-than-002;PRSC Error: Failed to parse query '\n        declare function local:yearMonthDuration($years as xs:integer, $months as xs:integer ) { xs:yearMonthDuration(concat('P', $years, 'Y', $months, 'M')) };\n        not(local:yearMonthDuration(1, 1) ge xs:yearMonthDuration("P0Y"))'
cbcl-yearMonthDuration-greater-than-003;PRSC Error: Failed to parse query '\n        declare function local:yearMonthDuration($yearMonthDuration as xs:yearMonthDuration, $null as xs:boolean) { if ($null) then () else $yearMonthDuration };\n        exists(local:yearMonthDuration(xs:yearMonthDuration("P0Y"), fn:true()) gt xs:yearMonthDuration("P0Y"))'
cbcl-yearMonthDuration-greater-than-004;PRSC Error: Failed to parse query '\n        declare function local:yearMonthDuration($yearMonthDuration as xs:yearMonthDuration, $null as xs:boolean) { if ($null) then () else $yearMonthDuration };\n        local:yearMonthDuration(xs:yearMonthDuration("P0Y"), fn:false()) gt xs:yearMonthDuration("P0Y")'
cbcl-yearMonthDuration-greater-than-005;PRSC Error: Failed to parse query '\n        declare function local:yearMonthDuration($yearMonthDuration as xs:yearMonthDuration, $null as xs:boolean) { if ($null) then () else $yearMonthDuration };\n        exists(local:yearMonthDuration(xs:yearMonthDuration("P0Y"), fn:true()) le xs:yearMonthDuration("P0Y"))'
cbcl-yearMonthDuration-greater-than-006;PRSC Error: Failed to parse query '\n        declare function local:yearMonthDuration($yearMonthDuration as xs:yearMonthDuration, $null as xs:boolean) { if ($null) then () else $yearMonthDuration };\n        local:yearMonthDuration(xs:yearMonthDuration("P0Y"), fn:false()) le xs:yearMonthDuration("P0Y")'
cbcl-yearMonthDuration-less-than-001;PRSC Error: Failed to parse query '\n        declare function local:yearMonthDuration($years as xs:integer, $months as xs:integer ) { xs:yearMonthDuration(concat('P', $years, 'Y', $months, 'M')) };\n        not(local:yearMonthDuration(1, 1) lt xs:yearMonthDuration("P0Y"))'
cbcl-yearMonthDuration-less-than-002;PRSC Error: Failed to parse query '\n        declare function local:yearMonthDuration($years as xs:integer, $months as xs:integer ) { xs:yearMonthDuration(concat('P', $years, 'Y', $months, 'M')) };\n        not(local:yearMonthDuration(1, 1) le xs:yearMonthDuration("P0Y"))'
cbcl-yearMonthDuration-less-than-003;PRSC Error: Failed to parse query '\n        declare function local:yearMonthDuration($yearMonthDuration as xs:yearMonthDuration, $null as xs:boolean) { if ($null) then () else $yearMonthDuration };\n        exists(local:yearMonthDuration(xs:yearMonthDuration("P0Y"), fn:true()) lt xs:yearMonthDuration("P0Y"))'
cbcl-yearMonthDuration-less-than-004;PRSC Error: Failed to parse query '\n        declare function local:yearMonthDuration($yearMonthDuration as xs:yearMonthDuration, $null as xs:boolean) { if ($null) then () else $yearMonthDuration };\n        local:yearMonthDuration(xs:yearMonthDuration("P0Y"), fn:false()) lt xs:yearMonthDuration("P0Y")'
cbcl-yearMonthDuration-less-than-005;PRSC Error: Failed to parse query '\n        declare function local:yearMonthDuration($yearMonthDuration as xs:yearMonthDuration, $null as xs:boolean) { if ($null) then () else $yearMonthDuration };\n        exists(local:yearMonthDuration(xs:yearMonthDuration("P0Y"), fn:true()) ge xs:yearMonthDuration("P0Y"))'
cbcl-yearMonthDuration-less-than-006;PRSC Error: Failed to parse query '\n        declare function local:yearMonthDuration($yearMonthDuration as xs:yearMonthDuration, $null as xs:boolean) { if ($null) then () else $yearMonthDuration };\n        local:yearMonthDuration(xs:yearMonthDuration("P0Y"), fn:false()) ge xs:yearMonthDuration("P0Y")'
cbcl-years-from-duration-001;The function fn:years-from-duration with arity 1 is not registered.
cbcl-zero-or-one-001;PRSC Error: Failed to parse query '\n        declare function local:generate($arg as xs:integer?) { if ($arg = 0) then (1, 2, 3) else $arg };\n        fn:empty( fn:zero-or-one(fn:unordered( local:generate( () ) )) )'
cbcl-zero-or-one-002;PRSC Error: Failed to parse query '\n        declare function local:generate($arg as xs:integer?) { if ($arg = 0) then () else if ($arg = 1) then $arg else ($arg, $arg) };\n        1 + fn:zero-or-one(fn:one-or-more( local:generate( 1 ) ))'
combined-errors-1;Expected executing the XPath 'import module namespace defs="http://www.w3.org/TestModules/defs"; "ABC"' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'import module namespace defs="http://www.w3.org/TestModules/defs"; "ABC"'
combined-errors-2;Expected executing the XPath 'import schema namespace atomic="http://www.w3.org/XQueryTest"; "ABC"' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'import schema namespace atomic="http://www.w3.org/XQueryTest"; "ABC"'
combined-errors-3;Expected executing the XPath 'declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        import schema "http://www.w3.org/XQueryTestOrderBy"; \n        validate strict {<Strings><orderData>one string</orderData></Strings>}' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        import schema "http://www.w3.org/XQueryTestOrderBy"; \n        validate strict {<Strings><orderData>one string</orderData></Strings>}'
combiningnodeseqexcepthc1;Expected executing the XPath '(<a>0</a>,<a>1</a>) except (<a>3</a>,<a>4</a>)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '(<a>0</a>,<a>1</a>) except (<a>3</a>,<a>4</a>)'
combiningnodeseqexcepthc2;Expected executing the XPath '(<a>0</a>,<a>1</a>) except (<a>3</a>,<a>4</a>,<a>0</a>)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '(<a>0</a>,<a>1</a>) except (<a>3</a>,<a>4</a>,<a>0</a>)'
combiningnodeseqexcepthc3;Expected executing the XPath 'count(() except (<a>3</a>,<a>4</a>,<a>0</a>))' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'count(() except (<a>3</a>,<a>4</a>,<a>0</a>)) = 0'
combiningnodeseqexcepthc4;Use of XQuery FLWOR expressions in XPath is not allowed
combiningnodeseqexcepthc5;Use of XQuery FLWOR expressions in XPath is not allowed
combiningnodeseqexcepthc6;Use of XQuery FLWOR expressions in XPath is not allowed
combiningnodeseqhc1;PRSC Error: Failed to parse query 'for $h in ( (<hours>0</hours>,<hours>1</hours>) | //hours) order by number($h) return $h'
combiningnodeseqhc10;Use of XQuery FLWOR expressions in XPath is not allowed
combiningnodeseqhc2;PRSC Error: Failed to parse query 'for $h in ( (<hours>0</hours>,<hours>1</hours>) union (//hours)) order by number($h) return $h'
combiningnodeseqhc3;PRSC Error: Failed to parse query 'for $h in ( (<hours>0</hours>,<hours>40</hours>) | (//hours)) order by number($h) return $h'
combiningnodeseqhc4;PRSC Error: Failed to parse query 'for $h in ( (<hours>0</hours>,<hours>40</hours>) union (//hours)) order by number($h) return $h'
combiningnodeseqhc5;Use of XQuery FLWOR expressions in XPath is not allowed
combiningnodeseqhc6;Use of XQuery FLWOR expressions in XPath is not allowed
combiningnodeseqhc7;Use of XQuery FLWOR expressions in XPath is not allowed
combiningnodeseqhc8;Use of XQuery FLWOR expressions in XPath is not allowed
combiningnodeseqhc9;Use of XQuery FLWOR expressions in XPath is not allowed
combiningnodeseqintersecthc1;PRSC Error: Failed to parse query 'count((<a>0</a>,<a>1</a>) intersect (<a>3</a>,<a>4</a>)) = 0'
combiningnodeseqintersecthc3;Use of XQuery FLWOR expressions in XPath is not allowed
combiningnodeseqintersecthc4;Use of XQuery FLWOR expressions in XPath is not allowed
comp-attr-bad-name-1;Expected executing the XPath '(: 3.7.3.2 Computed Attribute Constructor per XQ.E19 XQDY0044 if namespace prefix is 'xmlns' Mary Holstege :) <result>{attribute {"xmlns:error"} {}}</result>' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XQDY0044. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '(: 3.7.3.2 Computed Attribute Constructor per XQ.E19 XQDY0044 if namespace prefix is 'xmlns' Mary Holstege :) <result>{attribute {"xmlns:error"} {}}</result>'
comp-attr-bad-name-2;Expected error code: XQDY0044. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '(: 3.7.3.2 Computed Attribute Constructor per XQ.E19 XQDY0044 if no namespace prefix and local name is 'xmlns' Mary Holstege :) <result>{attribute {"xmlns"} {}}</result>'
comp-attr-bad-name-3;Expected error code: XQDY0044. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '(: 3.7.3.2 Computed Attribute Constructor per XQ.E19 XQDY0044 if namespace URI is 'http://www.w3.org/2000/xmlns/' Mary Holstege :) <result>{ attribute { fn:QName("http://www.w3.org/2000/xmlns/","error")} {} }</result>'
comp-attr-bad-name-4;Expected error code: XQDY0044. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '(: 3.7.3.2 Computed Attribute Constructor per XQ.E19 XQDY0044 if namespace URI is 'http://www.w3.org/2000/xmlns/' Mary Holstege :) <result>{ attribute { fn:QName("http://www.w3.org/2000/xmlns/","foo:error")} {} }</result>'
comp-attr-bad-name-5;Expected error code: XQDY0044. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '(: 3.7.3.2 Computed Attribute Constructor per XQ.E19 XQDY0044 if namespace prefix is 'xml' and namespace URI is not 'http://www.w3.org/XML/1998/namespace' Mary Holstege :) <result>{ attribute { fn:QName("http://example.com/not-XML-uri","xml:error") } {} }</result>'
comp-attr-bad-name-6;Expected error code: XQDY0044. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '(: 3.7.3.2 Computed Attribute Constructor per XQ.E19 XQDY0044 if namespace prefix is not 'xml' and namespace URI is 'http://www.w3.org/XML/1998/namespace' Mary Holstege :) <result>{ attribute { fn:QName("http://www.w3.org/XML/1998/namespace","foo:error")} {} }</result>'
comp-attr-bad-name-7;Expected error code: XQDY0044. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '(: 3.7.3.2 Computed Attribute Constructor per XQ.E19 XQDY0044 if namespace prefix is 'xmlns' Mary Holstege :) <result>{attribute {fn:QName("http://example.com/some-uri","xmlns:error")} {}}</result>'
comp-elem-bad-name-1;Expected executing the XPath 'element {"xmlns:error"} {}' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XQDY0096. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'element {"xmlns:error"} {}'
comp-elem-bad-name-2;Expected error code: XQDY0096. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '(: 3.7.3.1 Computed Element Constructor per XQ.E19 XQDY0096 if namespace URI is 'http://www.w3.org/2000/xmlns/' Mary Holstege :) element { fn:QName("http://www.w3.org/2000/xmlns/","error")} {}'
comp-elem-bad-name-3;Expected error code: XQDY0096. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '(: 3.7.3.1 Computed Element Constructor per XQ.E19 XQDY0096 if namespace URI is 'http://www.w3.org/2000/xmlns/' Mary Holstege :) element { fn:QName("http://www.w3.org/2000/xmlns/","foo:error")} {}'
comp-elem-bad-name-4;Expected error code: XQDY0096. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '(: 3.7.3.1 Computed Element Constructor per XQ.E19 XQDY0096 if namespace prefix is 'xml' and namespace URI is not 'http://www.w3.org/XML/1998/namespace' Mary Holstege :) element { fn:QName("http://example.com/not-XML-uri","xml:error") } {}'
comp-elem-bad-name-5;Expected error code: XQDY0096. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '(: 3.7.3.1 Computed Element Constructor per XQ.E19 XQDY0096 if namespace prefix is not 'xml' and its namespace URI is 'http://www.w3.org/XML/1998/namespace' Mary Holstege :) element { fn:QName("http://www.w3.org/XML/1998/namespace","foo:error") } {}'
comp-elem-bad-name-6;Expected error code: XQDY0096. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '(: 3.7.3.1 Computed Element Constructor per XQ.E19 XQDY0096 if namespace prefix is 'xmlns' Mary Holstege :) element { fn:QName("http://example.com/some-uri","xmlns:error") } {}'
Comp-notation-1;PRSC Error: Failed to parse query 'import schema namespace myns="http://www.example.com/notation"; \n         fn:not(exactly-one(//*:NOTATION1[1]) eq exactly-one(//*:NOTATION3[1]))'
Comp-notation-10;PRSC Error: Failed to parse query 'import schema namespace myns="http://www.example.com/notation"; \n         fn:not(exactly-one(//*:NOTATION1[1]) ne exactly-one(//*:NOTATION2[1]))'
Comp-notation-11;PRSC Error: Failed to parse query 'import schema namespace myns="http://www.example.com/notation"; \n         fn:boolean(exactly-one(//*:NOTATION1[1]) eq exactly-one(//*:NOTATION2[1]))'
Comp-notation-12;PRSC Error: Failed to parse query 'import schema namespace myns="http://www.example.com/notation"; \n         fn:boolean(exactly-one(//*:NOTATION1[1]) ne exactly-one(//*:NOTATION2[1]))'
Comp-notation-13;PRSC Error: Failed to parse query 'import schema namespace myns="http://www.example.com/notation"; \n         (exactly-one(//*:NOTATION1[1]) eq exactly-one(//*:NOTATION2[1])) and fn:true()'
Comp-notation-14;PRSC Error: Failed to parse query 'import schema namespace myns="http://www.example.com/notation"; \n         (exactly-one(//*:NOTATION1[1]) ne exactly-one(//*:NOTATION2[1])) and fn:true()'
Comp-notation-15;PRSC Error: Failed to parse query 'import schema namespace myns="http://www.example.com/notation"; \n         (exactly-one(//*:NOTATION1[1]) eq exactly-one(//*:NOTATION2[1])) or fn:true()'
Comp-notation-16;PRSC Error: Failed to parse query 'import schema namespace myns="http://www.example.com/notation"; \n         (exactly-one(//*:NOTATION1[1]) ne exactly-one(//*:NOTATION2[1])) or fn:true()'
Comp-notation-17;PRSC Error: Failed to parse query 'import schema namespace myns="http://www.example.com/notation"; \n         (exactly-one(//*:NOTATION1[1]) eq exactly-one(//*:NOTATION2[1])) and fn:false()'
Comp-notation-18;PRSC Error: Failed to parse query 'import schema namespace myns="http://www.example.com/notation"; \n         (exactly-one(//*:NOTATION1[1]) ne exactly-one(//*:NOTATION2[1])) and fn:false()'
Comp-notation-19;PRSC Error: Failed to parse query 'import schema namespace myns="http://www.example.com/notation"; \n         (exactly-one(//*:NOTATION1[1]) eq exactly-one(//*:NOTATION2[1])) or fn:false()'
Comp-notation-2;Expected executing the XPath 'import schema namespace myns="http://www.example.com/notation"; \n         exactly-one(//*:NOTATION1[1]) eq exactly-one(//*:NOTATION2[1])' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'import schema namespace myns="http://www.example.com/notation"; \n         exactly-one(//*:NOTATION1[1]) eq exactly-one(//*:NOTATION2[1])'
Comp-notation-20;PRSC Error: Failed to parse query 'import schema namespace myns="http://www.example.com/notation"; \n         (exactly-one(//*:NOTATION1[1]) ne exactly-one(//*:NOTATION2[1])) or fn:false()'
Comp-notation-21;PRSC Error: Failed to parse query 'import schema namespace myns="http://www.example.com/notation"; \n         exactly-one(//*:NOTATION1[1]) eq exactly-one(//*:NOTATION2[1])\n      '
Comp-notation-22;Expected executing the XPath 'import schema namespace myns="http://www.example.com/notation"; \n         exactly-one(//*:NOTATION1[1]) ne exactly-one(//*:NOTATION2[1])' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'import schema namespace myns="http://www.example.com/notation"; \n         exactly-one(//*:NOTATION1[1]) ne exactly-one(//*:NOTATION2[1])'
Comp-notation-3;PRSC Error: Failed to parse query 'import schema namespace myns="http://www.example.com/notation"; \n         exactly-one(//*:NOTATION1[1]) eq exactly-one(//*:NOTATION4[1])'
Comp-notation-4;PRSC Error: Failed to parse query 'import schema namespace myns="http://www.example.com/notation"; \n         exactly-one(//*:NOTATION1[1]) ne exactly-one(//*:NOTATION3[1])'
Comp-notation-5;PRSC Error: Failed to parse query 'import schema namespace myns="http://www.example.com/notation"; \n         exactly-one(//*:NOTATION1[1]) ne exactly-one(//*:NOTATION2[1])'
Comp-notation-6;PRSC Error: Failed to parse query 'import schema namespace myns="http://www.example.com/notation"; \n         exactly-one(//*:NOTATION1[1]) ne exactly-one(//*:NOTATION4[1])'
Comp-notation-7;PRSC Error: Failed to parse query 'import schema namespace myns="http://www.example.com/notation"; \n         fn:not(exactly-one(//*:NOTATION1[1]) eq exactly-one(//*:NOTATION3[1]))'
Comp-notation-8;PRSC Error: Failed to parse query 'import schema namespace myns="http://www.example.com/notation"; \n         fn:not(exactly-one(//*:NOTATION1[1]) eq exactly-one(//*:NOTATION2[1]))'
Comp-notation-9;PRSC Error: Failed to parse query 'import schema namespace myns="http://www.example.com/notation"; \n         fn:not(exactly-one(//*:NOTATION1[1]) ne exactly-one(//*:NOTATION3[1]))'
CondExpr002;PRSC Error: Failed to parse query 'if (fn:true()) then <elem1/> else <elem2/>'
CondExpr003;PRSC Error: Failed to parse query 'if (fn:false()) then <elem1/> else <elem2/>'
CondExpr004;PRSC Error: Failed to parse query 'if (//CompanyName) then <elem1/> else <elem2/>'
CondExpr005;PRSC Error: Failed to parse query 'if (//NodeDoesNotExist) then <elem1/> else <elem2/>'
CondExpr006;PRSC Error: Failed to parse query '<out>{ if (1 != 0) then if (4 != 5) then 1 else 2 else 3 }</out>'
CondExpr007;PRSC Error: Failed to parse query 'if (//MissingNode) then <elem3/> else if (/Root/Customers[@CustomerID='ALFKI']//Country = "Germany") then <elem1/> else <elem2/>'
CondExpr017;for $file in (//Folder)[1]/File return if( $file/FileName='File00000000000' ) then $file/FileName else data( $file/FileName )
CondExpr022;The function doc-available with arity 1 is not registered.
CondExpr20;PRSC Error: Failed to parse query 'if( false() ) then /Folder[1] cast as xs:double ? else 10 cast as xs:double ? = 10'
CondExpr21;PRSC Error: Failed to parse query 'if( true() ) then 10 cast as xs:double ? else /Folder[1] cast as xs:double ? = 10'
constattrerr-1;Expected error code: XQDY0044. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'attribute xmlns {}'
constprolog-1;Expected error code: XQST0067. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare construction strip; \n        declare construction strip; \n        "abc"'
constprolog-10;PRSC Error: Failed to parse query '\n        declare construction preserve; \n        let $anElement := <someElement>some content</someElement> \n        return fn:not($anElement instance of element(*,xs:anyType))\n      '
constprolog-11;PRSC Error: Failed to parse query '\n        declare construction preserve; \n        let $anElement := element someElement{"some content"} \n        return fn:not($anElement instance of element(*,xs:anyType))\n      '
constprolog-12;PRSC Error: Failed to parse query '\n        declare construction strip; \n        fn:not(<someElement>some content</someElement> instance of element(*,xs:untyped))\n      '
constprolog-13;PRSC Error: Failed to parse query '\n        declare construction preserve; \n        fn:not(element someElement{"some content"} instance of element(*,xs:anyType))\n      '
constprolog-14;PRSC Error: Failed to parse query '\n        declare construction strip; \n        let $var := <anElement>Some content</anElement> \n        return ($var instance of element(*,xs:untyped)) and fn:true()\n      '
constprolog-15;PRSC Error: Failed to parse query '\n        declare construction strip; \n        let $anElement := element someElement{"some content"} \n        return ($anElement instance of element(*,xs:untyped)) and fn:true()\n      '
constprolog-16;PRSC Error: Failed to parse query '\n        declare construction preserve; \n        let $anElement := <someElement>content</someElement> \n        return ($anElement instance of element(*,xs:anyType)) and fn:true()\n      '
constprolog-17;PRSC Error: Failed to parse query '\n        declare construction preserve; \n        let $anElement := element someElement{"some content"} \n        return ($anElement instance of element(*,xs:anyType)) and fn:true()\n      '
constprolog-18;PRSC Error: Failed to parse query '\n        declare construction strip; \n        let $var := <anElement>Some content</anElement> \n        return ($var instance of element(*,xs:untyped)) or fn:false()\n      '
constprolog-19;PRSC Error: Failed to parse query '\n        declare construction strip; \n        let $anElement := element someElement{"some content"} \n        return ($anElement instance of element(*,xs:untyped)) or fn:false()\n      '
constprolog-2;PRSC Error: Failed to parse query '\n        declare construction strip; \n        let $anElement := <anElement>some content</anElement> \n        return $anElement instance of element(*,xs:untyped)'
constprolog-20;PRSC Error: Failed to parse query '\n        declare construction preserve; \n        let $anElement := <someElement>content</someElement> \n        return ($anElement instance of element(*,xs:anyType)) or fn:false()\n      '
constprolog-21;PRSC Error: Failed to parse query '\n        declare construction preserve; \n        let $anElement := element someElement{"some content"} \n        return ($anElement instance of element(*,xs:anyType)) or fn:false()\n      '
constprolog-3;PRSC Error: Failed to parse query '\n        declare construction strip; \n        let $anElement := element anElement {"someContent"} \n        return $anElement instance of element(*,xs:untyped)\n      '
constprolog-4;PRSC Error: Failed to parse query '\n        declare construction preserve; \n        let $anElement := <anElement>some content</anElement> \n        return $anElement instance of element(*,xs:anyType)'
constprolog-5;PRSC Error: Failed to parse query '\n        declare construction strip; \n        let $anElement := element anElement {"someContent"} \n        return $anElement instance of element(*,xs:anyType)'
constprolog-6;PRSC Error: Failed to parse query '\n        declare construction strip; \n        let $anElement := <anElement>some content</anElement> \n        return $anElement instance of element(*,xs:anyType)'
constprolog-7;PRSC Error: Failed to parse query '\n        declare construction strip; \n        let $anElement := element anElement {"someContent"} \n        return $anElement instance of element(*,xs:anyType)\n      '
constprolog-8;PRSC Error: Failed to parse query '\n        declare construction strip; \n        let $anElement := <someElement>some content</someElement> \n        return fn:not($anElement instance of element(*,xs:untyped))'
constprolog-9;PRSC Error: Failed to parse query '\n        declare construction strip; \n        let $anElement := element someElement{"some content"} \n        return fn:not($anElement instance of element(*,xs:untyped))'
Constr-attr-charref-1;PRSC Error: Failed to parse query '<elem attr="&#x30;&#x31;&#x32;"/>'
Constr-attr-content-1;Expected executing the XPath '<elem attr="abxxyz123890!@#$%^*()[]\|?/>:;"/>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '<elem attr="abxxyz123890!@#$%^*()[]\|?/>:;"/>'
Constr-attr-distnames-1;Expected error code: XQST0040. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<elem attr="val1" attr="val2" attr2="val3"/>'
Constr-attr-distnames-2;Expected error code: XQST0040. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<elem attr="val1" attr2="val2" attr="val3"/>'
Constr-attr-distnames-3;Expected error code: XQST0040. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<elem attr1="val1" attr="val2" attr2="val3" attr="val4" attr3="val5"/>'
Constr-attr-distnames-4;Expected error code: XQST0040. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<elem xmlns:foo="http://www.w3.org/XQueryTest/Construct" xmlns:bar="http://www.w3.org/XQueryTest/Construct" foo:attr="val1" bar:attr="val2"/>'
Constr-attr-enclexpr-1;PRSC Error: Failed to parse query '<elem attr="{1,'string',3.14,xs:float('1.2345e-2'),xs:dateTime('2002-04-02T12:00:00-01:00')}"/>'
Constr-attr-enclexpr-10;PRSC Error: Failed to parse query '<elem attr="z{}z"/>'
Constr-attr-enclexpr-11;PRSC Error: Failed to parse query '<elem attr="z{ }z"/>'
Constr-attr-enclexpr-12;PRSC Error: Failed to parse query '<elem attr="z{ (:comment:) }z"/>'
Constr-attr-enclexpr-13;PRSC Error: Failed to parse query '<e attr="abc{ 23 (:":) }xyz"/>'
Constr-attr-enclexpr-14;PRSC Error: Failed to parse query '<e attr="abc{ 23 (:{:) }xyz"/>'
Constr-attr-enclexpr-15;PRSC Error: Failed to parse query '<e attr="abc{ 23 (:}:) }xyz"/>'
Constr-attr-enclexpr-2;PRSC Error: Failed to parse query '<elem attr="{<elem>123</elem>, (<elem attr='456'/>)/@attr, (<elem>789</elem>)/text()}"/>'
Constr-attr-enclexpr-3;PRSC Error: Failed to parse query '<elem attr="{1,'',2}"/>'
Constr-attr-enclexpr-4;PRSC Error: Failed to parse query '<elem attr="{1,<a/>,2}"/>'
Constr-attr-enclexpr-5;PRSC Error: Failed to parse query '<elem attr="123{456}"/>'
Constr-attr-enclexpr-6;PRSC Error: Failed to parse query '<elem attr="{123}456"/>'
Constr-attr-enclexpr-7;PRSC Error: Failed to parse query '<elem attr="1{2,3}{4,5}6{<a>7</a>}{<a>8</a>}9"/>'
Constr-attr-enclexpr-8;PRSC Error: Failed to parse query '<elem attr="{(1,2)}{3}"/>'
Constr-attr-entref-1;PRSC Error: Failed to parse query '<elem attr="&amp;&lt;&gt;"/>'
Constr-attr-entref-2;PRSC Error: Failed to parse query 'fn:string-length(string((<elem attr="&amp;&lt;&gt;"/>)/@attr)) = 3'
Constr-attr-id-1;PRSC Error: Failed to parse query '<elem xml:id="ncname"/>'
Constr-attr-id-2;Expected executing the XPath '<elem xml:id=" a{'b c d',' '}"/>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '<elem xml:id=" a{'b c d',' '}"/>'
Constr-attr-nsdecl-1;PRSC Error: Failed to parse query 'fn:count((<elem xmlns:foo="http://ns.example.com/uri"/>)/@*) = 0'
Constr-attr-nsdecl-2;PRSC Error: Failed to parse query 'fn:count((<elem xmlns="http://ns.example.com/uri"/>)/@*) = 0'
Constr-attr-nspre-1;PRSC Error: Failed to parse query 'declare namespace foo="http://www.w3.org/XQueryTest/Construct"; <elem foo:attr="value"/>'
Constr-attr-nspre-2;PRSC Error: Failed to parse query '<elem xmlns:foo="http://www.w3.org/XQueryTest/Construct"><child foo:attr="value"/></elem>'
Constr-attr-nsprein-1;PRSC Error: Failed to parse query '<elem xmlns:foo="http://www.w3.org/XQueryTest/Construct" foo:attr="value"/>'
Constr-attr-nsprein-2;PRSC Error: Failed to parse query '<elem foo:attr="value" xmlns:foo="http://www.w3.org/XQueryTest/Construct"/>'
Constr-attr-nsprein-3;PRSC Error: Failed to parse query '<elem att="{<p:e/>/namespace-uri()}" xmlns:p="http://ns.example.com/uri"/>'
Constr-attr-nsprein-4;PRSC Error: Failed to parse query '<elem att="{<e2 a2="{<e3 a3="{<p:e/>/namespace-uri()}"></e3>/@a3}"></e2>/@a2}" \n                                     xmlns:p="http://ns.example.com/uri"/>'
Constr-attr-parent-1;PRSC Error: Failed to parse query 'for $x in <elem attr="value"/> return $x is $x/@attr/..'
Constr-attr-syntax-1;PRSC Error: Failed to parse query '<elem attr="value"/>'
Constr-attr-syntax-10;PRSC Error: Failed to parse query '<elem attr="value" />'
Constr-attr-syntax-2;PRSC Error: Failed to parse query '<elem attr1="val1" attr2="val2" attr3="val3"/>'
Constr-attr-syntax-3;PRSC Error: Failed to parse query '<elem attr='value'/>'
Constr-attr-syntax-4;PRSC Error: Failed to parse query '<elem attr=''''/>'
Constr-attr-syntax-5;PRSC Error: Failed to parse query '<elem attr=""""/>'
Constr-attr-syntax-8;PRSC Error: Failed to parse query '<elem attr1="val1" attr2="val2"/>'
Constr-attr-syntax-9;PRSC Error: Failed to parse query '<elem attr = "value"/>'
Constr-attr-ws-1;PRSC Error: Failed to parse query '<elem attr=" "/>'
Constr-attr-ws-2;PRSC Error: Failed to parse query '<elem attr=" "/>'
Constr-attr-ws-3;PRSC Error: Failed to parse query '<elem attr="&#xd;"/>'
Constr-attr-ws-4;PRSC Error: Failed to parse query '<elem attr="&#xa;"/>'
Constr-attr-ws-5;PRSC Error: Failed to parse query '<elem attr="&#x9;"/>'
Constr-comment-1;PRSC Error: Failed to parse query '<!--comment-->'
Constr-comment-2;PRSC Error: Failed to parse query 'fn:data(<!--comment-->) = "comment"'
Constr-comment-3;PRSC Error: Failed to parse query '<!---->'
Constr-comment-4;PRSC Error: Failed to parse query 'fn:data(<!---->) = ""'
Constr-comment-5;PRSC Error: Failed to parse query '<!--<?&-&lt;&#x20;><![CDATA[x]]>-->'
Constr-compattr-compname-1;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'element elem {attribute {()} {'text'}}'
Constr-compattr-compname-10;PRSC Error: Failed to parse query 'element elem {attribute {'attr'} {'text'}}'
Constr-compattr-compname-11;PRSC Error: Failed to parse query 'element elem {attribute {'attr', ()} {'text'}}'
Constr-compattr-compname-12;PRSC Error: Failed to parse query 'element elem {attribute {(), 'attr'} {'text'}}'
Constr-compattr-compname-13;PRSC Error: Failed to parse query '<elem xmlns:foo="http://www.example.com/foo">{element elem {attribute {'foo:attr'} {}}}</elem>'
Constr-compattr-compname-14;Expected error code: XQDY0074. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'element elem {attribute {'foo:attr'} {}}'
Constr-compattr-compname-15;PRSC Error: Failed to parse query 'element elem {attribute {xs:untypedAtomic('attr')} {'text'}}'
Constr-compattr-compname-16;PRSC Error: Failed to parse query '<elem xmlns:foo="http://www.example.com/foo">{attribute {xs:untypedAtomic('foo:attr')} {'text'}}</elem>'
Constr-compattr-compname-17;Expected error code: XQDY0074. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'element elem {attribute {xs:untypedAtomic('foo:elem')} {'text'}}'
Constr-compattr-compname-18;Expected error code: XQDY0074. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'element elem {attribute {'el em'} {'text'}}'
Constr-compattr-compname-19;Expected error code: XQDY0074. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'element elem {attribute {xs:untypedAtomic('el em')} {'text'}}'
Constr-compattr-compname-2;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'element elem {attribute {'one', 'two'} {'text'}}'
Constr-compattr-compname-20;PRSC Error: Failed to parse query 'let $result := (element x { attribute {"Q{http://example.com/x}y"} { } }) return $result[self::x/@*[local-name()='y' and namespace-uri()='http://example.com/x']]'
Constr-compattr-compname-21;PRSC Error: Failed to parse query 'let $result := (element x { attribute {" Q{}y "} { } }) return $result[self::x/@*[local-name()='y' and namespace-uri()='']]'
Constr-compattr-compname-22;PRSC Error: Failed to parse query 'let $result := (element x { attribute {" Q{http://example.com/x}y" || year-from-date(current-date())} { } }) return $result[self::x/@*[starts-with(local-name(), 'y') and namespace-uri()='http://example.com/x']]'
Constr-compattr-compname-23;PRSC Error: Failed to parse query 'let $result := (element x { attribute {"Q{}y" || year-from-date(current-date())} { } }) return $result[self::x/@*[starts-with(local-name(), 'y') and namespace-uri()='']]'
Constr-compattr-compname-3;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'element elem {attribute {xs:untypedAtomic('one'), xs:untypedAtomic('two')} {'text'}}'
Constr-compattr-compname-4;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'element elem {attribute {//a} {'text'}}'
Constr-compattr-compname-5;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'element elem {attribute {1,2} {'text'}}'
Constr-compattr-compname-6;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'element elem {attribute {123} {'text'}}'
Constr-compattr-compname-7;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'element elem {attribute {xs:dateTime("1999-05-31T13:20:00")} {'text'}}'
Constr-compattr-compname-8;PRSC Error: Failed to parse query 'element elem {attribute {//*:NCName[1]} {'text'}}'
Constr-compattr-compname-9;PRSC Error: Failed to parse query 'element elem {attribute {xs:QName('aQname')} {'text'}}'
Constr-compattr-data-1;PRSC Error: Failed to parse query 'fn:data(attribute attr {'a', element a {}, 'b'})'
Constr-compattr-doc-1;PRSC Error: Failed to parse query 'element elem {attribute attr {., .}}'
Constr-compattr-enclexpr-1;PRSC Error: Failed to parse query 'element elem {attribute attr {1,'string',3.14,xs:float('1.2345e-2'),xs:dateTime('2002-04-02T12:00:00-01:00')}}'
Constr-compattr-enclexpr-2;PRSC Error: Failed to parse query 'element elem {attribute attr {<elem>123</elem>, (<elem attr='456'/>)/@attr, (<elem>789</elem>)/text()}}'
Constr-compattr-enclexpr-3;PRSC Error: Failed to parse query 'element elem {attribute attr {1,'',2}}'
Constr-compattr-enclexpr-4;PRSC Error: Failed to parse query 'element elem {attribute attr {1,<a/>,2}}'
Constr-compattr-eqname-1;PRSC Error: Failed to parse query 'let $result := (attribute { " Q{ }x " } {}) return $result[local-name() = 'x' and namespace-uri() = '']'
Constr-compattr-eqname-2;PRSC Error: Failed to parse query 'let $result := (attribute { " Q{ _   _ }x " } {}) return $result[local-name() = 'x' and namespace-uri() = '_ _']'
Constr-compattr-eqname-3;PRSC Error: Failed to parse query 'let $result := (attribute { " xml:x " } {}) return $result[name() = 'xml:x' and namespace-uri() = 'http://www.w3.org/XML/1998/namespace']'
Constr-compattr-eqname-entities-1;PRSC Error: Failed to parse query 'let $result := ( attribute Q{z&#x20;z}x {} ) return  $result[local-name() = 'x' and namespace-uri() = 'z z'] '
Constr-compattr-eqname-entities-2;PRSC Error: Failed to parse query 'let $result := ( attribute { "Q{z&#x20;z}x" } {} ) return $result[local-name() = 'x' and namespace-uri() = 'z z']'
Constr-compattr-eqname-entities-3;PRSC Error: Failed to parse query 'let $result := ( attribute Q{&#x22;&#x26;}x {} ) return $result[local-name() = 'x' and deep-equal(string-to-codepoints(namespace-uri()), (34, 38))]'
Constr-compattr-eqname-entities-4;PRSC Error: Failed to parse query 'let $result := ( attribute { "Q{&#x22;&#x26;}x" } {} ) return $result[local-name() = 'x' and deep-equal(string-to-codepoints(namespace-uri()), (34, 38))]'
Constr-compattr-eqname-entities-5;PRSC Error: Failed to parse query 'let $result := ( attribute Q{&#x7b;&#x7d;}x {} ) return  $result[local-name() = 'x' and namespace-uri() = '{}'] '
Constr-compattr-eqname-entities-6;PRSC Error: Failed to parse query 'let $result := ( attribute Q{&#x20;}x {} ) return $result[local-name() = 'x' and namespace-uri() = '']'
Constr-compattr-eqname-entities-7;PRSC Error: Failed to parse query 'let $result := ( attribute Q{&#x20;}x {} ) return empty($result[local-name() = 'x' and namespace-uri() = ' '])'
Constr-compattr-eqname-error-1;Expected error code: XQDY0074. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'attribute { "xml: x" } {}'
Constr-compattr-eqname-error-2;Expected error code: XQDY0074. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'attribute { "a:x" } {}'
Constr-compattr-eqname-error-5;Expected error code: XQDY0074. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'attribute { "Q{{}x" } {}'
Constr-compattr-eqname-error-6;Expected error code: XQDY0074. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'attribute { "Q{{}x" } {}'
Constr-compattr-eqname-error-7;Expected error code: XQDY0074. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'attribute { "Q{}}x" } {}'
Constr-compattr-id-1;PRSC Error: Failed to parse query 'element elem {attribute xml:id {"ncname"}}'
Constr-compattr-id-2;Expected executing the XPath 'element elem {attribute xml:id {" ab c d "}}' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'element elem {attribute xml:id {" ab c d "}}'
Constr-compattr-name-1;PRSC Error: Failed to parse query 'element elem {attribute attr {'text'}}'
Constr-compattr-name-2;PRSC Error: Failed to parse query 'declare namespace foo="http://www.example.com/foo"; element elem {attribute foo:attr {'text'}}'
Constr-compattr-name-3;Expected error code: XPST0081. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'element elem {attribute foo:attr {'text'}}'
Constr-compattr-name-4;PRSC Error: Failed to parse query 'let $result := (element x { attribute Q{http://example.com/x}y { } }) return $result[self::x/@*[local-name()='y' and namespace-uri()='http://example.com/x']]'
Constr-compattr-name-5;PRSC Error: Failed to parse query 'let $result := (element x { attribute Q{}y { } }) return $result[self::x/@*[local-name()='y' and namespace-uri()='']]'
Constr-compattr-parent-1;PRSC Error: Failed to parse query 'count((attribute attr {})/..) = 0'
Constr-compattr-string-1;PRSC Error: Failed to parse query 'fn:string(attribute attr {'a', element a {}, 'b'})'
Constr-compcomment-dash-1;Expected error code: XQDY0072. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'comment {'-'}'
Constr-compcomment-dash-2;Expected error code: XQDY0072. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'comment {'comment-'}'
Constr-compcomment-dash-3;Expected error code: XQDY0072. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'comment {'comment&#x2D;'}'
Constr-compcomment-dash-4;Expected error code: XQDY0072. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'comment {//*:test-case[@name="Constr-compcomment-dash-4"]/*:description}'
Constr-compcomment-data-1;PRSC Error: Failed to parse query 'fn:data(comment {'a', element a {}, 'b'})'
Constr-compcomment-doc-1;PRSC Error: Failed to parse query 'comment {., .}'
Constr-compcomment-doubledash-1;Expected error code: XQDY0072. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'comment {'--'}'
Constr-compcomment-doubledash-2;Expected error code: XQDY0072. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'comment {'com--ment'}'
Constr-compcomment-doubledash-3;Expected error code: XQDY0072. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'comment {'com&#x2D;&#x2D;ment'}'
Constr-compcomment-doubledash-4;Expected error code: XQDY0072. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'comment {//*:test-case[@name="Constr-compcomment-doubledash-4"]/*:description}'
Constr-compcomment-doubledash-5;PRSC Error: Failed to parse query 'comment {'com','-','-','ment'}'
Constr-compcomment-enclexpr-1;PRSC Error: Failed to parse query 'comment {1,'string',3.14,xs:float('1.2345e-2'),xs:dateTime('2002-04-02T12:00:00-01:00')}'
Constr-compcomment-enclexpr-2;PRSC Error: Failed to parse query 'comment {<elem>123</elem>, (<elem attr='456'/>)/@attr, (<elem>789</elem>)/text()}'
Constr-compcomment-enclexpr-3;PRSC Error: Failed to parse query 'comment {1,'',2}'
Constr-compcomment-enclexpr-4;PRSC Error: Failed to parse query 'comment {1,<a/>,2}'
Constr-compcomment-enclexpr-5;PRSC Error: Failed to parse query 'comment {/root}'
Constr-compcomment-nested-1;PRSC Error: Failed to parse query 'comment {comment {'one', comment {'two'}}, 'three', comment {'four'}}'
Constr-compcomment-nested-2;PRSC Error: Failed to parse query '<elem>{comment {'one'}}<a>{comment {'two'}}</a>{comment {'three'}}</elem>'
Constr-compcomment-nested-3;PRSC Error: Failed to parse query 'document {comment {'one'}, <a/>, comment {'two'}, <b/>, comment {'three'}}'
Constr-compcomment-parent-1;PRSC Error: Failed to parse query 'count((comment {'comment'})/..) = 0'
Constr-compcomment-string-1;PRSC Error: Failed to parse query 'fn:string(comment {'a', element a {}, 'b'})'
Constr-compelem-adjtext-1;PRSC Error: Failed to parse query 'count((element elem {1, 'string', 1,2e3})/text()) = 1'
Constr-compelem-adjtext-2;PRSC Error: Failed to parse query 'count((element elem {1, //text(), 'string'})/text()) = 1'
Constr-compelem-adjtext-3;PRSC Error: Failed to parse query 'count((element elem {1, 2, <a/>, 3, 4, <b/>, 5, 6})/text()) = 3'
Constr-compelem-attr-1;Expected error code: XQTY0024. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'element elem {1, //west/@mark}'
Constr-compelem-attr-2;Expected error code: XQTY0024. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'element elem {element a {}, //west/@mark}'
Constr-compelem-attr-3;PRSC Error: Failed to parse query 'element elem {//west/@mark, //west/@west-attr-1}'
Constr-compelem-attr-4;Expected error code: XQDY0025. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'element elem {//west/@mark, //center/@mark}'
Constr-compelem-baseuri-1;PRSC Error: Failed to parse query 'fn:base-uri(element elem {attribute xml:base {"http://www.example.com"}})'
Constr-compelem-baseuri-2;PRSC Error: Failed to parse query 'fn:base-uri(exactly-one((<elem xml:base="http://www.example.com">{element a {}}</elem>)/a))'
Constr-compelem-baseuri-3;PRSC Error: Failed to parse query 'declare base-uri "http://www.example.com"; fn:base-uri(element elem {})'
Constr-compelem-compname-1;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'element {()} {'text'}'
Constr-compelem-compname-10;PRSC Error: Failed to parse query 'element {'elem'} {'text'}'
Constr-compelem-compname-11;PRSC Error: Failed to parse query 'element {'elem', ()} {'text'}'
Constr-compelem-compname-12;PRSC Error: Failed to parse query 'element {(), 'elem'} {'text'}'
Constr-compelem-compname-13;PRSC Error: Failed to parse query '<elem xmlns:foo="http://www.example.com/foo">{element {'foo:elem'} {'text'}}</elem>'
Constr-compelem-compname-14;Expected error code: XQDY0074. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'element {'foo:elem'} {}'
Constr-compelem-compname-15;PRSC Error: Failed to parse query 'element {xs:untypedAtomic('elem')} {'text'}'
Constr-compelem-compname-16;PRSC Error: Failed to parse query '<elem xmlns:foo="http://www.example.com/foo">{element {xs:untypedAtomic('foo:elem')} {'text'}}</elem>'
Constr-compelem-compname-17;Expected error code: XQDY0074. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'element {xs:untypedAtomic('foo:elem')} {'text'}'
Constr-compelem-compname-18;Expected error code: XQDY0074. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'element {'el em'} {'text'}'
Constr-compelem-compname-19;Expected error code: XQDY0074. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'element {xs:untypedAtomic('el em')} {'text'}'
Constr-compelem-compname-2;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'element {'one', 'two'} {'text'}'
Constr-compelem-compname-3;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'element {xs:untypedAtomic('one'), xs:untypedAtomic('two')} {'text'}'
Constr-compelem-compname-4;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'element {//a} {'text'}'
Constr-compelem-compname-5;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'element {1,2} {'text'}'
Constr-compelem-compname-6;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'element {123} {'text'}'
Constr-compelem-compname-7;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'element {xs:dateTime("1999-05-31T13:20:00")} {'text'}'
Constr-compelem-compname-8;PRSC Error: Failed to parse query 'element {//*:NCName[1]} {'text'}'
Constr-compelem-compname-9;PRSC Error: Failed to parse query 'element {xs:QName('aQname')} {'text'}'
Constr-compelem-constrmod-1;PRSC Error: Failed to parse query '\n        declare construction strip; \n        import schema namespace atomic="http://www.w3.org/XQueryTest"; \n        fn:count(fn:data((element elem {//*:idrefs})/*))\n       = 1'
Constr-compelem-constrmod-2;Expected executing the XPath 'declare construction preserve; \n        import schema namespace atomic="http://www.w3.org/XQueryTest"; \n        fn:count(fn:data((element elem {//*:idrefs})/*))' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n        declare construction preserve; \n        import schema namespace atomic="http://www.w3.org/XQueryTest"; \n        fn:count(fn:data((element elem {//*:idrefs})/*))\n       = 2'
Constr-compelem-constrmod-3;Expected error code: FORG0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare construction strip; (element elem {xs:decimal((//decimal[1]))}) cast as xs:integer'
Constr-compelem-constrmod-4;Expected executing the XPath 'declare construction preserve; (element elem {xs:decimal((//decimal[1]))}) cast as xs:integer' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare construction preserve; (element elem {xs:decimal((//decimal[1]))}) cast as xs:integer = 12678967'
Constr-compelem-constrmod-5;PRSC Error: Failed to parse query '\n        declare construction strip; \n        import schema namespace atomic="http://www.w3.org/XQueryTest"; \n        fn:count(fn:data((element elem {//*:idrefs/@*:attr})/@*:attr))\n       = 1'
Constr-compelem-constrmod-6;Expected executing the XPath 'declare construction preserve; \n        import schema namespace atomic="http://www.w3.org/XQueryTest"; \n        fn:count(fn:data((element elem {//*:idrefs/@*:attr})/@*:attr))' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n        declare construction preserve; \n        import schema namespace atomic="http://www.w3.org/XQueryTest"; \n        fn:count(fn:data((element elem {//*:idrefs/@*:attr})/@*:attr))\n       = 2'
Constr-compelem-constrmod-7;Expected error code: FORG0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare construction strip; (element elem {//*:decimal/@*:attr})/@*:attr cast as xs:integer'
Constr-compelem-constrmod-8;Expected executing the XPath 'declare construction preserve; (element elem {xs:decimal(//*:decimal[1]/@*:attr)}) cast as xs:integer' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare construction preserve; (element elem {xs:decimal(//*:decimal[1]/@*:attr)}) cast as xs:integer = 12678967'
Constr-compelem-data-1;PRSC Error: Failed to parse query 'fn:data(element elem {'a', element a {}, 'b'})'
Constr-compelem-doc-1;PRSC Error: Failed to parse query 'element elem {., .}'
Constr-compelem-enclexpr-1;PRSC Error: Failed to parse query 'element elem {}'
Constr-compelem-enclexpr-2;PRSC Error: Failed to parse query 'element elem {1,'a',3.5,4e2}'
Constr-compelem-enclexpr-3;PRSC Error: Failed to parse query 'element elem {1,//a,2,3,//comment(),4,5,//processing-instruction(),6,7,//text(),8}'
Constr-compelem-enclexpr-4;PRSC Error: Failed to parse query 'element elem {1, '', 2}'
Constr-compelem-eqname-1;PRSC Error: Failed to parse query 'let $result := (element { " Q{ }x " } {}) return $result[local-name() = 'x' and namespace-uri() = '']'
Constr-compelem-eqname-2;PRSC Error: Failed to parse query 'let $result := (element { " Q{ _   _ }x " } {}) return $result[local-name() = 'x' and namespace-uri() = '_ _']'
Constr-compelem-eqname-3;PRSC Error: Failed to parse query 'let $result := (element { " xml:x " } {}) return $result[name() = 'xml:x' and namespace-uri() = 'http://www.w3.org/XML/1998/namespace']'
Constr-compelem-eqname-entities-1;PRSC Error: Failed to parse query 'let $result := ( element Q{z&#x20;z}x {} ) return $result[local-name() = 'x' and namespace-uri() = 'z z']'
Constr-compelem-eqname-entities-2;PRSC Error: Failed to parse query 'let $result := ( element { "Q{z&#x20;z}x" } {} ) return $result[local-name() = 'x' and namespace-uri() = 'z z']'
Constr-compelem-eqname-entities-3;PRSC Error: Failed to parse query 'let $result := ( element Q{&#x22;&#x26;}x {} ) return $result[local-name() = 'x' and deep-equal(string-to-codepoints(namespace-uri()), (34, 38))]'
Constr-compelem-eqname-entities-4;PRSC Error: Failed to parse query 'let $result := ( element { "Q{&#x22;&#x26;}x" } {} ) return $result[local-name() = 'x' and deep-equal(string-to-codepoints(namespace-uri()), (34, 38))]'
Constr-compelem-eqname-entities-5;PRSC Error: Failed to parse query 'let $result := ( element Q{&#x7b;&#x7d;}x {} ) return  $result[local-name() = 'x' and namespace-uri() = '{}'] '
Constr-compelem-eqname-entities-6;PRSC Error: Failed to parse query 'let $result := ( element Q{&#x20;}x {} ) return $result[local-name() = 'x' and namespace-uri() = '']'
Constr-compelem-eqname-entities-7;PRSC Error: Failed to parse query 'let $result := ( element Q{&#x20;}x {} ) return empty($result[local-name() = 'x' and namespace-uri() = ' '])'
Constr-compelem-eqname-error-1;Expected error code: XQDY0074. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'element { "xml: x" } {}'
Constr-compelem-eqname-error-2;Expected error code: XQDY0074. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'element { "a:x" } {}'
Constr-compelem-eqname-error-5;Expected error code: XQDY0074. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'element { "Q{{}x" } {}'
Constr-compelem-eqname-error-6;Expected error code: XQDY0074. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'element { "Q{{}x" } {}'
Constr-compelem-eqname-error-7;Expected error code: XQDY0074. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'element { "Q{}}x" } {}'
Constr-compelem-name-1;PRSC Error: Failed to parse query 'element elem {'text'}'
Constr-compelem-name-2;PRSC Error: Failed to parse query 'declare namespace foo="http://www.example.com/foo"; element foo:elem {'text'}'
Constr-compelem-name-20;PRSC Error: Failed to parse query 'let $result := (element {"Q{http://example.com/x}x"} { }) return $result[self::*[local-name()='x' and namespace-uri()='http://example.com/x']]'
Constr-compelem-name-21;PRSC Error: Failed to parse query 'let $result := (element {"Q{}x"} {}) return $result[self::*[local-name()='x' and namespace-uri()='']]'
Constr-compelem-name-22;PRSC Error: Failed to parse query 'let $result := (element {" Q{http://example.com/x}x" || year-from-date(current-date())} { }) return $result[self::*[starts-with(local-name(),'x') and namespace-uri()='http://example.com/x']]'
Constr-compelem-name-23;PRSC Error: Failed to parse query 'let $result := (element {" Q{}x" || year-from-date(current-date()) || " "} {}) return $result[self::*[starts-with(local-name(),'x') and namespace-uri()='']]'
Constr-compelem-name-24;PRSC Error: Failed to parse query 'let $result := (element {" x" || year-from-date(current-date()) || " "} {}) return $result[self::*[starts-with(local-name(),'x') and namespace-uri()='']]'
Constr-compelem-name-3;Expected error code: XPST0081. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'element foo:elem {'text'}'
Constr-compelem-name-4;PRSC Error: Failed to parse query 'let $result := (element Q{http://example.com/x}x { }) return $result[self::*[local-name()='x' and namespace-uri()='http://example.com/x']]'
Constr-compelem-name-5;PRSC Error: Failed to parse query 'let $result := (element Q{}x {}) return $result[self::*[local-name()='x' and namespace-uri()='']]'
Constr-compelem-nested-1;PRSC Error: Failed to parse query 'element elem {1, element a {2, element b {element c {}, element d {3}}, 4}}'
Constr-compelem-nested-2;PRSC Error: Failed to parse query 'element elem {}'
Constr-compelem-nodeid-1;PRSC Error: Failed to parse query 'for $x in <a/>, $y in element elem {$x} return exactly-one($y/a) is $x'
Constr-compelem-nodeid-2;PRSC Error: Failed to parse query 'for $x in <a b="b"/>, $y in element elem {$x/@b} return $y/@b is $x/@b'
Constr-compelem-nodeid-3;PRSC Error: Failed to parse query 'for $x in <!--comment-->, $y in element elem {$x} return exactly-one($y/comment()) is $x'
Constr-compelem-nodeid-4;PRSC Error: Failed to parse query 'for $x in <?pi content?>, $y in element elem {$x} return exactly-one($y/processing-instruction()) is $x'
Constr-compelem-nodeid-5;PRSC Error: Failed to parse query 'for $x in <a>text</a>, $y in element elem {$x/text()} return exactly-one($y/text()) is exactly-one($x/text())'
Constr-compelem-parent-1;PRSC Error: Failed to parse query 'count((element elem {})/..) = 0'
Constr-compelem-string-1;PRSC Error: Failed to parse query 'fn:string(element elem {'a', element a {}, 'b'})'
Constr-comppi-compname-1;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'processing-instruction {()} {'text'}'
Constr-comppi-compname-10;PRSC Error: Failed to parse query 'processing-instruction {'pi'} {'text'}'
Constr-comppi-compname-11;PRSC Error: Failed to parse query 'processing-instruction {'pi', ()} {'text'}'
Constr-comppi-compname-12;PRSC Error: Failed to parse query 'processing-instruction {(), 'pi'} {'text'}'
Constr-comppi-compname-13;Expected error code: XQDY0041. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<elem xmlns:foo="http://www.example.com/foo">{processing-instruction {'foo:attr'} {}}</elem>'
Constr-comppi-compname-15;PRSC Error: Failed to parse query 'processing-instruction {xs:untypedAtomic('pi')} {'text'}'
Constr-comppi-compname-16;Expected error code: XQDY0041. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<elem xmlns:foo="http://www.example.com/foo">{processing-instruction {xs:untypedAtomic('foo:pi')} {'text'}}</elem>'
Constr-comppi-compname-18;Expected error code: XQDY0041. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'processing-instruction {'p i'} {'text'}'
Constr-comppi-compname-19;Expected error code: XQDY0041. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'processing-instruction {xs:untypedAtomic('p i')} {'text'}'
Constr-comppi-compname-2;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'processing-instruction {'one', 'two'} {'text'}'
Constr-comppi-compname-20;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'processing-instruction {('pi'[current-date() lt xs:date('1900-01-01')], xs:anyURI('pi'))} {'text'}'
Constr-comppi-compname-21;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'processing-instruction {('pi'[current-date() lt xs:date('1900-01-01')], xs:duration('P1D'))} {'text'}'
Constr-comppi-compname-22;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'processing-instruction {'pi'[current-date() lt xs:date('1900-01-01')]} {'text'}'
Constr-comppi-compname-3;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'processing-instruction {xs:untypedAtomic('one'), xs:untypedAtomic('two')} {'text'}'
Constr-comppi-compname-4;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'processing-instruction {//a} {'text'}'
Constr-comppi-compname-5;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'processing-instruction {1,2} {'text'}'
Constr-comppi-compname-6;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'processing-instruction {123} {'text'}'
Constr-comppi-compname-7;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'processing-instruction {xs:dateTime("1999-05-31T13:20:00")} {'text'}'
Constr-comppi-compname-8;PRSC Error: Failed to parse query 'processing-instruction {//*:NCName[1]} {'text'}'
Constr-comppi-compname-9;Expected executing the XPath 'processing-instruction {//*:QName} {'text'}' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XQDY0041. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'processing-instruction {//*:QName} {'text'}'
Constr-comppi-data-1;PRSC Error: Failed to parse query 'fn:data(processing-instruction pi {'a', element a {}, 'b'})'
Constr-comppi-doc-1;PRSC Error: Failed to parse query 'processing-instruction pi {., .}'
Constr-comppi-empty-1;PRSC Error: Failed to parse query 'processing-instruction pi {()}'
Constr-comppi-empty-2;PRSC Error: Failed to parse query 'processing-instruction pi {''}'
Constr-comppi-enclexpr-1;PRSC Error: Failed to parse query 'processing-instruction pi {1,'string',3.14,xs:float('1.2345e-2'),xs:dateTime('2002-04-02T12:00:00-01:00')}'
Constr-comppi-enclexpr-2;PRSC Error: Failed to parse query 'processing-instruction pi {<elem>123</elem>, (<elem attr='456'/>)/@attr, (<elem>789</elem>)/text()}'
Constr-comppi-enclexpr-3;PRSC Error: Failed to parse query 'processing-instruction pi {1,'',2}'
Constr-comppi-enclexpr-4;PRSC Error: Failed to parse query 'processing-instruction pi {1,<a/>,2}'
Constr-comppi-enclexpr-5;PRSC Error: Failed to parse query 'processing-instruction pi {/root}'
Constr-comppi-invalid-1;Expected error code: XQDY0026. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'processing-instruction pi {'?>'}'
Constr-comppi-invalid-2;Expected error code: XQDY0026. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'processing-instruction pi {'?>text'}'
Constr-comppi-invalid-3;Expected error code: XQDY0026. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'processing-instruction pi {'text?>text'}'
Constr-comppi-name-1;PRSC Error: Failed to parse query 'processing-instruction pi {'text'}'
Constr-comppi-namexml-1;Expected error code: XQDY0064. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'processing-instruction xml {'pi'}'
Constr-comppi-namexml-2;Expected error code: XQDY0064. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'processing-instruction XmL {'pi'}'
Constr-comppi-namexml-3;Expected error code: XQDY0064. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'processing-instruction {'xml'} {'pi'}'
Constr-comppi-namexml-4;Expected error code: XQDY0064. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'processing-instruction {'XmL'} {'pi'}'
Constr-comppi-parent-1;PRSC Error: Failed to parse query 'count((processing-instruction pi {()})/..) = 0'
Constr-comppi-space-1;PRSC Error: Failed to parse query 'processing-instruction pi {' text'}'
Constr-comppi-space-2;PRSC Error: Failed to parse query 'processing-instruction pi {'&#x20;&#x0A;&#x0D;&#x09;text'}'
Constr-comppi-space-3;PRSC Error: Failed to parse query 'string-to-codepoints(processing-instruction pi {' text'})'
Constr-comppi-space-4;PRSC Error: Failed to parse query 'string-to-codepoints(processing-instruction pi {'&#x20;&#x0A;&#x0D;&#x09;text'})'
Constr-comppi-string-1;PRSC Error: Failed to parse query 'fn:string(processing-instruction pi {'a', element a {}, 'b'})'
Constr-cont-adjtext-1;PRSC Error: Failed to parse query 'count((<elem>a{1,2,3}b</elem>)/text()) = 1'
Constr-cont-adjtext-2;PRSC Error: Failed to parse query 'count((<elem>a{1,<a/>,3}b</elem>)/text()) = 2'
Constr-cont-adjtext-3;PRSC Error: Failed to parse query 'count((<elem>{''}</elem>)/text()) = 0'
Constr-cont-adjtext-4;PRSC Error: Failed to parse query 'count((<elem>{()}</elem>)/text()) = 0'
Constr-cont-attr-1;Expected error code: XQTY0024. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<elem>{1, //west/@mark}</elem>'
Constr-cont-attr-2;Expected error code: XQTY0024. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<elem><a/>{//west/@mark}</elem>'
Constr-cont-attr-3;PRSC Error: Failed to parse query '<elem>{()}{//west/@mark}</elem>'
Constr-cont-attr-4;Expected error code: XQTY0024. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<elem>{//west/@mark}x{//west/@west-attr-1}</elem>'
Constr-cont-attr-5;PRSC Error: Failed to parse query '<elem>{//west/@mark, //west/@west-attr-1}</elem>'
Constr-cont-attr-6;PRSC Error: Failed to parse query '<elem mark="w0">{//west/@west-attr-1, //west/@west-attr-2}</elem>'
Constr-cont-attr-7;Expected error code: XQDY0025. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<elem>{//west/@mark, //center/@mark}</elem>'
Constr-cont-attr-8;Expected error code: XQDY0025. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<elem mark="w0">{//west/@west-attr-1, //west/@mark}</elem>'
Constr-cont-attr-9;PRSC Error: Failed to parse query '<elem>{//west/@west-attr-1}{//west/@west-attr-2}</elem>'
Constr-cont-baseuri-1;PRSC Error: Failed to parse query 'fn:base-uri(<elem xml:base="http://www.example.com"/>)'
Constr-cont-baseuri-2;PRSC Error: Failed to parse query 'fn:base-uri(exactly-one((<elem xml:base="http://www.example.com"><a/></elem>)/a))'
Constr-cont-baseuri-3;PRSC Error: Failed to parse query 'declare base-uri "http://www.example.com"; fn:base-uri(<elem/>)'
Constr-cont-cdata-1;PRSC Error: Failed to parse query '<elem><![CDATA[cdata&<>'"&lt;&#x20;]]></elem>'
Constr-cont-charref-1;PRSC Error: Failed to parse query '<elem>&#x30;</elem>'
Constr-cont-charref-2;Expected error code: XQST0090. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<elem>&#x0;</elem>'
Constr-cont-constrmod-1;PRSC Error: Failed to parse query 'declare construction strip; fn:count(fn:data(<elem>{//*:idrefs}</elem>/*)) = 1'
Constr-cont-constrmod-10;PRSC Error: Failed to parse query 'declare construction preserve; <elem>{//*:decimal}</elem>/*/@*:attr instance of attribute(*, xs:decimal)'
Constr-cont-constrmod-2;Expected executing the XPath 'declare construction preserve; fn:count(fn:data(<elem>{//*:idrefs}</elem>/*))' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare construction preserve; fn:count(fn:data(<elem>{//*:idrefs}</elem>/*)) = 2'
Constr-cont-constrmod-3;Expected error code: FORG0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare construction strip; <elem>{//*:decimal}</elem>/* cast as xs:integer'
Constr-cont-constrmod-4;Expected executing the XPath 'declare construction preserve; <elem>{//*:decimal}</elem>/* cast as xs:integer' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare construction preserve; <elem>{//*:decimal}</elem>/* cast as xs:integer = 12678967'
Constr-cont-constrmod-5;PRSC Error: Failed to parse query 'declare construction strip; fn:count(fn:data((<elem>{//*:idrefs/@*:attr}</elem>)/@*:attr)) = 1'
Constr-cont-constrmod-6;Expected executing the XPath 'declare construction preserve; fn:count(fn:data((<elem>{//*:idrefs/@*:attr}</elem>)/@*:attr))' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare construction preserve; fn:count(fn:data((<elem>{//*:idrefs/@*:attr}</elem>)/@*:attr)) = 2'
Constr-cont-constrmod-7;Expected error code: FORG0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare construction strip; (<elem>{//*:decimal/@*:attr}</elem>)/@*:attr cast as xs:integer'
Constr-cont-constrmod-8;Expected executing the XPath 'declare construction preserve; (<elem>{//*:decimal/@*:attr}</elem>)/@*:attr cast as xs:integer' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare construction preserve; (<elem>{//*:decimal/@*:attr}</elem>)/@*:attr cast as xs:integer = 12678967'
Constr-cont-constrmod-9;PRSC Error: Failed to parse query 'declare construction preserve; <elem>{//*:decimal/@*:attr}</elem>/@*:attr instance of attribute(*, xs:decimal)'
Constr-cont-data-1;PRSC Error: Failed to parse query 'fn:data(<elem>a<a/>b</elem>)'
Constr-cont-doc-1;PRSC Error: Failed to parse query '<elem>{(/), (/)}</elem>'
Constr-cont-document-1;PRSC Error: Failed to parse query 'count(<wrapper> {'abc', document {'def', <anode/>, 'ghi'}, 'jkl'} </wrapper>/node()) = 3'
Constr-cont-document-2;PRSC Error: Failed to parse query 'count(<wrapper> abc {document {'def', <anode/>, 'ghi'}} jkl </wrapper>/node()) = 3'
Constr-cont-document-3;PRSC Error: Failed to parse query 'let $result := (\n        declare variable $codepoints as xs:integer+ := (9, 10, 13, 32 to 55295, 57344 to 65532, 65536 to 1114111 ); \n        declare variable $count as xs:integer := count($codepoints); \n        declare variable $lineWidth as xs:integer := 70;\n        <allCodepoints><r>{codepoints-to-string($codepoints)}</r></allCodepoints> \n        (:<allCodepoints>{ \n            for $i in (1 to $count idiv $lineWidth) \n            let $startOffset := (($i - 1) * $lineWidth) + 1 \n            return (<r s="{$codepoints[$startOffset]}" e="{$codepoints[$startOffset] + $lineWidth}"> { \n                codepoints-to-string(subsequence($codepoints, $startOffset, $lineWidth)) } </r>, "&#xA;") \n                } </allCodepoints>:)\n        ) return sum($result//r/text()/string-length()) = count((9, 10, 13, 32 to 55295, 57344 to 65532, 65536 to 1114111 ))'
Constr-cont-document-4;PRSC Error: Failed to parse query 'count( document {'abc', 'def', document {'ghi', <anode/>, 'jkl'}, 'mno' } /node() ) = 3'
Constr-cont-document-5;PRSC Error: Failed to parse query 'count( document {'abc', 'def', document {'ghi', 'jkl'}, 'mno' } /node() ) = 1'
Constr-cont-enclexpr-1;PRSC Error: Failed to parse query 'count((<elem>{1,'a',3.5,4e2}</elem>)/text()) = 1'
Constr-cont-enclexpr-2;PRSC Error: Failed to parse query 'count((<elem>{1,'a',<a/>,3.5,4e2}</elem>)/text()) = 2'
Constr-cont-enclexpr-3;PRSC Error: Failed to parse query '<elem>{1,'a',3.5,4e2}</elem>'
Constr-cont-enclexpr-4;PRSC Error: Failed to parse query '<elem>{1,//a,2,3,//comment(),4,5,//processing-instruction(),6,7,//text(),8}</elem>'
Constr-cont-enclexpr-5;PRSC Error: Failed to parse query '<elem>{1, '', 2}</elem>'
Constr-cont-entref-1;PRSC Error: Failed to parse query 'string-to-codepoints(<elem>&lt;</elem>) = 60'
Constr-cont-entref-2;PRSC Error: Failed to parse query 'string-to-codepoints(<elem>&gt;</elem>) = 62'
Constr-cont-entref-3;PRSC Error: Failed to parse query 'string-to-codepoints(<elem>&amp;</elem>) = 38'
Constr-cont-entref-4;PRSC Error: Failed to parse query 'string-to-codepoints(<elem>&quot;</elem>) = 34'
Constr-cont-entref-5;PRSC Error: Failed to parse query 'string-to-codepoints(<elem>&apos;</elem>) = 39'
Constr-cont-eol-1;PRSC Error: Failed to parse query '<codepoints>{string-to-codepoints(<elem>1\n2</elem>)}</codepoints>'
Constr-cont-eol-2;PRSC Error: Failed to parse query '<codepoints>{string-to-codepoints(<elem>1&#xa;2</elem>) }</codepoints>'
Constr-cont-eol-3;PRSC Error: Failed to parse query '<codepoints>{string-to-codepoints(<elem>&#xD;&#xA;</elem>)}</codepoints>'
Constr-cont-eol-4;PRSC Error: Failed to parse query '<codepoints>{string-to-codepoints(<elem>&#xD;</elem>)}</codepoints>'
Constr-cont-nested-1;PRSC Error: Failed to parse query '<elem><a><b/></a><a/><c/></elem>'
Constr-cont-nested-2;PRSC Error: Failed to parse query '<elem><?pi?><?pi content?></elem>'
Constr-cont-nested-3;PRSC Error: Failed to parse query '<elem><!----><!--content--></elem>'
Constr-cont-nested-4;PRSC Error: Failed to parse query '<elem>A<a>B<?pi?>C<b/>D<!---->E</a>F<!--content-->G<a/>H<?pi content?>I<c/>J</elem>'
Constr-cont-nested-5;PRSC Error: Failed to parse query '<elem>{/root}</elem>'
Constr-cont-nodeid-1;PRSC Error: Failed to parse query 'for $x in <a/>, $y in <elem>{$x}</elem> return exactly-one($y/a) is $x'
Constr-cont-nodeid-2;PRSC Error: Failed to parse query 'for $x in <a b="b"/>, $y in <elem>{$x/@b}</elem> return $y/@b is $x/@b'
Constr-cont-nodeid-3;PRSC Error: Failed to parse query 'for $x in <!--comment-->, $y in <elem>{$x}</elem> return exactly-one($y/comment()) is $x'
Constr-cont-nodeid-4;PRSC Error: Failed to parse query 'for $x in <?pi content?>, $y in <elem>{$x}</elem> return exactly-one($y/processing-instruction()) is $x'
Constr-cont-nodeid-5;PRSC Error: Failed to parse query 'for $x in <a>text</a>, $y in <elem>{$x/text()}</elem> return exactly-one($y/text()) is exactly-one($x/text())'
Constr-cont-nsmode-1;PRSC Error: Failed to parse query 'declare copy-namespaces preserve, inherit; <y xmlns:inherit="http://www.example.com/inherit">{(/)}</y>/x/z'
Constr-cont-nsmode-10;Expected error code: XQTY0086. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare construction preserve; element { "new" } { //*:QName/@* }'
Constr-cont-nsmode-11;Expected executing the XPath 'declare construction preserve; \n        declare copy-namespaces no-preserve,inherit; \n        import schema namespace ns="http://www.example.com/test/namespace-sensitive"; \n        let $node := <e xmlns:bar="http://www.example.org/bar">{//ns:insensitive}</e> \n        return data($node//ns:insensitive) instance of ns:myString' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n        declare construction preserve; \n        declare copy-namespaces no-preserve,inherit; \n        import schema namespace ns="http://www.example.com/test/namespace-sensitive"; \n        let $node := <e xmlns:bar="http://www.example.org/bar">{//ns:insensitive}</e> \n        return data($node//ns:insensitive) instance of ns:myString\n      '
Constr-cont-nsmode-2;PRSC Error: Failed to parse query 'declare copy-namespaces no-preserve, inherit; <y xmlns:inherit="http://www.example.com/inherit">{(/)}</y>/x/z'
Constr-cont-nsmode-3;PRSC Error: Failed to parse query 'declare copy-namespaces preserve, no-inherit; <y xmlns:inherit="http://www.example.com/inherit">{(/)}</y>/x/z'
Constr-cont-nsmode-4;PRSC Error: Failed to parse query 'declare copy-namespaces no-preserve, no-inherit; <y xmlns:inherit="http://www.example.com/inherit">{(/)}</y>/x/z'
Constr-cont-nsmode-5;Expected executing the XPath 'declare copy-namespaces no-preserve, inherit; declare construction preserve; <new>{ //*:QName }</new>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare copy-namespaces no-preserve, inherit; declare construction preserve; <new>{ //*:QName }</new>'
Constr-cont-nsmode-6;Expected executing the XPath 'declare copy-namespaces no-preserve, no-inherit; declare construction preserve; <new>{ //*:QName }</new>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare copy-namespaces no-preserve, no-inherit; declare construction preserve; <new>{ //*:QName }</new>'
Constr-cont-nsmode-7;Expected error code: XQTY0086. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace atomic = "http://www.w3.org/XQueryTest"; declare copy-namespaces no-preserve, inherit; declare construction preserve; <new>{ (//atomic:QName/@atomic:attr)[1] }</new>'
Constr-cont-nsmode-8;Expected error code: XQTY0086. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare namespace atomic = "http://www.w3.org/XQueryTest"; \n        declare copy-namespaces preserve, inherit; \n        declare construction preserve; \n        <new>{ (//atomic:QName/@atomic:attr)[1] }</new>\n      '
Constr-cont-nsmode-9;PRSC Error: Failed to parse query '\n        declare namespace atomic = "http://www.w3.org/XQueryTest"; \n        declare copy-namespaces preserve, inherit; \n        declare construction preserve; \n        <new>{ //atomic:QName }</new>'
Constr-cont-parent-1;PRSC Error: Failed to parse query 'count((<elem/>)/..) = 0'
Constr-cont-string-1;PRSC Error: Failed to parse query 'fn:string(<elem>a<a/>b</elem>)'
Constr-cont-text-1;PRSC Error: Failed to parse query 'count((<elem>text</elem>)/text()) = 1'
Constr-cont-text-2;PRSC Error: Failed to parse query 'count((<elem>text<![CDATA[cdata]]></elem>)/text()) = 1'
Constr-cont-uripres-1;PRSC Error: Failed to parse query '\n        for $x in <a xml:base="http://www.example.com/base1"><b/></a>, \n            $y in <a xml:base="http://www.example.com/base2">{$x/b}</a> \n        return fn:base-uri(exactly-one($y/b))\n      '
Constr-docnode-adjtext-1;PRSC Error: Failed to parse query 'count((document {1, 'string', 1,2e3})/text()) = 1'
Constr-docnode-adjtext-2;PRSC Error: Failed to parse query 'count((document {1, //text(), 'string'})/text()) = 1'
Constr-docnode-adjtext-3;PRSC Error: Failed to parse query 'count((document {1, 2, <a/>, 3, 4, <b/>, 5, 6})/text()) = 3'
Constr-docnode-attr-1;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'document {//@mark}'
Constr-docnode-attr-2;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'document {<a/>, //@mark}'
Constr-docnode-attr-3;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'document {<a/>, //@mark, <b/>}'
Constr-docnode-constrmod-1;PRSC Error: Failed to parse query 'declare construction strip; fn:count(fn:data((document {//*:idrefs})/*)) = 1'
Constr-docnode-constrmod-2;Expected executing the XPath 'declare construction preserve; fn:count(fn:data((document {//*:idrefs})/*))' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare construction preserve; fn:count(fn:data((document {//*:idrefs})/*)) = 2'
Constr-docnode-constrmod-3;Expected error code: FORG0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare construction strip; (document {//*:decimal})/* cast as xs:integer'
Constr-docnode-constrmod-4;Expected executing the XPath 'declare construction preserve; (document {//*:decimal})/* cast as xs:integer' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare construction preserve; (document {//*:decimal})/* cast as xs:integer = 12678967'
Constr-docnode-data-1;PRSC Error: Failed to parse query 'fn:data(document {'a', element a {}, 'b'})'
Constr-docnode-doc-1;Expected executing the XPath 'document {., .}' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'document {., .}'
Constr-docnode-enclexpr-1;PRSC Error: Failed to parse query 'document {()}'
Constr-docnode-enclexpr-2;PRSC Error: Failed to parse query 'document {1,'a',3.5,4e2}'
Constr-docnode-enclexpr-3;PRSC Error: Failed to parse query 'document {1,//a,2,3,//comment(),4,5,//processing-instruction(),6,7,//text(),8}'
Constr-docnode-enclexpr-4;PRSC Error: Failed to parse query 'document {1, '', 2}'
Constr-docnode-nested-1;PRSC Error: Failed to parse query 'document {1, document {2, document {document {()}, document {3}}, 4}}'
Constr-docnode-nested-2;PRSC Error: Failed to parse query 'document {/root}'
Constr-docnode-nested-3;PRSC Error: Failed to parse query 'count(document {1, document{2}, document { document {()}, document {3}}, 4}/text()) = 1'
Constr-docnode-nested-4;PRSC Error: Failed to parse query 'count(document {"", document{""}, document { document {()}, document {""}}, ""}/text()) = 0'
Constr-docnode-nodeid-1;PRSC Error: Failed to parse query 'for $x in <a/>, $y in document {$x} return exactly-one($y/a) is $x'
Constr-docnode-nodeid-3;PRSC Error: Failed to parse query 'for $x in <!--comment-->, $y in document {$x} return exactly-one($y/comment()) is $x'
Constr-docnode-nodeid-4;PRSC Error: Failed to parse query 'for $x in <?pi content?>, $y in document {$x} return exactly-one($y/processing-instruction()) is $x'
Constr-docnode-nodeid-5;PRSC Error: Failed to parse query 'for $x in <a>text</a>, $y in document {$x/text()} return exactly-one($y/text()) is exactly-one($x/text())'
Constr-docnode-parent-1;Expected executing the XPath 'count((document {()})/..)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'count((document {()})/..) = 0'
Constr-docnode-string-1;PRSC Error: Failed to parse query 'fn:string(document {'a', element a {}, 'b'})'
Constr-elem-curlybr-1;PRSC Error: Failed to parse query '<elem>{{</elem>'
Constr-elem-curlybr-2;PRSC Error: Failed to parse query '<elem>}}</elem>'
Constr-elem-curlybr-3;PRSC Error: Failed to parse query '<elem>&#x7b;</elem>'
Constr-elem-curlybr-4;PRSC Error: Failed to parse query '<elem>&#x7d;</elem>'
Constr-elem-empty-1;PRSC Error: Failed to parse query '<elem/>'
Constr-elem-empty-2;PRSC Error: Failed to parse query '<elem></elem>'
Constr-elem-empty-3;PRSC Error: Failed to parse query 'fn:count((<elem/>)/node()) = 0'
Constr-elem-empty-4;Expected executing the XPath 'fn:count((<elem></elem>)/node())' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'fn:count((<elem></elem>)/node()) = 0'
Constr-elem-empty-5;PRSC Error: Failed to parse query '<elem />'
Constr-elem-matchtag-1;Expected error code: XQST0118. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<elem></elemother>'
Constr-elem-matchtag-2;Expected error code: *. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<foo:elem xmlns:foo="http://www.w3.org/XQueryTest/Construct" xmlns:bar="http://www.w3.org/XQueryTest/Construct"></bar:elem>'
Constr-elem-matchtag-2a;Expected error code: XQST0118. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<foo:elem xmlns:foo="http://www.w3.org/XQueryTest/Construct" xmlns:bar="http://www.w3.org/XQueryTest/Construct"></bar:elem>'
Constr-inscope-1;PRSC Error: Failed to parse query '<new xmlns:foo="http://www.example.com">{//@*:attr1}</new>'
Constr-inscope-10;PRSC Error: Failed to parse query '<new xmlns="http://www.example.com">{//*:child2}</new>'
Constr-inscope-11;PRSC Error: Failed to parse query 'for $x in <parent1 xmlns:foo="http://www.example.com/parent1" foo:attr1="attr1"><child1 attr="child"/></parent1> return <new>{$x//*:child1}</new>'
Constr-inscope-12;PRSC Error: Failed to parse query 'for $x in <parent2 xmlns:foo="http://www.example.com/parent2" foo:attr2="attr2"><child2 attr="child"/></parent2> return <new xmlns="http://www.example.com">{$x//*:child2}</new>'
Constr-inscope-13;PRSC Error: Failed to parse query 'declare namespace foo = "http://example.com"; <new/>'
Constr-inscope-14;PRSC Error: Failed to parse query 'declare namespace foo = "http://example.com"; <foo:new/>'
Constr-inscope-15;PRSC Error: Failed to parse query '<xml:new/>'
Constr-inscope-16;PRSC Error: Failed to parse query '<new xml:attr="foo"/>'
Constr-inscope-17;PRSC Error: Failed to parse query '<new xmlns:foo="http://www.example.com">{//*:child1}</new>'
Constr-inscope-18;PRSC Error: Failed to parse query '<new xmlns:foo="http://www.example.com/parent1">{//*:child1}</new>'
Constr-inscope-19;PRSC Error: Failed to parse query '<new xmlns="http://www.example.com">{//*:child4}</new>'
Constr-inscope-2;PRSC Error: Failed to parse query '<new>{//@*:attr1, //@*:attr2}</new>'
Constr-inscope-20;PRSC Error: Failed to parse query '<new xmlns="http://www.example.com/parent4">{//*:child4}</new>'
Constr-inscope-21;PRSC Error: Failed to parse query '\n        declare namespace cat ='mycat'; \n        <a t='cat:miau'>42</a>\n      '
Constr-inscope-22;PRSC Error: Failed to parse query '\n        <a xsi:type='xs:integer'>42</a>\n      '
Constr-inscope-3;PRSC Error: Failed to parse query 'for $x in <parent1 xmlns:foo="http://www.example.com/parent1" foo:attr1="attr1"/> return <new xmlns:foo="http://www.example.com">{$x//@*:attr1}</new>'
Constr-inscope-4;PRSC Error: Failed to parse query 'for $x in <inscope> <parent1 xmlns:foo="http://www.example.com/parent1" foo:attr1="attr1"/> <parent2 xmlns:foo="http://www.example.com/parent2" foo:attr2="attr2"/></inscope> return <new>{$x//@*:attr1, $x//@*:attr2}</new>'
Constr-inscope-5;PRSC Error: Failed to parse query '<new>{//*:child3}</new>'
Constr-inscope-6;PRSC Error: Failed to parse query '<new>{//*:child4}</new>'
Constr-inscope-7;PRSC Error: Failed to parse query 'for $x in <parent3 xmlns:foo="http://www.example.com/parent3"><foo:child3/></parent3> return <new>{$x//*:child3}</new>'
Constr-inscope-8;PRSC Error: Failed to parse query 'for $x in <parent4 xmlns="http://www.example.com/parent4"><child4/></parent4> return <new>{$x//*:child4}</new>'
Constr-inscope-9;PRSC Error: Failed to parse query '<new>{//*:child1}</new>'
Constr-namespace-1;Expected error code: XPST0081. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<foo:elem/>'
Constr-namespace-10;PRSC Error: Failed to parse query 'declare namespace foo="http://www.example.com/prolog"; <foo:elem xmlns:foo="http://www.example.com/element"/>'
Constr-namespace-11;PRSC Error: Failed to parse query '(<elem xmlns:foo="http://www.example.com/parent"><foo:child xmlns:foo="http://www.example.com/child"><foo:grand-child/></foo:child></elem>)//*:grand-child'
Constr-namespace-12;PRSC Error: Failed to parse query 'declare namespace foo="http://www.example.com/prolog"; (<elem xmlns:foo="http://www.example.com/parent"><foo:child/></elem>)//*:child'
Constr-namespace-13;Expected executing the XPath '<foo:elem xmlns:foo="http://www.example.com/parent"><child xmlns:foo=""/></foo:elem>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '<foo:elem xmlns:foo="http://www.example.com/parent"><child xmlns:foo=""/></foo:elem>'
Constr-namespace-14;Expected executing the XPath '<foo:elem xmlns:foo="http://www.example.com/parent"><child xmlns:foo=""><foo:grand-child/></child></foo:elem>' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XPST0081. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<foo:elem xmlns:foo="http://www.example.com/parent"><child xmlns:foo=""><foo:grand-child/></child></foo:elem>'
Constr-namespace-15;Expected executing the XPath 'declare namespace foo="http://www.example.com/prolog"; <elem xmlns:foo=""><foo:child/></elem>' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XPST0081. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace foo="http://www.example.com/prolog"; <elem xmlns:foo=""><foo:child/></elem>'
Constr-namespace-16;Expected executing the XPath '(<foo:elem xmlns:foo="http://www.example.com/parent"><child xmlns:foo=""><grand-child/></child></foo:elem>)//grand-child' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '(<foo:elem xmlns:foo="http://www.example.com/parent"><child xmlns:foo=""><grand-child/></child></foo:elem>)//grand-child'
Constr-namespace-17;PRSC Error: Failed to parse query '(<elem xmlns="http://www.example.com"><child/></elem>)/*:child'
Constr-namespace-18;PRSC Error: Failed to parse query '<elem xmlns="http://www.example.com/parent"><child xmlns="http://www.example.com/child"/></elem>'
Constr-namespace-19;PRSC Error: Failed to parse query 'declare default element namespace "http://www.example.com/prolog"; <elem xmlns="http://www.example.com/element"/>'
Constr-namespace-2;PRSC Error: Failed to parse query '<elem xmlns:foo="http://www.example.com"/>'
Constr-namespace-20;PRSC Error: Failed to parse query '(<elem xmlns="http://www.example.com/parent"><child xmlns="http://www.example.com/child"><grand-child/></child></elem>)//*:grand-child'
Constr-namespace-21;PRSC Error: Failed to parse query 'declare default element namespace "http://www.example.com/prolog"; (<elem xmlns="http://www.example.com/element"><child/></elem>)/*:child'
Constr-namespace-22;PRSC Error: Failed to parse query '<elem xmlns="http://www.example.com/parent"><child xmlns=""/></elem>'
Constr-namespace-23;PRSC Error: Failed to parse query '(<elem xmlns="http://www.example.com/parent"><child xmlns=""><grand-child/></child></elem>)//*:grand-child'
Constr-namespace-24;Expected error code: XQST0022. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<elem xmlns="{'http://www.example.com'}"/>'
Constr-namespace-25;Expected error code: XQST0022. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<elem xmlns="http://www.example.com{'/namespace'}"/>'
Constr-namespace-26;PRSC Error: Failed to parse query '<elem xmlns:cm="http://www.example.com">{count(//cm:b)}</elem>'
Constr-namespace-27;PRSC Error: Failed to parse query '<elem xmlns:cm="http://www.example.com" attr="{count(//cm:b)}"/>'
Constr-namespace-29;Expected error code: XPST0081. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<parent><child xmlns:cm="http://www.example.com"/><child>{count(//cm:b)}</child></parent>'
Constr-namespace-3;PRSC Error: Failed to parse query '<elem xmlns="http://www.example.com"/>'
Constr-namespace-30;PRSC Error: Failed to parse query '<e a="{p:count(())}" xmlns:p="http://www.w3.org/2005/xpath-functions"/>'
Constr-namespace-4;Expected error code: XQST0071. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<elem xmlns:foo="http://www.example.com" xmlns:foo="http://www.example.com"/>'
Constr-namespace-5;Expected error code: XQST0071. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<elem xmlns="http://www.example.com" xmlns="http://www.example.com"/>'
Constr-namespace-6;Expected error code: XQST0070. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<elem xmlns:xml="http://www.example.com"/>'
Constr-namespace-7;Expected error code: XQST0070. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<elem xmlns:xmlns="http://www.example.com"/>'
Constr-namespace-8;PRSC Error: Failed to parse query '(<elem xmlns:foo="http://www.example.com"><foo:child/></elem>)/*:child'
Constr-namespace-9;PRSC Error: Failed to parse query '<elem xmlns:foo="http://www.example.com/parent"><foo:child xmlns:foo="http://www.example.com/child"/></elem>'
Constr-pi-content-1;PRSC Error: Failed to parse query '<?pi content?>'
Constr-pi-content-2;PRSC Error: Failed to parse query 'fn:data(<?pi content?>) = "content"'
Constr-pi-content-3;PRSC Error: Failed to parse query '<?pi ?>'
Constr-pi-content-4;PRSC Error: Failed to parse query 'fn:data(<?pi ?>) = ""'
Constr-pi-content-5;PRSC Error: Failed to parse query '<?pi <?&--&lt;&#x20;><![CDATA[x]]> ?>'
Constr-pi-content-6;PRSC Error: Failed to parse query '<pi>{string-to-codepoints(<?pi x?>)}</pi>'
Constr-pi-content-7;PRSC Error: Failed to parse query '<pi>{string-to-codepoints(<?pi x ?>)}</pi>'
Constr-text-adjtext-1;PRSC Error: Failed to parse query 'count(<elem>{text {'te'}, text {'xt'}}</elem>/text()) = 1'
Constr-text-adjtext-2;PRSC Error: Failed to parse query 'count(document {text {'te'}, text {'xt'}}/text()) = 1'
Constr-text-count-1;PRSC Error: Failed to parse query 'count(text {''}) = 1'
Constr-text-count-2;PRSC Error: Failed to parse query 'count(text {()}) = 0'
Constr-text-count-3;PRSC Error: Failed to parse query 'count(element elem {text {''}}/text()) = 0'
Constr-text-count-4;Expected executing the XPath 'count(document {text {''}}/text())' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'count(document {text {''}}/text()) = 0'
Constr-text-count-5;PRSC Error: Failed to parse query 'count(<a>{text {''}}<b/>{text {''}}<b/>{text {''}}</a>/text()) = 0'
Constr-text-count-6;Expected executing the XPath 'count(document {text {''},<b/>,text {''},<b/>,text {''}}/text())' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'count(document {text {''},<b/>,text {''},<b/>,text {''}}/text()) = 0'
Constr-text-data-1;PRSC Error: Failed to parse query 'fn:data(text {'a', element a {}, 'b'})'
Constr-text-doc-1;PRSC Error: Failed to parse query 'text {., .}'
Constr-text-enclexpr-1;PRSC Error: Failed to parse query 'text {1,'string',3.14,xs:float('1.2345e-2'),xs:dateTime('2002-04-02T12:00:00-01:00')}'
Constr-text-enclexpr-2;PRSC Error: Failed to parse query 'text {<elem>123</elem>, (<elem attr='456'/>)/@attr, (<elem>789</elem>)/text()}'
Constr-text-enclexpr-3;PRSC Error: Failed to parse query 'text {1,'',2}'
Constr-text-enclexpr-4;PRSC Error: Failed to parse query 'text {1,<a/>,2}'
Constr-text-enclexpr-5;PRSC Error: Failed to parse query 'text {/root}'
Constr-text-nested-1;PRSC Error: Failed to parse query 'text {text {'one', text {'two'}}, 'three', text {'four'}}'
Constr-text-nested-2;PRSC Error: Failed to parse query '<elem>{text {'one'}}<a>{text {'two'}}</a>{text {'three'}}</elem>'
Constr-text-nested-3;PRSC Error: Failed to parse query 'document {text {'one'}, <a/>, text {'two'}, <b/>, text {'three'}}'
Constr-text-parent-1;PRSC Error: Failed to parse query 'count((text {'text'})/..) = 0'
Constr-text-string-1;PRSC Error: Failed to parse query 'fn:string(text {'a', element a {}, 'b'})'
Constr-ws-adjchref-1;PRSC Error: Failed to parse query 'declare boundary-space strip; <elem> &#x30; </elem>'
Constr-ws-enclexpr-1;PRSC Error: Failed to parse query 'declare boundary-space strip; <elem> {1}</elem>'
Constr-ws-enclexpr-10;PRSC Error: Failed to parse query 'declare boundary-space strip; <elem> <a/> <b/> </elem>'
Constr-ws-enclexpr-11;PRSC Error: Failed to parse query 'declare boundary-space strip; <elem> <a/> <b/> </elem>'
Constr-ws-enclexpr-12;PRSC Error: Failed to parse query 'declare boundary-space strip; <elem> <a/> <b/> </elem>'
Constr-ws-enclexpr-13;PRSC Error: Failed to parse query 'declare boundary-space preserve; <elem>   {1}</elem>'
Constr-ws-enclexpr-14;PRSC Error: Failed to parse query 'declare boundary-space preserve; <elem>\n\n\n{1}</elem>'
Constr-ws-enclexpr-2;PRSC Error: Failed to parse query 'declare boundary-space strip; <elem> {1}</elem>'
Constr-ws-enclexpr-3;PRSC Error: Failed to parse query 'declare boundary-space strip; <elem> {1}</elem>'
Constr-ws-enclexpr-4;PRSC Error: Failed to parse query 'declare boundary-space strip; <elem>{1} {2}</elem>'
Constr-ws-enclexpr-5;PRSC Error: Failed to parse query 'declare boundary-space strip; <elem>{1} {2}</elem>'
Constr-ws-enclexpr-6;PRSC Error: Failed to parse query 'declare boundary-space strip; <elem>{1} {2}</elem>'
Constr-ws-enclexpr-7;PRSC Error: Failed to parse query 'declare boundary-space strip; <elem>{1} </elem>'
Constr-ws-enclexpr-8;PRSC Error: Failed to parse query 'declare boundary-space strip; <elem>{1} </elem>'
Constr-ws-enclexpr-9;PRSC Error: Failed to parse query 'declare boundary-space strip; <elem>{1} </elem>'
Constr-ws-gencdata-1;PRSC Error: Failed to parse query 'declare boundary-space strip; <elem><![CDATA[ ]]></elem>'
Constr-ws-genchref-1;PRSC Error: Failed to parse query 'declare boundary-space strip; <elem>&#x20;</elem>'
Constr-ws-genchref-2;PRSC Error: Failed to parse query 'let $result := (declare boundary-space strip; <elem>&#xA;</elem>) return deep-equal(string-to-codepoints(string($result)), (10))'
Constr-ws-genchref-3;PRSC Error: Failed to parse query 'declare boundary-space strip; <elem>&#xD;</elem>'
Constr-ws-genchref-4;PRSC Error: Failed to parse query 'declare boundary-space strip; <elem>&#x9;</elem>'
Constr-ws-genenclexpr-1;PRSC Error: Failed to parse query 'declare boundary-space strip; <elem>{" "}</elem>'
Constr-ws-nobound-1;PRSC Error: Failed to parse query 'declare boundary-space strip; <elem> x</elem>'
Constr-ws-nobound-4;PRSC Error: Failed to parse query 'declare boundary-space strip; <elem>x </elem>'
Constr-ws-tag-1;PRSC Error: Failed to parse query 'declare boundary-space strip; <elem> </elem>'
Constr-ws-tag-10;PRSC Error: Failed to parse query 'declare boundary-space preserve; fn:count((<elem> <a> </a> <a> </a> <a> <b> </b> </a> </elem>)//text()) = 9'
Constr-ws-tag-2;PRSC Error: Failed to parse query 'declare boundary-space strip; <elem> </elem>'
Constr-ws-tag-3;PRSC Error: Failed to parse query 'declare boundary-space strip; <elem> </elem>'
Constr-ws-tag-4;PRSC Error: Failed to parse query 'declare boundary-space strip; <elem> <a> </a> <a> </a> <a> <b> </b> </a> </elem>'
Constr-ws-tag-5;PRSC Error: Failed to parse query 'declare boundary-space strip; fn:count((<elem> <a> </a> <a> </a> <a> <b> </b> </a> </elem>)//text()) = 0'
Constr-ws-tag-6;PRSC Error: Failed to parse query 'declare boundary-space preserve; <elem>   </elem>'
Constr-ws-tag-7;PRSC Error: Failed to parse query 'declare boundary-space preserve; <elem>\n\n\n</elem>'
Constr-ws-tag-8;PRSC Error: Failed to parse query 'declare boundary-space preserve; <elem>			</elem>'
Constr-ws-tag-9;PRSC Error: Failed to parse query 'declare boundary-space preserve; <elem>   	\n      	    <a>          	         \n		\n	\n        </a>	\n<a>        	     </a>             <a>	  <b>\n\n         	 </b>\n\n  </a>	\n\n		\n      </elem>'
Constr-ws-xmlspace-1;PRSC Error: Failed to parse query 'declare boundary-space strip; <elem xml:space="preserve"> </elem>'
Constr-ws-xmlspace-2;'strip' is an invalid xml:space value. Line 1, position 12.
constSeq-16;Type casting to XsAnyUri has not been implemented yet.
constSeq-18;PRSC Error: Failed to parse query 'deep-equal(( (xs:double(1.2E2), 2.2E2, 3.3E2)), (120, 220, 330))'
contextDecl-014;PRSC Error: Failed to parse query '\n        declare variable $x := . + 5;\n        declare context item := 17;\n        $x\n       = 22'
contextDecl-015;Expected executing the XPath 'declare variable $y := /works/employee;\n        declare context item := $y[9];\n        declare variable $x external := if (./*) then fn:position() else 0;\n        ($x, $y)' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XPDY0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare variable $y := /works/employee;\n        declare context item := $y[9];\n        declare variable $x external := if (./*) then fn:position() else 0;\n        ($x, $y)\n      '
contextDecl-016;PRSC Error: Failed to parse query '\n        declare variable $y := (<a>1</a>,<a>2</a>,<a>3</a>,<a>4</a>,<a>5</a>,<a>6</a>,<a>7</a>,<a>8</a>,<a>9</a>,<a>10</a>);\n        declare context item := $y[3];\n        declare variable $x external := fn:position();\n        $x\n       = 1'
contextDecl-017;PRSC Error: Failed to parse query '\n        declare variable $y := <root><a>1</a>,<a>2</a>,<a>3</a>,<a>4</a>,<a>5</a>,<a>6</a>,<a>7</a>,<a>8</a>,<a>9</a>,<a>10</a></root>;\n        declare context item := $y;\n        declare variable $x external := fn:last();\n        $x\n       = 1'
contextDecl-018;Expected executing the XPath 'declare context item := last() + 1; .' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query ' declare context item := last() + 1; . = 2'
contextDecl-019;Expected executing the XPath 'declare context item := position() + 1; .' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query ' declare context item := position() + 1; . = 2'
contextDecl-020;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query ' declare context item as xs:integer external; . '
contextDecl-021;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query ' declare context item as xs:integer := 'London'; . '
contextDecl-022;Expected executing the XPath 'declare context item as xs:string := 2; .' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query ' declare context item as xs:string := 2; . '
contextDecl-028;PRSC Error: Failed to parse query ' declare context item := 3; . + 4  = 7'
contextDecl-029;PRSC Error: Failed to parse query '\n        declare context item := <a>bananas</a>;\n        string-length()\n       = 7'
contextDecl-030;PRSC Error: Failed to parse query '\n        declare context item := <a id="qwerty">bananas</a>;\n        string-length(@id)\n       = 6'
contextDecl-031;PRSC Error: Failed to parse query '\n        declare context item := contains(?, "e");\n        .("raspberry")\n      '
contextDecl-032;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare context item := (1 to 17)[20]; .'
contextDecl-033;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare context item := (1 to 17)[position() gt 5]; .'
contextDecl-034;PRSC Error: Failed to parse query 'declare context item as xs:integer := (1 to 17)[position() = 5]; . = 5'
contextDecl-035;PRSC Error: Failed to parse query '\n        declare context item as xs:integer := (1 to 17)[position() = 5];\n        .\n       = 5'
contextDecl-036;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare context item as xs:integer := current-date();\n        .\n      '
contextDecl-037;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare context item as xs:integer := <a>23</a>;\n        .\n      '
contextDecl-038;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare context item as xs:anyURI := "http://www.w3.org/";\n        .\n      '
contextDecl-039;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare context item as xs:double := 1.234;\n        .\n      '
contextDecl-040;PRSC Error: Failed to parse query '\n        declare context item external;\n        . instance of document-node()\n      '
contextDecl-041;PRSC Error: Failed to parse query '\n        declare context item as document-node() external;\n        name(/*)\n       = "works"'
contextDecl-042;PRSC Error: Failed to parse query '\n        declare context item external := 17;\n        . = 17\n      '
contextDecl-043;PRSC Error: Failed to parse query '\n        declare context item as xs:integer external := 17;\n        . = 17\n      '
contextDecl-044;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query ' declare context item as xs:double external := 17; . = 17'
contextDecl-045;Expected error code: XPDY0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query ' declare context item as xs:double external; . = 17'
contextDecl-046;Expected error code: XQST0099. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare context item as xs:double external;\n        declare context item as xs:integer := 15;\n        . = 17\n      '
contextDecl-047;PRSC Error: Failed to parse query '\n      	import module namespace m="http://www.w3.org/TestModules/libmodule2"; \n        . gt xs:date('1900-01-01')\n      '
contextDecl-048;Expected error code: XQST0113. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	import module namespace m="http://www.w3.org/TestModules/libmodule1"; \n      	. = 17\n      '
contextDecl-049;PRSC Error: Failed to parse query '\n        import module namespace m="http://www.w3.org/TestModules/libmodule2"; \n        declare context item as xs:date := current-date();\n        . gt xs:date('1900-01-01')\n      '
contextDecl-050;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	import module namespace m="http://www.w3.org/TestModules/libmodule2"; \n        declare context item as xs:integer := 23;\n        . eq 23\n      '
contextDecl-051;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        import module namespace m="http://www.w3.org/TestModules/libmodule2"; \n        declare context item as node() external;\n        . instance of element()\n      '
contextDecl-052;Expected error code: XQST0113. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        import module namespace m="http://www.w3.org/TestModules/libmodule3"; \n        . eq 23\n      '
contextDecl-053;Expected executing the XPath 'declare variable $p := "base-uri";\n        declare variable $f := function-lookup(xs:QName("fn:"||$p), 0);\n        declare context item := $f();\n        .' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XPDY0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare variable $p := "base-uri";\n        declare variable $f := function-lookup(xs:QName("fn:"||$p), 0);\n        declare context item := $f();\n        .\n      '
contextDecl-054;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	import module namespace m="http://www.w3.org/TestModules/libmodule2"; \n        xs:date(.) gt xs:date('1900-01-01')\n      '
contextDecl-055;PRSC Error: Failed to parse query '\n      declare variable $f := function-lookup(xs:QName("fn:"||$p), 0);\n      declare context item := <e/>;\n      declare variable $p := "local-name";\n      $f()\n     = "e"'
contextDecl-056;PRSC Error: Failed to parse query '\n      import module namespace m="http://www.w3.org/TestModules/libmodule4";\n      declare context item as xs:numeric external;\n      $m:v eq 4\n    '
contextDecl-057;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      import module namespace m="http://www.w3.org/TestModules/libmodule4";\n      declare context item as xs:date external;\n      $m:v eq 4\n    '
contextDecl-058;PRSC Error: Failed to parse query '\n      import module namespace m="http://www.w3.org/TestModules/libmodule5";\n      declare context item as array(xs:string) external;\n      $m:v eq 'green'\n    '
contextDecl-059;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      declare context item := 15 to 25;\n      . = 17\n    '
contextDecl-060;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      declare context item := ();\n      . = 17\n    '
CurlyArray-002;PRSC Error: Failed to parse query '(array{}) instance of $array(*)'
CurlyArray-004;PRSC Error: Failed to parse query 'array:size(array{(), ('A', 'B', 'C'), 'D'}) = 4'
CurlyArray-006;PRSC Error: Failed to parse query 'declare function local:fun() {1 to 5}; array:size(array{local:fun()}) = 5'
CurlyArray-008;PRSC Error: Failed to parse query 'declare function local:fun() {1 to 5}; array{local:fun()}(1) = 1'
CurlyArray-010;PRSC Error: Failed to parse query 'declare function local:fun() {1 to 5}; array{local:fun()}?1 = 1'
d1e11215;The function sort with arity 1 is not registered.
d1e13048;Expected XPath let $string := 'aa bb cc' return \n $string=>replace('a','b')=>normalize-space()=>tokenize("\s") to (deep equally) resolve to ("bb","bb","cc")
d1e20420;PRSC Error: Failed to parse query 'deep-equal((\n xquery version "3.1" encoding "UTF-8"; "inserted for testing prolog only examples"), ("inserted for testing prolog only examples"))'
d1e40951;PRSC Error: Failed to parse query '\n deep-equal(map {\n  "ACC" : "Accessories",\n  "WMN" : "Women's",\n  "MEN" : "Men's"\n},map {\n  "ACC" : "Accessories",\n  "WMN" : "Women's",\n  "MEN" : "Men's"\n})'
d1e40984;PRSC Error: Failed to parse query '\ndeep-equal( map {\n    "ACC": map {\n              "name": "Accessories",\n              "code": 300 } ,\n    "WMN": map {\n              "name": "Women's",\n              "code": 310 } ,\n    "MEN": map {\n              "name": "Men's",\n              "code": 320 } \n    },map {\n    "ACC": map {\n              "name": "Accessories",\n              "code": 300 } ,\n    "WMN": map {\n              "name": "Women's",\n              "code": 310 } ,\n    "MEN": map {\n              "name": "Men's",\n              "code": 320 } \n    })'
d1e41029;PRSC Error: Failed to parse query '\ndeep-equal(map:merge(for $p in doc("catalog.xml")//product\nreturn map:entry(string($p/number), string($p/name))),\nmap {"557":"Fleece Pullover",\n"563":"Floppy Sun Hat",\n"443":"Deluxe Travel Bag",\n"784":"Cotton Dress Shirt"})\n'
d1e41041;PRSC Error: Failed to parse query 'deep-equal((\n declare variable $deptnames := map {\n  "ACC" : "Accessories",\n  "WMN" : "Women's",\n  "MEN" : "Men's"\n};\ndeclare variable $deptinfo := map {\n  "ACC": map {\n            "deptname": "Accessories",\n            "deptnum": 300 } ,\n  "WMN": map {\n            "deptname": "Women's",\n            "deptnum": 310 } ,\n  "MEN": map {\n            "deptname": "Men's",\n            "deptnum": 320 } \n}; "inserted for testing prolog only examples"), ("inserted for testing prolog only examples"))'
d1e41054;PRSC Error: Failed to parse query 'deep-equal((\n declare variable $deptnames := map {\n  "ACC" : "Accessories",\n  "WMN" : "Women's",\n  "MEN" : "Men's"\n};\n map:get($deptnames, "ACC")), ("Accessories"))'
d1e41054b;PRSC Error: Failed to parse query 'deep-equal((\n declare variable $deptnames := map {\n  "ACC" : "Accessories",\n  "WMN" : "Women's",\n  "MEN" : "Men's"\n};\n $deptnames?("ACC")), ("Accessories"))'
d1e41094;PRSC Error: Failed to parse query '\n declare variable $deptnames := map {\n  "ACC" : "Accessories",\n  "WMN" : "Women's",\n  "MEN" : "Men's"\n};\nfor $prod in doc("catalog.xml")//product\nreturn <product num="{$prod/number}" \n                dept-name="{$deptnames?($prod/@dept)}"/>'
d1e41148;PRSC Error: Failed to parse query '\ndeclare variable $deptinfo := map {\n  "ACC": map {\n            "deptname": "Accessories",\n            "deptnum": 300 } ,\n  "WMN": map {\n            "deptname": "Women's",\n            "deptnum": 310 } ,\n  "MEN": map {\n            "deptname": "Men's",\n            "deptnum": 320 } \n};\nfor $prod in doc("catalog.xml")//product\nreturn <product num="{$prod/number}"\n                dept-name="{$deptinfo?($prod/@dept)?("deptname")}"\n                dept-code="{$deptinfo?($prod/@dept)?("deptnum")}"/>'
d1e41173;PRSC Error: Failed to parse query 'deep-equal((\n declare variable $deptnames := map {\n  "ACC" : "Accessories",\n  "WMN" : "Women's",\n  "MEN" : "Men's"\n};\n $deptnames?("ACC")), ("Accessories"))'
d1e41180;PRSC Error: Failed to parse query 'deep-equal((\n declare variable $deptnames := map {\n  "ACC" : "Accessories",\n  "WMN" : "Women's",\n  "MEN" : "Men's"\n};\n $deptnames?("ACC","MEN")), (("Accessories","Men's")))'
d1e41190;PRSC Error: Failed to parse query 'deep-equal((\n declare variable $deptnames := map {\n  "ACC" : "Accessories",\n  "WMN" : "Women's",\n  "MEN" : "Men's"\n};\n for $d in ("ACC","MEN") return $deptnames?($d)), (("Accessories","Men's")))'
d1e41194;PRSC Error: Failed to parse query 'deep-equal((\ndeclare variable $deptnames := map {\n  "ACC" : "Accessories",\n  "WMN" : "Women's",\n  "MEN" : "Men's"\n};\n $deptnames?(doc("catalog.xml")//@dept)), (("Women's","Accessories","Accessories","Men's")))'
d1e41194b;Skipped test, it was a assert-permutation
d1e41213;PRSC Error: Failed to parse query 'deep-equal((\n declare variable $map-with-integer-keys := map{ 10:"a", 20:"b"}; $map-with-integer-keys?20), ("b"))'
d1e41225;PRSC Error: Failed to parse query 'deep-equal((\n declare variable $deptnames := map {\n  "ACC" : "Accessories",\n  "WMN" : "Women's",\n  "MEN" : "Men's"\n};\n $deptnames?ACC), ("Accessories"))'
d1e41255;PRSC Error: Failed to parse query '\ndeclare variable $deptinfo := map {\n  "ACC": map {\n            "deptname": "Accessories",\n            "deptnum": 300 } ,\n  "WMN": map {\n            "deptname": "Women's",\n            "deptnum": 310 } ,\n  "MEN": map {\n            "deptname": "Men's",\n            "deptnum": 320 } \n};\nfor $prod in doc("catalog.xml")//product\nreturn <product num="{$prod/number}"\n                dept-name="{$deptinfo?($prod/@dept)?deptname}"\n                dept-code="{$deptinfo?($prod/@dept)?deptnum}"/>'
d1e41255b;PRSC Error: Failed to parse query '\ndeclare variable $deptinfo := map {\n  "ACC": map {\n            "deptname": "Accessories",\n            "deptnum": 300 } ,\n  "WMN": map {\n            "deptname": "Women's",\n            "deptnum": 310 } ,\n  "MEN": map {\n            "deptname": "Men's",\n            "deptnum": 320 } \n};\n$deptinfo instance of map(xs:string,map(xs:string,xs:anyAtomicType)) '
d1e41255c;PRSC Error: Failed to parse query '\ndeclare variable $deptinfo := map {\n  "ACC": map {\n            "deptname": "Accessories",\n            "deptnum": 300 } ,\n  "WMN": map {\n            "deptname": "Women's",\n            "deptnum": 310 } ,\n  "MEN": map {\n            "deptname": "Men's",\n            "deptnum": 320 } \n};\n$deptinfo instance of function(*) '
d1e41255d;PRSC Error: Failed to parse query '\ndeclare variable $deptinfo := map {\n  "ACC": map {\n            "deptname": "Accessories",\n            "deptnum": 300 } ,\n  "WMN": map {\n            "deptname": "Women's",\n            "deptnum": 310 } ,\n  "MEN": map {\n            "deptname": "Men's",\n            "deptnum": 320 } \n};\n$deptinfo instance of function(xs:anyAtomicType) as item()* '
d1e41255e;PRSC Error: Failed to parse query '\ndeclare variable $deptinfo := map {\n  "ACC": map {\n            "deptname": "Accessories",\n            "deptnum": 300 } ,\n  "WMN": map {\n            "deptname": "Women's",\n            "deptnum": 310 } ,\n  "MEN": map {\n            "deptname": "Men's",\n            "deptnum": 320 } \n};\n$deptinfo instance of item() '
d1e41271;PRSC Error: Failed to parse query '\n         declare variable $deptinfo := map {\n  "ACC": map {\n            "deptname": "Accessories",\n            "deptnum": 300 } ,\n  "WMN": map {\n            "deptname": "Women's",\n            "deptnum": 310 } ,\n  "MEN": map {\n            "deptname": "Men's",\n            "deptnum": 320 } \n};\ndeep-equal( $deptinfo?*[?deptname = "Accessories"],\nmap { "deptname": "Accessories",\n            "deptnum": 300 })\n'
d1e41301;PRSC Error: Failed to parse query 'deep-equal((\n         declare variable $deptinfo := map {\n  "ACC": map {\n            "deptname": "Accessories",\n            "deptnum": 300 } ,\n  "WMN": map {\n            "deptname": "Women's",\n            "deptnum": 310 } ,\n  "MEN": map {\n            "deptname": "Men's",\n            "deptnum": 320 } \n};\n $deptinfo?*[?deptname = "Accessories"]?deptnum), (300))'
d1e41301a;PRSC Error: Failed to parse query 'deep-equal((\n declare variable $deptnames := map {\n  "ACC" : "Accessories",\n  "WMN" : "Women's",\n  "MEN" : "Men's"\n};\n map:size($deptnames)), (3))'
d1e41301b;PRSC Error: Failed to parse query '\n declare variable $deptnames := map {\n  "ACC" : "Accessories",\n  "WMN" : "Women's",\n  "MEN" : "Men's"\n};\n map:contains($deptnames,"ACC")'
d1e41301c;Skipped test, it was a assert-permutation
d1e41301d;PRSC Error: Failed to parse query '\n declare variable $deptnames := map {\n  "ACC" : "Accessories",\n  "WMN" : "Women's",\n  "MEN" : "Men's"\n};\ndeep-equal(map:put($deptnames,"SHO","Shoes"),\nmap {\n  "ACC" : "Accessories",\n  "WMN" : "Women's",\n  "MEN" : "Men's",\n  "SHO" : "Shoes"\n}\n)'
d1e41301e;PRSC Error: Failed to parse query '\n declare variable $deptnames := map {\n  "ACC" : "Accessories",\n  "WMN" : "Women's",\n  "MEN" : "Men's"\n};\ndeep-equal(map:put($deptnames,"ACC","Other"),\nmap {\n  "ACC" : "Other",\n  "WMN" : "Women's",\n  "MEN" : "Men's"\n}\n)'
d1e41301f;PRSC Error: Failed to parse query '\n declare variable $deptnames := map {\n  "ACC" : "Accessories",\n  "WMN" : "Women's",\n  "MEN" : "Men's"\n};\ndeep-equal(map:remove($deptnames,"ACC"),\nmap {\n  "WMN" : "Women's",\n  "MEN" : "Men's"\n}\n)'
d1e41517;Skipped test, it was a assert-permutation
d1e41590;Skipped test, it was a assert-permutation
d1e41624;PRSC Error: Failed to parse query 'deep-equal((\n [ "a", "b", "c" ]), ([ "a", "b", "c" ]))'
d1e41628;PRSC Error: Failed to parse query 'deep-equal((\n array { "a", "b", "c" }), ([ "a", "b", "c" ]))'
d1e41635;PRSC Error: Failed to parse query 'let $result := (\n [//product,( "a", "b", "c"),"d"]) return array:size($result) eq 3'
d1e41648;PRSC Error: Failed to parse query 'let $result := (\n array { //product,( "a", "b", "c"),"d"}) return array:size($result) eq 8'
d1e41655;PRSC Error: Failed to parse query 'let $result := (\ndeclare variable $myitems := 3;\n [$myitems, doc("catalog.xml")//product, \n  12, xs:date('2015-01-15'), <foo>bar</foo>]) return array:size($result) eq 5'
d1e41659;PRSC Error: Failed to parse query 'deep-equal((\n array {["a", "b", "c"], "d" }), ([["a", "b", "c"], "d" ]))'
d1e41663;PRSC Error: Failed to parse query 'deep-equal((\n [["a", "b", "c"], "d" ]), ([["a", "b", "c"], "d" ]))'
d1e41678;PRSC Error: Failed to parse query 'deep-equal((\n [ ("a", "b", "c"), "d" ]), ([ ("a", "b", "c"), "d" ]))'
d1e41686;PRSC Error: Failed to parse query 'deep-equal((\n ( ["a", "b", "c"], "d" )), (["a", "b", "c"], "d"))'
d1e41709;PRSC Error: Failed to parse query 'deep-equal((\n declare variable $array-of-ints := [10,20,30];\ndeclare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; \narray:get($array-of-ints, 2)), (20))'
d1e41709b;PRSC Error: Failed to parse query 'deep-equal((\n declare variable $array-of-ints := [10,20,30];\ndeclare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; \n$array-of-ints?2), (20))'
d1e41709c;PRSC Error: Failed to parse query 'deep-equal((\n declare variable $array-of-ints := [10,20,30];\ndeclare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; \nlet $pos := 2 return $array-of-ints?($pos)), (20))'
d1e41709d;PRSC Error: Failed to parse query 'deep-equal((\n declare variable $array-of-ints := [10,20,30];\ndeclare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; \n$array-of-arrays?2?1), ("d"))'
d1e41709e;PRSC Error: Failed to parse query 'deep-equal((\n declare variable $array-of-ints := [10,20,30];\ndeclare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; \n$array-of-arrays?2?1), ("d"))'
d1e41709f;PRSC Error: Failed to parse query 'deep-equal((\n declare variable $array-of-ints := [10,20,30];\ndeclare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; \n$array-of-arrays?*), (["a","b","c"], ["d","e","f"]))'
d1e41709g;PRSC Error: Failed to parse query 'deep-equal((\n declare variable $array-of-ints := [10,20,30];\ndeclare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; \n$array-of-arrays?*[?2 = "b"]), (["a","b","c"]))'
d1e41709h;PRSC Error: Failed to parse query 'deep-equal((\n declare variable $array-of-ints := [10,20,30];\ndeclare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; \narray:size($array-of-ints)), (3))'
d1e41709i;PRSC Error: Failed to parse query 'deep-equal((\n declare variable $array-of-ints := [10,20,30];\ndeclare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; \narray:head($array-of-ints)), (10))'
d1e41709j;PRSC Error: Failed to parse query 'deep-equal((\n declare variable $array-of-ints := [10,20,30];\ndeclare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; \narray:tail($array-of-ints)), ([20,30]))'
d1e41709k;PRSC Error: Failed to parse query 'deep-equal((\n declare variable $array-of-ints := [10,20,30];\ndeclare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; \narray:append($array-of-ints,40)), ([10,20,30,40]))'
d1e41709l;PRSC Error: Failed to parse query 'deep-equal((\n declare variable $array-of-ints := [10,20,30];\ndeclare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; \n array:insert-before($array-of-ints,2,40)), ([10,40,20,30]))'
d1e41709m;PRSC Error: Failed to parse query 'deep-equal((\n declare variable $array-of-ints := [10,20,30];\ndeclare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; \narray:remove($array-of-ints,2)), ([10,30]))'
d1e41709n;PRSC Error: Failed to parse query 'deep-equal((\n declare variable $array-of-ints := [10,20,30];\ndeclare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; \narray:subarray($array-of-ints,2,2)), ([20,30]))'
d1e41709o;PRSC Error: Failed to parse query 'deep-equal((\n declare variable $array-of-ints := [10,20,30];\ndeclare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; \narray:filter($array-of-ints,function($n) {$n > 15})), ([20,30]))'
d1e41709p;PRSC Error: Failed to parse query 'deep-equal((\n declare variable $array-of-ints := [10,20,30];\ndeclare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; \narray:flatten($array-of-arrays)), ("a","b","c","d","e","f"))'
d1e41709q;PRSC Error: Failed to parse query 'deep-equal((\n declare variable $array-of-ints := [10,20,30];\ndeclare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; \narray:join(($array-of-ints,["a","b","c"]))), ([10,20,30,"a","b","c"]))'
d1e41709r;PRSC Error: Failed to parse query 'deep-equal((\n declare variable $array-of-ints := [10,20,30];\ndeclare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; \narray:sort([6,2,-4],(),abs#1)), ([2,-4,6]))'
d1e41709s;PRSC Error: Failed to parse query 'deep-equal((\n declare variable $array-of-ints := [10,20,30];\ndeclare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; \narray:reverse($array-of-ints)), ([30,20,10]))'
d1e41709t;PRSC Error: Failed to parse query '\n declare variable $array-of-ints := [10,20,30];\ndeclare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; \n$array-of-ints instance of array(xs:integer)'
d1e41709u;PRSC Error: Failed to parse query '\n declare variable $array-of-ints := [10,20,30];\ndeclare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; \n$array-of-arrays instance of array(array(xs:string))'
d1e41709v;PRSC Error: Failed to parse query '\n declare variable $array-of-ints := [10,20,30];\ndeclare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; \n$array-of-arrays instance of function(*) '
d1e41709w;PRSC Error: Failed to parse query '\n declare variable $array-of-ints := [10,20,30];\ndeclare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; \n$array-of-arrays instance of function(xs:integer) as item()* '
d1e41709x;PRSC Error: Failed to parse query '\n declare variable $array-of-ints := [10,20,30];\ndeclare variable $array-of-arrays := [ ["a","b","c"], ["d","e","f"] ]; \n$array-of-arrays instance of item() '
d1e41791;PRSC Error: Failed to parse query 'deep-equal((\n declare variable $array-of-ints := [10,20,30];\n $array-of-ints?(2)), (20))'
d1e41795;PRSC Error: Failed to parse query 'deep-equal((\n declare variable $array-of-ints := [10,20,30];\n $array-of-ints?(2,3)), (20,30))'
d1e41799;PRSC Error: Failed to parse query 'deep-equal((\n declare variable $array-of-ints := [10,20,30];\n for $i in (2,3) return $array-of-ints?($i)), (20,30))'
d1e41803;PRSC Error: Failed to parse query 'deep-equal((\n declare variable $array-of-ints := [10,20,30];\n $array-of-ints?(1 to 2)), (10,20))'
d1e41803b;PRSC Error: Failed to parse query 'deep-equal((\n declare variable $array-of-ints := [10,20,30];\n $array-of-ints?2), (20))'
d1e41803c;PRSC Error: Failed to parse query 'deep-equal((\n declare variable $array-of-ints := [10,20,30];\n $array-of-ints?*), (10,20,30))'
d1e42207;PRSC Error: Failed to parse query 'deep-equal((\n declare function local:larger-values\n  ($arrayarg as array(xs:integer))as xs:integer* {\n   array:flatten($arrayarg)[. > 15]\n}; \nlocal:larger-values([10,20,30])), (20,30))'
d1e42340;PRSC Error: Failed to parse query '\ndeep-equal(json-doc("product.json"), map {\n   "number": xs:double(557),\n   "name": "Fleece Pullover",\n   "colorChoices": ["navy", "black"],\n   "is-current": true(),\n   "other": ()\n})'
d1e42362;PRSC Error: Failed to parse query '(\ndeclare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization"; \ndeclare option output:method "json";\nmap {\n   "number": 557,\n   "properties": <props>\n                   <length>31</length>\n                   <height>12</height>\n                 </props>\n}) instance of $map(*)'
d1e48503;PRSC Error: Failed to parse query 'deep-equal((declare variable $array1 := ["abc","def","ghi"];\n array:append($array1,"jkl")), (["abc","def","ghi","jkl"]))'
d1e48514;PRSC Error: Failed to parse query 'deep-equal((declare variable $array1 := ["abc","def","ghi"];\n array:append($array1,("jkl","mno"))), (["abc","def","ghi",("jkl","mno")]))'
d1e48525;PRSC Error: Failed to parse query 'deep-equal((declare variable $array1 := ["abc","def","ghi"];\n array:append(array:append($array1,"jkl"),"mno")), (["abc","def","ghi","jkl","mno"]))'
d1e48536;PRSC Error: Failed to parse query 'deep-equal((declare variable $array1 := ["abc","def","ghi"];\n array:append($array1,["jkl","mno"])), (["abc","def","ghi",["jkl","mno"]]))'
d1e48547;PRSC Error: Failed to parse query 'deep-equal((declare variable $array1 := ["abc","def","ghi"];\n array:append($array1,())), (["abc","def","ghi",()]))'
d1e48617;PRSC Error: Failed to parse query 'deep-equal((\n let $f := upper-case#1\nreturn apply($f,["a"])), ("A"))'
d1e48676;PRSC Error: Failed to parse query 'deep-equal((\n apply(substring#3,["sometext",2,4])), ("omet"))'
d1e48687;PRSC Error: Failed to parse query 'deep-equal((\n apply(max#1,[(1,2,3)])), (3))'
d1e48698;PRSC Error: Failed to parse query 'deep-equal((\n apply(concat#3,["a","b","c"])), ("abc"))'
d1e48709;Expected error code: FOAP0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n apply(upper-case#1,['a','b'])'
d1e51544;PRSC Error: Failed to parse query 'declare variable $map1 := map {1:"first", 2:"second", 3:"third",4:()};\ndeclare variable $map2 := map {};\n map:contains($map1, 1)'
d1e51555;PRSC Error: Failed to parse query 'declare variable $map1 := map {1:"first", 2:"second", 3:"third",4:()};\ndeclare variable $map2 := map {};\n map:contains($map1, 4)'
d1e51565;PRSC Error: Failed to parse query 'declare variable $map1 := map {1:"first", 2:"second", 3:"third",4:()};\ndeclare variable $map2 := map {};\n map:contains($map1, 9)'
d1e51576;PRSC Error: Failed to parse query 'declare variable $map1 := map {1:"first", 2:"second", 3:"third",4:()};\ndeclare variable $map2 := map {};\n map:contains($map1, "1")'
d1e51592;PRSC Error: Failed to parse query 'declare variable $map1 := map {1:"first", 2:"second", 3:"third",4:()};\ndeclare variable $map2 := map {};\n map:contains($map2, 1)'
d1e51729;The function contains-token with arity 2 is not registered.
d1e51740;The function contains-token with arity 2 is not registered.
d1e51751;The function contains-token with arity 2 is not registered.
d1e51762;The function contains-token with arity 2 is not registered.
d1e51773;The function contains-token with arity 2 is not registered.
d1e55090;PRSC Error: Failed to parse query 'declare variable $map1 := map {1:"first", 2:"second"};\ndeep-equal( map:entry(1,"first"),\nmap {1:"first"}\n)'
d1e55101;PRSC Error: Failed to parse query 'declare variable $map1 := map {1:"first", 2:"second"};\ndeep-equal(  map:merge( ($map1, map:entry(3, "third")) ),\n  map {1:"first", 2:"second", 3:"third"}\n)'
d1e55112;PRSC Error: Failed to parse query 'declare variable $map1 := map {1:"first", 2:"second"};\ndeep-equal(\n map:merge( (map:entry(1, "first"), map:entry(2, "second")) ),\n map {1:"first", 2:"second"}\n )'
d1e55123;PRSC Error: Failed to parse query 'declare variable $map1 := map {1:"first", 2:"second"};\n         deep-equal(\n map:merge(for $p in doc("catalog.xml")//product\nreturn map:entry(string($p/number), string($p/name))),\n  map {"557":"Fleece Pullover", "563":"Floppy Sun Hat", "443":"Deluxe Travel Bag", "784":"Cotton Dress Shirt"}\n )'
d1e56387;PRSC Error: Failed to parse query 'deep-equal((\n array:filter(["ab","aa","xy"],starts-with#2(?,"a"))), (["ab","aa"]))'
d1e56398;PRSC Error: Failed to parse query 'deep-equal((\n array:filter([4,5,6],function($n) {$n > 4})), ([5,6]))'
d1e56409;PRSC Error: Failed to parse query 'deep-equal((\n array:filter([4,5,6],function($n) {$n > 6})), ([]))'
d1e56502;PRSC Error: Failed to parse query 'deep-equal((\n array:flatten(["a", "b", "c"])), (("a", "b", "c")))'
d1e56513;PRSC Error: Failed to parse query 'deep-equal((\n array:flatten( (["a", "b"],["c", "d"]) )), (("a", "b", "c", "d")))'
d1e56524;PRSC Error: Failed to parse query 'deep-equal((\n array:flatten( (["a", "b"],["c", ["d"],["e"]]) )), (("a", "b", "c", "d", "e")))'
d1e56535;The function array:flatten with arity 1 is not registered.
d1e56999;PRSC Error: Failed to parse query 'deep-equal((\n array:fold-left([1,2,3], 0, function($a, $b) { $a + $b })), (6))'
d1e57060;PRSC Error: Failed to parse query 'deep-equal((\n array:fold-left([1,2,3,4,5,6], 0, function($a, $b) { $a + $b })), (21))'
d1e57070;PRSC Error: Failed to parse query 'deep-equal((\n array:fold-left(["a","b","c"], "", function($a, $b) { concat($a,$b) })), ("abc"))'
d1e57081;PRSC Error: Failed to parse query 'deep-equal((\n array:fold-left(["a","b","c"], "", function($a, $b) { concat($b,$a) })), ("cba"))'
d1e57092;PRSC Error: Failed to parse query 'deep-equal((\n array:fold-left(["a","b","c"], "x", function($a, $b) { concat($a,',',$b) })), ("x,a,b,c"))'
d1e57103;PRSC Error: Failed to parse query 'deep-equal((\n array:fold-left( ["a","b","c"], "", concat(?,?) )), ("abc"))'
d1e57114;PRSC Error: Failed to parse query 'deep-equal((\n array:fold-left([], 0, function($a, $b) { $a + $b })), (0))'
d1e57411;PRSC Error: Failed to parse query 'deep-equal((\n array:fold-right([1,2,3], 0, function($a, $b) { $a + $b })), (6))'
d1e57472;PRSC Error: Failed to parse query 'deep-equal((\n array:fold-right([1,2,3,4,5,6], 0, function($a, $b) { $a + $b })), (21))'
d1e57482;PRSC Error: Failed to parse query 'deep-equal((\n array:fold-right(["a","b","c"], "", function($a, $b) { concat($a,$b) })), ("abc"))'
d1e57493;PRSC Error: Failed to parse query 'deep-equal((\n array:fold-right(["a","b","c"], "", function($a, $b) { concat($b,$a) })), ("cba"))'
d1e57504;PRSC Error: Failed to parse query 'deep-equal((\n array:fold-right(["a","b","c"], "x", function($a, $b) { concat($a,',',$b) })), ("a,b,c,x"))'
d1e57515;PRSC Error: Failed to parse query 'deep-equal((\n array:fold-right( ["a","b","c"], "", concat(?,?) )), ("abc"))'
d1e57526;PRSC Error: Failed to parse query 'deep-equal((\n array:fold-right([], 0, function($a, $b) { $a + $b })), (0))'
d1e57796;PRSC Error: Failed to parse query 'deep-equal((\n array:for-each( ["a","b","c"], function($x) {concat($x,"x")} )), (["ax","bx","cx"]))'
d1e57807;PRSC Error: Failed to parse query 'deep-equal((\n array:for-each( ["a","b","c"], function($x) {$x,"x"} )), ([("a","x"),("b","x"),("c","x")]))'
d1e57818;PRSC Error: Failed to parse query 'deep-equal((\n array:for-each( ["a","b","c"], string-to-codepoints(?) )), ([97, 98, 99]))'
d1e57961;Skipped test, it was a assert-permutation
d1e57972;PRSC Error: Failed to parse query 'declare variable $map1 := map {1:"first", 2:"second"};\n         deep-equal(\n map:merge(map:for-each($map1,function($k,$v) {map:entry($k + 1, $v)})),\n map {2:"first", 3:"second"}\n )'
d1e58316;PRSC Error: Failed to parse query 'deep-equal((\n array:for-each-pair(["a", "b", "c"], ["x", "y", "z"], concat#2)), (["ax", "by", "cz"]))'
d1e58327;PRSC Error: Failed to parse query 'deep-equal((\n array:for-each-pair(["a", "b", "c"], ["x", "y", "z"], function($a, $b){$a, $b})), ([("a","x"), ("b","y"), ("c","z")]))'
d1e58338;PRSC Error: Failed to parse query 'deep-equal((\n array:for-each-pair([1,2,3,4,5], [1,2,3,4,5], function($a, $b){$a * $b})), ([1,4,9,16,25]))'
d1e58349;PRSC Error: Failed to parse query 'deep-equal((\n array:for-each-pair(["a", "b", "c", "d", "e"], ["x", "y", "z"], concat#2)), (["ax", "by", "cz"]))'
d1e60780;PRSC Error: Failed to parse query 'deep-equal((declare variable $array1 := ["abc","def","ghi"];\ndeclare variable $array2 := ["abc", [10,20]];\n array:get($array1,2)), ("def"))'
d1e60791;PRSC Error: Failed to parse query 'deep-equal((declare variable $array1 := ["abc","def","ghi"];\ndeclare variable $array2 := ["abc", [10,20]];\n array:get($array2,2)), ([10,20]))'
d1e60802;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $array1 := ["abc","def","ghi"];\ndeclare variable $array2 := ["abc", [10,20]];\n array:get($array2,3)'
d1e60955;PRSC Error: Failed to parse query 'deep-equal((declare variable $map1 := map {3:"first", 4:"second", 5:()};\n map:get($map1,3)), ("first"))'
d1e60966;PRSC Error: Failed to parse query '(declare variable $map1 := map {3:"first", 4:"second", 5:()};\n map:get($map1,5)) => empty()'
d1e60976;PRSC Error: Failed to parse query '(declare variable $map1 := map {3:"first", 4:"second", 5:()};\n map:get($map1,6)) => empty()'
d1e60986;PRSC Error: Failed to parse query '(declare variable $map1 := map {3:"first", 4:"second", 5:()};\n map:get($map1,"3")) => empty()'
d1e61366;PRSC Error: Failed to parse query 'deep-equal((\n array:head(["abc","def","ghi"])), ("abc"))'
d1e61377;PRSC Error: Failed to parse query 'deep-equal((\n array:head(["abc"])), ("abc"))'
d1e61388;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n array:head([])'
d1e63192;PRSC Error: Failed to parse query 'deep-equal((declare variable $array1 := ["abc","ghi","jkl"];\n array:insert-before($array1,2,"def")), (["abc","def","ghi","jkl"]))'
d1e63203;PRSC Error: Failed to parse query 'deep-equal((declare variable $array1 := ["abc","ghi","jkl"];\n array:insert-before($array1,4,"mno")), (["abc","ghi","jkl","mno"]))'
d1e63214;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $array1 := ["abc","ghi","jkl"];\n array:insert-before($array1,6,"mno")'
d1e63227;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $array1 := ["abc","ghi","jkl"];\n array:insert-before($array1,0,"aaa")'
d1e63488;PRSC Error: Failed to parse query 'deep-equal((declare variable $array1 := ["abc","def","ghi"];\ndeclare variable $array2 := [1,2,3];\n array:join( ($array1,$array2) )), (["abc","def","ghi",1,2,3]))'
d1e63499;PRSC Error: Failed to parse query 'deep-equal((declare variable $array1 := ["abc","def","ghi"];\ndeclare variable $array2 := [1,2,3];\n array:join( ($array2,$array1) )), ([1,2,3,"abc","def","ghi"]))'
d1e63510;PRSC Error: Failed to parse query 'deep-equal((declare variable $array1 := ["abc","def","ghi"];\ndeclare variable $array2 := [1,2,3];\n array:join( ($array2,$array1,[4,5]) )), ([1,2,3,"abc","def","ghi",4,5]))'
d1e63521;PRSC Error: Failed to parse query 'deep-equal((declare variable $array1 := ["abc","def","ghi"];\ndeclare variable $array2 := [1,2,3];\n array:join( ($array1,[]) )), (["abc","def","ghi"]))'
d1e63532;PRSC Error: Failed to parse query 'deep-equal((declare variable $array1 := ["abc","def","ghi"];\ndeclare variable $array2 := [1,2,3];\n array:join( () )), ([ ]))'
d1e63543;PRSC Error: Failed to parse query 'deep-equal((declare variable $array1 := ["abc","def","ghi"];\ndeclare variable $array2 := [1,2,3];\n array:join( [ ] )), ([ ]))'
d1e63783;Skipped test, it was a assert-permutation
d1e63796;PRSC Error: Failed to parse query 'deep-equal((declare variable $map1 := map {1:"first", 2:"second"};\ndeclare variable $map2 := map {1:"first"};\ndeclare variable $map3 := map {};\n map:keys($map2)), (1))'
d1e63807;PRSC Error: Failed to parse query '(declare variable $map1 := map {1:"first", 2:"second"};\ndeclare variable $map2 := map {1:"first"};\ndeclare variable $map3 := map {};\n map:keys($map3)) => empty()'
d1e66015;PRSC Error: Failed to parse query 'declare variable $map1 := map {1:"first", 2:"second"};\ndeclare variable $map2 := map {1:"ONE", "abc":"def"};\ndeclare variable $map3 := map {"1":"first", "2":"second"};\ndeep-equal(\n map:merge( ($map1, $map2) ),\n map {1:"first", 2:"second", "abc":"def"}\n )'
d1e66026;PRSC Error: Failed to parse query 'declare variable $map1 := map {1:"first", 2:"second"};\ndeclare variable $map2 := map {1:"ONE", "abc":"def"};\ndeclare variable $map3 := map {"1":"first", "2":"second"};\ndeep-equal(\n map:merge( ($map2, $map1) ),\n map {1:"ONE", 2:"second", "abc":"def"}\n )'
d1e66037;PRSC Error: Failed to parse query 'declare variable $map1 := map {1:"first", 2:"second"};\ndeclare variable $map2 := map {1:"ONE", "abc":"def"};\ndeclare variable $map3 := map {"1":"first", "2":"second"};\ndeep-equal(\n map:merge( ($map1, $map3) ),\n map {1:"first", 2:"second", "1":"first", "2":"second"}\n )'
d1e66048;PRSC Error: Failed to parse query 'declare variable $map1 := map {1:"first", 2:"second"};\ndeclare variable $map2 := map {1:"ONE", "abc":"def"};\ndeclare variable $map3 := map {"1":"first", "2":"second"};\ndeep-equal(\n map:merge( ($map1, $map2, $map3) ),\n map {1:"ONE", 2:"second", "abc":"def", "1":"first", "2":"second"}\n )'
d1e66059;PRSC Error: Failed to parse query 'declare variable $map1 := map {1:"first", 2:"second"};\ndeclare variable $map2 := map {1:"ONE", "abc":"def"};\ndeclare variable $map3 := map {"1":"first", "2":"second"};\ndeep-equal(\n map:merge( ($map1, map{3:"third"}) ),\n map {1:"first", 2:"second", 3:"third"}\n )'
d1e66070;PRSC Error: Failed to parse query 'declare variable $map1 := map {1:"first", 2:"second"};\ndeclare variable $map2 := map {1:"ONE", "abc":"def"};\ndeclare variable $map3 := map {"1":"first", "2":"second"};\ndeep-equal(\n map:merge( ($map1, map{2:"second-new"}) ),\n map {1:"first", 2:"second"}\n )'
d1e66081;PRSC Error: Failed to parse query 'declare variable $map1 := map {1:"first", 2:"second"};\ndeclare variable $map2 := map {1:"ONE", "abc":"def"};\ndeclare variable $map3 := map {"1":"first", "2":"second"};\ndeep-equal(\n map:merge( ($map1, map:entry(2,"second-new")) ),\n map {1:"first", 2:"second"}\n )'
d1e66092;PRSC Error: Failed to parse query 'declare variable $map1 := map {1:"first", 2:"second"};\ndeclare variable $map2 := map {1:"ONE", "abc":"def"};\ndeclare variable $map3 := map {"1":"first", "2":"second"};\ndeep-equal(\n map:merge( ($map1) ),\n map {1:"first", 2:"second"}\n )'
d1e66103;PRSC Error: Failed to parse query 'declare variable $map1 := map {1:"first", 2:"second"};\ndeclare variable $map2 := map {1:"ONE", "abc":"def"};\ndeclare variable $map3 := map {"1":"first", "2":"second"};\ndeep-equal(\n map:merge( () ),\n map {}\n )'
d1e69523;The function parse-ietf-date with arity 1 is not registered.
d1e69534;The function parse-ietf-date with arity 1 is not registered.
d1e69545;The function parse-ietf-date with arity 1 is not registered.
d1e69556;The function parse-ietf-date with arity 1 is not registered.
d1e69567;The function parse-ietf-date with arity 1 is not registered.
d1e69767;PRSC Error: Failed to parse query '\n deep-equal (\n parse-json('{\n   "number": 557,\n   "name": "Fleece Pullover",\n   "colorChoices": ["navy","black"]\n}'),\nmap {\n   "number": xs:double(557),\n   "name": "Fleece Pullover",\n   "colorChoices": ["navy", "black"]\n})\n'
d1e70867;PRSC Error: Failed to parse query 'declare variable $map1 := map {1:"first", 2:"second"};\n         deep-equal(\n map:put($map1, 1, "ONE"),\n map {1:"ONE", 2:"second"}\n )'
d1e70878;PRSC Error: Failed to parse query 'declare variable $map1 := map {1:"first", 2:"second"};\n         deep-equal(\n map:put($map1, 3, "third"),\n map {1:"first", 2:"second", 3:"third"}\n )'
d1e70889;PRSC Error: Failed to parse query 'declare variable $map1 := map {1:"first", 2:"second"};\n         deep-equal(\n map:put($map1, "abc", "def"),\n map {1:"first", 2:"second", "abc":"def"}\n )'
d1e71246;PRSC Error: Failed to parse query '(\n random-number-generator()?number) instance of $xs:double'
d1e71254;PRSC Error: Failed to parse query '(\n random-number-generator()?permute(1 to 100)) instance of $xs:integer+'
d1e71262;PRSC Error: Failed to parse query '(\n for $seq in 1 to 100 return random-number-generator()?number) instance of $xs:double+'
d1e71270;PRSC Error: Failed to parse query '(\n for $seq in 1 to 100 return random-number-generator($seq)?number) instance of $xs:double+'
d1e71288;PRSC Error: Failed to parse query '(\n declare function local:random-sequence($length as xs:integer,\n                                       $rng as map(xs:string, item())) {\n  if ($length eq 0)\n  then ()\n  else ($rng?number, local:random-sequence($length - 1, $rng?next()))\n};\nlocal:random-sequence(5, random-number-generator())) instance of $xs:double+'
d1e71531;PRSC Error: Failed to parse query 'deep-equal((declare variable $array1 := ["abc","def","ghi","jkl"];\n array:remove($array1,2)), (["abc","ghi","jkl"]))'
d1e71542;PRSC Error: Failed to parse query 'deep-equal((declare variable $array1 := ["abc","def","ghi","jkl"];\n array:remove(["abc"],1)), ([ ]))'
d1e71553;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $array1 := ["abc","def","ghi","jkl"];\n array:remove($array1,5)'
d1e71660;PRSC Error: Failed to parse query 'declare variable $map1 := map {1:"first", 2:"second"};\ndeep-equal(\n map:remove($map1,2),\n map {1:"first"}\n )'
d1e71671;PRSC Error: Failed to parse query 'declare variable $map1 := map {1:"first", 2:"second"};\ndeep-equal(\nmap:remove($map1,3),\nmap {1:"first", 2:"second"}\n)'
d1e71682;PRSC Error: Failed to parse query 'declare variable $map1 := map {1:"first", 2:"second"};\ndeep-equal( map:remove($map1,"abc"),\nmap {1:"first", 2:"second"}\n)'
d1e72747;PRSC Error: Failed to parse query 'deep-equal((\n array:reverse(["abc","def","ghi"])), (["ghi","def","abc"]))'
d1e72758;PRSC Error: Failed to parse query 'deep-equal((\n array:reverse(["abc"])), (["abc"]))'
d1e72769;PRSC Error: Failed to parse query 'deep-equal((\n array:reverse([("a","b","c")])), ([("a","b","c")]))'
d1e72779;PRSC Error: Failed to parse query 'deep-equal((\n array:reverse([ ])), ([ ]))'
d1e74262;PRSC Error: Failed to parse query 'deep-equal((\n array:size([1, 2, 3])), (3))'
d1e74273;PRSC Error: Failed to parse query 'deep-equal((\n array:size(["abc", ["def", "ghi"]])), (2))'
d1e74283;PRSC Error: Failed to parse query 'deep-equal((\n array:size([ ])), (0))'
d1e74294;PRSC Error: Failed to parse query 'deep-equal((\n array:size([[ ]])), (1))'
d1e74304;PRSC Error: Failed to parse query 'deep-equal((\n count([1, 2, 3])), (1))'
d1e74388;PRSC Error: Failed to parse query 'deep-equal((declare variable $map1 := map {1:"first", 2:"second"};\ndeclare variable $map2 := map {};\n map:size( $map1 )), (2))'
d1e74399;PRSC Error: Failed to parse query 'deep-equal((declare variable $map1 := map {1:"first", 2:"second"};\ndeclare variable $map2 := map {};\n map:size( $map2 )), (0))'
d1e74563;The function sort with arity 1 is not registered.
d1e74585;The function sort with arity 1 is not registered.
d1e74596;The function sort with arity 3 is not registered.
d1e74610;The function sort with arity 3 is not registered.
d1e74627;The function sort with arity 3 is not registered.
d1e74798;PRSC Error: Failed to parse query 'deep-equal((\n array:sort([6,2,4])), ([2,4,6]))'
d1e74809;PRSC Error: Failed to parse query 'deep-equal((\n array:sort([("a","c","b"), ("a","b","f")])), ([("a","b","f"), ("a","c","b")]))'
d1e74820;PRSC Error: Failed to parse query 'deep-equal((\n array:sort([6,2,-4],(),abs#1)), ([2,-4,6]))'
d1e76034;PRSC Error: Failed to parse query 'deep-equal((declare variable $array1 := ["abc","def","ghi","jkl"];\n array:subarray($array1,2)), (["def","ghi","jkl"]))'
d1e76045;PRSC Error: Failed to parse query 'deep-equal((declare variable $array1 := ["abc","def","ghi","jkl"];\n array:subarray($array1,2,2)), (["def","ghi"]))'
d1e76056;PRSC Error: Failed to parse query 'deep-equal((declare variable $array1 := ["abc","def","ghi","jkl"];\n array:subarray($array1,2,1)), (["def"]))'
d1e76067;PRSC Error: Failed to parse query 'deep-equal((declare variable $array1 := ["abc","def","ghi","jkl"];\n array:subarray($array1,2,0)), ([ ]))'
d1e76078;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $array1 := ["abc","def","ghi","jkl"];\n array:subarray($array1,6)'
d1e76091;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $array1 := ["abc","def","ghi","jkl"];\n array:subarray($array1,2,6)'
d1e76104;Expected error code: FOAY0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $array1 := ["abc","def","ghi","jkl"];\n array:subarray($array1,2,-1)'
d1e77397;PRSC Error: Failed to parse query 'deep-equal((\n array:tail(["abc","def","ghi"])), (["def","ghi"]))'
d1e77408;PRSC Error: Failed to parse query 'deep-equal((\n array:tail(["abc"])), ([ ]))'
d1e77419;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n array:tail([])'
d1e78807;PRSC Error: Failed to parse query '\n         deep-equal(\n let $result := transform(\n  map {\n    "stylesheet-location" : "render.xsl",\n    "source-node"    : doc("catalog.xml")\n  })\nreturn $result?output ,\ndocument {<p>There are 4 products in the catalog.</p>}\n)'
d1e78807c;The function json-to-xml with arity 1 is not registered.
d1e78807d;PRSC Error: Failed to parse query '\n json-to-xml('{\n   "number": 557,\n   "name": "Fleece Pullover",   \n   "name": "Fleece Pullover Redux",\n   "colorChoices": ["navy \u00E9", "black \uFFFF"],\n   "is-current": true,\n   "other": null\n}',\nmap {\n"duplicates": "use-first",\n"validate": false(),\n"escape": false(),\n"fallback": function($s){"ERROR!!"}\n})\n'
d1e78807e;PRSC Error: Failed to parse query '\n         deep-equal(\n parse-json(xml-to-json(<map xmlns="http://www.w3.org/2005/xpath-functions">\n   <number key="number">557</number>\n   <string key="name">Fleece Pullover</string>\n   <array key="colorChoices">\n      <string>navy</string>\n      <string>black</string>\n   </array>\n   <boolean key="is-current">true</boolean>\n   <null key="other"/>\n</map>,\nmap{"indent":true()})) ,\nmap {   "number": 557,\n   "name": "Fleece Pullover",\n   "colorChoices": ["navy", "black"],\n   "is-current": true(),\n   "other": () }\n)'
d1e78807f;PRSC Error: Failed to parse query '\n deep-equal (\n parse-json('{\n   "number": 557,\n   "name": "Fleece Pullover",\n   "colorChoices": ["navy","black"],\n   "is-current": true,\n   "other": null \n}'),\nmap {\n   "number": xs:double(557),\n   "name": "Fleece Pullover",\n   "colorChoices": ["navy", "black"],\n   "is-current": true(),\n   "other": () \n})\n'
d1e78807g;PRSC Error: Failed to parse query '\n deep-equal (\n parse-json('{\n   "number": 557,\n   "name": "Fleece Pullover",\n   "name": "Fleece Pullover Redux",\n   "colorChoices": ["navy \u00E9", "black \uFFFF"],\n   "is-current": true,\n   "other": null\n}',\nmap {\n"duplicates": "use-first",\n"validate": false(),\n"escape": false(),\n"fallback": function($s){"ERROR!!"}}),\nmap {\n   "number": xs:double(557),\n   "name": "Fleece Pullover",\n   "colorChoices": ["navy é", "black ERROR!!"],\n   "is-current": true(),\n   "other": () \n})\n'
d1e78807h;PRSC Error: Failed to parse query '\n deep-equal (\n parse-json(serialize(map {\n   "number": xs:double(557),\n   "name": "Fleece Pullover",\n   "colorChoices": ["navy", "black"],\n   "is-current": true(),\n   "other": () \n},\n<output:serialization-parameters\n   xmlns:output = "http://www.w3.org/2010/xslt-xquery-serialization">\n  <output:method value="json"/>\n  <output:indent value="yes"/>\n</output:serialization-parameters>)),\nparse-json('{\n   "number": 557,\n   "name": "Fleece Pullover",\n   "colorChoices": ["navy", "black"],\n   "is-current": true,\n   "other": null \n}')\n)\n'
d1e78807i;PRSC Error: Failed to parse query 'declare namespace strings = "http://datypic.com/strings";\n         let $library := load-xquery-module("http://datypic.com/strings")\n         let $trimFunction := $library?functions?(xs:QName("strings:trim"))?1\n         return $trimFunction("   x   y   ")'
d1e78807j;PRSC Error: Failed to parse query '\n         declare namespace prod = "http://datypic.com/prod";\n         let $library := load-xquery-module("http://datypic.com/prod",\n                                             map {"context-item" : doc("catalog.xml")/catalog,\n                                                  "location-hints" : "lib2.xqm",\n                                                  "variables" : map{xs:QName("prod:label") : "Product Count"}\n                                                 })\n         let $prodsVariableValue := $library?variables?(xs:QName("prod:prods"))\n         let $countProdArity1 := $library?functions?(xs:QName("prod:countProds"))?1\n         return $countProdArity1($prodsVariableValue)'
d1e78807k;PRSC Error: Failed to parse query '\n         declare namespace prod = "http://datypic.com/prod";\n         let $library := load-xquery-module("http://datypic.com/prod",\n         map {"context-item" : doc("catalog.xml")/catalog,\n         "variables" : map{\n         xs:QName("prod:label") : "Product Count"}\n         })\n         let $prodsVariableValue := $library?variables?(xs:QName("prod:prods"))\n         let $countProdArity2 := $library?functions?(xs:QName("prod:countProds"))?2\n         return $countProdArity2($prodsVariableValue, "ACC")\n      '
decimal-format-01;PRSC Error: Failed to parse query '\n        declare default decimal-format zero-digit="0" grouping-separator="," decimal-separator=".";\n      	format-number(2392.14*36.58,'000,000.000000')'
decimal-format-02;PRSC Error: Failed to parse query '\n        declare default decimal-format digit="#" grouping-separator="," decimal-separator=".";\n      	format-number(12792.14*96.58,'##,###,000.000###')'
decimal-format-03;PRSC Error: Failed to parse query '\n        declare default decimal-format minus-sign="-" grouping-separator="," decimal-separator=".";\n      	format-number(2792.14*(-36.58),'000,000.000###')'
decimal-format-04;PRSC Error: Failed to parse query '\n        declare default decimal-format minus-sign="-" pattern-separator=";" grouping-separator="," decimal-separator=".";\n      	format-number(2392.14*(-36.58),'000,000.000###;###,###.000###')'
decimal-format-05;PRSC Error: Failed to parse query '\n        declare decimal-format local:df minus-sign="-" percent="%" decimal-separator=".";\n      	format-number(0.4857,'###.###%', 'local:df')'
decimal-format-06;PRSC Error: Failed to parse query '\n        declare decimal-format local:df minus-sign="-" per-mille="‰" decimal-separator=".";\n      	format-number(0.4857,'###.###‰')'
decimal-format-09;PRSC Error: Failed to parse query '\n         declare default decimal-format decimal-separator="|" grouping-separator="."; \n         format-number(931.4857,'000.000|###')'
decimal-format-11;PRSC Error: Failed to parse query '\n        declare default decimal-format digit="!" pattern-separator="\";\n        format-number(26931.4,'+!!!,!!!.!!!\-!!,!!!.!!!')'
decimal-format-12;PRSC Error: Failed to parse query '\n        declare default decimal-format digit="!" pattern-separator="\";\n        format-number(-26931.4,'+!!,!!!.!!!\-!!!,!!!.!!!')'
decimal-format-13;PRSC Error: Failed to parse query '\n        declare default decimal-format digit="!" pattern-separator="\";\n        format-number(-26931.4,'!!!,!!!.!!!')'
decimal-format-14;PRSC Error: Failed to parse query '\n        declare decimal-format local:df2 infinity="off-the-scale";\n        format-number(1 div 0e0,'###############################', 'local:df2')'
decimal-format-15;PRSC Error: Failed to parse query '\n        declare decimal-format local:df2 NaN="non-numeric";\n        format-number(number('none'), '#############', 'local:df2')'
decimal-format-16;PRSC Error: Failed to parse query '\n        declare default decimal-format  per-mille="m";\n        format-number(0.4857,'###.###m')'
decimal-format-17;PRSC Error: Failed to parse query '\n        declare default decimal-format  minus-sign="_";\n        format-number(-26931.4,'+###,###.###;-###,###.###')'
decimal-format-18;PRSC Error: Failed to parse query '\n        declare default decimal-format minus-sign="_";\n        format-number(-26931.4,'###,###.###')'
decimal-format-19;PRSC Error: Failed to parse query '\n        declare decimal-format myminus minus-sign="_"; \n        concat(format-number(-26931.4,'###,###.###','myminus'), '/',\n        format-number(-42857.1,'###,###.###'))'
decimal-format-20;PRSC Error: Failed to parse query '\n        declare namespace foo="http://foo.ns";\n        declare decimal-format foo:decimal1  decimal-separator="!" grouping-separator="*";\n        declare decimal-format decimal1  decimal-separator="*" grouping-separator="!";\n        format-number(1234.567,'#*###*###!###','foo:decimal1')'
decimal-format-21;PRSC Error: Failed to parse query '\n        import module namespace m="http://www.w3.org/TestModules/dfd-module-001";\n        declare decimal-format df001 grouping-separator="!";\n        format-number(123456.789,'#!###!###.###','df001')||'-'||m:do()\n      '
decimal-format-31;Expected error code: XQST0111. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare default decimal-format decimal-separator = "^";\n        declare default decimal-format decimal-separator = "^";\n      	true()\n      '
decimal-format-32;Expected error code: XQST0111. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare decimal-format fmt1 decimal-separator = "^";\n        declare decimal-format fmt1 decimal-separator = "^";\n      	true()\n      '
decimal-format-33;PRSC Error: Failed to parse query '\n        declare decimal-format fmt1 decimal-separator = "^";\n        declare decimal-format fmt2 decimal-separator = "~";\n      	concat (format-number(123.45, '9999^999', 'fmt1'), " and ",\n                format-number(123.45, '9999~999', 'fmt2'))\n      '
decimal-format-34;Expected error code: XQST0114. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare default decimal-format decimal-separator = "^" grouping-separator = "\" decimal-separator = "^";\n      	true()\n      '
decimal-format-35;Expected error code: XQST0097. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare default decimal-format zero-digit = "A";\n      	true()\n      '
decimal-format-36;Expected error code: XQST0098. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare default decimal-format decimal-separator = "~" grouping-separator = "~";\n      	true()\n      '
decimal-format-37;Expected error code: XQST0098. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare default decimal-format decimal-separator = ",";\n      	true()\n      '
decimal-format-39;PRSC Error: Failed to parse query '\n        declare default decimal-format minus-sign="-";\n        format-number(-26931.4,'###,###.###')'
decimal-format-40;PRSC Error: Failed to parse query '\n      declare default decimal-format NaN = "0";\n      format-number(xs:double('NaN'),'###,###.###')'
decimal-format-901err;Expected error code: XQST0098. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare default decimal-format decimal-separator="!" grouping-separator="!";\n        format-number(931.4857,'###!###!###')'
decimal-format-902err;Expected error code: FODF1310. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare default decimal-format digit='$';\n        format-number(931.4857,'000.$$0')'
decimal-format-903err;Expected error code: XQST0111. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare default decimal-format digit='$';\n        declare default decimal-format minus-sign='_';\n        format-number(931.4857,'000.$$0')'
decimal-format-904err;Expected error code: XQST0111. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare namespace a="http://a.com/";\n        declare namespace b="http://a.com/";\n        declare decimal-format a:one digit='$';\n        declare decimal-format two digit='$';\n        declare decimal-format three digit='$';\n        declare decimal-format four digit='$';\n        declare decimal-format five digit='$';\n        declare decimal-format b:one minus-sign="_";\n        declare default decimal-format minus-sign='_';\n        format-number(931.4857,'000.$$0')'
decimal-format-905err;Expected error code: FODF1310. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare decimal-format q decimal-separator="." grouping-separator=",";\n        format-number(931.4857,'fred.ginger', 'q')'
decimal-format-906err;Expected error code: FODF1280. Found error code: XPST0017 with error message: The function format-number with arity 3 is not registered.
decimal-format-907err;Expected error code: XQST0114. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare namespace a="http://a.com/";\n        declare namespace b="http://a.com/";\n        declare decimal-format a:one digit='$' zero-digit="0" minus-sign="_" digit="#";\n        format-number(931.4857,'000.$$0', 'a:one')'
decimal-format-908err;Expected error code: XQST0097. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare default decimal-format digit="one";\n        format-number(931.4857,'000.$$0')'
decimal-format-909err;Expected error code: XQST0097. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare default decimal-format zero-digit="1";\n        format-number(931.4857,'000.$$0')'
decimal-format-910err;Expected error code: XQST0097. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare default decimal-format zero-digit="a";\n        format-number(931.4857,'aaa.$$a')'
decimal-format-911err;Expected error code: XQST0097. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare default decimal-format minus-sign="--";\n        format-number(931.4857,'000.$$0')'
decimal-format-912err;Expected error code: XQST0098. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      declare default decimal-format decimal-separator = "6";\n      true()\n    '
DirectConElemAttr-1;PRSC Error: Failed to parse query '<shoe name=" """" "/>'
DirectConElemAttr-2;PRSC Error: Failed to parse query '<shoe name=" '''''''' "/>'
DirectConElemNamespace-3;Expected executing the XPath 'namespace-uri(<p:e xmlns:p="http://ns.example.com/ns?val=""""""asd"/>)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'namespace-uri(<p:e xmlns:p="http://ns.example.com/ns?val=""""""asd"/>)'
DirectConElemNamespace-4;Expected executing the XPath 'namespace-uri(<p:e xmlns:p="http://ns.example.com/ns?val=""asd"/>)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'namespace-uri(<p:e xmlns:p="http://ns.example.com/ns?val=""asd"/>)'
DirectConElemNamespace-5;PRSC Error: Failed to parse query 'namespace-uri(<p:e xmlns:p='http://ns.example.com/ns?val=''''''asd'/>)'
DirectConElemNamespace-6;PRSC Error: Failed to parse query 'namespace-uri(<e xmlns='http://ns.example.com/ns?val=''asd'/>)'
distinct-duration-equal-1;Expected executing the XPath 'fn:distinct-values((xs:yearMonthDuration('P0Y'), xs:dayTimeDuration('P0D')))' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPath fn:distinct-values((xs:yearMonthDuration('P0Y'), xs:dayTimeDuration('P0D'))) to resolve to P0M, but instead got P PT
distinct-duration-equal-2;Expected executing the XPath 'fn:distinct-values((xs:yearMonthDuration('P1Y'), xs:dayTimeDuration('P365D')))' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPath fn:distinct-values((xs:yearMonthDuration('P1Y'), xs:dayTimeDuration('P365D'))) to resolve to P1Y P365D, but instead got P PT
ElemContentArray-001;PRSC Error: Failed to parse query ' \n      	<e>{[1, 2, 3]}</e>\n      '
ElemContentArray-002;PRSC Error: Failed to parse query ' \n      	<e>{[<f>{[1,<x/>,3]}</f>, <g>{[4, <x/>, 5]}</g>]}</e>\n      '
emptyorderdecl-1;Expected error code: XQST0069. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare default order empty least; declare default order empty greatest;  "aaa"'
emptyorderdecl-10;PRSC Error: Failed to parse query 'declare default order empty greatest;  for $i in (<a>1</a>,<a>4</a>,<a></a>,<a>7</a>) order by zero-or-one($i/text()) descending return $i'
emptyorderdecl-11;PRSC Error: Failed to parse query 'declare default order empty greatest;  for $i in (<a>1</a>,<a>4</a>,<a></a>,<a></a>,<a>7</a>) order by zero-or-one($i/text()) descending return $i'
emptyorderdecl-12;PRSC Error: Failed to parse query 'declare default order empty greatest;  for $i in (1,4,0 div 0E0,7) order by $i descending return $i'
emptyorderdecl-13;PRSC Error: Failed to parse query 'declare default order empty greatest;  for $i in (1,4,0 div 0E0,0 div 0E0,7) order by $i descending return $i'
emptyorderdecl-14;PRSC Error: Failed to parse query 'declare default order empty least;  for $i in (<a>1</a>,<a>4</a>,<a></a>,<a>7</a>) order by zero-or-one($i/text()) ascending return $i'
emptyorderdecl-15;PRSC Error: Failed to parse query 'declare default order empty least;  for $i in (<a>1</a>,<a>4</a>,<a></a>,<a></a>,<a>7</a>) order by zero-or-one($i/text()) ascending return $i'
emptyorderdecl-16;PRSC Error: Failed to parse query 'declare default order empty least;  for $i in (1,4,0 div 0E0,7) order by $i ascending return $i'
emptyorderdecl-17;PRSC Error: Failed to parse query 'declare default order empty least;  for $i in (1,4,0 div 0E0,0 div 0E0,7) order by $i ascending return $i'
emptyorderdecl-18;PRSC Error: Failed to parse query 'declare default order empty least;  for $i in (<a>1</a>,<a>4</a>,<a></a>,<a>7</a>) order by zero-or-one($i/text()) descending return $i'
emptyorderdecl-19;PRSC Error: Failed to parse query 'declare default order empty least;  for $i in (<a>1</a>,<a>4</a>,<a></a>,<a></a>,<a>7</a>) order by zero-or-one($i/text()) descending return $i'
emptyorderdecl-2;PRSC Error: Failed to parse query 'declare default order empty greatest;  for $i in (<a>1</a>,<a>4</a>,<a></a>,<a>7</a>) order by zero-or-one($i/text()) ascending return $i'
emptyorderdecl-20;PRSC Error: Failed to parse query 'declare default order empty least;  for $i in (1,4,0 div 0E0,7) order by $i descending return $i'
emptyorderdecl-21;PRSC Error: Failed to parse query 'declare default order empty least;  for $i in (1,4,0 div 0E0,0 div 0E0,7) order by $i descending return $i'
emptyorderdecl-22;PRSC Error: Failed to parse query 'declare default order empty greatest;  for $i in (<a>1</a>,<a>4</a>,<a></a>,<a>7</a>) order by zero-or-one($i/text()) ascending empty least return $i'
emptyorderdecl-23;PRSC Error: Failed to parse query 'declare default order empty greatest;  for $i in (1,4,3,0 div 0E0,7) order by $i ascending empty least return $i'
emptyorderdecl-24;PRSC Error: Failed to parse query 'declare default order empty greatest;  for $i in (<a>1</a>,<a>4</a>,<a></a>,<a>7</a>) order by zero-or-one($i/text()) ascending empty greatest return $i'
emptyorderdecl-25;PRSC Error: Failed to parse query 'declare default order empty greatest;  for $i in (1,4,3,0 div 0E0,7) order by $i ascending empty greatest return $i'
emptyorderdecl-26;PRSC Error: Failed to parse query 'declare default order empty least;  for $i in (<a>1</a>,<a>4</a>,<a></a>,<a>7</a>) order by $i/text() ascending empty greatest return $i'
emptyorderdecl-27;PRSC Error: Failed to parse query 'declare default order empty least;  for $i in (1,4,3,0 div 0E0,7) order by $i ascending empty greatest return $i'
emptyorderdecl-28;PRSC Error: Failed to parse query 'declare default order empty least;  for $i in (<a>1</a>,<a>4</a>,<a></a>,<a>7</a>) order by $i/text() ascending empty least return $i'
emptyorderdecl-29;PRSC Error: Failed to parse query 'declare default order empty least;  for $i in (1,4,3,0 div 0E0,7) order by $i ascending empty least return $i'
emptyorderdecl-3;PRSC Error: Failed to parse query 'declare default order empty greatest;  for $i in (<a>1</a>,<a>4</a>,<a></a>,<a></a>,<a>7</a>) order by zero-or-one($i/text()) ascending return $i'
emptyorderdecl-4;PRSC Error: Failed to parse query 'declare default order empty greatest;  for $i in (1,4,0 div 0E0,7) order by $i ascending return $i'
emptyorderdecl-5;PRSC Error: Failed to parse query 'declare default order empty greatest;  for $i in (1,4,0 div 0E0,0 div 0E0,7) order by $i ascending return $i'
emptyorderdecl-6;PRSC Error: Failed to parse query 'declare default order empty greatest;  for $i in (<a>1</a>,<a>4</a>,<a></a>,<a>7</a>) return $i'
emptyorderdecl-7;PRSC Error: Failed to parse query 'declare default order empty least;  for $i in (<a>1</a>,<a>4</a>,<a></a>,<a>7</a>) return $i'
emptyorderdecl-8;PRSC Error: Failed to parse query 'declare default order empty greatest;  for $i in (1,4,0 div 0E0,7) return $i'
emptyorderdecl-9;PRSC Error: Failed to parse query 'declare default order empty least;  for $i in (1,4,0 div 0E0,7) return $i'
eqname-001;PRSC Error: Failed to parse query '<out>{ (<my:a xmlns:my="http://www.example.com/ns/my"><my:b>42</my:b></my:a>) / Q{http://www.example.com/ns/my}b }</out>'
eqname-002;PRSC Error: Failed to parse query '\n            declare variable $Q{http://www.example.com/ns/my}var := 12; \n            <out>{$Q{http://www.example.com/ns/my}var}</out>'
eqname-003;PRSC Error: Failed to parse query '\n        declare function Q{http://www.example.com/ns/my}fn ($a as xs:integer) as xs:integer { $a + 2 }; \n        <out>{Q{http://www.example.com/ns/my}fn(12)}</out>'
eqname-004;PRSC Error: Failed to parse query 'declare function local:fn ($a as Q{http://www.w3.org/2001/XMLSchema}integer) as element(Q{http://www.example.com/ns/my}e) { <e xmlns="http://www.example.com/ns/my">{$a}</e> }; <out>{local:fn(12)}</out>'
eqname-005;PRSC Error: Failed to parse query 'declare option Q{http://www.example.com/ns}option "ignore me"; <a/>'
eqname-006;PRSC Error: Failed to parse query '(# Q{http://www.example.com/ns}pragma ignore me #) {<a/>}'
eqname-007;PRSC Error: Failed to parse query '\n        declare decimal-format Q{http://www.example.com/ns}format grouping-separator="'"; \n        <a xmlns:ex="http://www.example.com/ns">{format-number(1e9, "#'###'###'##0.00", 'ex:format')}</a>\n      '
eqname-008;PRSC Error: Failed to parse query '<out>{ (<a xmlns:ex="http://www.example.com/ns"><ex:b>93.7</ex:b></a>) /Q{http://www&#x2e;example&#x2E;com/ns}b }</out>'
eqname-009;PRSC Error: Failed to parse query '<out>{ (<a xmlns:ex="http://www.example.com/ ns"><ex:b>93.7</ex:b></a>) /Q{ http://www.example.com/ ns }b/namespace-uri() }</out>'
eqname-010;PRSC Error: Failed to parse query '<out>{ (<a xmlns:ex="http://www.example.com/ns?p='23'"><ex:b>93.7</ex:b></a>) /Q{http://www.example.com/ns?p='23'}b }</out>'
eqname-011;PRSC Error: Failed to parse query '<out>{ (<a xmlns:ex="http://www.example.com/ns?p='23'"><ex:b>93.7</ex:b></a>) /Q{http://www.example.com/ns?p='23'}b }</out>'
eqname-012;PRSC Error: Failed to parse query '<out>{ (<my:a xmlns:my="http://www.example.com/ns/my"><my:b>42</my:b></my:a>) / Q{http://www.example.com/ns/my}* + 5 }</out>'
eqname-013;PRSC Error: Failed to parse query '<out xmlns="http://www.example.com/one">{ (<my:a xmlns:my="http://www.example.com/ns/my"><my:b>42</my:b><b xmlns="">93</b></my:a>) / Q{}* + 5 }</out>'
eqname-016;Expected executing the XPath 'string-join(<a foo="3" bar="5" xml:space="preserve"/> / @Q{}*, '.')' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'string-join(<a foo="3" bar="5" xml:space="preserve"/> / @Q{}*, '.') = "3.5"'
eqname-017;PRSC Error: Failed to parse query 'string-join(<a foo="3" bar="5" xml:space="preserve"/> / @Q{http://www.w3.org/XML/1998/namespace}*, '.') = "preserve"'
eqname-018;Skipped test, it was a assert-permutation
eqname-020;The function pi with arity 0 is not registered.
eqname-021;The function pi with arity 0 is not registered.
eqname-022;The function pi with arity 0 is not registered.
eqname-023;Skipped test, it was a assert-permutation
eqname-027;Expected XPath string(\n         /Q{  http://www.example.com/AuctionWatch}AuctionWatchList/\n         Q{   http://www.example.com/AuctionWatch}Auction[2]/\n         @Q{  http://www.example.com/auctioneers#yabadoo}ID) to resolve to 13143816, but instead got 
eqname-029;The function pi with arity 0 is not registered.
eqname-029p;The function pi with arity 0 is not registered.
eqname-031;Not implemented: let expressions with namespace usage.Prefix: , Namespace: t:e:s:t
eqname-032;Not implemented: let expressions with namespace usage.Prefix: , Namespace: %7D
eqname-033;Not implemented: let expressions with namespace usage.Prefix: , Namespace: foo bar
eqname-034;Expected executing the XPath 'let $Q{$Q}a := 12, $Q{//}a := 13, $Q{*}a := 14\n         return $Q{$Q}a + $Q{//}a + $Q{*}a' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPathException with code XQST0046, but got Not implemented: let expressions with namespace usage.Prefix: , Namespace: *
eqname-910;Expected error code: XQST0070. Query succeeded with result: 
eqname-913;Expected error code: XQST0039. Query succeeded with result: 15
errors-and-optimization-1;The function error with arity 2 is not registered.
errors-and-optimization-2;Expected error code: FOAR0001. Found error code: FOCA0001 with error message: Overflow when creating a Decimal from Infinity.
errors-and-optimization-3;PRSC Error: Failed to parse query 'count( let $N := <n x="this ain't no date"/> return $N[if (@x castable as xs:date) then xs:date(@x) gt xs:date("2000-01-01") else false()] ) = 0'
errors-and-optimization-5;Expected error code: XPTY0004. Query succeeded with result: False
errors-and-optimization-7;Expected XPathException with code XPST0081, but got Not implemented: let expressions with namespace usage.Prefix: unbound, Namespace: 
except-100;PRSC Error: Failed to parse query '\n         <out>{\n            let $xml := parse-xml('<t><a/><b/><c/></t>'), \n                $nodes := ($xml/*/a, $xml/*/c, $xml/*/b, $xml/*/b) \n            return $nodes => fold-left((), function($all, $this) {$all, $this except $all})\n         }</out>\n      '
ExpandedQNameConstructFunc001;PRSC Error: Failed to parse query 'element {fn:QName("http://www.example.com/example", "person")}{ "test" }'
ExpandedQNameConstructFunc002;PRSC Error: Failed to parse query 'element {fn:QName("http://www.example.com/example", "ht:person")}{ "test" }'
ExpandedQNameConstructFunc003;PRSC Error: Failed to parse query 'element {fn:QName("", "person")}{ "test" }'
ExpandedQNameConstructFunc004;PRSC Error: Failed to parse query 'element {fn:QName((), "person")}{ "test" }'
ExpandedQNameConstructFunc005;Expected XPathException with code FOCA0002, but got Haven't implemented Qnames from: person:ht
ExpandedQNameConstructFunc007;Expected XPathException with code FOCA0002, but got Haven't implemented Qnames from: 1person:
ExpandedQNameConstructFunc008;Expected XPathException with code FOCA0002, but got Haven't implemented Qnames from: @person:
ExpandedQNameConstructFunc009;Expected XPathException with code FOCA0002, but got Haven't implemented Qnames from: -person:
ExpandedQNameConstructFunc010;Expected XPathException with code FOCA0002, but got Haven't implemented Qnames from: <person>:
ExpandedQNameConstructFunc011;Expected XPathException with code FOCA0002, but got Haven't implemented Qnames from: person:
ExpandedQNameConstructFunc012;Expected XPathException with code FOCA0002, but got Haven't implemented Qnames from: :person
ExpandedQNameConstructFunc017;PRSC Error: Failed to parse query 'element {fn:QName( "http://www.example.com/example", string((//FolderName)[2]) )}{ "test" }'
ExpandedQNameConstructFunc018;PRSC Error: Failed to parse query 'element {fn:QName( concat('http://www.example.com/', string((//FolderName)[2])), "people" )}{ "test" }'
ExpandedQNameConstructFunc019;Expected error code: FOCA0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'element {fn:QName( "http://www.example.com/example", "" )}{ "test" }'
ExpandedQNameConstructFunc020;PRSC Error: Failed to parse query 'declare namespace ht="http://www.example.com/example"; element {fn:QName( "http://www.example.com/another-example", "ht:person" )}{ "test" }'
ExpandedQNameConstructFunc021;PRSC Error: Failed to parse query 'declare namespace ht="http://www.example.com/example"; element {fn:QName( "http://www.example.com/example", "ht2:person" )}{ "test" }'
externalcontextitem-1;Expected error code: XPDY0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare namespace eg = "http://example.org"; \n        declare function eg:noContextFunction() { name }; \n        eg:noContextFunction()'
externalcontextitem-23;Expected executing the XPath './works/employee[1]' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XPDY0002. Query succeeded with result: 
extvardeclwithouttype-1;Expected executing the XPath 'declare variable $x external; fn:string($x)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare variable $x external; fn:string($x)'
extvardeclwithouttype-10;Expected executing the XPath 'declare variable $x external; $x + $x' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare variable $x external; $x + $x = 2'
extvardeclwithouttype-11;Expected executing the XPath 'declare variable $x external; $x * $x' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare variable $x external; $x * $x = 16'
extvardeclwithouttype-12;Expected executing the XPath 'declare variable $x external; $x - 1' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare variable $x external; $x - 1 = 2'
extvardeclwithouttype-13;Expected executing the XPath 'declare variable $x external; $x idiv 2' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare variable $x external; $x idiv 2 = 5'
extvardeclwithouttype-14;Expected executing the XPath 'declare variable $x external; $x div 10' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare variable $x external; $x div 10 = 2'
extvardeclwithouttype-15;Expected executing the XPath 'declare variable $x external; $x mod 2' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare variable $x external; $x mod 2 = 1'
extvardeclwithouttype-16;Expected executing the XPath 'declare variable $x external; $x and fn:false()' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare variable $x external; $x and fn:false()'
extvardeclwithouttype-17;Expected executing the XPath 'declare variable $x external; $x or fn:false()' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare variable $x external; $x or fn:false()'
extvardeclwithouttype-18;PRSC Error: Failed to parse query 'let $result := (declare variable $x external; $x) return $result ge 2.33333333333333'
extvardeclwithouttype-19;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $x external; xs:dateTime($x)'
extvardeclwithouttype-2;Expected executing the XPath 'declare variable $x external; $x' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare variable $x external; $x'
extvardeclwithouttype-20;Expected executing the XPath 'declare variable $x external; fn:upper-case($x)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare variable $x external; fn:upper-case($x)'
extvardeclwithouttype-21;Expected executing the XPath 'declare variable $x external; fn:lower-case($x)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare variable $x external; fn:lower-case($x)'
extvardeclwithouttype-22;Expected executing the XPath 'declare variable $x external; fn:not($x)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare variable $x external; fn:not($x)'
extvardeclwithouttype-23;Expected error code: XPDY0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $x external; $x'
extvardeclwithouttype-24;PRSC Error: Failed to parse query 'declare namespace test = "http://www.w3.org/fots/example-test-namespace";\n         declare variable $test:x external; $test:x = 2'
extvardeclwithouttype-3;Expected executing the XPath 'declare variable $x external; xs:integer($x)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare variable $x external; xs:integer($x) = 2'
extvardeclwithouttype-4;Expected executing the XPath 'declare variable $x external; $x' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare variable $x external; $x = 120'
extvardeclwithouttype-5;Expected executing the XPath 'declare variable $x external; $x' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare variable $x external; $x = 1'
extvardeclwithouttype-6;Expected executing the XPath 'declare variable $x external; xs:float($x)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare variable $x external; xs:float($x)'
extvardeclwithouttype-7;Expected executing the XPath 'declare variable $x external; $x' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare variable $x external; $x'
extvardeclwithouttype-8;Expected executing the XPath 'declare variable $x external; $x + $x' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare variable $x external; $x + $x = 4'
extvardeclwithouttype-9;Expected executing the XPath 'declare variable $x external; $x' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare variable $x external; $x = 2'
extvardeclwithtype-1;PRSC Error: Failed to parse query 'declare variable $x as xs:string external; $x'
extvardeclwithtype-10;PRSC Error: Failed to parse query 'declare variable $x as xs:integer external; $x + $x = 2'
extvardeclwithtype-11;PRSC Error: Failed to parse query 'declare variable $x as xs:integer external; $x * $x = 16'
extvardeclwithtype-12;PRSC Error: Failed to parse query 'declare variable $x as xs:integer external; $x - xs:integer(1) = 2'
extvardeclwithtype-13;PRSC Error: Failed to parse query 'declare variable $x as xs:integer external; $x idiv xs:integer(2) = 5'
extvardeclwithtype-14;PRSC Error: Failed to parse query 'declare variable $x as xs:integer external; $x div xs:integer(10) = 2'
extvardeclwithtype-15;PRSC Error: Failed to parse query 'declare variable $x as xs:integer external; $x mod xs:integer(2) = 1'
extvardeclwithtype-16;PRSC Error: Failed to parse query 'declare variable $x as xs:boolean external; $x and fn:false()'
extvardeclwithtype-17;PRSC Error: Failed to parse query 'declare variable $x as xs:boolean external; $x or fn:false()'
extvardeclwithtype-18;Expected executing the XPath 'declare variable $x as xs:float external; $x' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare variable $x as xs:float external; $x'
extvardeclwithtype-19;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $x as xs:dateTime external; $x'
extvardeclwithtype-2;PRSC Error: Failed to parse query 'declare variable $x as xs:date external; fn:string($x)'
extvardeclwithtype-20;PRSC Error: Failed to parse query 'declare variable $x as xs:string external; fn:upper-case($x)'
extvardeclwithtype-21;PRSC Error: Failed to parse query 'declare variable $x as xs:string external; fn:lower-case($x)'
extvardeclwithtype-22;PRSC Error: Failed to parse query 'declare variable $x as xs:boolean external; fn:not($x)'
extvardeclwithtype-24;PRSC Error: Failed to parse query 'declare namespace test = "http://www.w3.org/fots/example-test-namespace";\n         declare variable $test:x as xs:integer external; $test:x = 2'
extvardeclwithtype-3;PRSC Error: Failed to parse query 'declare variable $x as xs:integer external; $x = 2'
extvardeclwithtype-4;PRSC Error: Failed to parse query 'declare variable $x as xs:double external; $x = 120'
extvardeclwithtype-5;PRSC Error: Failed to parse query 'declare variable $x as xs:boolean external; fn:string($x)'
extvardeclwithtype-6;Expected executing the XPath 'declare variable $x as xs:float external; $x' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare variable $x as xs:float external; $x'
extvardeclwithtype-7;PRSC Error: Failed to parse query 'declare variable $x as xs:decimal external; $x'
extvardeclwithtype-8;PRSC Error: Failed to parse query 'declare variable $x as xs:integer external; $x + $x = 4'
extvardeclwithtype-9;PRSC Error: Failed to parse query 'declare variable $x as xs:integer external; $x = 2'
extvardef-001;PRSC Error: Failed to parse query 'declare variable $ext external := 0; <a>{$ext}</a>'
extvardef-001a;PRSC Error: Failed to parse query 'declare variable $ext external := 0; $ext = 5'
extvardef-002;PRSC Error: Failed to parse query 'declare variable $ext as xs:integer external := 0; <a>{$ext}</a>'
extvardef-002a;PRSC Error: Failed to parse query 'declare variable $ext as xs:integer external := 0; <a>{$ext}</a>'
extvardef-002b;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $ext as xs:integer external := 0; <a>{$ext}</a>'
extvardef-003;PRSC Error: Failed to parse query 'declare variable $ext as xs:integer* external := (0,1,2); <a>{sum($ext)}</a>'
extvardef-003a;PRSC Error: Failed to parse query 'declare variable $ext as xs:integer* external := (0,1,2); <a>{sum($ext)}</a>'
extvardef-003b;PRSC Error: Failed to parse query 'declare variable $ext as xs:integer* external := (0,1,2); <a>{sum($ext)}</a>'
extvardef-006;PRSC Error: Failed to parse query '\n         declare variable $var as xs:integer := 17; \n         declare variable $ext as element(a) external := <a>{$var}</a>; \n         <out>{$ext}</out>'
extvardef-006a;PRSC Error: Failed to parse query '\n        declare variable $var as xs:integer := 17; \n        declare variable $ext as xs:integer external := $var; \n        <out>{$ext}</out>\n      '
extvardef-006b;Expected executing the XPath 'declare variable $var as xs:integer := 17; \n        declare variable $ext as xs:integer external := <a>{$var}</a>; \n        <out>{$ext}</out>' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare variable $var as xs:integer := 17; \n        declare variable $ext as xs:integer external := <a>{$var}</a>; \n        <out>{$ext}</out>\n      '
extvardef-007;PRSC Error: Failed to parse query '\n        declare variable $ext as xs:date external := current-date() + xs:dayTimeDuration('P30D'); \n        $ext gt xs:date('2008-12-30')\n      '
extvardef-008;Expected error code: XPDY0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $x external; $x'
extvardef-009;Expected executing the XPath 'declare variable $x external; "result"' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare variable $x external; "result"'
extvardef-010;PRSC Error: Failed to parse query '\n        declare variable $a := 1;\n        declare variable $x external := $a + $b;\n        declare variable $b external := 2;\n        $x\n       = 3'
extvardef-010a;PRSC Error: Failed to parse query '\n        declare variable $a external := 6 + local:foo();\n        declare variable $b external := 12;\n        declare function local:foo() { $b + 10 };\n        $a\n       = 28'
extvardef-011;Expected error code: XQDY0054. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare variable $a := $x;\n        declare variable $x external := $a + 2;\n        $x\n      '
extvardef-011a;Expected error code: XQDY0054. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare variable $x external := 3 + local:foo();\n        declare variable $b external := 2 + local:foo();\n\n        declare function local:foo()\n        {\n         $b\n         };\n\n         $x\n      '
extvardef-012;PRSC Error: Failed to parse query '\n        declare function local:aaa() { 1 };\n        declare variable $x external := local:bbb() + local:aaa();\n        declare function local:bbb() { 2 };\n        $x \n       = 3'
extvardef-013;PRSC Error: Failed to parse query '\n        declare variable $y external;\n        declare variable $z external := 10;\n        declare function local:aaa() { $z };\n        declare variable $x external := local:bbb() + local:aaa() + 2;\n        declare function local:bbb() { $y };\n        $x \n       = 28'
extvardef-014;PRSC Error: Failed to parse query '\n        declare variable $x external := /works/employee[@name eq "Jane Doe 1"];\n        fn:count($x)\n       = 1'
extvardef-015;Expected executing the XPath 'declare variable $y := /works/employee;\n        declare context item := $y[9];\n        declare variable $x external := fn:position();\n        $x' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XPDY0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare variable $y := /works/employee;\n        declare context item := $y[9];\n        declare variable $x external := fn:position();\n        $x\n      '
extvardef-016a;PRSC Error: Failed to parse query '\n        declare variable $y := (<a>1</a>,<a>2</a>,<a>3</a>,<a>4</a>,<a>5</a>,<a>6</a>,<a>7</a>,<a>8</a>,<a>9</a>,<a>10</a>);\n        declare context item := $y[3];\n        declare variable $x external := fn:position();\n        $x\n       = 1'
extvardef-016b;PRSC Error: Failed to parse query '\n        declare variable $y := <root><a>1</a>,<a>2</a>,<a>3</a>,<a>4</a>,<a>5</a>,<a>6</a>,<a>7</a>,<a>8</a>,<a>9</a>,<a>10</a></root>;\n        declare context item := $y;\n        declare variable $x external := fn:last();\n        $x\n       = 1'
extvardef-017;PRSC Error: Failed to parse query '\n        declare variable $x as xs:decimal external := xs:integer(10);\n        $x\n       = 10'
extvardef-018;Expected error code: XPST0008. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare variable $x external := $a + 10;\n        $x\n      '
extvardef-019;PRSC Error: Failed to parse query '\n        declare variable $x external := 10;\n        declare variable $y external := 18 + $x;\n        $y\n       = 28'
extvardef-020;PRSC Error: Failed to parse query '\n        declare variable $x external := 5;\n        declare variable $a := $x + 2;\n        declare function local:foo() {$x +$a};\n        declare variable $y external := 11 + local:foo() + $x;\n        $y\n       = 28'
extvardef-021;PRSC Error: Failed to parse query '\n        declare variable $x as xs:integer external := xs:int(5);\n        declare variable $y as xs:decimal external := $x;\n        $y instance of xs:decimal\n       = fn:true()'
extvardef-022;PRSC Error: Failed to parse query '\n        declare function local:foo() {\n          $x\n        };\n        declare variable $x external := 5;\n        local:foo()\n       = 5'
extvardef-023;PRSC Error: Failed to parse query '\n        declare construction strip; \n        import schema default element namespace "http://www.w3.org/XQueryTest/hats";\n        declare variable $x :=\n          validate strict {\n            <abf> \n              <a/> <b/> <b/> <f/> <f/> <f/> \n            </abf>};\n        $x\n      '
extvardef-024;Expected error code: XQDY0084. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare construction strip; \n        import schema default element namespace "http://www.w3.org/XQueryTest/hats"; \n        declare variable $x external :=\n          validate strict {\n            <abc> \n              <a/> <b/> <b/> <f/> <f/> <f/> \n            </abc>};\n        $x\n      '
extvardef-025;PRSC Error: Failed to parse query '\n        declare construction strip; \n        import schema namespace hats="http://www.w3.org/XQueryTest/hats"; \n        declare variable $x as schema-element(hats:abf) external :=\n          validate strict {\n            <hats:abf> \n              <hats:a/> <hats:b/> <hats:b/> <hats:f/> <hats:f/> <hats:f/> \n            </hats:abf>};\n        $x\n      '
extvardef-026;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare construction strip; \n        import schema namespace hats="http://www.w3.org/XQueryTest/hats"; \n        declare variable $x as schema-element(hats:s) external :=\n          validate strict {\n            <hats:abf> \n              <hats:a/> <hats:b/> <hats:b/> <hats:f/> <hats:f/> <hats:f/> \n            </hats:abf>};\n        $x\n      '
extvardef-027;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare construction strip; \n        import schema namespace hats="http://www.w3.org/XQueryTest/hats"; \n        declare variable $x as schema-element(hats:s) external :=\n            <hats:abf> \n              <hats:a/> <hats:b/> <hats:b/> <hats:f/> <hats:f/> <hats:f/> \n            </hats:abf>;\n        $x\n      '
filter-003;PRSC Error: Failed to parse query '(let $data := (/employees)\n              return filter($data/emp, function($x as element(emp)){xs:int($x/@salary) lt 300})) instance of $element(emp)*'
filter-006;PRSC Error: Failed to parse query 'deep-equal((\n            filter((1 to 20), function($i){<a>{1 - ($i mod 2)}</a>})\n        ), (2, 4, 6, 8, 10, 12, 14, 16, 18, 20))'
filter-007;PRSC Error: Failed to parse query 'deep-equal((\n            filter((4, 5, 6), map{4: true(), 5: false(), 6: true()})\n        ), (4, 6))'
filter-008;PRSC Error: Failed to parse query 'deep-equal((\n            filter((4, 5, 6), [1, 2, 3, true(), false(), true()])\n        ), (4, 6))'
filter-904;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function current-date with arity 0 is not registered.
filter-limits-005;PRSC Error: Failed to parse query '\nfor $i in (-1, 0, 1, 2147483647, 2147483648, 2147483649, 4294967295, 4294967296, 4294967297,\n  -2147483647, -2147483648, -2147483649, -4294967295, -4294967296, -4294967297)\nreturn $i[number(<_>{ $i }</_>)]\n      '
filter-limits-007;PRSC Error: Failed to parse query '\nfor $i in (-1, 0, 1, 2147483647, 2147483648, 2147483649, 4294967295, 4294967296, 4294967297,\n  -2147483647, -2147483648, -2147483649, -4294967295, -4294967296, -4294967297) ! <_>{ . }</_>\nreturn $i[number($i)]\n      '
fn-abs-1;The function error with arity 0 is not registered.
fn-abs-more-args-001;PRSC Error: Failed to parse query '(fn:abs(xs:double("-0"))) instance of $xs:double'
fn-abs-more-args-002;Expected XPath fn:abs(xs:double("-INF")) to resolve to INF, but instead got Infinity
fn-abs-more-args-003;Expected XPath fn:abs(xs:double("INF")) to resolve to INF, but instead got Infinity
fn-abs-more-args-004-dyn;PRSC Error: Failed to parse query 'declare variable $NaN-double external; fn:abs($NaN-double)'
fn-abs-more-args-004;Expected XPath fn:abs(xs:double("NaN")) to resolve to NaN, but instead got Infinity
fn-abs-more-args-005;Expected XPath fn:abs(xs:double("NaN")) to resolve to NaN, but instead got Infinity
fn-abs-more-args-006;PRSC Error: Failed to parse query '(fn:abs(xs:decimal("-0"))) instance of $xs:decimal'
fn-abs-more-args-007;PRSC Error: Failed to parse query '(fn:abs(xs:decimal("0"))) instance of $xs:decimal'
fn-abs-more-args-008;PRSC Error: Failed to parse query '(fn:abs(xs:float("-0"))) instance of $xs:float'
fn-abs-more-args-009;Expected XPath fn:abs(xs:float("-INF")) to resolve to INF, but instead got Infinity
fn-abs-more-args-010;Expected XPath fn:abs(xs:float("INF")) to resolve to INF, but instead got Infinity
fn-abs-more-args-011;Expected XPath fn:abs(xs:float("NaN")) to resolve to NaN, but instead got Infinity
fn-abs-more-args-012;Expected XPath fn:abs(xs:float("NaN")) to resolve to NaN, but instead got Infinity
fn-abs-more-args-013;PRSC Error: Failed to parse query '(fn:abs(xs:int("0"))) instance of $xs:integer'
fn-abs-more-args-014;PRSC Error: Failed to parse query '(fn:abs(xs:int("-0"))) instance of $xs:integer'
fn-abs-more-args-015;PRSC Error: Failed to parse query '(fn:abs(xs:integer("0"))) instance of $xs:integer'
fn-abs-more-args-016;PRSC Error: Failed to parse query '(fn:abs(xs:integer("-0"))) instance of $xs:integer'
fn-abs-more-args-017;PRSC Error: Failed to parse query '(fn:abs(xs:long("0"))) instance of $xs:integer'
fn-abs-more-args-018;PRSC Error: Failed to parse query '(fn:abs(xs:long("-0"))) instance of $xs:integer'
fn-abs-more-args-019;PRSC Error: Failed to parse query '(fn:abs(xs:nonNegativeInteger("-0"))) instance of $xs:integer'
fn-abs-more-args-020;PRSC Error: Failed to parse query '(fn:abs(xs:nonPositiveInteger("-0"))) instance of $xs:integer'
fn-abs-more-args-021;PRSC Error: Failed to parse query '(fn:abs(xs:short("0"))) instance of $xs:integer'
fn-abs-more-args-022;PRSC Error: Failed to parse query '(fn:abs(xs:short("-0"))) instance of $xs:integer'
fn-abs-more-args-023;PRSC Error: Failed to parse query '(fn:abs(xs:unsignedLong("-0"))) instance of $xs:integer'
fn-abs-more-args-024;PRSC Error: Failed to parse query '(fn:abs(xs:unsignedShort("-0"))) instance of $xs:integer'
fn-abs-more-args-025;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
fn-abs-more-args-026;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
fn-abs-more-args-027;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
fn-abs-more-args-028;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
fn-abs-more-args-041;Expected error code: FORG0001. Query succeeded with result: 0
fn-abs-more-args-042;Expected error code: FORG0001. Query succeeded with result: 0
fn-abs-more-args-043;Expected error code: FORG0001. Query succeeded with result: 2
fn-abs-more-args-048;Expected error code: FORG0001. Query succeeded with result: 2
fn-abs-more-args-053;Expected error code: FORG0001. Query succeeded with result: 2
fn-abs-more-args-058;Expected error code: FORG0001. Query succeeded with result: 0
fn-abs-more-args-059;Expected error code: FORG0001. Query succeeded with result: 0
fn-abs-more-args-060;Expected error code: FORG0001. Query succeeded with result: 2
fn-abs-more-args-086;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
fn-absdbl1args-1-dyn;PRSC Error: Failed to parse query 'declare variable $zero-double external; fn:abs($zero-double + xs:double("-1.7976931348623157E308")) = 1.7976931348623157E308'
fn-absdbl1args-1;PRSC Error: Failed to parse query 'fn:abs(xs:double("-1.7976931348623157E308")) = 1.7976931348623157E308'
fn-absdbl1args-2;PRSC Error: Failed to parse query 'fn:abs(xs:double("0")) = 0.0e0'
fn-absdbl1args-3;PRSC Error: Failed to parse query 'fn:abs(xs:double("1.7976931348623157E308")) = 1.7976931348623157E308'
fn-absdec1args-1-dyn;PRSC Error: Failed to parse query 'declare variable $zero-int external; fn:abs($zero-int + xs:decimal("617375191608514839")) = 617375191608514839'
fn-absdec1args-1;PRSC Error: Failed to parse query '(fn:abs(xs:decimal("-999999999999999999"))) instance of $xs:decimal'
fn-absdec1args-2;PRSC Error: Failed to parse query '(fn:abs(xs:decimal("617375191608514839"))) instance of $xs:decimal'
fn-absdec1args-3;PRSC Error: Failed to parse query '(fn:abs(xs:decimal("999999999999999999"))) instance of $xs:decimal'
fn-absflt1args-1-dyn;PRSC Error: Failed to parse query 'declare variable $zero-float external; fn:abs($zero-float + xs:float("-3.4028235E38")) = xs:float(3.4028235E38)'
fn-absflt1args-1;PRSC Error: Failed to parse query 'fn:abs(xs:float("-3.4028235E38")) = xs:float(3.4028235E38)'
fn-absflt1args-2;PRSC Error: Failed to parse query 'fn:abs(xs:float("0")) = 0.0e0'
fn-absflt1args-3;PRSC Error: Failed to parse query 'fn:abs(xs:float("3.4028235E38")) = xs:float(3.4028235E38)'
fn-absint1args-1-dyn;PRSC Error: Failed to parse query 'declare variable $zero-int external; fn:abs($zero-int + xs:int("-2147483648")) = 2147483648'
fn-absint1args-1;PRSC Error: Failed to parse query '(fn:abs(xs:int("-2147483648"))) instance of $xs:integer'
fn-absint1args-2;PRSC Error: Failed to parse query '(fn:abs(xs:int("-1873914410"))) instance of $xs:integer'
fn-absint1args-3;PRSC Error: Failed to parse query '(fn:abs(xs:int("2147483647"))) instance of $xs:integer'
fn-absintg1args-1;PRSC Error: Failed to parse query '(fn:abs(xs:integer("-999999999999999999"))) instance of $xs:integer'
fn-absintg1args-2;PRSC Error: Failed to parse query '(fn:abs(xs:integer("830993497117024304"))) instance of $xs:integer'
fn-absintg1args-3;PRSC Error: Failed to parse query '(fn:abs(xs:integer("999999999999999999"))) instance of $xs:integer'
fn-abslng1args-1;PRSC Error: Failed to parse query '(fn:abs(xs:long("-92233720368547758"))) instance of $xs:integer'
fn-abslng1args-2;PRSC Error: Failed to parse query '(fn:abs(xs:long("-47175562203048468"))) instance of $xs:integer'
fn-abslng1args-3;PRSC Error: Failed to parse query '(fn:abs(xs:long("92233720368547758"))) instance of $xs:integer'
fn-absnint1args-1;PRSC Error: Failed to parse query '(fn:abs(xs:negativeInteger("-999999999999999999"))) instance of $xs:integer'
fn-absnint1args-2;PRSC Error: Failed to parse query '(fn:abs(xs:negativeInteger("-297014075999096793"))) instance of $xs:integer'
fn-absnint1args-3;PRSC Error: Failed to parse query '(fn:abs(xs:negativeInteger("-1"))) instance of $xs:integer'
fn-absnni1args-1;PRSC Error: Failed to parse query '(fn:abs(xs:nonNegativeInteger("0"))) instance of $xs:integer'
fn-absnni1args-2;PRSC Error: Failed to parse query '(fn:abs(xs:nonNegativeInteger("303884545991464527"))) instance of $xs:integer'
fn-absnni1args-3;PRSC Error: Failed to parse query '(fn:abs(xs:nonNegativeInteger("999999999999999999"))) instance of $xs:integer'
fn-absnpi1args-1;PRSC Error: Failed to parse query '(fn:abs(xs:nonPositiveInteger("-999999999999999999"))) instance of $xs:integer'
fn-absnpi1args-2;PRSC Error: Failed to parse query '(fn:abs(xs:nonPositiveInteger("-475688437271870490"))) instance of $xs:integer'
fn-absnpi1args-3;PRSC Error: Failed to parse query '(fn:abs(xs:nonPositiveInteger("0"))) instance of $xs:integer'
fn-abspint1args-1;PRSC Error: Failed to parse query '(fn:abs(xs:positiveInteger("1"))) instance of $xs:integer'
fn-abspint1args-2;PRSC Error: Failed to parse query '(fn:abs(xs:positiveInteger("52704602390610033"))) instance of $xs:integer'
fn-abspint1args-3;PRSC Error: Failed to parse query '(fn:abs(xs:positiveInteger("999999999999999999"))) instance of $xs:integer'
fn-abssht1args-1;PRSC Error: Failed to parse query '(fn:abs(xs:short("-32768"))) instance of $xs:integer'
fn-abssht1args-2;PRSC Error: Failed to parse query '(fn:abs(xs:short("-5324"))) instance of $xs:integer'
fn-abssht1args-3;PRSC Error: Failed to parse query '(fn:abs(xs:short("32767"))) instance of $xs:integer'
fn-absulng1args-1;PRSC Error: Failed to parse query '(fn:abs(xs:unsignedLong("0"))) instance of $xs:integer'
fn-absulng1args-2;PRSC Error: Failed to parse query '(fn:abs(xs:unsignedLong("130747108607674654"))) instance of $xs:integer'
fn-absulng1args-3;PRSC Error: Failed to parse query '(fn:abs(xs:unsignedLong("184467440737095516"))) instance of $xs:integer'
fn-absusht1args-1;PRSC Error: Failed to parse query '(fn:abs(xs:unsignedShort("0"))) instance of $xs:integer'
fn-absusht1args-2;PRSC Error: Failed to parse query '(fn:abs(xs:unsignedShort("44633"))) instance of $xs:integer'
fn-absusht1args-3;PRSC Error: Failed to parse query '(fn:abs(xs:unsignedShort("65535"))) instance of $xs:integer'
fn-avg-10;PRSC Error: Failed to parse query 'avg([1,2,3,4,5]) = 3'
fn-avg-4;Expected XPath avg(for $x in 1 to 10 return xs:dayTimeDuration(concat("PT",$x,"H"))) to resolve to PT5H30M, but instead got PT
fn-avg-6;Expected XPath avg(for $x in 1 to 9 return xs:yearMonthDuration(concat("P",$x,"M"))) to resolve to P5M, but instead got P
fn-avg-mix-args-002;Expected XPath fn:avg(( xs:yearMonthDuration("P20Y") , xs:yearMonthDuration("P10M") )) to resolve to P10Y5M, but instead got P
fn-avg-mix-args-004;Overflow when creating a Int64 from NaN.
fn-avg-mix-args-005;Overflow when creating a Int64 from NaN.
fn-avg-mix-args-009;Expected executing the XPath 'fn:avg( ( ( xs:decimal("-1.000000000001"), xs:integer("-100"))))' to resolve to one of the expected results, but got System.OverflowException: Value was either too large or too small for a Decimal.
fn-avg-mix-args-010;Expected XPath fn:avg(( (xs:decimal("1.01"), xs:integer("12") ))) to resolve to 6.505
fn-avg-mix-args-011;Overflow when creating a Int64 from NaN.
fn-avg-mix-args-012;Overflow when creating a Int64 from -1.7014117331926443E+38.
fn-avg-mix-args-013;Expected XPath fn:avg(( (xs:float("0"), xs:decimal("-999999999999999999") ))) eq xs:float("-4.9999999999999999E17") to resolve to true
fn-avg-mix-args-014;Overflow when creating a Int64 from 1.7014117331926443E+38.
fn-avg-mix-args-015;Expected XPath fn:avg(( (xs:float("-0"), xs:decimal("-999999999999999999") ))) eq xs:float("-4.9999999999999999E17") to resolve to true
fn-avg-mix-args-016;Overflow when creating a Int64 from NaN.
fn-avg-mix-args-017;Overflow when creating a Int64 from Infinity.
fn-avg-mix-args-018;Expected XPath fn:avg(( (xs:float("1.01")))) to resolve to 1.01
fn-avg-mix-args-019;Overflow when creating a Int64 from -Infinity.
fn-avg-mix-args-021;PRSC Error: Failed to parse query 'fn:avg(( (xs:double("0"), xs:integer("-999999999999999999") ) )) = -5.0E17'
fn-avg-mix-args-023;PRSC Error: Failed to parse query 'fn:avg(( (xs:double("-0"), xs:integer("-999999999999999999") ) )) = -5.0E17'
fn-avg-mix-args-024;Expected XPath fn:avg(( (xs:double("-INF"), xs:integer("-999999999999999999") ) )) to resolve to -INF, but instead got -Infinity
fn-avg-mix-args-025;Expected XPath fn:avg(( (xs:double("NaN"), xs:integer("-999999999999999999") ) )) to resolve to NaN, but instead got Infinity
fn-avg-mix-args-026;Expected XPath fn:avg(( (xs:double("1.34"), xs:float("INF")))) to resolve to INF, but instead got Infinity
fn-avg-mix-args-027;Expected XPath fn:avg(( (xs:double("INF"), 2, 3))) to resolve to INF, but instead got Infinity
fn-avg-mix-args-034;Expected XPathException with code FORG0006, but got Type casting to XsAnyUri has not been implemented yet.
fn-avg-mix-args-042;Expected XPathException with code FORG0006, but got Type casting to XsAnyUri has not been implemented yet.
fn-avg-mix-args-066;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
fn-avgdbl1args-1;PRSC Error: Failed to parse query 'fn:avg((xs:double("-1.7976931348623157E308"))) = -1.7976931348623157E308'
fn-avgdbl1args-3;PRSC Error: Failed to parse query 'fn:avg((xs:double("1.7976931348623157E308"))) = 1.7976931348623157E308'
fn-avgdbl2args-1;PRSC Error: Failed to parse query 'fn:avg((xs:double("-1.7976931348623157E150"),xs:double("-1.7976931348623157E150"))) eq -1.7976931348623157E150'
fn-avgdbl2args-2;PRSC Error: Failed to parse query 'fn:avg((xs:double("0"),xs:double("-1.7976931348623157E308"))) eq -8.9884656743115785E307'
fn-avgdbl2args-4;PRSC Error: Failed to parse query 'fn:avg((xs:double("-1.7976931348623157E308"),xs:double("0"))) eq -8.9884656743115785E307'
fn-avgdec1args-1;Expected XPath fn:avg((xs:decimal("-999999999999999999"))) to resolve to -999999999999999999
fn-avgdec1args-2;Expected XPath fn:avg((xs:decimal("617375191608514839"))) to resolve to 617375191608514839
fn-avgdec1args-3;Expected XPath fn:avg((xs:decimal("999999999999999999"))) to resolve to 999999999999999999
fn-avgdec2args-1;Expected XPath fn:avg((xs:decimal("-999999999999999999"),xs:decimal("-999999999999999999"))) to resolve to -999999999999999999
fn-avgdec2args-2;Expected XPath fn:avg((xs:decimal("617375191608514839"),xs:decimal("-999999999999999999"))) to resolve to -191312404195742580
fn-avgdec2args-4;Expected XPath fn:avg((xs:decimal("-999999999999999999"),xs:decimal("617375191608514839"))) to resolve to -191312404195742580
fn-avgflt1args-1;Overflow when creating a Int64 from -3.4028234663852886E+38.
fn-avgflt1args-3;Overflow when creating a Int64 from 3.4028234663852886E+38.
fn-avgflt2args-1;Expected executing the XPath 'fn:avg((xs:float("-3.4028235E38"),xs:float("-3.4028235E38")))' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: Overflow when creating a Int64 from -3.4028234663852886E+38.
fn-avgflt2args-2;Overflow when creating a Int64 from -1.7014117331926443E+38.
fn-avgflt2args-4;Overflow when creating a Int64 from -1.7014117331926443E+38.
fn-avgint2args-3;Expected XPath fn:avg((xs:int("2147483647"),xs:int("-2147483648"))) to resolve to -0.5
fn-avgint2args-5;Expected XPath fn:avg((xs:int("-2147483648"),xs:int("2147483647"))) to resolve to -0.5
fn-avgintg1args-1;Expected XPath fn:avg((xs:integer("-999999999999999999"))) to resolve to -999999999999999999
fn-avgintg1args-2;Expected XPath fn:avg((xs:integer("830993497117024304"))) to resolve to 830993497117024304
fn-avgintg1args-3;Expected XPath fn:avg((xs:integer("999999999999999999"))) to resolve to 999999999999999999
fn-avgintg2args-1;Expected XPath fn:avg((xs:integer("-999999999999999999"),xs:integer("-999999999999999999"))) to resolve to -999999999999999999
fn-avgintg2args-2;Expected XPath fn:avg((xs:integer("830993497117024304"),xs:integer("-999999999999999999"))) to resolve to -84503251441487847.5
fn-avgintg2args-4;Expected XPath fn:avg((xs:integer("-999999999999999999"),xs:integer("830993497117024304"))) to resolve to -84503251441487847.5
fn-avglng1args-1;Expected XPath fn:avg((xs:long("-92233720368547758"))) to resolve to -92233720368547758
fn-avglng1args-2;Expected XPath fn:avg((xs:long("-47175562203048468"))) to resolve to -47175562203048468
fn-avglng1args-3;Expected XPath fn:avg((xs:long("92233720368547758"))) to resolve to 92233720368547758
fn-avglng2args-1;Expected XPath fn:avg((xs:long("-92233720368547758"),xs:long("-92233720368547758"))) to resolve to -92233720368547758
fn-avglng2args-2;Expected XPath fn:avg((xs:long("-47175562203048468"),xs:long("-92233720368547758"))) to resolve to -69704641285798113
fn-avglng2args-4;Expected XPath fn:avg((xs:long("-92233720368547758"),xs:long("-47175562203048468"))) to resolve to -69704641285798113
fn-avgnint1args-1;Expected XPath fn:avg((xs:negativeInteger("-999999999999999999"))) to resolve to -999999999999999999
fn-avgnint1args-2;Expected XPath fn:avg((xs:negativeInteger("-297014075999096793"))) to resolve to -297014075999096793
fn-avgnint2args-1;Expected XPath fn:avg((xs:negativeInteger("-999999999999999999"),xs:negativeInteger("-999999999999999999"))) to resolve to -999999999999999999
fn-avgnint2args-2;Expected XPath fn:avg((xs:negativeInteger("-297014075999096793"),xs:negativeInteger("-999999999999999999"))) to resolve to -648507037999548396
fn-avgnint2args-4;Expected XPath fn:avg((xs:negativeInteger("-999999999999999999"),xs:negativeInteger("-297014075999096793"))) to resolve to -648507037999548396
fn-avgnni1args-2;Expected XPath fn:avg((xs:nonNegativeInteger("303884545991464527"))) to resolve to 303884545991464527
fn-avgnni1args-3;Expected XPath fn:avg((xs:nonNegativeInteger("999999999999999999"))) to resolve to 999999999999999999
fn-avgnni2args-2;Expected XPath fn:avg((xs:nonNegativeInteger("303884545991464527"),xs:nonNegativeInteger("0"))) to resolve to 151942272995732263.5
fn-avgnni2args-3;Expected XPath fn:avg((xs:nonNegativeInteger("999999999999999999"),xs:nonNegativeInteger("0"))) to resolve to 499999999999999999.5
fn-avgnni2args-4;Expected XPath fn:avg((xs:nonNegativeInteger("0"),xs:nonNegativeInteger("303884545991464527"))) to resolve to 151942272995732263.5
fn-avgnni2args-5;Expected XPath fn:avg((xs:nonNegativeInteger("0"),xs:nonNegativeInteger("999999999999999999"))) to resolve to 499999999999999999.5
fn-avgnpi1args-1;Expected XPath fn:avg((xs:nonPositiveInteger("-999999999999999999"))) to resolve to -999999999999999999
fn-avgnpi1args-2;Expected XPath fn:avg((xs:nonPositiveInteger("-475688437271870490"))) to resolve to -475688437271870490
fn-avgnpi2args-1;Expected XPath fn:avg((xs:nonPositiveInteger("-999999999999999999"),xs:nonPositiveInteger("-999999999999999999"))) to resolve to -999999999999999999
fn-avgnpi2args-2;Expected XPath fn:avg((xs:nonPositiveInteger("-475688437271870490"),xs:nonPositiveInteger("-999999999999999999"))) to resolve to -737844218635935244.5
fn-avgnpi2args-3;Expected XPath fn:avg((xs:nonPositiveInteger("0"),xs:nonPositiveInteger("-999999999999999999"))) to resolve to -499999999999999999.5
fn-avgnpi2args-4;Expected XPath fn:avg((xs:nonPositiveInteger("-999999999999999999"),xs:nonPositiveInteger("-475688437271870490"))) to resolve to -737844218635935244.5
fn-avgnpi2args-5;Expected XPath fn:avg((xs:nonPositiveInteger("-999999999999999999"),xs:nonPositiveInteger("0"))) to resolve to -499999999999999999.5
fn-avgpint1args-2;Expected XPath fn:avg((xs:positiveInteger("52704602390610033"))) to resolve to 52704602390610033
fn-avgpint1args-3;Expected XPath fn:avg((xs:positiveInteger("999999999999999999"))) to resolve to 999999999999999999
fn-avgpint2args-2;Expected XPath fn:avg((xs:positiveInteger("52704602390610033"),xs:positiveInteger("1"))) to resolve to 26352301195305017
fn-avgpint2args-4;Expected XPath fn:avg((xs:positiveInteger("1"),xs:positiveInteger("52704602390610033"))) to resolve to 26352301195305017
fn-avgsht2args-3;Expected XPath fn:avg((xs:short("32767"),xs:short("-32768"))) to resolve to -0.5
fn-avgsht2args-5;Expected XPath fn:avg((xs:short("-32768"),xs:short("32767"))) to resolve to -0.5
fn-avgulng1args-2;Expected XPath fn:avg((xs:unsignedLong("130747108607674654"))) to resolve to 130747108607674654
fn-avgulng1args-3;Expected XPath fn:avg((xs:unsignedLong("184467440737095516"))) to resolve to 184467440737095516
fn-avgulng2args-2;Expected XPath fn:avg((xs:unsignedLong("130747108607674654"),xs:unsignedLong("0"))) to resolve to 65373554303837327
fn-avgulng2args-3;Expected XPath fn:avg((xs:unsignedLong("184467440737095516"),xs:unsignedLong("0"))) to resolve to 92233720368547758
fn-avgulng2args-4;Expected XPath fn:avg((xs:unsignedLong("0"),xs:unsignedLong("130747108607674654"))) to resolve to 65373554303837327
fn-avgulng2args-5;Expected XPath fn:avg((xs:unsignedLong("0"),xs:unsignedLong("184467440737095516"))) to resolve to 92233720368547758
fn-boolean-mixed-args-010;Expected XPath fn:boolean(-1) to resolve to true
fn-boolean-mixed-args-012;Expected XPath fn:boolean(xs:float('-INF')) to resolve to true
fn-boolean-mixed-args-016;Expected XPath fn:boolean(xs:float(-1)) to resolve to true
fn-boolean-mixed-args-018;Expected XPath fn:boolean(xs:double('-INF')) to resolve to true
fn-boolean-mixed-args-025;Expected XPath fn:boolean(xs:decimal('-123456789.123456789123456789')) to resolve to true
fn-boolean-mixed-args-028;Expected XPath fn:boolean(xs:decimal('-1')) to resolve to true
fn-boolean-mixed-args-031;Expected XPath fn:boolean(xs:integer('-1')) to resolve to true
fn-boolean-mixed-args-032;Expected XPath fn:boolean(xs:nonPositiveInteger('-99999999999999999')) to resolve to true
fn-boolean-mixed-args-034;Expected XPath fn:boolean(xs:nonPositiveInteger('-1')) to resolve to true
fn-boolean-mixed-args-035;Expected XPath fn:boolean(xs:negativeInteger('-99999999999999999')) to resolve to true
fn-boolean-mixed-args-036;Expected XPath fn:boolean(xs:negativeInteger('-1')) to resolve to true
fn-boolean-mixed-args-040;Expected XPath fn:boolean(xs:long('-9223372036854775808')) to resolve to true
fn-boolean-mixed-args-043;Expected XPath fn:boolean(xs:long('-1')) to resolve to true
fn-boolean-mixed-args-045;Expected XPath fn:boolean(xs:int('-2147483648')) to resolve to true
fn-boolean-mixed-args-048;Expected XPath fn:boolean(xs:int('-1')) to resolve to true
fn-boolean-mixed-args-049;Type casting to XsAnyUri has not been implemented yet.
fn-booleandbl1args-1;Expected XPath fn:boolean(xs:double("-1.7976931348623157E308")) to resolve to true
fn-booleandec1args-1;Expected XPath fn:boolean(xs:decimal("-999999999999999999")) to resolve to true
fn-booleanflt1args-1;Expected XPath fn:boolean(xs:float("-3.4028235E38")) to resolve to true
fn-booleanint1args-1;Expected XPath fn:boolean(xs:int("-2147483648")) to resolve to true
fn-booleanint1args-2;Expected XPath fn:boolean(xs:int("-1873914410")) to resolve to true
fn-booleanintg1args-1;Expected XPath fn:boolean(xs:integer("-999999999999999999")) to resolve to true
fn-booleanlng1args-1;Expected XPath fn:boolean(xs:long("-92233720368547758")) to resolve to true
fn-booleanlng1args-2;Expected XPath fn:boolean(xs:long("-47175562203048468")) to resolve to true
fn-booleannint1args-1;Expected XPath fn:boolean(xs:negativeInteger("-999999999999999999")) to resolve to true
fn-booleannint1args-2;Expected XPath fn:boolean(xs:negativeInteger("-297014075999096793")) to resolve to true
fn-booleannint1args-3;Expected XPath fn:boolean(xs:negativeInteger("-1")) to resolve to true
fn-booleannpi1args-1;Expected XPath fn:boolean(xs:nonPositiveInteger("-999999999999999999")) to resolve to true
fn-booleannpi1args-2;Expected XPath fn:boolean(xs:nonPositiveInteger("-475688437271870490")) to resolve to true
fn-booleansht1args-1;Expected XPath fn:boolean(xs:short("-32768")) to resolve to true
fn-booleansht1args-2;Expected XPath fn:boolean(xs:short("-5324")) to resolve to true
fn-ceiling-1;The function error with arity 0 is not registered.
fn-ceiling-decimal-1;PRSC Error: Failed to parse query '(ceiling(12.5)) instance of $xs:decimal'
fn-ceiling-decimal-2;PRSC Error: Failed to parse query '(ceiling(12.9)) instance of $xs:decimal'
fn-ceiling-decimal-3;PRSC Error: Failed to parse query '(ceiling(0.000000001)) instance of $xs:decimal'
fn-ceiling-decimal-4;PRSC Error: Failed to parse query '(ceiling(0.0)) instance of $xs:decimal'
fn-ceiling-decimal-5;Value was either too large or too small for a Decimal.
fn-ceiling-decimal-6;Value was either too large or too small for a Decimal.
fn-ceiling-decimal-7;PRSC Error: Failed to parse query '(ceiling(-1234567891234567.2)) instance of $xs:decimal'
fn-ceiling-double-1;PRSC Error: Failed to parse query 'ceiling(12.5e0) = 13.0e0'
fn-ceiling-double-10;Expected XPath ceiling(xs:double('-INF')) to resolve to -INF, but instead got -Infinity
fn-ceiling-double-11;PRSC Error: Failed to parse query '(ceiling(xs:double('-0'))) instance of $xs:double'
fn-ceiling-double-2;PRSC Error: Failed to parse query 'ceiling(12.9e0) = 13.0e0'
fn-ceiling-double-3;PRSC Error: Failed to parse query 'ceiling(0.000000001e0) = 1.0e0'
fn-ceiling-double-4;PRSC Error: Failed to parse query 'ceiling(0.0e0) = 0.0e0'
fn-ceiling-double-5;PRSC Error: Failed to parse query 'ceiling(-0.1e0) = -0.0e0'
fn-ceiling-double-6;PRSC Error: Failed to parse query 'ceiling(-12345678.567890e0) = -12345678e0'
fn-ceiling-double-7;PRSC Error: Failed to parse query 'ceiling(-1234567891234567.2e0) = -1234567891234567.0e0'
fn-ceiling-double-8-dyn;PRSC Error: Failed to parse query 'declare variable $NaN-double external; ceiling($NaN-double)'
fn-ceiling-double-8;Expected XPath ceiling(xs:double('NaN')) to resolve to NaN, but instead got Infinity
fn-ceiling-double-9;Expected XPath ceiling(xs:double('INF')) to resolve to INF, but instead got Infinity
fn-ceiling-float-1;PRSC Error: Failed to parse query 'ceiling(xs:float(12.5e0)) = 13.0e0'
fn-ceiling-float-10;Expected XPath ceiling(xs:float(xs:float('-INF'))) to resolve to -INF, but instead got -Infinity
fn-ceiling-float-11;PRSC Error: Failed to parse query '(ceiling(xs:float(xs:float('-0')))) instance of $xs:float'
fn-ceiling-float-2;PRSC Error: Failed to parse query 'ceiling(xs:float(12.9e0)) = 13.0e0'
fn-ceiling-float-3;PRSC Error: Failed to parse query 'ceiling(xs:float(0.000000001e0)) = 1.0e0'
fn-ceiling-float-4;PRSC Error: Failed to parse query 'ceiling(xs:float(0.0e0)) = 0.0e0'
fn-ceiling-float-5;PRSC Error: Failed to parse query 'ceiling(xs:float(-0.1e0)) = 0.0e0'
fn-ceiling-float-6;PRSC Error: Failed to parse query 'ceiling(xs:float(-12345678.1e0)) = -12345678e0'
fn-ceiling-float-7;PRSC Error: Failed to parse query 'ceiling(xs:float(-1234567.2e0)) = -1234567e0'
fn-ceiling-float-8-dyn;PRSC Error: Failed to parse query 'declare variable $NaN-float external; ceiling($NaN-float)'
fn-ceiling-float-8;Expected XPath ceiling(xs:float(xs:float('NaN'))) to resolve to NaN, but instead got Infinity
fn-ceiling-float-9;Expected XPath ceiling(xs:float(xs:float('INF'))) to resolve to INF, but instead got Infinity
fn-ceilingdbl1args-1-dyn;PRSC Error: Failed to parse query 'declare variable $zero-double external; fn:ceiling($zero-double + xs:double("-1.7976931348623157E308"))'
fn-ceilingdbl1args-1;Expected XPath fn:ceiling(xs:double("-1.7976931348623157E308")) to resolve to -1.7976931348623157E308, but instead got -1.7976931348623157E+308
fn-ceilingdbl1args-3;Expected XPath fn:ceiling(xs:double("1.7976931348623157E308")) to resolve to 1.7976931348623157E308, but instead got 1.7976931348623157E+308
fn-ceilingdec1args-1-dyn;PRSC Error: Failed to parse query 'declare variable $zero-int external; fn:ceiling($zero-int + xs:decimal("-999999999999999999")) = -999999999999999999'
fn-ceilingflt1args-1-dyn;PRSC Error: Failed to parse query 'declare variable $zero-float external; fn:ceiling($zero-float + xs:float("-3.4028235E38"))'
fn-ceilingflt1args-1;Expected XPath fn:ceiling(xs:float("-3.4028235E38")) to resolve to -3.4028235E38, but instead got -3.4028235E+38
fn-ceilingflt1args-3;Expected XPath fn:ceiling(xs:float("3.4028235E38")) to resolve to 3.4028235E38, but instead got 3.4028235E+38
fn-ceilingint1args-1-dyn;PRSC Error: Failed to parse query 'declare variable $zero-int external; fn:ceiling($zero-int + xs:int("-2147483648")) = -2147483648'
fn-codepoint-equal-22;The function normalize-unicode with arity 2 is not registered.
fn-concatdbl2args-1;Expected XPath fn:concat(xs:double("-1.7976931348623157E308"),xs:double("-1.7976931348623157E308")) to resolve to -1.7976931348623157E308-1.7976931348623157E308, but instead got -1.7976931348623157E+308-1.7976931348623157E+308
fn-concatdbl2args-2;Expected XPath fn:concat(xs:double("0"),xs:double("-1.7976931348623157E308")) to resolve to 0-1.7976931348623157E308, but instead got 0-1.7976931348623157E+308
fn-concatdbl2args-3;Expected XPath fn:concat(xs:double("1.7976931348623157E308"),xs:double("-1.7976931348623157E308")) to resolve to 1.7976931348623157E308-1.7976931348623157E308, but instead got 1.7976931348623157E+308-1.7976931348623157E+308
fn-concatdbl2args-4;Expected XPath fn:concat(xs:double("-1.7976931348623157E308"),xs:double("0")) to resolve to -1.7976931348623157E3080, but instead got -1.7976931348623157E+3080
fn-concatdbl2args-5;Expected XPath fn:concat(xs:double("-1.7976931348623157E308"),xs:double("1.7976931348623157E308")) to resolve to -1.7976931348623157E3081.7976931348623157E308, but instead got -1.7976931348623157E+3081.7976931348623157E+308
fn-concatflt2args-1;Expected XPath fn:concat(xs:float("-3.4028235E38"),xs:float("-3.4028235E38")) to resolve to -3.4028235E38-3.4028235E38, but instead got -3.4028235E+38-3.4028235E+38
fn-concatflt2args-2;Expected XPath fn:concat(xs:float("0"),xs:float("-3.4028235E38")) to resolve to 0-3.4028235E38, but instead got 0-3.4028235E+38
fn-concatflt2args-3;Expected XPath fn:concat(xs:float("3.4028235E38"),xs:float("-3.4028235E38")) to resolve to 3.4028235E38-3.4028235E38, but instead got 3.4028235E+38-3.4028235E+38
fn-concatflt2args-4;Expected XPath fn:concat(xs:float("-3.4028235E38"),xs:float("0")) to resolve to -3.4028235E380, but instead got -3.4028235E+380
fn-concatflt2args-5;Expected XPath fn:concat(xs:float("-3.4028235E38"),xs:float("3.4028235E38")) to resolve to -3.4028235E383.4028235E38, but instead got -3.4028235E+383.4028235E+38
fn-contains-1-dyn;PRSC Error: Failed to parse query 'declare variable $zls external; contains($zls, $zls)'
fn-contains-11-dyn;PRSC Error: Failed to parse query 'declare variable $zls external; \n         fn:not(fn:contains("A",$zls||"A"))'
fn-contains-17-dyn;PRSC Error: Failed to parse query 'declare variable $zls external; \n         fn:contains($zls || "banana", $zls || "ana", "http://www.w3.org/2013/collation/UCA?lang=en")\n      '
fn-contains-17;No collations are supported
fn-contains-18-dyn;PRSC Error: Failed to parse query 'declare variable $zls external; \n         fn:contains("banana", "bananas", $zls || "http://www.w3.org/2013/collation/UCA?lang=en")\n      '
fn-contains-18;No collations are supported
fn-contains-19;No collations are supported
fn-contains-20;No collations are supported
fn-contains-21;No collations are supported
fn-contains-22;No collations are supported
fn-contains-23;No collations are supported
fn-contains-24;No collations are supported
fn-contains-25;No collations are supported
fn-contains-26;No collations are supported
fn-contains-27;No collations are supported
fn-contains-28;No collations are supported
fn-contains-29;No collations are supported
fn-contains-30;No collations are supported
fn-contains-31;No collations are supported
fn-contains-32;Expected executing the XPath 'fn:contains("Chapter-001", "Chapter-1", "http://www.w3.org/2013/collation/UCA?lang=en;numeric=yes")' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: No collations are supported
fn-contains-33;Expected executing the XPath 'fn:contains("Chapter-100", "Chapter-10", "http://www.w3.org/2013/collation/UCA?lang=en;numeric=yes")' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: No collations are supported
fn-contains-34;No collations are supported
fn-contains-35;No collations are supported
fn-contains-36;No collations are supported
fn-contains-37;No collations are supported
fn-contains-38;No collations are supported
fn-contains-4-dyn;PRSC Error: Failed to parse query 'declare variable $empty external; declare variable $zls external; \n         contains($empty, $zls)'
fn-contains-5-dyn;PRSC Error: Failed to parse query 'declare variable $empty external; declare variable $zls external; \n         contains($zls, $empty)'
fn-current-date-1;PRSC Error: Failed to parse query '(fn:current-date()) instance of $xs:date'
fn-current-date-10;PRSC Error: Failed to parse query '(xs:string(fn:current-date())) instance of $xs:string'
fn-current-date-11;PRSC Error: Failed to parse query '(fn:timezone-from-date(current-date())) instance of $xs:dayTimeDuration'
fn-current-date-12;The function fn:current-date with arity 0 is not registered.
fn-current-date-13;The function fn:current-date with arity 0 is not registered.
fn-current-date-14;The function fn:current-date with arity 0 is not registered.
fn-current-date-15;The function fn:current-date with arity 0 is not registered.
fn-current-date-16;The function fn:current-date with arity 0 is not registered.
fn-current-date-17;The function fn:current-date with arity 0 is not registered.
fn-current-date-18;The function fn:current-date with arity 0 is not registered.
fn-current-date-19;The function fn:current-date with arity 0 is not registered.
fn-current-date-2;PRSC Error: Failed to parse query '(fn:year-from-date(fn:current-date())) instance of $xs:integer'
fn-current-date-20;The function fn:current-date with arity 0 is not registered.
fn-current-date-21;PRSC Error: Failed to parse query '(fn:current-date() - xs:yearMonthDuration("P1Y2M")) instance of $xs:date'
fn-current-date-22;The function fn:current-date with arity 0 is not registered.
fn-current-date-23;The function timezone-from-date with arity 1 is not registered.
fn-current-date-3;PRSC Error: Failed to parse query '(fn:month-from-date(fn:current-date())) instance of $xs:integer'
fn-current-date-4;PRSC Error: Failed to parse query '(fn:day-from-date(fn:current-date())) instance of $xs:integer'
fn-current-date-5;The function fn:current-date with arity 0 is not registered.
fn-current-date-6;PRSC Error: Failed to parse query '(fn:current-date() + xs:dayTimeDuration("P3DT1H15M")) instance of $xs:date'
fn-current-date-7;PRSC Error: Failed to parse query '(fn:current-date() - xs:dayTimeDuration("P3DT1H15M")) instance of $xs:date'
fn-current-date-9;The function fn:current-date with arity 0 is not registered.
fn-current-dateTime-1;PRSC Error: Failed to parse query '(fn:current-dateTime()) instance of $xs:dateTime'
fn-current-dateTime-10;PRSC Error: Failed to parse query '(xs:string(fn:current-dateTime())) instance of $xs:string'
fn-current-dateTime-11;PRSC Error: Failed to parse query '(fn:timezone-from-dateTime(current-dateTime())) instance of $xs:dayTimeDuration'
fn-current-dateTime-12;The function fn:current-dateTime with arity 0 is not registered.
fn-current-dateTime-13;The function fn:current-dateTime with arity 0 is not registered.
fn-current-dateTime-14;The function fn:current-dateTime with arity 0 is not registered.
fn-current-dateTime-15;The function fn:current-dateTime with arity 0 is not registered.
fn-current-dateTime-16;The function fn:current-dateTime with arity 0 is not registered.
fn-current-dateTime-17;The function fn:current-dateTime with arity 0 is not registered.
fn-current-dateTime-18;The function fn:current-dateTime with arity 0 is not registered.
fn-current-dateTime-19;The function fn:current-dateTime with arity 0 is not registered.
fn-current-dateTime-2;PRSC Error: Failed to parse query '(fn:year-from-dateTime(fn:current-dateTime())) instance of $xs:integer'
fn-current-dateTime-20;The function fn:current-dateTime with arity 0 is not registered.
fn-current-dateTime-21;PRSC Error: Failed to parse query '(fn:current-dateTime() - xs:yearMonthDuration("P1Y2M")) instance of $xs:dateTime'
fn-current-dateTime-22;PRSC Error: Failed to parse query '(fn:hours-from-dateTime(fn:current-dateTime())) instance of $xs:integer'
fn-current-dateTime-23;PRSC Error: Failed to parse query '(fn:minutes-from-dateTime(fn:current-dateTime())) instance of $xs:integer'
fn-current-dateTime-24;PRSC Error: Failed to parse query '(fn:seconds-from-dateTime(fn:current-dateTime())) instance of $xs:decimal'
fn-current-dateTime-25;The function timezone-from-dateTime with arity 1 is not registered.
fn-current-dateTime-3;PRSC Error: Failed to parse query '(fn:month-from-dateTime(fn:current-dateTime())) instance of $xs:integer'
fn-current-dateTime-4;PRSC Error: Failed to parse query '(fn:day-from-dateTime(fn:current-dateTime())) instance of $xs:integer'
fn-current-dateTime-5;The function fn:current-dateTime with arity 0 is not registered.
fn-current-dateTime-6;PRSC Error: Failed to parse query '(fn:current-dateTime() + xs:dayTimeDuration("P3DT1H15M")) instance of $xs:dateTime'
fn-current-datetime-7;PRSC Error: Failed to parse query '(fn:current-dateTime() - xs:dayTimeDuration("P3DT1H15M")) instance of $xs:dateTime'
fn-current-dateTime-9;The function fn:current-dateTime with arity 0 is not registered.
fn-current-time-1;PRSC Error: Failed to parse query '(fn:current-time()) instance of $xs:time'
fn-current-time-10;PRSC Error: Failed to parse query '(xs:string(fn:current-time())) instance of $xs:string'
fn-current-time-11;PRSC Error: Failed to parse query '(fn:timezone-from-time(current-time())) instance of $xs:dayTimeDuration'
fn-current-time-12;The function fn:current-time with arity 0 is not registered.
fn-current-time-13;The function fn:current-time with arity 0 is not registered.
fn-current-time-14;The function fn:current-time with arity 0 is not registered.
fn-current-time-15;The function fn:current-time with arity 0 is not registered.
fn-current-time-16;The function fn:current-time with arity 0 is not registered.
fn-current-time-17;The function fn:current-time with arity 0 is not registered.
fn-current-time-18;The function fn:current-time with arity 0 is not registered.
fn-current-time-19;The function fn:current-time with arity 0 is not registered.
fn-current-time-2;PRSC Error: Failed to parse query '(fn:hours-from-time(fn:current-time())) instance of $xs:integer'
fn-current-time-20;The function fn:current-time with arity 0 is not registered.
fn-current-time-21;The function timezone-from-time with arity 1 is not registered.
fn-current-time-22;The function current-time with arity 0 is not registered.
fn-current-time-24;The function current-date with arity 0 is not registered.
fn-current-time-3;PRSC Error: Failed to parse query '(fn:minutes-from-time(fn:current-time())) instance of $xs:integer'
fn-current-time-4;PRSC Error: Failed to parse query '(fn:seconds-from-time(fn:current-time())) instance of $xs:decimal'
fn-current-time-5;The function fn:current-time with arity 0 is not registered.
fn-current-time-6;PRSC Error: Failed to parse query '(fn:current-time() + xs:dayTimeDuration("P3DT1H15M")) instance of $xs:time'
fn-current-time-7;PRSC Error: Failed to parse query '(fn:current-time() - xs:dayTimeDuration("P3DT1H15M")) instance of $xs:time'
fn-current-time-9;The function fn:current-time with arity 0 is not registered.
fn-data-1;Expected executing the XPath 'import schema namespace examples = "http://www.w3.org/XQueryTest/someExamples"; \n        fn:data(/examples:E6-Root/examples:E6)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n        import schema namespace examples = "http://www.w3.org/XQueryTest/someExamples"; \n        fn:data(/examples:E6-Root/examples:E6)'
fn-data-2;PRSC Error: Failed to parse query '(data([])) => empty()'
fn-data-3;PRSC Error: Failed to parse query 'deep-equal((data([1,2,3])), (1,2,3))'
fn-data-4;PRSC Error: Failed to parse query 'deep-equal((data([<a>1</a>, <a>2</a>, <a>3</a>])), ('1','2','3'))'
fn-data-5;PRSC Error: Failed to parse query 'deep-equal((data([(1,2), (3,4), (5,6)])), (1,2,3,4,5,6))'
fn-data-6;PRSC Error: Failed to parse query 'deep-equal((data([[1,2], [3,4], [5,6], []])), (1,2,3,4,5,6))'
fn-data-7;Expected error code: FOTY0013. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'data([[1,2], [3,4], [5,6], [map{1:2}]])'
fn-datacomplextype-1;Expected error code: FOTY0012. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        import schema namespace mc ="http://www.w3.org/XQueryTest/mixedcontent"; \n        fn:data( validate { <mc:weather> <mc:temperature>30</mc:temperature> <mc:precipitation>10</mc:precipitation> </mc:weather> } )\n      '
fn-datadbl1args-1;Expected XPath fn:data((xs:double("-1.7976931348623157E308"))) to resolve to -1.7976931348623157E308, but instead got -1.7976931348623157E+308
fn-datadbl1args-3;Expected XPath fn:data((xs:double("1.7976931348623157E308"))) to resolve to 1.7976931348623157E308, but instead got 1.7976931348623157E+308
fn-dataflt1args-1;Expected XPath fn:data((xs:float("-3.4028235E38"))) to resolve to -3.4028235E38, but instead got -3.4028235E+38
fn-dataflt1args-3;Expected XPath fn:data((xs:float("3.4028235E38"))) to resolve to 3.4028235E38, but instead got 3.4028235E+38
fn-dateTime-1;The function fn:dateTime with arity 2 is not registered.
fn-dateTime-10;The function fn:dateTime with arity 2 is not registered.
fn-dateTime-11;The function fn:dateTime with arity 2 is not registered.
fn-dateTime-12;The function fn:dateTime with arity 2 is not registered.
fn-dateTime-13;The function fn:dateTime with arity 2 is not registered.
fn-dateTime-14;The function fn:dateTime with arity 2 is not registered.
fn-dateTime-15;The function fn:year-from-dateTime with arity 1 is not registered.
fn-dateTime-16;The function fn:month-from-dateTime with arity 1 is not registered.
fn-dateTime-17;The function fn:day-from-dateTime with arity 1 is not registered.
fn-dateTime-18;The function fn:hours-from-dateTime with arity 1 is not registered.
fn-dateTime-19;The function fn:minutes-from-dateTime with arity 1 is not registered.
fn-dateTime-2;The function fn:dateTime with arity 2 is not registered.
fn-dateTime-20;The function fn:seconds-from-dateTime with arity 1 is not registered.
fn-dateTime-21;The function fn:timezone-from-dateTime with arity 1 is not registered.
fn-dateTime-22;The function fn:adjust-dateTime-to-timezone with arity 2 is not registered.
fn-dateTime-23;The function fn:dateTime with arity 2 is not registered.
fn-dateTime-24;The function fn:dateTime with arity 2 is not registered.
fn-dateTime-25;The function fn:dateTime with arity 2 is not registered.
fn-dateTime-26;The function fn:dateTime with arity 2 is not registered.
fn-dateTime-27;The function fn:dateTime with arity 2 is not registered.
fn-dateTime-28;The function fn:dateTime with arity 2 is not registered.
fn-dateTime-29;The function fn:dateTime with arity 2 is not registered.
fn-dateTime-3;The function fn:dateTime with arity 2 is not registered.
fn-dateTime-30;The function fn:dateTime with arity 2 is not registered.
fn-dateTime-4;The function fn:dateTime with arity 2 is not registered.
fn-dateTime-5;The function fn:dateTime with arity 2 is not registered.
fn-dateTime-6;The function fn:dateTime with arity 2 is not registered.
fn-dateTime-7;The function fn:dateTime with arity 2 is not registered.
fn-dateTime-8;The function fn:dateTime with arity 2 is not registered.
fn-dateTime-9;The function fn:dateTime with arity 2 is not registered.
fn-day-from-date-1;The function fn:day-from-date with arity 1 is not registered.
fn-day-from-date-10;The function fn:day-from-date with arity 1 is not registered.
fn-day-from-date-11;The function fn:day-from-date with arity 1 is not registered.
fn-day-from-date-12;The function fn:day-from-date with arity 1 is not registered.
fn-day-from-date-13;The function fn:day-from-date with arity 1 is not registered.
fn-day-from-date-14;The function fn:day-from-date with arity 1 is not registered.
fn-day-from-date-15;The function fn:day-from-date with arity 1 is not registered.
fn-day-from-date-16;The function fn:day-from-date with arity 1 is not registered.
fn-day-from-date-17;The function fn:month-from-date with arity 1 is not registered.
fn-day-from-date-18;The function fn:day-from-date with arity 1 is not registered.
fn-day-from-date-19;The function fn:day-from-date with arity 1 is not registered.
fn-day-from-date-2;The function fn:day-from-date with arity 1 is not registered.
fn-day-from-date-3;The function fn:day-from-date with arity 1 is not registered.
fn-day-from-date-4;The function fn:day-from-date with arity 1 is not registered.
fn-day-from-date-5;The function fn:day-from-date with arity 1 is not registered.
fn-day-from-date-6;The function fn:day-from-date with arity 1 is not registered.
fn-day-from-date-7;The function fn:day-from-date with arity 1 is not registered.
fn-day-from-date-8;The function fn:day-from-date with arity 1 is not registered.
fn-day-from-date-9;The function fn:day-from-date with arity 1 is not registered.
fn-day-from-date1args-1;The function fn:day-from-date with arity 1 is not registered.
fn-day-from-date1args-2;The function fn:day-from-date with arity 1 is not registered.
fn-day-from-date1args-3;The function fn:day-from-date with arity 1 is not registered.
fn-day-from-dateTime-1;The function fn:day-from-dateTime with arity 1 is not registered.
fn-day-from-dateTime-11;The function fn:day-from-dateTime with arity 1 is not registered.
fn-day-from-dateTime-12;The function fn:day-from-dateTime with arity 1 is not registered.
fn-day-from-dateTime-13;The function fn:day-from-dateTime with arity 1 is not registered.
fn-day-from-dateTime-14;The function fn:day-from-dateTime with arity 1 is not registered.
fn-day-from-dateTime-15;The function fn:day-from-dateTime with arity 1 is not registered.
fn-day-from-dateTime-16;The function fn:day-from-dateTime with arity 1 is not registered.
fn-day-from-dateTime-17;The function fn:day-from-dateTime with arity 1 is not registered.
fn-day-from-dateTime-18;The function fn:day-from-dateTime with arity 1 is not registered.
fn-day-from-dateTime-19;The function fn:day-from-dateTime with arity 1 is not registered.
fn-day-from-dateTime-2;The function fn:day-from-dateTime with arity 1 is not registered.
fn-day-from-dateTime-3;The function fn:day-from-dateTime with arity 1 is not registered.
fn-day-from-dateTime-4;The function fn:day-from-dateTime with arity 1 is not registered.
fn-day-from-dateTime-5;The function fn:day-from-dateTime with arity 1 is not registered.
fn-day-from-dateTime-6;The function fn:day-from-dateTime with arity 1 is not registered.
fn-day-from-dateTime-7;The function fn:day-from-dateTime with arity 1 is not registered.
fn-day-from-dateTime-8;The function fn:day-from-dateTime with arity 1 is not registered.
fn-day-from-dateTime-9;The function fn:day-from-dateTime with arity 1 is not registered.
fn-day-from-dateTime1args-1;The function fn:day-from-dateTime with arity 1 is not registered.
fn-day-from-dateTime1args-2;The function fn:day-from-dateTime with arity 1 is not registered.
fn-day-from-dateTime1args-3;The function fn:day-from-dateTime with arity 1 is not registered.
fn-day-from-dateTimeNew-10;The function fn:day-from-dateTime with arity 1 is not registered.
fn-days-from-duration-1;The function fn:days-from-duration with arity 1 is not registered.
fn-days-from-duration-10;The function fn:days-from-duration with arity 1 is not registered.
fn-days-from-duration-11;The function fn:days-from-duration with arity 1 is not registered.
fn-days-from-duration-12;The function fn:days-from-duration with arity 1 is not registered.
fn-days-from-duration-13;The function fn:days-from-duration with arity 1 is not registered.
fn-days-from-duration-14;The function fn:days-from-duration with arity 1 is not registered.
fn-days-from-duration-15;The function fn:days-from-duration with arity 1 is not registered.
fn-days-from-duration-16;The function fn:days-from-duration with arity 1 is not registered.
fn-days-from-duration-17;The function fn:days-from-duration with arity 1 is not registered.
fn-days-from-duration-18;The function fn:days-from-duration with arity 1 is not registered.
fn-days-from-duration-19;The function fn:days-from-duration with arity 1 is not registered.
fn-days-from-duration-2;The function fn:days-from-duration with arity 1 is not registered.
fn-days-from-duration-20;The function fn:days-from-duration with arity 1 is not registered.
fn-days-from-duration-3;The function fn:days-from-duration with arity 1 is not registered.
fn-days-from-duration-4;The function fn:days-from-duration with arity 1 is not registered.
fn-days-from-duration-5;The function fn:days-from-duration with arity 1 is not registered.
fn-days-from-duration-6;The function fn:days-from-duration with arity 1 is not registered.
fn-days-from-duration-7;The function fn:days-from-duration with arity 1 is not registered.
fn-days-from-duration-8;The function fn:days-from-duration with arity 1 is not registered.
fn-days-from-duration-9;The function fn:days-from-duration with arity 1 is not registered.
fn-days-from-duration1args-1;The function fn:days-from-duration with arity 1 is not registered.
fn-days-from-duration1args-2;The function fn:days-from-duration with arity 1 is not registered.
fn-days-from-duration1args-3;The function fn:days-from-duration with arity 1 is not registered.
fn-deep-equal-arrays-1;PRSC Error: Failed to parse query 'fn:deep-equal([], [])'
fn-deep-equal-arrays-10;PRSC Error: Failed to parse query '\n        fn:deep-equal([<a>1</a>], [<a>1</a>])\n      '
fn-deep-equal-arrays-11;PRSC Error: Failed to parse query 'fn:deep-equal([['a', 'b', 'c']], [['a', 'b', 'c']])'
fn-deep-equal-arrays-12;PRSC Error: Failed to parse query 'fn:deep-equal([['a', 'b', 'c']], [['A', 'B', 'C']])'
fn-deep-equal-arrays-13;PRSC Error: Failed to parse query 'fn:deep-equal([['a', 'b', 'c']], [['A', 'B', 'C']], 'http://www.w3.org/2013/collation/UCA?strength=secondary')'
fn-deep-equal-arrays-14;PRSC Error: Failed to parse query 'fn:deep-equal(([['a', 'b', 'c']], [], [1]), ([['a', 'b', 'c']], [], [1]))'
fn-deep-equal-arrays-15;PRSC Error: Failed to parse query 'fn:deep-equal(([['a', 'b', 'c']], [], [1]), ([['a', 'b', 'c']], [], [1], []))'
fn-deep-equal-arrays-16;PRSC Error: Failed to parse query 'fn:deep-equal(([['a', 'b', 'c']], [], [1]), ([['a', 'b', 'c']], [], [2]))'
fn-deep-equal-arrays-17;PRSC Error: Failed to parse query 'fn:deep-equal(([['a', 'b', 'c']], [], [1]), ([['a', 'b', 'c', 'd']], [], [1]))'
fn-deep-equal-arrays-18;PRSC Error: Failed to parse query 'fn:deep-equal(([['a', 'b', 'd'] => array:put(3, 'c')], [], [1]), ([['a', 'b', 'c', 'd'] => array:remove(4)], [], [1]))'
fn-deep-equal-arrays-2;PRSC Error: Failed to parse query 'fn:deep-equal([1,2], [1,2])'
fn-deep-equal-arrays-3;PRSC Error: Failed to parse query 'fn:deep-equal([[]], [[]])'
fn-deep-equal-arrays-4;PRSC Error: Failed to parse query 'fn:deep-equal([], [1])'
fn-deep-equal-arrays-5;PRSC Error: Failed to parse query 'fn:deep-equal([1], 1)'
fn-deep-equal-arrays-6;PRSC Error: Failed to parse query 'fn:deep-equal([], [()])'
fn-deep-equal-arrays-7;PRSC Error: Failed to parse query 'fn:deep-equal([()], [()])'
fn-deep-equal-arrays-8;PRSC Error: Failed to parse query 'fn:deep-equal([map{}], [map{}])'
fn-deep-equal-arrays-9;PRSC Error: Failed to parse query 'fn:deep-equal([map{1:1, 2:2}], [map{2:2, 1:1}])'
fn-deep-equal-maps-1;PRSC Error: Failed to parse query 'fn:deep-equal(map{}, map{})'
fn-deep-equal-maps-10;PRSC Error: Failed to parse query 'fn:deep-equal(map{12:[1,2,3]}, map{12:[3,2,1]})'
fn-deep-equal-maps-11;PRSC Error: Failed to parse query '\n        fn:deep-equal(map{12:<a x='2' y='3'>23</a>}, map{12:<a y='3' x='2'>23</a>})\n      '
fn-deep-equal-maps-12;PRSC Error: Failed to parse query '\n        fn:deep-equal(map{12:<a x='2' y='3'>23</a>}, map{12:<a y='3' x='2' z='1'>23</a>})\n      '
fn-deep-equal-maps-13;PRSC Error: Failed to parse query '\n        fn:deep-equal(map{"a":1}, map{"A":1}, \n            'http://www.w3.org/2013/collation/UCA?strength=secondary')\n      '
fn-deep-equal-maps-14;PRSC Error: Failed to parse query '\n        fn:deep-equal(map{1:"a"}, map{1:"A"}, \n            'http://www.w3.org/2013/collation/UCA?strength=secondary')\n      '
fn-deep-equal-maps-15;PRSC Error: Failed to parse query '\n        fn:deep-equal(map{1:"A"}, map:remove(map{1:"A", 2:"B"}, 2))\n      '
fn-deep-equal-maps-16;PRSC Error: Failed to parse query '\n        let $t := xs:dateTime('2014-10-14T11:31:12') return\n        let $u := adjust-dateTime-to-timezone($t, implicit-timezone()) return\n        fn:deep-equal(map{$t :()}, map{$u :()})\n      '
fn-deep-equal-maps-17;PRSC Error: Failed to parse query '\n        let $t := xs:dateTime('2014-10-14T11:31:12') return\n        let $u := adjust-dateTime-to-timezone($t, implicit-timezone()+xs:dayTimeDuration('PT1H')) return\n        fn:deep-equal(map{$t :()}, map{$u :()})\n      '
fn-deep-equal-maps-18;PRSC Error: Failed to parse query '\n        fn:deep-equal((map{1:'a', 2:'b'}, map{1:'x', 2:'y'}), (map{2:'b', 1:'a'}, map{2:'y', 1:'x'}))\n      '
fn-deep-equal-maps-19;PRSC Error: Failed to parse query '\n        fn:deep-equal((map{1:'a', 2:'b'}, map{1:'x', 2:'y'}), (map{2:'b', 1:'a'}, map{2:'y', 1:'z'}))\n      '
fn-deep-equal-maps-2;PRSC Error: Failed to parse query 'fn:deep-equal(map{1:2}, map{})'
fn-deep-equal-maps-20;PRSC Error: Failed to parse query '\n        fn:deep-equal((map{1:'a', 2:'b'}, map{1:'x', 2:'y'}), (map{2:'b', 1:'a'}, map{2:'y', 1:'x'}, map{}))\n      '
fn-deep-equal-maps-3;PRSC Error: Failed to parse query 'fn:deep-equal(map{}, map{1:()})'
fn-deep-equal-maps-4;PRSC Error: Failed to parse query 'fn:deep-equal(map{1:true(), 2:false()}, map{2:false(), 1:true()})'
fn-deep-equal-maps-5;PRSC Error: Failed to parse query 'fn:deep-equal(map{1:true()}, map{1.0:true()})'
fn-deep-equal-maps-6;PRSC Error: Failed to parse query 'fn:deep-equal(map{1:true()}, map{1.0e0:true()})'
fn-deep-equal-maps-7;PRSC Error: Failed to parse query 'fn:deep-equal(map{xs:double('NaN'):true()}, map{xs:double('NaN'):true()})'
fn-deep-equal-maps-8;PRSC Error: Failed to parse query 'fn:deep-equal(map{xs:double('NaN'):true()}, map{xs:float('NaN'):true()})'
fn-deep-equal-maps-9;PRSC Error: Failed to parse query 'fn:deep-equal(map{12:[1,2,3]}, map{12.0:[1.0, 2.0, 3.0]})'
fn-deep-equal-mix-args-011;Type casting to XsAnyUri has not been implemented yet.
fn-deep-equal-mix-args-012;Type casting to XsAnyUri has not been implemented yet.
fn-deep-equal-node-args-1;PRSC Error: Failed to parse query 'fn:deep-equal(<a> {/bib/node()} </a>/node(), <b> {/bib/node()} </b>/node() )'
fn-deep-equal-node-args-2;PRSC Error: Failed to parse query 'fn:deep-equal(<a> {/bib/node(), /bib/node()} </a>/node(), <b> {/bib/node(), <difference/>, /bib/node()} </b>/node() )'
fn-deep-equal-node-args-3;PRSC Error: Failed to parse query 'fn:deep-equal(<a> {/node(), /node()} </a>/node(), <b> {/node(), 'difference', /node()} </b>/node() )'
fn-deep-equal-node-args-4;PRSC Error: Failed to parse query 'fn:deep-equal(<a> {/node(), <diff x='1'/>, /node()} </a>/node(), <b> {/node(), <diff x='2'/>, /node()} </b>/node() )'
fn-deep-equal-node-args-5;PRSC Error: Failed to parse query 'fn:deep-equal(<a> {/node(), <diff x='1'/>, /node()} </a>/node(), <b> {/node(), <diff xx='1'/>, /node()} </b>/node() )'
fn-encode-for-uri-13;Expected XPath (fn:encode-for-uri("examples example")) to resolve to examples%20example, but instead got examples+example
fn-encode-for-uri-14;Expected XPath (fn:encode-for-uri("examples/example")) to resolve to examples%2Fexample, but instead got examples%2fexample
fn-encode-for-uri-15;Expected XPath (fn:encode-for-uri("http:examples")) to resolve to http%3Aexamples, but instead got http%3aexamples
fn-encode-for-uri-7;Expected XPath (fn:encode-for-uri("examples~example")) to resolve to examples~example, but instead got examples%7eexample
fn-encode-for-uri1args-1;Expected XPath fn:encode-for-uri ("http://www.example.com/00/Weather/CA/Los%20Angeles#ocean") to resolve to http%3A%2F%2Fwww.example.com%2F00%2FWeather%2FCA%2FLos%2520Angeles%23ocean, but instead got http%3a%2f%2fwww.example.com%2f00%2fWeather%2fCA%2fLos%2520Angeles%23ocean
fn-encode-for-uri1args-2;Expected XPath encode-for-uri("~bébé") to resolve to ~b%C3%A9b%C3%A9, but instead got %7eb%c3%a9b%c3%a9
fn-encode-for-uri1args-3;Expected XPath encode-for-uri("100% organic") to resolve to 100%25%20organic, but instead got 100%25+organic
fn-ends-with-17;No collations are supported
fn-ends-with-18;No collations are supported
fn-ends-with-19;No collations are supported
fn-ends-with-20;No collations are supported
fn-ends-with-21;No collations are supported
fn-ends-with-22;No collations are supported
fn-ends-with-23;No collations are supported
fn-ends-with-24;No collations are supported
fn-ends-with-25;No collations are supported
fn-ends-with-26;No collations are supported
fn-ends-with-27;No collations are supported
fn-ends-with-28;No collations are supported
fn-ends-with-29;No collations are supported
fn-ends-with-30;No collations are supported
fn-ends-with-31;No collations are supported
fn-ends-with-32;Expected executing the XPath 'fn:ends-with("Chapter-001", "Chapter-1", "http://www.w3.org/2013/collation/UCA?lang=en;numeric=yes")' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: No collations are supported
fn-ends-with-33;Expected executing the XPath 'fn:ends-with("Chapter-100", "Chapter-10", "http://www.w3.org/2013/collation/UCA?lang=en;numeric=yes")' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: No collations are supported
fn-error-1;Expected error code: FOER0000. Found error code: XPST0017 with error message: The function fn:error with arity 0 is not registered.
fn-error-10;Expected error code: SENR0001. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
fn-error-11;Expected error code: SEPM0004. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
fn-error-12;Expected error code: SEPM0009. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
fn-error-13;Expected error code: SEPM0010. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
fn-error-14;Expected error code: SEPM0016. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
fn-error-15;Expected error code: SERE0003. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
fn-error-16;Expected error code: SERE0005. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
fn-error-17;Expected error code: SERE0006. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
fn-error-18;Expected error code: SERE0008. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
fn-error-19;Expected error code: SERE0012. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
fn-error-2;Expected error code: *. Found error code: XPST0017 with error message: The function fn:error with arity 2 is not registered.
fn-error-20;Expected error code: SERE0014. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
fn-error-22;Expected error code: SESU0007. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
fn-error-23;Expected error code: SESU0011. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
fn-error-25;Expected error code: XPDY0002. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
fn-error-26;Expected error code: XPST0010. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
fn-error-27;Expected error code: XPST0080. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
fn-error-28;Expected error code: XPTY0018. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
fn-error-29;Expected error code: XQDY0027. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
fn-error-3;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
fn-error-30;Expected error code: XQDY0061. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
fn-error-31;Expected error code: XQDY0084. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
fn-error-32;Expected error code: XQST0009. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
fn-error-33;Expected error code: XQST0012. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
fn-error-34;Expected error code: XQST0013. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
fn-error-35;Expected error code: XQST0016. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
fn-error-36;Expected error code: XQST0035. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
fn-error-37;Expected error code: XQST0036. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
fn-error-38;Expected error code: XQST0046. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
fn-error-39;Expected error code: XQST0047. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
fn-error-4;Expected error code: FOCH0004. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
fn-error-40;Expected error code: XQST0048. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
fn-error-41;Expected error code: XQST0054. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
fn-error-42;Expected error code: XQST0055. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
fn-error-43;Expected error code: XQST0057. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
fn-error-44;Expected error code: XQST0058. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
fn-error-45;Expected error code: XQST0060. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
fn-error-46;Expected error code: XQST0073. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
fn-error-47;Expected error code: XQST0075. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
fn-error-48;Expected error code: XQST0076. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
fn-error-49;Expected error code: XQST0079. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
fn-error-5;Expected error code: FOER0000. Found error code: XPST0017 with error message: The function fn:error with arity 2 is not registered.
fn-error-50;Expected error code: XQST0087. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
fn-error-51;Expected error code: XQTY0030. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
fn-error-6;Expected error code: FOER0000. Found error code: XPST0017 with error message: The function fn:error with arity 3 is not registered.
fn-error-7;Expected error code: FODT0001. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
fn-error-8;Expected error code: FORG0009. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
fn-error-9;Expected error code: FOTY0012. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
fn-exactly-onedbl1args-1;Expected XPath fn:exactly-one(xs:double("-1.7976931348623157E308")) to resolve to -1.7976931348623157E308, but instead got -1.7976931348623157E+308
fn-exactly-onedbl1args-2;Expected XPath fn:exactly-one(xs:double("0")) to resolve to 0, but instead got -0
fn-exactly-onedbl1args-3;Expected XPath fn:exactly-one(xs:double("1.7976931348623157E308")) to resolve to 1.7976931348623157E308, but instead got 1.7976931348623157E+308
fn-exactly-oneflt1args-1;Expected XPath fn:exactly-one(xs:float("-3.4028235E38")) to resolve to -3.4028235E38, but instead got -3.4028235E+38
fn-exactly-oneflt1args-2;Expected XPath fn:exactly-one(xs:float("0")) to resolve to 0, but instead got -0
fn-exactly-oneflt1args-3;Expected XPath fn:exactly-one(xs:float("3.4028235E38")) to resolve to 3.4028235E38, but instead got 3.4028235E+38
fn-except-node-args-006;Haven't implemented Qnames from: PI2:
fn-except-node-args-009;Haven't implemented Qnames from: PI1:
fn-except-node-args-010;Haven't implemented Qnames from: PI1:
fn-false-1;PRSC Error: Failed to parse query '(fn:false()) instance of $xs:boolean'
fn-false-18;Expected XPath fn:string(fn:false()) to resolve to "false"
fn-false-19;Expected XPath fn:concat(xs:string(fn:false()),xs:string(fn:false())) to resolve to falsefalse, but instead got FalseFalse
fn-filter-006;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function fn:current-dateTime with arity 0 is not registered.
fn-filter-007;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function fn:current-dateTime with arity 0 is not registered.
fn-filter-013;PRSC Error: Failed to parse query '(fn:filter( (//node(), 1, "string", 3.14, 2.7e0, fn:exists#1), function($arg) { $arg instance of function(*) } )) => count()'
fn-filter-016;Expected error code: XPTY0004. Query succeeded with result: 1 2 3 4 5 6 7 8 9 10
fn-filter-019;Expected error code: XPTY0004. Query succeeded with result: 1 2 3 4 5 6 7 8 9 10
fn-filter-022;Expected error code: XPTY0004. Query succeeded with result: 1 2 3 4 5 6 7 8 9 10
fn-floor-1;The function error with arity 0 is not registered.
fn-floor-decimal-1;PRSC Error: Failed to parse query '(floor(12.5)) instance of $xs:decimal'
fn-floor-decimal-2;PRSC Error: Failed to parse query '(floor(12.9)) instance of $xs:decimal'
fn-floor-decimal-3;PRSC Error: Failed to parse query '(floor(0.000000001)) instance of $xs:decimal'
fn-floor-decimal-4;PRSC Error: Failed to parse query '(floor(0.0)) instance of $xs:decimal'
fn-floor-decimal-5;PRSC Error: Failed to parse query '(floor(-0.1)) instance of $xs:decimal'
fn-floor-decimal-6;Value was either too large or too small for a Decimal.
fn-floor-decimal-7;PRSC Error: Failed to parse query '(floor(-1234567891234567.2)) instance of $xs:decimal'
fn-floor-double-1;PRSC Error: Failed to parse query 'floor(12.5e0) = 12.0e0'
fn-floor-double-10;Expected XPath floor(xs:double('-INF')) to resolve to -INF, but instead got -Infinity
fn-floor-double-11;PRSC Error: Failed to parse query '(floor(xs:double('-0'))) instance of $xs:double'
fn-floor-double-2;PRSC Error: Failed to parse query 'floor(12.9e0) = 12.0e0'
fn-floor-double-3;PRSC Error: Failed to parse query 'floor(0.000000001e0) = 0.0e0'
fn-floor-double-4;PRSC Error: Failed to parse query 'floor(0.0e0) = 0.0e0'
fn-floor-double-5;PRSC Error: Failed to parse query 'floor(-0.1e0) = -1.0e0'
fn-floor-double-6;PRSC Error: Failed to parse query 'floor(-12345678.567890e0) = -12345679e0'
fn-floor-double-7;PRSC Error: Failed to parse query 'floor(-1234567891234567.2e0) = -1234567891234568.0e0'
fn-floor-double-8;Expected XPath floor(xs:double('NaN')) to resolve to NaN, but instead got Infinity
fn-floor-double-9;Expected XPath floor(xs:double('INF')) to resolve to INF, but instead got Infinity
fn-floor-float-1;PRSC Error: Failed to parse query 'floor(xs:float(12.5e0)) = 12.0e0'
fn-floor-float-10;Expected XPath floor(xs:float(xs:float('-INF'))) to resolve to -INF, but instead got -Infinity
fn-floor-float-11;PRSC Error: Failed to parse query '(floor(xs:float(xs:float('-0')))) instance of $xs:float'
fn-floor-float-2;PRSC Error: Failed to parse query 'floor(xs:float(12.9e0)) = 12.0e0'
fn-floor-float-3;PRSC Error: Failed to parse query 'floor(xs:float(0.000000001e0)) = 0.0e0'
fn-floor-float-4;PRSC Error: Failed to parse query 'floor(xs:float(0.0e0)) = 0.0e0'
fn-floor-float-5;PRSC Error: Failed to parse query 'floor(xs:float(-0.1e0)) = -1.0e0'
fn-floor-float-6;PRSC Error: Failed to parse query 'floor(xs:float(-12345678.567890e0)) = -12345679e0'
fn-floor-float-7;PRSC Error: Failed to parse query 'floor(xs:float(-1234567.2e0)) = -1234568e0'
fn-floor-float-8;Expected XPath floor(xs:float(xs:float('NaN'))) to resolve to NaN, but instead got Infinity
fn-floor-float-9;Expected XPath floor(xs:float(xs:float('INF'))) to resolve to INF, but instead got Infinity
fn-floordbl1args-1;Expected XPath fn:floor(xs:double("-1.7976931348623157E308")) to resolve to -1.7976931348623157E308, but instead got -1.7976931348623157E+308
fn-floordbl1args-2;Expected XPath fn:floor(xs:double("0")) to resolve to 0, but instead got -0
fn-floordbl1args-3;Expected XPath fn:floor(xs:double("1.7976931348623157E308")) to resolve to 1.7976931348623157E308, but instead got 1.7976931348623157E+308
fn-floorflt1args-1;Expected XPath fn:floor(xs:float("-3.4028235E38")) to resolve to -3.4028235E38, but instead got -3.4028235E+38
fn-floorflt1args-2;Expected XPath fn:floor(xs:float("0")) to resolve to 0, but instead got -0
fn-floorflt1args-3;Expected XPath fn:floor(xs:float("3.4028235E38")) to resolve to 3.4028235E38, but instead got 3.4028235E+38
fn-function-lookup-001;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'node-name'), 0)) to resolve to true
fn-function-lookup-002;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-003;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'node-name'), 1)) to resolve to true
fn-function-lookup-004;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-005;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'nilled'), 0)) to resolve to true
fn-function-lookup-006;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-007;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'nilled'), 1)) to resolve to true
fn-function-lookup-008;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-009;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'string'), 0)) to resolve to true
fn-function-lookup-010;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-011;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'string'), 1)) to resolve to true
fn-function-lookup-012;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-013;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'data'), 0)) to resolve to true
fn-function-lookup-014;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-015;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'data'), 1)) to resolve to true
fn-function-lookup-016;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-017;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'base-uri'), 0)) to resolve to true
fn-function-lookup-018;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-019;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'base-uri'), 1)) to resolve to true
fn-function-lookup-020;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-021;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'document-uri'), 0)) to resolve to true
fn-function-lookup-022;The function parse-xml with arity 1 is not registered.
fn-function-lookup-023;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'document-uri'), 1)) to resolve to true
fn-function-lookup-024;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-025;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'error'), 0)) to resolve to true
fn-function-lookup-026;Expected error code: FOER0000. Found error code: XPTY0004 with error message: Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-027;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'error'), 1)) to resolve to true
fn-function-lookup-028;Expected error code: XXXX0000. Found error code: XPTY0004 with error message: Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-029;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'error'), 2)) to resolve to true
fn-function-lookup-030;Expected error code: XXXX0000. Found error code: XPTY0004 with error message: Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-031;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'error'), 3)) to resolve to true
fn-function-lookup-032;Expected error code: XXXX0000. Found error code: XPTY0004 with error message: Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-033;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'trace'), 2)) to resolve to true
fn-function-lookup-034;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-035;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'abs'), 1)) to resolve to true
fn-function-lookup-036;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-037;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'ceiling'), 1)) to resolve to true
fn-function-lookup-038;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-039;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'floor'), 1)) to resolve to true
fn-function-lookup-040;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-041;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'round'), 1)) to resolve to true
fn-function-lookup-042;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-043;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'round'), 2)) to resolve to true
fn-function-lookup-044;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-045;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'round-half-to-even'), 1)) to resolve to true
fn-function-lookup-046;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-047;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'round-half-to-even'), 2)) to resolve to true
fn-function-lookup-048;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-049;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'number'), 0)) to resolve to true
fn-function-lookup-050;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-051;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'number'), 1)) to resolve to true
fn-function-lookup-052;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-053;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'format-integer'), 2)) to resolve to true
fn-function-lookup-054;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-055;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'format-integer'), 3)) to resolve to true
fn-function-lookup-056;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-057;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'format-number'), 2)) to resolve to true
fn-function-lookup-058;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-059;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'format-number'), 3)) to resolve to true
fn-function-lookup-060;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-061;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/math', 'pi'), 0)) to resolve to true
fn-function-lookup-062;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-063;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/math', 'exp'), 1)) to resolve to true
fn-function-lookup-064;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-065;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/math', 'exp10'), 1)) to resolve to true
fn-function-lookup-066;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-067;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/math', 'log'), 1)) to resolve to true
fn-function-lookup-068;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-069;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/math', 'log10'), 1)) to resolve to true
fn-function-lookup-070;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-071;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/math', 'pow'), 2)) to resolve to true
fn-function-lookup-072;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-073;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/math', 'sqrt'), 1)) to resolve to true
fn-function-lookup-074;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-075;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/math', 'sin'), 1)) to resolve to true
fn-function-lookup-076;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-077;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/math', 'cos'), 1)) to resolve to true
fn-function-lookup-078;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-079;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/math', 'tan'), 1)) to resolve to true
fn-function-lookup-080;Expected executing the XPath 'function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/math', 'tan'), 1)(1e0)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-081;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/math', 'asin'), 1)) to resolve to true
fn-function-lookup-082;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-083;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/math', 'acos'), 1)) to resolve to true
fn-function-lookup-084;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-085;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/math', 'atan'), 1)) to resolve to true
fn-function-lookup-086;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-087;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/math', 'atan2'), 2)) to resolve to true
fn-function-lookup-088;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-089;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'codepoints-to-string'), 1)) to resolve to true
fn-function-lookup-090;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-091;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'string-to-codepoints'), 1)) to resolve to true
fn-function-lookup-092;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-093;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'compare'), 2)) to resolve to true
fn-function-lookup-094;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-095;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'compare'), 3)) to resolve to true
fn-function-lookup-096;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-097;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'codepoint-equal'), 2)) to resolve to true
fn-function-lookup-098;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-099;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'concat'), 3)) to resolve to true
fn-function-lookup-100;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-101;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'string-join'), 1)) to resolve to true
fn-function-lookup-102;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-103;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'string-join'), 2)) to resolve to true
fn-function-lookup-104;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-105;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'substring'), 2)) to resolve to true
fn-function-lookup-106;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-107;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'substring'), 3)) to resolve to true
fn-function-lookup-108;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-109;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'string-length'), 0)) to resolve to true
fn-function-lookup-110;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-111;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'string-length'), 1)) to resolve to true
fn-function-lookup-112;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-113;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'normalize-space'), 0)) to resolve to true
fn-function-lookup-114;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-115;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'normalize-space'), 1)) to resolve to true
fn-function-lookup-116;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-117;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'normalize-unicode'), 1)) to resolve to true
fn-function-lookup-118;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-119;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'normalize-unicode'), 2)) to resolve to true
fn-function-lookup-120;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-121;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'upper-case'), 1)) to resolve to true
fn-function-lookup-122;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-123;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'lower-case'), 1)) to resolve to true
fn-function-lookup-124;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-125;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'translate'), 3)) to resolve to true
fn-function-lookup-126;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-127;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'contains'), 2)) to resolve to true
fn-function-lookup-128;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-129;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'contains'), 3)) to resolve to true
fn-function-lookup-130;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-131;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'starts-with'), 2)) to resolve to true
fn-function-lookup-132;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-133;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'starts-with'), 3)) to resolve to true
fn-function-lookup-134;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-135;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'ends-with'), 2)) to resolve to true
fn-function-lookup-136;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-137;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'ends-with'), 3)) to resolve to true
fn-function-lookup-138;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-139;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'substring-before'), 2)) to resolve to true
fn-function-lookup-140;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-141;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'substring-before'), 3)) to resolve to true
fn-function-lookup-142;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-143;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'substring-after'), 2)) to resolve to true
fn-function-lookup-144;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-145;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'substring-after'), 3)) to resolve to true
fn-function-lookup-146;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-147;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'matches'), 2)) to resolve to true
fn-function-lookup-148;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-149;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'matches'), 3)) to resolve to true
fn-function-lookup-150;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-151;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'replace'), 3)) to resolve to true
fn-function-lookup-152;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-153;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'replace'), 4)) to resolve to true
fn-function-lookup-154;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-155;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'tokenize'), 2)) to resolve to true
fn-function-lookup-156;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-157;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'tokenize'), 3)) to resolve to true
fn-function-lookup-158;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-159;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'analyze-string'), 2)) to resolve to true
fn-function-lookup-160;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-161;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'analyze-string'), 3)) to resolve to true
fn-function-lookup-162;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-163;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'resolve-uri'), 1)) to resolve to true
fn-function-lookup-164;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'resolve-uri'), 1)('http://www.w3.org/2005/xpath-functions')) instance of $xs:anyURI'
fn-function-lookup-165;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'resolve-uri'), 2)) to resolve to true
fn-function-lookup-166;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-167;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'encode-for-uri'), 1)) to resolve to true
fn-function-lookup-168;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-169;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'iri-to-uri'), 1)) to resolve to true
fn-function-lookup-170;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-171;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'escape-html-uri'), 1)) to resolve to true
fn-function-lookup-172;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-173;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'true'), 0)) to resolve to true
fn-function-lookup-174;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-175;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'false'), 0)) to resolve to true
fn-function-lookup-176;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-177;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'boolean'), 1)) to resolve to true
fn-function-lookup-178;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-179;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'not'), 1)) to resolve to true
fn-function-lookup-180;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-181;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'years-from-duration'), 1)) to resolve to true
fn-function-lookup-182;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-183;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'months-from-duration'), 1)) to resolve to true
fn-function-lookup-184;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-185;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'days-from-duration'), 1)) to resolve to true
fn-function-lookup-186;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-187;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'hours-from-duration'), 1)) to resolve to true
fn-function-lookup-188;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-189;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'minutes-from-duration'), 1)) to resolve to true
fn-function-lookup-190;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-191;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'seconds-from-duration'), 1)) to resolve to true
fn-function-lookup-192;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-193;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'dateTime'), 2)) to resolve to true
fn-function-lookup-194;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-195;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'year-from-dateTime'), 1)) to resolve to true
fn-function-lookup-196;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-197;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'month-from-dateTime'), 1)) to resolve to true
fn-function-lookup-198;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-199;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'day-from-dateTime'), 1)) to resolve to true
fn-function-lookup-200;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-201;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'hours-from-dateTime'), 1)) to resolve to true
fn-function-lookup-202;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-203;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'minutes-from-dateTime'), 1)) to resolve to true
fn-function-lookup-204;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-205;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'seconds-from-dateTime'), 1)) to resolve to true
fn-function-lookup-206;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-207;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'timezone-from-dateTime'), 1)) to resolve to true
fn-function-lookup-208;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-209;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'year-from-date'), 1)) to resolve to true
fn-function-lookup-210;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-211;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'month-from-date'), 1)) to resolve to true
fn-function-lookup-212;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-213;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'day-from-date'), 1)) to resolve to true
fn-function-lookup-214;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-215;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'timezone-from-date'), 1)) to resolve to true
fn-function-lookup-216;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-217;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'hours-from-time'), 1)) to resolve to true
fn-function-lookup-218;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-219;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'minutes-from-time'), 1)) to resolve to true
fn-function-lookup-220;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-221;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'seconds-from-time'), 1)) to resolve to true
fn-function-lookup-222;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-223;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'timezone-from-time'), 1)) to resolve to true
fn-function-lookup-224;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-225;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'adjust-dateTime-to-timezone'), 1)) to resolve to true
fn-function-lookup-226;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'adjust-dateTime-to-timezone'), 1)(xs:dateTime('2012-01-01T00:00:00Z'))) instance of $xs:dateTime'
fn-function-lookup-227;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'adjust-dateTime-to-timezone'), 2)) to resolve to true
fn-function-lookup-228;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-229;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'adjust-date-to-timezone'), 1)) to resolve to true
fn-function-lookup-230;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'adjust-date-to-timezone'), 1)(xs:date('2012-01-01Z'))) instance of $xs:date'
fn-function-lookup-231;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'adjust-date-to-timezone'), 2)) to resolve to true
fn-function-lookup-232;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-233;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'adjust-time-to-timezone'), 1)) to resolve to true
fn-function-lookup-234;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'adjust-time-to-timezone'), 1)(xs:time('00:00:00Z'))) instance of $xs:time'
fn-function-lookup-235;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'adjust-time-to-timezone'), 2)) to resolve to true
fn-function-lookup-236;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-237;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'format-dateTime'), 2)) to resolve to true
fn-function-lookup-238;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'format-dateTime'), 2)(xs:dateTime('2012-01-01T00:00:00Z'), '[Y]')) instance of $xs:string'
fn-function-lookup-239;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'format-dateTime'), 5)) to resolve to true
fn-function-lookup-240;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-241;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'format-date'), 2)) to resolve to true
fn-function-lookup-242;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'format-date'), 2)(xs:date('2012-01-01Z'), '[Y]')) instance of $xs:string'
fn-function-lookup-243;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'format-date'), 5)) to resolve to true
fn-function-lookup-244;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-245;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'format-time'), 2)) to resolve to true
fn-function-lookup-246;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'format-time'), 2)(xs:time('00:00:00Z'), '[H01]')) instance of $xs:string'
fn-function-lookup-247;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'format-time'), 5)) to resolve to true
fn-function-lookup-248;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-249;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'resolve-QName'), 2)) to resolve to true
fn-function-lookup-250;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-251;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'QName'), 2)) to resolve to true
fn-function-lookup-252;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-253;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'prefix-from-QName'), 1)) to resolve to true
fn-function-lookup-254;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-255;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'local-name-from-QName'), 1)) to resolve to true
fn-function-lookup-256;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-257;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'namespace-uri-from-QName'), 1)) to resolve to true
fn-function-lookup-258;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-259;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'namespace-uri-for-prefix'), 2)) to resolve to true
fn-function-lookup-260;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-261;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'in-scope-prefixes'), 1)) to resolve to true
fn-function-lookup-262;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-263;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'name'), 0)) to resolve to true
fn-function-lookup-264;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-265;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'name'), 1)) to resolve to true
fn-function-lookup-266;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-267;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'local-name'), 0)) to resolve to true
fn-function-lookup-268;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-269;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'local-name'), 1)) to resolve to true
fn-function-lookup-270;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-271;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'namespace-uri'), 0)) to resolve to true
fn-function-lookup-272;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-273;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'namespace-uri'), 1)) to resolve to true
fn-function-lookup-274;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-275;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'lang'), 1)) to resolve to true
fn-function-lookup-276;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-277;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'lang'), 2)) to resolve to true
fn-function-lookup-278;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-279;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'root'), 0)) to resolve to true
fn-function-lookup-280;PRSC Error: Failed to parse query '(/root/function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'root'), 0)()) instance of $document-node()'
fn-function-lookup-281;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'root'), 1)) to resolve to true
fn-function-lookup-282;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-283;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'path'), 0)) to resolve to true
fn-function-lookup-284;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-285;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'path'), 1)) to resolve to true
fn-function-lookup-286;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-287;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'has-children'), 0)) to resolve to true
fn-function-lookup-288;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-289;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'has-children'), 1)) to resolve to true
fn-function-lookup-290;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-291;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'innermost'), 1)) to resolve to true
fn-function-lookup-292;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-293;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'outermost'), 1)) to resolve to true
fn-function-lookup-294;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-295;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'empty'), 1)) to resolve to true
fn-function-lookup-296;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-297;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'exists'), 1)) to resolve to true
fn-function-lookup-298;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-299;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'head'), 1)) to resolve to true
fn-function-lookup-300;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-301;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'tail'), 1)) to resolve to true
fn-function-lookup-302;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-303;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'insert-before'), 3)) to resolve to true
fn-function-lookup-304;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-305;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'remove'), 2)) to resolve to true
fn-function-lookup-306;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-307;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'reverse'), 1)) to resolve to true
fn-function-lookup-308;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-309;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'subsequence'), 2)) to resolve to true
fn-function-lookup-310;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-311;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'subsequence'), 3)) to resolve to true
fn-function-lookup-312;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-313;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'unordered'), 1)) to resolve to true
fn-function-lookup-314;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-315;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'distinct-values'), 1)) to resolve to true
fn-function-lookup-316;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-317;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'distinct-values'), 2)) to resolve to true
fn-function-lookup-318;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-319;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'index-of'), 2)) to resolve to true
fn-function-lookup-320;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-321;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'index-of'), 3)) to resolve to true
fn-function-lookup-322;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-323;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'deep-equal'), 2)) to resolve to true
fn-function-lookup-324;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-325;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'deep-equal'), 3)) to resolve to true
fn-function-lookup-326;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-327;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'zero-or-one'), 1)) to resolve to true
fn-function-lookup-328;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-329;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'one-or-more'), 1)) to resolve to true
fn-function-lookup-330;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-331;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'exactly-one'), 1)) to resolve to true
fn-function-lookup-332;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-333;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'count'), 1)) to resolve to true
fn-function-lookup-334;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-335;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'avg'), 1)) to resolve to true
fn-function-lookup-336;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-337;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'max'), 1)) to resolve to true
fn-function-lookup-338;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-339;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'max'), 2)) to resolve to true
fn-function-lookup-340;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-341;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'min'), 1)) to resolve to true
fn-function-lookup-342;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-343;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'min'), 2)) to resolve to true
fn-function-lookup-344;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-345;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'sum'), 1)) to resolve to true
fn-function-lookup-346;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-347;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'sum'), 2)) to resolve to true
fn-function-lookup-348;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-349;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'id'), 1)) to resolve to true
fn-function-lookup-350;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-351;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'id'), 2)) to resolve to true
fn-function-lookup-352;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-353;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'element-with-id'), 1)) to resolve to true
fn-function-lookup-354;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-355;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'element-with-id'), 2)) to resolve to true
fn-function-lookup-356;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-357;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'idref'), 1)) to resolve to true
fn-function-lookup-358;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-359;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'idref'), 2)) to resolve to true
fn-function-lookup-360;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-361;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'generate-id'), 0)) to resolve to true
fn-function-lookup-362;PRSC Error: Failed to parse query '(/function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'generate-id'), 0)()) instance of $xs:string'
fn-function-lookup-363;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'generate-id'), 1)) to resolve to true
fn-function-lookup-364;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'generate-id'), 1)(())) instance of $xs:string'
fn-function-lookup-365;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'doc'), 1)) to resolve to true
fn-function-lookup-366;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'doc'), 1)('http://www.w3.org/fots/fn/function-lookup/function-lookup.xml')) instance of $document-node()'
fn-function-lookup-367;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'doc-available'), 1)) to resolve to true
fn-function-lookup-368;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-369;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'collection'), 0)) to resolve to true
fn-function-lookup-370;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'collection'), 0)()) instance of $node()+'
fn-function-lookup-371;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'collection'), 1)) to resolve to true
fn-function-lookup-372;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'collection'), 1)(())) instance of $node()+'
fn-function-lookup-373;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'uri-collection'), 0)) to resolve to true
fn-function-lookup-374;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'uri-collection'), 0)()) instance of $xs:anyURI+'
fn-function-lookup-375;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'uri-collection'), 1)) to resolve to true
fn-function-lookup-376;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'uri-collection'), 1)(())) instance of $xs:anyURI+'
fn-function-lookup-377;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'unparsed-text'), 1)) to resolve to true
fn-function-lookup-378;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'unparsed-text'), 1)('http://www.w3.org/fots/unparsed-text/text-plain-utf-8.txt')) instance of $xs:string'
fn-function-lookup-379;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'unparsed-text'), 2)) to resolve to true
fn-function-lookup-380;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'unparsed-text'), 2)('http://www.w3.org/fots/unparsed-text/text-plain-utf-8.txt', 'utf-8')) instance of $xs:string'
fn-function-lookup-381;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'unparsed-text-lines'), 1)) to resolve to true
fn-function-lookup-382;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'unparsed-text-lines'), 1)('http://www.w3.org/fots/unparsed-text/text-plain-utf-8.txt')) instance of $xs:string+'
fn-function-lookup-383;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'unparsed-text-lines'), 2)) to resolve to true
fn-function-lookup-384;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'unparsed-text-lines'), 2)('http://www.w3.org/fots/unparsed-text/text-plain-utf-8.txt', 'utf-8')) instance of $xs:string+'
fn-function-lookup-385;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'unparsed-text-available'), 1)) to resolve to true
fn-function-lookup-386;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-387;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'unparsed-text-available'), 2)) to resolve to true
fn-function-lookup-388;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-389;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'environment-variable'), 1)) to resolve to true
fn-function-lookup-390;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-391;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'available-environment-variables'), 0)) to resolve to true
fn-function-lookup-392;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'available-environment-variables'), 0)()) instance of $xs:string*'
fn-function-lookup-393;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'parse-xml'), 1)) to resolve to true
fn-function-lookup-394;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'parse-xml'), 1)('<doc />')) instance of $node()'
fn-function-lookup-395;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'parse-xml-fragment'), 1)) to resolve to true
fn-function-lookup-396;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'parse-xml-fragment'), 1)('<doc />')) instance of $node()'
fn-function-lookup-397;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'serialize'), 1)) to resolve to true
fn-function-lookup-398;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-399;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'serialize'), 2)) to resolve to true
fn-function-lookup-400;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-401;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'position'), 0)) to resolve to true
fn-function-lookup-402;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-403;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'last'), 0)) to resolve to true
fn-function-lookup-404;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-405;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'current-dateTime'), 0)) to resolve to true
fn-function-lookup-406;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'current-dateTime'), 0)()) instance of $xs:dateTime'
fn-function-lookup-407;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'current-date'), 0)) to resolve to true
fn-function-lookup-408;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'current-date'), 0)()) instance of $xs:date'
fn-function-lookup-409;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'current-time'), 0)) to resolve to true
fn-function-lookup-410;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'current-time'), 0)()) instance of $xs:time'
fn-function-lookup-411;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'implicit-timezone'), 0)) to resolve to true
fn-function-lookup-412;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'implicit-timezone'), 0)()) instance of $xs:dayTimeDuration'
fn-function-lookup-413;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'default-collation'), 0)) to resolve to true
fn-function-lookup-414;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-415;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'static-base-uri'), 0)) to resolve to true
fn-function-lookup-416;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'static-base-uri'), 0)()) instance of $xs:anyURI?'
fn-function-lookup-417;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'function-lookup'), 2)) to resolve to true
fn-function-lookup-418;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-419;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'function-name'), 1)) to resolve to true
fn-function-lookup-420;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-421;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'function-arity'), 1)) to resolve to true
fn-function-lookup-422;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-423;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'for-each'), 2)) to resolve to true
fn-function-lookup-424;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-425;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'filter'), 2)) to resolve to true
fn-function-lookup-426;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-427;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'fold-left'), 3)) to resolve to true
fn-function-lookup-428;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-429;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'fold-right'), 3)) to resolve to true
fn-function-lookup-430;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-431;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'for-each-pair'), 3)) to resolve to true
fn-function-lookup-432;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-433;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'untypedAtomic'), 1)) to resolve to true
fn-function-lookup-434;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-435;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'dateTime'), 1)) to resolve to true
fn-function-lookup-436;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-437;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'date'), 1)) to resolve to true
fn-function-lookup-438;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-439;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'time'), 1)) to resolve to true
fn-function-lookup-440;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-441;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'duration'), 1)) to resolve to true
fn-function-lookup-442;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-443;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'yearMonthDuration'), 1)) to resolve to true
fn-function-lookup-444;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-445;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'dayTimeDuration'), 1)) to resolve to true
fn-function-lookup-446;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-447;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'float'), 1)) to resolve to true
fn-function-lookup-448;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-449;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'double'), 1)) to resolve to true
fn-function-lookup-450;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-451;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'decimal'), 1)) to resolve to true
fn-function-lookup-452;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-453;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'integer'), 1)) to resolve to true
fn-function-lookup-454;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-455;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'nonPositiveInteger'), 1)) to resolve to true
fn-function-lookup-456;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-457;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'negativeInteger'), 1)) to resolve to true
fn-function-lookup-458;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-459;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'long'), 1)) to resolve to true
fn-function-lookup-460;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-461;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'int'), 1)) to resolve to true
fn-function-lookup-462;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-463;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'short'), 1)) to resolve to true
fn-function-lookup-464;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-465;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'byte'), 1)) to resolve to true
fn-function-lookup-466;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-467;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'nonNegativeInteger'), 1)) to resolve to true
fn-function-lookup-468;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-469;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'unsignedLong'), 1)) to resolve to true
fn-function-lookup-470;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-471;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'unsignedInt'), 1)) to resolve to true
fn-function-lookup-472;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-473;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'unsignedShort'), 1)) to resolve to true
fn-function-lookup-474;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-475;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'unsignedByte'), 1)) to resolve to true
fn-function-lookup-476;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-477;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'nonNegativeInteger'), 1)) to resolve to true
fn-function-lookup-478;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-479;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'positiveInteger'), 1)) to resolve to true
fn-function-lookup-480;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-481;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'gYearMonth'), 1)) to resolve to true
fn-function-lookup-482;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-483;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'gYear'), 1)) to resolve to true
fn-function-lookup-484;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-485;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'gMonthDay'), 1)) to resolve to true
fn-function-lookup-486;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-487;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'gDay'), 1)) to resolve to true
fn-function-lookup-488;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-489;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'gMonth'), 1)) to resolve to true
fn-function-lookup-490;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-491;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'string'), 1)) to resolve to true
fn-function-lookup-492;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-493;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'normalizedString'), 1)) to resolve to true
fn-function-lookup-494;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-495;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'token'), 1)) to resolve to true
fn-function-lookup-496;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-497;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'language'), 1)) to resolve to true
fn-function-lookup-498;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-499;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'NMTOKEN'), 1)) to resolve to true
fn-function-lookup-500;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-501;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'Name'), 1)) to resolve to true
fn-function-lookup-502;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-503;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'NCName'), 1)) to resolve to true
fn-function-lookup-504;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-505;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'ID'), 1)) to resolve to true
fn-function-lookup-506;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-507;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'IDREF'), 1)) to resolve to true
fn-function-lookup-508;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-509;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'ENTITY'), 1)) to resolve to true
fn-function-lookup-510;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-511;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'boolean'), 1)) to resolve to true
fn-function-lookup-512;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-513;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'base64Binary'), 1)) to resolve to true
fn-function-lookup-514;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-515;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'hexBinary'), 1)) to resolve to true
fn-function-lookup-516;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-517;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'anyURI'), 1)) to resolve to true
fn-function-lookup-518;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-519;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'QName'), 1)) to resolve to true
fn-function-lookup-520;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-521;PRSC Error: Failed to parse query '(exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'dateTimeStamp'), 1))) instance of $xs:boolean'
fn-function-lookup-522;The function year-from-dateTime with arity 1 is not registered.
fn-function-lookup-523;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'IDREFS'), 1)) to resolve to true
fn-function-lookup-524;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-525;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'NMTOKENS'), 1)) to resolve to true
fn-function-lookup-526;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-527;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2001/XMLSchema', 'ENTITIES'), 1)) to resolve to true
fn-function-lookup-528;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-601;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-602;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-603;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-604;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-605;PRSC Error: Failed to parse query '\n        xquery version "3.0";\n      	declare function local:square($i as xs:integer) as xs:integer { $i*$i };\n        function-lookup(QName("http://www.w3.org/2005/xquery-local-functions", "square"), 1)(13)\n       = 169'
fn-function-lookup-606;PRSC Error: Failed to parse query '\n        xquery version "3.0";\n      	declare %private function local:square($i as xs:integer) as xs:integer { $i*$i };\n        function-lookup(QName("http://www.w3.org/2005/xquery-local-functions", "square"), 1)(13)\n       = 169'
fn-function-lookup-609;The function function-name with arity 1 is not registered.
fn-function-lookup-610;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        xquery version "3.0";\n      	declare %private function local:square($i as xs:integer) as xs:integer { $i*$i };\n        function-lookup(QName("http://www.w3.org/2005/xquery-local-functions", "square"), 1)(13, 12)\n      '
fn-function-lookup-611;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        xquery version "3.0";\n      	declare %private function local:square($i as xs:integer) as xs:integer { $i*$i };\n        function-lookup(QName("http://www.w3.org/2005/xquery-local-functions", "square"), 1)("banana")\n      '
fn-function-lookup-612;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-613;Expected error code: XQDY0054. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare variable $n external := xs:QName('local:return-v');\n        declare variable $v := function-lookup($n, 0)();\n        declare function local:return-v() {$v + 1};\n        $v\n      '
fn-function-lookup-708;Expected XPathException with code XPTY0004, but got Object reference not set to an instance of an object.
fn-function-lookup-711;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function fn:current-dateTime with arity 0 is not registered.
fn-function-lookup-712;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function current-date with arity 0 is not registered.
fn-function-lookup-713;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function fn:current-dateTime with arity 0 is not registered.
fn-function-lookup-714;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function current-date with arity 0 is not registered.
fn-function-lookup-715;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'node-name'), 1)) instance of $function(*)'
fn-function-lookup-720;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'parse-ietf-date'), 1)) to resolve to true
fn-function-lookup-721;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-724;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'apply'), 2)) to resolve to true
fn-function-lookup-725;PRSC Error: Failed to parse query 'function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'apply'), 2)( abs#1, [-2] ) = 2'
fn-function-lookup-726;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'sort'), 1)) to resolve to true
fn-function-lookup-727;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-728;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'sort'), 2)) to resolve to true
fn-function-lookup-729;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-730;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'sort'), 1)) to resolve to true
fn-function-lookup-731;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-732;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'contains-token'), 2)) to resolve to true
fn-function-lookup-733;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-734;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'default-language'), 0)) to resolve to true
fn-function-lookup-735;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'default-language'), 0)()) instance of $xs:language'
fn-function-lookup-736;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'json-doc'), 1)) to resolve to true
fn-function-lookup-737;Expected error code: FOUT1170. Found error code: XPTY0004 with error message: Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-738;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'json-doc'), 2)) to resolve to true
fn-function-lookup-739;Expected error code: FOUT1170. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'json-doc'), 2)( 'does-not-exist.txt', map {} )'
fn-function-lookup-740;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'json-to-xml'), 1)) to resolve to true
fn-function-lookup-741;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-742;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'json-to-xml'), 2)) to resolve to true
fn-function-lookup-743;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'json-to-xml'), 2)( '{}', map {} )) => count()'
fn-function-lookup-744;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'parse-json'), 1)) to resolve to true
fn-function-lookup-745;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-746;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'parse-json'), 2)) to resolve to true
fn-function-lookup-747;PRSC Error: Failed to parse query 'function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'parse-json'), 2)( 'true', map {} )'
fn-function-lookup-748;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'collation-key'), 1)) to resolve to true
fn-function-lookup-749;The function fn:collation-key with arity 1 is not registered.
fn-function-lookup-750;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'collation-key'), 2)) to resolve to true
fn-function-lookup-751;The function fn:collation-key with arity 1 is not registered.
fn-function-lookup-752;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'tokenize'), 1)) to resolve to true
fn-function-lookup-753;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-754;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'collation-key'), 1)) to resolve to true
fn-function-lookup-755;The function fn:collation-key with arity 1 is not registered.
fn-function-lookup-756;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'random-number-generator'), 0)) to resolve to true
fn-function-lookup-757;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'random-number-generator'), 0)()) instance of $map(*)'
fn-function-lookup-758;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'random-number-generator'), 1)( 0 )) instance of $map(*)'
fn-function-lookup-759;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'load-xquery-module'), 1)) to resolve to true
fn-function-lookup-760;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-761;Expected error code: FOQM0006. Found error code: XPTY0004 with error message: Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-762;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'load-xquery-module'), 2)) to resolve to true
fn-function-lookup-763;PRSC Error: Failed to parse query '\n      let $module := function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'load-xquery-module'), 2)("http://www.w3.org/fots/fn/load-xquery-module/context-item/module", map{"context-item" : <a><b>hello</b></a>})\n      return\n        let $f := $module("functions")(QName("http://www.w3.org/fots/fn/load-xquery-module/context-item/module", "get-context-child"))(0)\n        return\n          $f()\n    '
fn-function-lookup-764;Expected error code: FOQM0006. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'load-xquery-module'), 2)( "", map{} )'
fn-function-lookup-765;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'transform'), 1)) to resolve to true
fn-function-lookup-766a;PRSC Error: Failed to parse query '(\n      function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'transform'), 1)( map{\n        'stylesheet-text': '<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"><xsl:template match="/"><out/></xsl:template></xsl:stylesheet>',\n        'source-node': doc("function-lookup/collection-1.xml")\n      } )) instance of $map(*)'
fn-function-lookup-766b;Expected error code: FOXT0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions', 'transform'), 1)( map{} )'
fn-function-lookup-767;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/array', 'append'), 2)) to resolve to true
fn-function-lookup-768;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/array', 'append'), 2)([], 3)) instance of $array(*)'
fn-function-lookup-769;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/array', 'filter'), 2)) to resolve to true
fn-function-lookup-770;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/array', 'filter'), 2)(["A", "B", 1, 2], function($z) {$z instance of xs:integer})) instance of $array(*)'
fn-function-lookup-771;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/array', 'flatten'), 1)) to resolve to true
fn-function-lookup-772;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/array', 'flatten'), 1)([1, 4, 6, 5, 3])) instance of $xs:integer*'
fn-function-lookup-773;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/array', 'fold-left'), 3)) to resolve to true
fn-function-lookup-774;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/array', 'fold-left'), 3)([1,2,3,4,5,6], 0, function($z,$a){$z + $a})) instance of $xs:integer'
fn-function-lookup-775;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/array', 'fold-right'), 3)) to resolve to true
fn-function-lookup-776;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/array', 'fold-right'), 3)([1,2,3,4,5,6], 0, function($a,$z){$a + $z})) instance of $xs:integer'
fn-function-lookup-777;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/array', 'for-each-pair'), 3)) to resolve to true
fn-function-lookup-778;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/array', 'for-each-pair'), 3)(["A", "B", "C"], [1, 2, 3], function($x, $y) {[$x, $y]})) instance of $array(*)'
fn-function-lookup-779;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/array', 'for-each'), 2)) to resolve to true
fn-function-lookup-780;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/array', 'for-each'), 2)(["A", "B", 1, 2], function($z) {$z instance of xs:integer})) instance of $array(*)'
fn-function-lookup-781;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/array', 'get'), 2)) to resolve to true
fn-function-lookup-782;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/array', 'get'), 2)([5,6,7], 1)) instance of $xs:integer'
fn-function-lookup-783;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/array', 'head'), 1)) to resolve to true
fn-function-lookup-784;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/array', 'head'), 1)([5,6,7,8])) instance of $item()*'
fn-function-lookup-785;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/array', 'insert-before'), 3)) to resolve to true
fn-function-lookup-786;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/array', 'insert-before'), 3)(["a", "b", "c", "d"], 3, ("x", "y"))) instance of $array(*)'
fn-function-lookup-787;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/array', 'join'), 1)) to resolve to true
fn-function-lookup-788;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/array', 'join'), 1)(([1,2],[3,4]))) instance of $array(*)'
fn-function-lookup-789;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/array', 'put'), 3)) to resolve to true
fn-function-lookup-790;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/array', 'put'), 3)(["a", "b", "c", "d"], 3, ("x", "y"))) instance of $array(*)'
fn-function-lookup-791;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/array', 'remove'), 2)) to resolve to true
fn-function-lookup-792;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/array', 'remove'), 2)(["a","b","c","d"], 1)) instance of $array(*)'
fn-function-lookup-793;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/array', 'reverse'), 1)) to resolve to true
fn-function-lookup-794;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/array', 'reverse'), 1)(["a", "b", "c", "d"])) instance of $array(*)'
fn-function-lookup-795;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/array', 'size'), 1)) to resolve to true
fn-function-lookup-796;PRSC Error: Failed to parse query 'function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/array', 'size'), 1)([1]) = 1'
fn-function-lookup-797;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/array', 'sort'), 1)) to resolve to true
fn-function-lookup-798;PRSC Error: Failed to parse query 'deep-equal((function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/array', 'sort'), 1)(["Red", "green", "blUE", "PINK", "ORanGE"])), (["ORanGE", "PINK", "Red", "blUE", "green"]))'
fn-function-lookup-799;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/array', 'sort'), 2)) to resolve to true
fn-function-lookup-800;PRSC Error: Failed to parse query 'deep-equal((function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/array', 'sort'), 2)(["Red", "green", "blUE", "PINK", "ORanGE"], "http://www.w3.org/2010/09/qt-fots-catalog/collation/caseblind")), (["blUE", "green", "ORanGE", "PINK", "Red"]))'
fn-function-lookup-801;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/array', 'sort'), 3)) to resolve to true
fn-function-lookup-802;PRSC Error: Failed to parse query 'deep-equal((function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/array', 'sort'), 3)(["Red", "green", "blUE", "PINK", "ORanGE"], "http://www.w3.org/2005/xpath-functions/collation/codepoint", fn:string#1)), (["ORanGE", "PINK", "Red", "blUE", "green"]))'
fn-function-lookup-803;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/array', 'subarray'), 2)) to resolve to true
fn-function-lookup-804;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/array', 'subarray'), 2)(["a", "b", "c", "d"], 2)) instance of $array(*)'
fn-function-lookup-805;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/array', 'subarray'), 3)) to resolve to true
fn-function-lookup-806;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/array', 'subarray'), 3)([1, (2,2), 3], 3, 0)) instance of $array(*)'
fn-function-lookup-807;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/array', 'tail'), 1)) to resolve to true
fn-function-lookup-808;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/array', 'tail'), 1)([5,6,7,8])) instance of $array(*)'
fn-function-lookup-809;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/map', 'contains'), 2)) to resolve to true
fn-function-lookup-810;PRSC Error: Failed to parse query 'function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/map', 'contains'), 2)(map{}, 0)'
fn-function-lookup-811;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/map', 'entry'), 2)) to resolve to true
fn-function-lookup-812;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-813;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/map', 'find'), 2)) to resolve to true
fn-function-lookup-814;PRSC Error: Failed to parse query 'deep-equal((function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/map', 'find'), 2)((), 17)), ([]))'
fn-function-lookup-815;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/map', 'for-each'), 2)) to resolve to true
fn-function-lookup-816;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/map', 'for-each'), 2)(map{}, concat#2)) => empty()'
fn-function-lookup-817;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/map', 'get'), 2)) to resolve to true
fn-function-lookup-818;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/map', 'get'), 2)(map{}, 1)) => empty()'
fn-function-lookup-819;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/map', 'keys'), 1)) to resolve to true
fn-function-lookup-820;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/map', 'keys'), 1)(map{})) => empty()'
fn-function-lookup-821;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/map', 'merge'), 1)) to resolve to true
fn-function-lookup-822;Expected base expression of a function call to evaluate to a sequence of single function item
fn-function-lookup-823;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/map', 'merge'), 2)) to resolve to true
fn-function-lookup-824;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/map', 'merge'), 2)((), map{"duplicates":"use-last"})) => count()'
fn-function-lookup-825;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/map', 'put'), 3)) to resolve to true
fn-function-lookup-826;PRSC Error: Failed to parse query '(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/map', 'put'), 3)(map{}, "foo", 1 to 5)) => count()'
fn-function-lookup-827;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/map', 'remove'), 2)) to resolve to true
fn-function-lookup-828;PRSC Error: Failed to parse query 'let $result := (function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/map', 'remove'), 2)(map{},1)) return map:size($result) eq 0'
fn-function-lookup-829;Expected XPath exists(function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/map', 'size'), 1)) to resolve to true
fn-function-lookup-830;PRSC Error: Failed to parse query 'function-lookup(fn:QName('http://www.w3.org/2005/xpath-functions/map', 'size'), 1)(map{}) = 0'
fn-function-name-005;The function fn:function-name with arity 1 is not registered.
fn-function-name-006;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function fn:function-name with arity 1 is not registered.
fn-function-name-007;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function fn:function-name with arity 1 is not registered.
fn-function-name-008;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function fn:function-name with arity 1 is not registered.
fn-function-name-009;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function fn:function-name with arity 1 is not registered.
fn-function-name-010;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function fn:function-name with arity 1 is not registered.
fn-function-name-011;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function fn:function-name with arity 1 is not registered.
fn-function-name-012;PRSC Error: Failed to parse query '(fn:function-name( fn:substring#2 )) instance of $xs:QName'
fn-function-name-013;Expected executing the XPath 'fn:function-name( fn:substring(?, 1) )' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '(fn:function-name( fn:substring(?, 1) )) instance of $empty-sequence()'
fn-function-name-014;Expected executing the XPath 'fn:function-name( function($node){count($node/*)} )' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '(fn:function-name( function($node){count($node/*)} )) instance of $empty-sequence()'
fn-function-name-015;The function fn:function-name with arity 1 is not registered.
fn-function-name-016;The function fn:function-name with arity 1 is not registered.
fn-function-name-017;The function fn:function-name with arity 1 is not registered.
fn-function-name-018;Expected executing the XPath 'fn:function-name( concat#340282366920938463463374607431768211456 )' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPathException with code FOAR0002, but got Value was either too large or too small for an Int32.
fn-function-name-019;The function fn:function-name with arity 1 is not registered.
fn-function-name-020;The function fn:function-name with arity 1 is not registered.
fn-function-name-021;The function fn:function-name with arity 1 is not registered.
fn-function-name-022;PRSC Error: Failed to parse query '\n	declare function local:add($arg1, $arg2, $arg3)\n        {\n           $arg1 + $arg2 + $arg3\n        };\n\n	fn:function-name( local:add#3 )\n       = fn:QName("http://www.w3.org/2005/xquery-local-functions",\n                              "local:add")'
fn-function-name-023;PRSC Error: Failed to parse query '(\n	declare function local:add($arg1, $arg2, $arg3)\n        {\n           $arg1 + $arg2 + $arg3\n        };\n\n	fn:function-name( local:add(1, 2, ?) )\n      ) => empty()'
fn-function-name-024;PRSC Error: Failed to parse query '\n	declare function local:coerce($arg as function(item()*) as item()*)\n          as function(item()*) as item()*\n        {\n           $arg\n        };\n        \n        let $coerced := local:coerce(fn:abs#1)\n        return if ($coerced instance of function(item()*) as item()*)\n               then fn:function-name( local:coerce(fn:abs#1) )\n               else "error"\n       = fn:QName("http://www.w3.org/2005/xpath-functions", \n                              "fn:abs")'
fn-has-children-005;Expected executing the XPath 'fn:has-children()' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XPDY0002. Query succeeded with result: False
fn-has-children-006;Expected executing the XPath 'fn:has-children(.)' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XPDY0002. Query succeeded with result: False
fn-has-children-012;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function fn:current-dateTime with arity 0 is not registered.
fn-has-children-013;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function fn:current-dateTime with arity 0 is not registered.
fn-has-children-016;PRSC Error: Failed to parse query '(fn:has-children()) instance of $xs:boolean'
fn-has-children-017;PRSC Error: Failed to parse query '(fn:has-children(.)) instance of $xs:boolean'
fn-has-children-018;Expected XPath /root/@attribute/fn:has-children() to resolve to false
fn-has-children-019;Expected XPath fn:has-children( /root/@attribute ) to resolve to false
fn-has-children-020;PRSC Error: Failed to parse query '/root/namespace::fots/fn:has-children()'
fn-has-children-021;PRSC Error: Failed to parse query 'fn:has-children( /root/namespace::fots )'
fn-has-children-032;Expected XPath /root/non-empty/fn:has-children() to resolve to true
fn-has-children-033;Expected XPath fn:has-children( /root/non-empty ) to resolve to true
fn-has-children-036;Expected XPath /root/node()/fn:has-children() to resolve to false false false false true, but instead got False False False False False
fn-has-children-037;Expected XPath /root/node()/fn:has-children(.) to resolve to false false false false true, but instead got False False False False False
fn-hours-from-dateTime-1;The function fn:hours-from-dateTime with arity 1 is not registered.
fn-hours-from-dateTime-10;The function fn:hours-from-dateTime with arity 1 is not registered.
fn-hours-from-dateTime-11;The function fn:hours-from-dateTime with arity 1 is not registered.
fn-hours-from-dateTime-12;The function fn:hours-from-dateTime with arity 1 is not registered.
fn-hours-from-dateTime-13;The function fn:hours-from-dateTime with arity 1 is not registered.
fn-hours-from-dateTime-14;The function fn:hours-from-dateTime with arity 1 is not registered.
fn-hours-from-dateTime-15;The function fn:hours-from-dateTime with arity 1 is not registered.
fn-hours-from-dateTime-16;The function fn:hours-from-dateTime with arity 1 is not registered.
fn-hours-from-dateTime-17;The function fn:hours-from-dateTime with arity 1 is not registered.
fn-hours-from-dateTime-18;The function fn:hours-from-dateTime with arity 1 is not registered.
fn-hours-from-dateTime-19;The function fn:hours-from-dateTime with arity 1 is not registered.
fn-hours-from-dateTime-2;The function fn:hours-from-dateTime with arity 1 is not registered.
fn-hours-from-dateTime-3;The function fn:hours-from-dateTime with arity 1 is not registered.
fn-hours-from-dateTime-4;The function fn:hours-from-dateTime with arity 1 is not registered.
fn-hours-from-dateTime-5;The function fn:hours-from-dateTime with arity 1 is not registered.
fn-hours-from-dateTime-6;The function fn:hours-from-dateTime with arity 1 is not registered.
fn-hours-from-dateTime-7;The function fn:hours-from-dateTime with arity 1 is not registered.
fn-hours-from-dateTime-8;The function fn:hours-from-dateTime with arity 1 is not registered.
fn-hours-from-dateTime-9;The function fn:hours-from-dateTime with arity 1 is not registered.
fn-hours-from-dateTime1args-1;The function fn:hours-from-dateTime with arity 1 is not registered.
fn-hours-from-dateTime1args-2;The function fn:hours-from-dateTime with arity 1 is not registered.
fn-hours-from-dateTime1args-3;The function fn:hours-from-dateTime with arity 1 is not registered.
fn-hours-from-duration-1;The function fn:hours-from-duration with arity 1 is not registered.
fn-hours-from-duration-10;The function fn:hours-from-duration with arity 1 is not registered.
fn-hours-from-duration-11;The function fn:hours-from-duration with arity 1 is not registered.
fn-hours-from-duration-12;The function fn:hours-from-duration with arity 1 is not registered.
fn-hours-from-duration-13;The function fn:hours-from-duration with arity 1 is not registered.
fn-hours-from-duration-14;The function fn:hours-from-duration with arity 1 is not registered.
fn-hours-from-duration-15;The function fn:hours-from-duration with arity 1 is not registered.
fn-hours-from-duration-16;The function fn:hours-from-duration with arity 1 is not registered.
fn-hours-from-duration-17;The function fn:hours-from-duration with arity 1 is not registered.
fn-hours-from-duration-18;The function fn:hours-from-duration with arity 1 is not registered.
fn-hours-from-duration-19;The function fn:hours-from-duration with arity 1 is not registered.
fn-hours-from-duration-2;The function fn:hours-from-duration with arity 1 is not registered.
fn-hours-from-duration-20;The function fn:hours-from-duration with arity 1 is not registered.
fn-hours-from-duration-3;The function fn:hours-from-duration with arity 1 is not registered.
fn-hours-from-duration-4;The function fn:hours-from-duration with arity 1 is not registered.
fn-hours-from-duration-5;The function fn:hours-from-duration with arity 1 is not registered.
fn-hours-from-duration-6;The function fn:hours-from-duration with arity 1 is not registered.
fn-hours-from-duration-7;The function fn:hours-from-duration with arity 1 is not registered.
fn-hours-from-duration-8;The function fn:hours-from-duration with arity 1 is not registered.
fn-hours-from-duration-9;The function fn:hours-from-duration with arity 1 is not registered.
fn-hours-from-duration1args-1;The function fn:hours-from-duration with arity 1 is not registered.
fn-hours-from-duration1args-2;The function fn:hours-from-duration with arity 1 is not registered.
fn-hours-from-duration1args-3;The function fn:hours-from-duration with arity 1 is not registered.
fn-hours-from-time-1;The function fn:hours-from-time with arity 1 is not registered.
fn-hours-from-time-10;The function fn:hours-from-time with arity 1 is not registered.
fn-hours-from-time-11;The function fn:hours-from-time with arity 1 is not registered.
fn-hours-from-time-12;The function fn:hours-from-time with arity 1 is not registered.
fn-hours-from-time-13;The function fn:hours-from-time with arity 1 is not registered.
fn-hours-from-time-14;The function fn:hours-from-time with arity 1 is not registered.
fn-hours-from-time-15;The function fn:hours-from-time with arity 1 is not registered.
fn-hours-from-time-16;The function fn:hours-from-time with arity 1 is not registered.
fn-hours-from-time-17;The function fn:hours-from-time with arity 1 is not registered.
fn-hours-from-time-18;The function fn:hours-from-time with arity 1 is not registered.
fn-hours-from-time-19;The function fn:hours-from-time with arity 1 is not registered.
fn-hours-from-time-2;The function fn:hours-from-time with arity 1 is not registered.
fn-hours-from-time-3;The function fn:hours-from-time with arity 1 is not registered.
fn-hours-from-time-4;The function fn:hours-from-time with arity 1 is not registered.
fn-hours-from-time-5;The function fn:hours-from-time with arity 1 is not registered.
fn-hours-from-time-6;The function fn:hours-from-time with arity 1 is not registered.
fn-hours-from-time-7;The function fn:hours-from-time with arity 1 is not registered.
fn-hours-from-time-8;The function fn:hours-from-time with arity 1 is not registered.
fn-hours-from-time-9;The function fn:hours-from-time with arity 1 is not registered.
fn-hours-from-time1args-1;The function fn:hours-from-time with arity 1 is not registered.
fn-hours-from-time1args-2;The function fn:hours-from-time with arity 1 is not registered.
fn-hours-from-time1args-3;The function fn:hours-from-time with arity 1 is not registered.
fn-id-10;PRSC Error: Failed to parse query 'import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:count(fn:id("nomatching1 nomatching2", /ids:IDS[1])) = 0'
fn-id-11;PRSC Error: Failed to parse query 'import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:count(fn:id("", /ids:IDS[1])) = 0'
fn-id-12;PRSC Error: Failed to parse query 'import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:id(fn:substring("1id3",2), /ids:IDS[1])'
fn-id-13;PRSC Error: Failed to parse query 'import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:id("id4", /ids:IDS[1])'
fn-id-14;PRSC Error: Failed to parse query 'import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:count(fn:id("p1:id5", /ids:IDS[1])) = 0'
fn-id-15;PRSC Error: Failed to parse query 'import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:id("id1 id1", /ids:IDS[1])'
fn-id-16;PRSC Error: Failed to parse query 'import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:id("id1 ID1", /ids:IDS[1])'
fn-id-17;PRSC Error: Failed to parse query 'import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:id(fn:lower-case("ID1"), /ids:IDS[1])'
fn-id-18;PRSC Error: Failed to parse query 'import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:id(fn:upper-case("id5"), /ids:IDS[1])'
fn-id-19;PRSC Error: Failed to parse query 'import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:id(fn:concat("i","d1"), /ids:IDS[1])'
fn-id-2;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function fn:id with arity 1 is not registered.
fn-id-20;PRSC Error: Failed to parse query 'import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:id(xs:string("id1"), /ids:IDS[1])'
fn-id-21;PRSC Error: Failed to parse query 'import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:id(fn:string-join(("id","1"),""), /ids:IDS[1])'
fn-id-22;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function fn:id with arity 2 is not registered.
fn-id-23;PRSC Error: Failed to parse query 'declare ordering ordered; import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:id("id1 id2", /ids:IDS[1])'
fn-id-24;Expected executing the XPath 'let $data := document {\n            <stuff>\n               <thing xml:id=" a123 ">once</thing>\n               <thing xml:id=" a456 ">twice</thing>\n               <thing xml:id=" 789x ">thrice</thing>\n            </stuff>\n          }\n          return $data/id('a123')/string()' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XQDY0091. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         let $data := document {\n            <stuff>\n               <thing xml:id=" a123 ">once</thing>\n               <thing xml:id=" a456 ">twice</thing>\n               <thing xml:id=" 789x ">thrice</thing>\n            </stuff>\n          }\n          return $data/id('a123')/string()  \n         '
fn-id-25;Expected executing the XPath 'let $data := document {\n            <stuff>\n               <thing xml:id=" a123 ">once</thing>\n               <thing xml:id=" a456 ">twice</thing>\n               <thing xml:id="789x">thrice</thing>\n            </stuff>\n          }  \n          return $data/id('789x')' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XQDY0091. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         let $data := document {\n            <stuff>\n               <thing xml:id=" a123 ">once</thing>\n               <thing xml:id=" a456 ">twice</thing>\n               <thing xml:id="789x">thrice</thing>\n            </stuff>\n          }  \n          return $data/id('789x')\n         '
fn-id-3;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function fn:id with arity 2 is not registered.
fn-id-4;Expected error code: FODC0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        import module namespace copy="http://www.w3.org/QT3/copy";\n        let $var := copy:copy(/*) return fn:id("argument1", $var)\n      '
fn-id-5;PRSC Error: Failed to parse query 'import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:id("id1", /ids:IDS[1])'
fn-id-6;PRSC Error: Failed to parse query 'import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:count(fn:id("nomatchingid", /ids:IDS[1])) = 0'
fn-id-7;PRSC Error: Failed to parse query 'import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:id("id2 id2", /ids:IDS[1])'
fn-id-8;Expected executing the XPath 'import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:id("id1 id2", /ids:IDS[1])' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:id("id1 id2", /ids:IDS[1])'
fn-id-9;PRSC Error: Failed to parse query 'import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:id("id1 nomatching", /ids:IDS[1])'
fn-id-dtd-10;The function fn:id with arity 2 is not registered.
fn-id-dtd-11;The function fn:id with arity 2 is not registered.
fn-id-dtd-12;The function fn:id with arity 2 is not registered.
fn-id-dtd-13;The function fn:id with arity 2 is not registered.
fn-id-dtd-14;The function fn:id with arity 2 is not registered.
fn-id-dtd-15;The function fn:id with arity 2 is not registered.
fn-id-dtd-16;The function fn:id with arity 2 is not registered.
fn-id-dtd-17;The function fn:id with arity 2 is not registered.
fn-id-dtd-18;The function fn:id with arity 2 is not registered.
fn-id-dtd-19;The function fn:id with arity 2 is not registered.
fn-id-dtd-20;The function fn:id with arity 2 is not registered.
fn-id-dtd-21;The function fn:id with arity 2 is not registered.
fn-id-dtd-23;PRSC Error: Failed to parse query 'declare ordering ordered; fn:id("id1 id2", /IDS[1])/name()'
fn-id-dtd-5;The function fn:id with arity 2 is not registered.
fn-id-dtd-6;The function fn:id with arity 2 is not registered.
fn-id-dtd-7;The function fn:id with arity 2 is not registered.
fn-id-dtd-8;The function fn:id with arity 2 is not registered.
fn-id-dtd-9;The function fn:id with arity 2 is not registered.
fn-idref-10;PRSC Error: Failed to parse query 'import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:count(fn:idref("nomatching1 nomatching2", /ids:IDS[1])) = 0'
fn-idref-11;PRSC Error: Failed to parse query 'import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:count(fn:idref("", /ids:IDS[1])) = 0'
fn-idref-12;PRSC Error: Failed to parse query 'import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:node-name(fn:idref("id2", /ids:IDS[1]))'
fn-idref-13;PRSC Error: Failed to parse query 'import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; (fn:idref("id1", /ids:IDS[1])) is (fn:idref("id1", /ids:IDS[1]))'
fn-idref-14;PRSC Error: Failed to parse query 'import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; (fn:idref("id1", /ids:IDS[1])) is (fn:idref("id2", /ids:IDS[1]))'
fn-idref-15;PRSC Error: Failed to parse query 'import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:idref(("id1","id1"), /ids:IDS[1])'
fn-idref-16;PRSC Error: Failed to parse query 'import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:idref(("id1","ID1"), /ids:IDS[1])'
fn-idref-17;PRSC Error: Failed to parse query 'import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:idref(fn:lower-case("ID1"), /ids:IDS[1])'
fn-idref-18;PRSC Error: Failed to parse query 'import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:idref(fn:upper-case("id5"), /ids:IDS[1])'
fn-idref-19;PRSC Error: Failed to parse query 'import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:idref(fn:concat("i","d1"), /ids:IDS[1])'
fn-idref-2;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function fn:idref with arity 1 is not registered.
fn-idref-20;PRSC Error: Failed to parse query 'import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:idref(xs:string("id1"), /ids:IDS[1])'
fn-idref-21;PRSC Error: Failed to parse query 'import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:idref(fn:string-join(("id","1"),""), /ids:IDS[1])'
fn-idref-22;Expected error code: XPDY0002. Found error code: XPST0017 with error message: The function fn:idref with arity 2 is not registered.
fn-idref-23;PRSC Error: Failed to parse query '\n        declare ordering ordered; \n        import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; \n        fn:idref("id4", /ids:IDS[1])\n      '
fn-idref-3;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function fn:idref with arity 2 is not registered.
fn-idref-30;PRSC Error: Failed to parse query '\n        import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; \n        <out xmlns="http://www.w3.org/XQueryTest/ididrefs" \n            xmlns:i="http://www.w3.org/XQueryTest/ididrefs" \n            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">{ \n            for $z in tokenize("alpha beta gamma delta epsilon zeta eta theta iota kappa lambda mu", "\s") \n            return element {$z} {idref($z, (/))[self::attribute()], idref($z, (/))[self::element()]} }\n        </out>\n      '
fn-idref-31;PRSC Error: Failed to parse query '\n        import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; \n        <out xmlns="http://www.w3.org/XQueryTest/ididrefs" \n            xmlns:i="http://www.w3.org/XQueryTest/ididrefs" \n            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">{ \n            for $z in (//i:IDREFS-content, //i:IDREF-List-content, //i:W/@i:Restricted-IDREF) \n            for $s in distinct-values(tokenize(normalize-space(string($z)), '\s')) \n            order by $s \n            return <e val="{$s}"> {idref($s, (/))[self::attribute()], idref($s, (/))[self::element()]} </e> }\n        </out>\n      '
fn-idref-32;PRSC Error: Failed to parse query '\n        import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; \n        <out>{idref('omicron')/name()}</out>\n      '
fn-idref-33;PRSC Error: Failed to parse query '\n        import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; \n        idref('Q')/path()\n       = "/Q{http://www.w3.org/XQueryTest/ididrefs}IDS2[1]/Q{http://www.w3.org/XQueryTest/ididrefs}Restricted-NCName-or-IDREF-list[2]"'
fn-idref-34;PRSC Error: Failed to parse query '\n        import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; \n        idref('Z')/path()\n       = "/Q{http://www.w3.org/XQueryTest/ididrefs}IDS2[1]/Q{http://www.w3.org/XQueryTest/ididrefs}W[8]/@Q{http://www.w3.org/XQueryTest/ididrefs}Restricted-NCName-or-IDREF-list"'
fn-idref-4;Expected error code: FODC0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        import module namespace copy="http://www.w3.org/QT3/copy";\n        let $var := copy:copy(/*) return fn:idref("argument1", $var)\n      '
fn-idref-5;PRSC Error: Failed to parse query 'import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:idref("id1",/ids:IDS[1])'
fn-idref-6;PRSC Error: Failed to parse query 'import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:count(fn:idref("nomatchingid", /ids:IDS[1])) = 0'
fn-idref-7;PRSC Error: Failed to parse query 'import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:idref("id4", /ids:IDS[1])'
fn-idref-8;PRSC Error: Failed to parse query 'import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:idref(("id1", "id2"), /ids:IDS[1])'
fn-idref-9;PRSC Error: Failed to parse query 'import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:idref(("id1", "nomatching"), /ids:IDS[1])'
fn-idref-dtd-10;The function fn:idref with arity 2 is not registered.
fn-idref-dtd-11;The function fn:idref with arity 2 is not registered.
fn-idref-dtd-12;The function fn:idref with arity 2 is not registered.
fn-idref-dtd-13;The function fn:idref with arity 2 is not registered.
fn-idref-dtd-14;The function fn:idref with arity 2 is not registered.
fn-idref-dtd-15;The function fn:idref with arity 2 is not registered.
fn-idref-dtd-16;The function fn:idref with arity 2 is not registered.
fn-idref-dtd-17;The function fn:idref with arity 2 is not registered.
fn-idref-dtd-18;The function fn:idref with arity 2 is not registered.
fn-idref-dtd-19;The function fn:idref with arity 2 is not registered.
fn-idref-dtd-20;The function fn:idref with arity 2 is not registered.
fn-idref-dtd-21;The function fn:idref with arity 2 is not registered.
fn-idref-dtd-23;PRSC Error: Failed to parse query 'declare ordering ordered;  \n        <results>{fn:idref("id4", /IDS[1])}</results>'
fn-idref-dtd-24;PRSC Error: Failed to parse query '<results>{fn:idref("language", /)}</results>'
fn-idref-dtd-25;The function fn:idref with arity 1 is not registered.
fn-idref-dtd-5;The function fn:idref with arity 2 is not registered.
fn-idref-dtd-6;The function fn:idref with arity 2 is not registered.
fn-idref-dtd-7;The function fn:idref with arity 2 is not registered.
fn-idref-dtd-8;Expected error code: XQDY0025. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<results>{fn:idref(("id1", "id2"), /IDS[1])}</results>'
fn-idref-dtd-9;The function fn:idref with arity 2 is not registered.
fn-implicit-timezone-10;Expected error code: FOCA0005. Found error code: XPST0017 with error message: The function fn:implicit-timezone with arity 0 is not registered.
fn-implicit-timezone-11;Expected error code: FODT0002. Found error code: XPST0017 with error message: The function fn:implicit-timezone with arity 0 is not registered.
fn-implicit-timezone-12;Expected error code: FODT0002. Found error code: XPST0017 with error message: The function fn:implicit-timezone with arity 0 is not registered.
fn-implicit-timezone-13;The function implicit-timezone with arity 0 is not registered.
fn-implicit-timezone-14;PRSC Error: Failed to parse query '(fn:string(fn:implicit-timezone() div xs:dayTimeDuration("P0DT60M00S"))) instance of $xs:string'
fn-implicit-timezone-15;PRSC Error: Failed to parse query '(xs:time("05:00:00") + fn:implicit-timezone()) instance of $xs:time'
fn-implicit-timezone-16;PRSC Error: Failed to parse query '(xs:time("05:00:00") - fn:implicit-timezone()) instance of $xs:time'
fn-implicit-timezone-17;PRSC Error: Failed to parse query '((xs:date("2000-10-30") - fn:implicit-timezone())) instance of $xs:date'
fn-implicit-timezone-18;PRSC Error: Failed to parse query '((xs:date("2000-10-30") + fn:implicit-timezone())) instance of $xs:date'
fn-implicit-timezone-19;PRSC Error: Failed to parse query '((xs:dateTime("2000-10-30T11:12:00") - fn:implicit-timezone())) instance of $xs:dateTime'
fn-implicit-timezone-2;PRSC Error: Failed to parse query '(fn:implicit-timezone()) instance of $xs:dayTimeDuration'
fn-implicit-timezone-20;PRSC Error: Failed to parse query '((xs:dateTime("2000-10-30T11:12:00") + fn:implicit-timezone())) instance of $xs:dateTime'
fn-implicit-timezone-21;PRSC Error: Failed to parse query '((fn:adjust-date-to-timezone(xs:date("2000-10-30"),fn:implicit-timezone()))) instance of $xs:date'
fn-implicit-timezone-22;PRSC Error: Failed to parse query '((fn:adjust-time-to-timezone(xs:time("10:00:00"),fn:implicit-timezone()))) instance of $xs:time'
fn-implicit-timezone-23;PRSC Error: Failed to parse query '((fn:adjust-dateTime-to-timezone(xs:dateTime("2002-03-07T10:00:00"),fn:implicit-timezone()))) instance of $xs:dateTime'
fn-implicit-timezone-24;The function implicit-timezone with arity 0 is not registered.
fn-implicit-timezone-3;PRSC Error: Failed to parse query '(fn:string(fn:implicit-timezone() + fn:implicit-timezone())) instance of $xs:string'
fn-implicit-timezone-4;The function fn:implicit-timezone with arity 0 is not registered.
fn-implicit-timezone-5;PRSC Error: Failed to parse query '(fn:implicit-timezone() * xs:double(2)) instance of $xs:dayTimeDuration'
fn-implicit-timezone-6;Expected error code: FOCA0005. Found error code: XPST0017 with error message: The function fn:implicit-timezone with arity 0 is not registered.
fn-implicit-timezone-7;The function fn:implicit-timezone with arity 0 is not registered.
fn-implicit-timezone-8;The function fn:implicit-timezone with arity 0 is not registered.
fn-implicit-timezone-9;PRSC Error: Failed to parse query '(fn:string(fn:implicit-timezone() div xs:double(2))) instance of $xs:string'
fn-indexof-mix-args-008;Expected XPath fn:index-of((xs:float('NaN')), fn:exactly-one(xs:float('NaN'))) to resolve to <empty string>, but instead got 1
fn-indexof-mix-args-009;Expected XPath fn:index-of((xs:double('NaN')), fn:exactly-one(xs:double('NaN'))) to resolve to <empty string>, but instead got 1
fn-indexof-mix-args-021;Equal not available for XsInteger and XsString
fn-innermost-007;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function fn:dateTime with arity 2 is not registered.
fn-innermost-008;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function fn:current-dateTime with arity 0 is not registered.
fn-innermost-009;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function current-date with arity 0 is not registered.
fn-innermost-010;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function fn:current-dateTime with arity 0 is not registered.
fn-innermost-011;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function current-date with arity 0 is not registered.
fn-innermost-017;PRSC Error: Failed to parse query '(fn:innermost( //*/namespace::* )) => count()'
fn-innermost-018;Skipped test, it was a assert-permutation
fn-innermost-019;Skipped test, it was a assert-permutation
fn-innermost-020;Skipped test, it was a assert-permutation
fn-innermost-021;Skipped test, it was a assert-permutation
fn-innermost-022;PRSC Error: Failed to parse query 'fn:deep-equal( fn:innermost( //*/namespace::* ),\n                           //*/namespace::* )'
fn-innermost-029;Expected fn:innermost( //text() ) to resolve to 14
fn-innermost-030;Expected XPath fn:innermost( //text() ) ! string() to (deep equally) resolve to ('0t',' ',
fn-innermost-035;Expected fn:innermost( //node() ) to resolve to 35
fn-innermost-036;Expected XPath fn:deep-equal( fn:innermost( //node() ), \n                           let $nodes := //node()\n                           return $nodes except $nodes/ancestor::node() ) to resolve to true
fn-innermost-045;Expected fn:innermost( /root/level[1]/level[last()]/preceding::node() ) to resolve to 10
fn-innermost-046;Expected XPath fn:deep-equal( fn:innermost( /root/level[1]/level[last()]/preceding::node() ), \n                           let $nodes := /root/level[1]/level[last()]/preceding::node()\n                           return $nodes except $nodes/ancestor::node() ) to resolve to true
fn-innermost-049;Expected fn:innermost( /root/level[1]/level[1]/following::node() ) to resolve to 20
fn-innermost-053;Expected fn:innermost( ($doc1//node(), $doc2//node()) ) to resolve to 26
fn-innermost-054;Expected XPath fn:deep-equal( fn:innermost( ($doc1//node(), $doc2//node()) ),\n                           let $nodes := ($doc1//node(), $doc2//node())\n                           return $nodes except $nodes/ancestor::node() ) to resolve to true
fn-innermost-055;Use of XQuery FLWOR expressions in XPath is not allowed
fn-innermost-056;Use of XQuery FLWOR expressions in XPath is not allowed
fn-innermost-059;The function parse-xml with arity 1 is not registered.
fn-insert-before-mix-args-005;Type casting to XsAnyUri has not been implemented yet.
fn-insert-before-mix-args-018;Comparison between dates/times not implemented yet
fn-insert-before-mix-args-019;Comparison between dates/times not implemented yet
fn-insert-before-mix-args-020;Comparison between dates/times not implemented yet
fn-intersect-node-args-005;Haven't implemented Qnames from: PI1:
fn-intersect-node-args-006;Haven't implemented Qnames from: PI1:
fn-intersect-node-args-015;Expected all children to match between result and parsedFragment.
fn-intersect-node-args-016;Expected all children to match between result and parsedFragment.
fn-intersect-node-args-023;PRSC Error: Failed to parse query 'for $node in ((//price/text()) , (//price/text())) intersect ((//price/text()) , (//price/text())) return <a> {$node} </a>'
fn-iri-to-uri-18;Expected XPath fn:iri-to-uri("example&amp;amp;example") to resolve to example&amp;example, but instead got example&amp;amp;example
fn-local-name-from-qname-022;The function fn:local-name-from-QName with arity 1 is not registered.
fn-local-name-from-qname-023;The function fn:local-name-from-QName with arity 1 is not registered.
fn-local-name-from-qname-024;The function fn:local-name-from-QName with arity 1 is not registered.
fn-lower-case-19;Expected XPath fn:string-to-codepoints(fn:lower-case(fn:codepoints-to-string(880 to 1023))) to (deep equally) resolve to 
fn-lower-case-21;Expected XPath fn:string-to-codepoints(fn:lower-case(fn:codepoints-to-string(304))) to (deep equally) resolve to 105, 775
fn-matches-1;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-10;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-11;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-12;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-13;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-14;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-15;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-16;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-17;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-18;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-19;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-2;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-20;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-21;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-22;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-23;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-24;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-25;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-26;The function fn:matches with arity 3 is not registered.
fn-matches-27;The function fn:matches with arity 3 is not registered.
fn-matches-28;The function fn:matches with arity 3 is not registered.
fn-matches-29;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-3;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-30;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-31;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-32;The function fn:matches with arity 3 is not registered.
fn-matches-33;The function fn:matches with arity 3 is not registered.
fn-matches-34;The function fn:matches with arity 3 is not registered.
fn-matches-35;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-36;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-37;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-38;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-39;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-4;The function fn:matches with arity 3 is not registered.
fn-matches-40;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-41;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-42;The function fn:matches with arity 3 is not registered.
fn-matches-43;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-44;The function fn:matches with arity 3 is not registered.
fn-matches-45;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-46;The function fn:matches with arity 3 is not registered.
fn-matches-47;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-48;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-49;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-5;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-50;PRSC Error: Failed to parse query 'let $result := (\n        declare namespace err="http://www.w3.org/2005/xqt-errors";\n      	<results>{\n      		for $t in /tests/test\n      		return try {\n      		    let $matches := matches($t/@input, $t/@regex, string($t/@flags))\n      		    return\n      		       if ($matches (:trace($matches, $t/@id):) and $t/@result ne 'y')\n      		         then <fail>{$t}</fail>\n      		       else if (not($matches) and $t/@result ne 'n') \n      		         then <fail>{$t}</fail>\n      		       else ()\n      	    } catch * {\n      	        if ($t/@result = ('y', 'n'))\n      	        then <fail error="{$err:code}">{$t}</fail>\n      	        else ()\n      	    }   \n      	}</results>\n      ) return empty($result//fail)'
fn-matches-51;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-52;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-53;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-54;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-55;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-56;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-57;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-58;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-59;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-6;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-60;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-61;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-7;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-8;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches-9;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches2args-1;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches2args-2;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches2args-3;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches2args-4;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matches2args-5;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matchesErr-1;Expected error code: FORX0001. Found error code: XPST0017 with error message: The function fn:matches with arity 3 is not registered.
fn-matchesErr-2;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matchesErr-3;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matchesErr-4;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-matchesErr-5;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fn-max-10;PRSC Error: Failed to parse query 'for $p in 1 to 4 let $x := (xs:integer(1), xs:decimal(2), xs:float(3), xs:double(4))[position() le $p] return typeswitch (max($x)) case xs:integer return "integer" case xs:decimal return "decimal" case xs:float return "float" case xs:double return "double" default return error()'
fn-max-11;Input string was not in a correct format.
fn-max-12;Unable to cast object of type 'FontoXPathCSharp.Value.InternalValues.DateTime' to type 'System.IConvertible'.
fn-max-13;Atomic Value for XsNcName is not implemented yet.
fn-max-14;PRSC Error: Failed to parse query '(max((xs:positiveInteger(123), xs:unsignedShort(124)))) instance of $xs:nonNegativeInteger'
fn-max-15;PRSC Error: Failed to parse query '(max((xs:positiveInteger(123), xs:unsignedShort(124)))) instance of $xs:unsignedShort'
fn-max-16;Type casting to XsAnyUri has not been implemented yet.
fn-max-17;Type casting to XsAnyUri has not been implemented yet.
fn-max-18;Atomic Value for XsToken is not implemented yet.
fn-max-19;PRSC Error: Failed to parse query 'max([1,2,3,4,5]) = 5'
fn-max-2;PRSC Error: Failed to parse query 'fn:max((xs:integer(5000000000),xs:double(3e0))) = 5.0E9'
fn-max-4;Unable to cast object of type 'FontoXPathCSharp.Value.InternalValues.Duration' to type 'System.IConvertible'.
fn-max-5;Unable to cast object of type 'FontoXPathCSharp.Value.InternalValues.Duration' to type 'System.IConvertible'.
fn-max-6;Unable to cast object of type 'FontoXPathCSharp.Value.InternalValues.Duration' to type 'System.IConvertible'.
fn-max-7;Unable to cast object of type 'FontoXPathCSharp.Value.InternalValues.Duration' to type 'System.IConvertible'.
fn-max-8;Expected executing the XPath 'max((xs:yearMonthDuration("P1Y"), xs:dayTimeDuration("P1D")))' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPathException with code FORG0006, but got Unable to cast object of type 'FontoXPathCSharp.Value.InternalValues.Duration' to type 'System.IConvertible'.
fn-max-9;Expected executing the XPath 'max(xs:duration("P1Y1M1D"))' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: FORG0006. Query succeeded with result: PT
fn-maxdbl1args-1;PRSC Error: Failed to parse query 'fn:max((xs:double("-1.7976931348623157E308"))) = -1.7976931348623157E308'
fn-maxdbl1args-3;PRSC Error: Failed to parse query 'fn:max((xs:double("1.7976931348623157E308"))) = 1.7976931348623157E308'
fn-maxdbl2args-1;PRSC Error: Failed to parse query 'fn:max((xs:double("-1.7976931348623157E308"),xs:double("-1.7976931348623157E308"))) = -1.7976931348623157E308'
fn-maxdbl2args-2;Value was either too large or too small for a Decimal.
fn-maxdbl2args-3;PRSC Error: Failed to parse query 'fn:max((xs:double("1.7976931348623157E308"),xs:double("-1.7976931348623157E308"))) = 1.7976931348623157E308'
fn-maxdbl2args-4;Value was either too large or too small for a Decimal.
fn-maxdbl2args-5;PRSC Error: Failed to parse query 'fn:max((xs:double("-1.7976931348623157E308"),xs:double("1.7976931348623157E308"))) = 1.7976931348623157E308'
fn-maxflt2args-1;PRSC Error: Failed to parse query 'fn:max((xs:float("-3.4028235E38"),xs:float("-3.4028235E38"))) = xs:float(-3.4028235E38)'
fn-maxflt2args-2;Value was either too large or too small for a Decimal.
fn-maxflt2args-3;PRSC Error: Failed to parse query 'fn:max((xs:float("3.4028235E38"),xs:float("-3.4028235E38"))) = xs:float(3.4028235E38)'
fn-maxflt2args-4;Value was either too large or too small for a Decimal.
fn-maxflt2args-5;PRSC Error: Failed to parse query 'fn:max((xs:float("-3.4028235E38"),xs:float("3.4028235E38"))) = xs:float(3.4028235E38)'
fn-min-10;PRSC Error: Failed to parse query 'for $p in 1 to 4 let $x := (xs:integer(4), xs:decimal(3), xs:float(2), xs:double(1))[position() le $p] return typeswitch (min($x)) case xs:integer return "integer" case xs:decimal return "decimal" case xs:float return "float" case xs:double return "double" default return error()'
fn-min-11;Input string was not in a correct format.
fn-min-12;Unable to cast object of type 'FontoXPathCSharp.Value.InternalValues.DateTime' to type 'System.IConvertible'.
fn-min-13;Atomic Value for XsNcName is not implemented yet.
fn-min-14;PRSC Error: Failed to parse query '(min((xs:positiveInteger(123), xs:unsignedShort(124)))) instance of $xs:nonNegativeInteger'
fn-min-15;PRSC Error: Failed to parse query '(min((xs:positiveInteger(123), xs:unsignedShort(124)))) instance of $xs:positiveInteger'
fn-min-16;Type casting to XsAnyUri has not been implemented yet.
fn-min-17;Type casting to XsAnyUri has not been implemented yet.
fn-min-18;Atomic Value for XsToken is not implemented yet.
fn-min-19;PRSC Error: Failed to parse query 'min([1,2,3,4,5]) = 1'
fn-min-2;PRSC Error: Failed to parse query 'fn:min((xs:integer(5000000),xs:double(3e8))) = 5.0E6'
fn-min-4;Unable to cast object of type 'FontoXPathCSharp.Value.InternalValues.Duration' to type 'System.IConvertible'.
fn-min-5;Unable to cast object of type 'FontoXPathCSharp.Value.InternalValues.Duration' to type 'System.IConvertible'.
fn-min-6;Unable to cast object of type 'FontoXPathCSharp.Value.InternalValues.Duration' to type 'System.IConvertible'.
fn-min-7;Unable to cast object of type 'FontoXPathCSharp.Value.InternalValues.Duration' to type 'System.IConvertible'.
fn-min-8;Expected executing the XPath 'min((xs:yearMonthDuration("P1Y"), xs:dayTimeDuration("P1D")))' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPathException with code FORG0006, but got Unable to cast object of type 'FontoXPathCSharp.Value.InternalValues.Duration' to type 'System.IConvertible'.
fn-min-9;Expected executing the XPath 'min(xs:duration("P1Y1M1D"))' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: FORG0006. Query succeeded with result: PT
fn-mindbl1args-1;PRSC Error: Failed to parse query 'fn:min((xs:double("-1.7976931348623157E308"))) = -1.7976931348623157E308'
fn-mindbl1args-3;PRSC Error: Failed to parse query 'fn:min((xs:double("1.7976931348623157E308"))) = 1.7976931348623157E308'
fn-mindbl2args-1;PRSC Error: Failed to parse query 'fn:min((xs:double("-1.7976931348623157E308"),xs:double("-1.7976931348623157E308"))) = -1.7976931348623157E308'
fn-mindbl2args-2;PRSC Error: Failed to parse query 'fn:min((xs:double("0"),xs:double("-1.7976931348623157E308"))) = -1.7976931348623157E308'
fn-mindbl2args-3;PRSC Error: Failed to parse query 'fn:min((xs:double("1.7976931348623157E308"),xs:double("-1.7976931348623157E308"))) = -1.7976931348623157E308'
fn-mindbl2args-4;PRSC Error: Failed to parse query 'fn:min((xs:double("-1.7976931348623157E308"),xs:double("0"))) = -1.7976931348623157E308'
fn-mindbl2args-5;PRSC Error: Failed to parse query 'fn:min((xs:double("-1.7976931348623157E308"),xs:double("1.7976931348623157E308"))) = -1.7976931348623157E308'
fn-minflt2args-1;Value was either too large or too small for a Decimal.
fn-minflt2args-2;Value was either too large or too small for a Decimal.
fn-minflt2args-3;Value was either too large or too small for a Decimal.
fn-minflt2args-4;Value was either too large or too small for a Decimal.
fn-minflt2args-5;Value was either too large or too small for a Decimal.
fn-minutes-from-dateTime-1;The function fn:minutes-from-dateTime with arity 1 is not registered.
fn-minutes-from-dateTime-10;The function fn:minutes-from-dateTime with arity 1 is not registered.
fn-minutes-from-dateTime-11;The function fn:minutes-from-dateTime with arity 1 is not registered.
fn-minutes-from-dateTime-12;The function fn:minutes-from-dateTime with arity 1 is not registered.
fn-minutes-from-dateTime-13;The function fn:minutes-from-dateTime with arity 1 is not registered.
fn-minutes-from-dateTime-14;The function fn:minutes-from-dateTime with arity 1 is not registered.
fn-minutes-from-dateTime-15;The function fn:minutes-from-dateTime with arity 1 is not registered.
fn-minutes-from-dateTime-16;The function fn:minutes-from-dateTime with arity 1 is not registered.
fn-minutes-from-dateTime-17;The function fn:minutes-from-dateTime with arity 1 is not registered.
fn-minutes-from-dateTime-18;The function fn:minutes-from-dateTime with arity 1 is not registered.
fn-minutes-from-dateTime-19;The function fn:minutes-from-dateTime with arity 1 is not registered.
fn-minutes-from-dateTime-2;The function fn:minutes-from-dateTime with arity 1 is not registered.
fn-minutes-from-dateTime-3;The function fn:minutes-from-dateTime with arity 1 is not registered.
fn-minutes-from-dateTime-4;The function fn:minutes-from-dateTime with arity 1 is not registered.
fn-minutes-from-dateTime-5;The function fn:minutes-from-dateTime with arity 1 is not registered.
fn-minutes-from-dateTime-6;The function fn:minutes-from-dateTime with arity 1 is not registered.
fn-minutes-from-dateTime-7;The function fn:minutes-from-dateTime with arity 1 is not registered.
fn-minutes-from-dateTime-8;The function fn:minutes-from-dateTime with arity 1 is not registered.
fn-minutes-from-dateTime-9;The function fn:minutes-from-dateTime with arity 1 is not registered.
fn-minutes-from-dateTime1args-1;The function fn:minutes-from-dateTime with arity 1 is not registered.
fn-minutes-from-dateTime1args-2;The function fn:minutes-from-dateTime with arity 1 is not registered.
fn-minutes-from-dateTime1args-3;The function fn:minutes-from-dateTime with arity 1 is not registered.
fn-minutes-from-duration-1;The function fn:minutes-from-duration with arity 1 is not registered.
fn-minutes-from-duration-10;The function fn:minutes-from-duration with arity 1 is not registered.
fn-minutes-from-duration-11;The function fn:minutes-from-duration with arity 1 is not registered.
fn-minutes-from-duration-12;The function fn:minutes-from-duration with arity 1 is not registered.
fn-minutes-from-duration-13;The function fn:minutes-from-duration with arity 1 is not registered.
fn-minutes-from-duration-14;The function fn:minutes-from-duration with arity 1 is not registered.
fn-minutes-from-duration-15;The function fn:minutes-from-duration with arity 1 is not registered.
fn-minutes-from-duration-16;The function fn:minutes-from-duration with arity 1 is not registered.
fn-minutes-from-duration-17;The function fn:minutes-from-duration with arity 1 is not registered.
fn-minutes-from-duration-18;The function fn:minutes-from-duration with arity 1 is not registered.
fn-minutes-from-duration-19;The function fn:minutes-from-duration with arity 1 is not registered.
fn-minutes-from-duration-2;The function fn:minutes-from-duration with arity 1 is not registered.
fn-minutes-from-duration-20;The function fn:minutes-from-duration with arity 1 is not registered.
fn-minutes-from-duration-21;The function fn:minutes-from-duration with arity 1 is not registered.
fn-minutes-from-duration-3;The function fn:minutes-from-duration with arity 1 is not registered.
fn-minutes-from-duration-4;The function fn:minutes-from-duration with arity 1 is not registered.
fn-minutes-from-duration-5;The function fn:minutes-from-duration with arity 1 is not registered.
fn-minutes-from-duration-6;The function fn:minutes-from-duration with arity 1 is not registered.
fn-minutes-from-duration-7;The function fn:minutes-from-duration with arity 1 is not registered.
fn-minutes-from-duration-8;The function fn:minutes-from-duration with arity 1 is not registered.
fn-minutes-from-duration-9;The function fn:minutes-from-duration with arity 1 is not registered.
fn-minutes-from-duration1args-1;The function fn:minutes-from-duration with arity 1 is not registered.
fn-minutes-from-duration1args-2;The function fn:minutes-from-duration with arity 1 is not registered.
fn-minutes-from-duration1args-3;The function fn:minutes-from-duration with arity 1 is not registered.
fn-minutes-from-time-1;The function fn:minutes-from-time with arity 1 is not registered.
fn-minutes-from-time-10;The function fn:minutes-from-time with arity 1 is not registered.
fn-minutes-from-time-11;The function fn:minutes-from-time with arity 1 is not registered.
fn-minutes-from-time-12;The function fn:minutes-from-time with arity 1 is not registered.
fn-minutes-from-time-13;The function fn:minutes-from-time with arity 1 is not registered.
fn-minutes-from-time-14;The function fn:minutes-from-time with arity 1 is not registered.
fn-minutes-from-time-15;The function fn:minutes-from-time with arity 1 is not registered.
fn-minutes-from-time-16;The function fn:minutes-from-time with arity 1 is not registered.
fn-minutes-from-time-17;The function fn:minutes-from-time with arity 1 is not registered.
fn-minutes-from-time-18;The function fn:minutes-from-time with arity 1 is not registered.
fn-minutes-from-time-19;The function fn:minutes-from-time with arity 1 is not registered.
fn-minutes-from-time-2;The function fn:minutes-from-time with arity 1 is not registered.
fn-minutes-from-time-3;The function fn:minutes-from-time with arity 1 is not registered.
fn-minutes-from-time-4;The function fn:minutes-from-time with arity 1 is not registered.
fn-minutes-from-time-5;The function fn:minutes-from-time with arity 1 is not registered.
fn-minutes-from-time-6;The function fn:hours-from-time with arity 1 is not registered.
fn-minutes-from-time-7;The function fn:minutes-from-time with arity 1 is not registered.
fn-minutes-from-time-8;The function fn:minutes-from-time with arity 1 is not registered.
fn-minutes-from-time-9;The function fn:minutes-from-time with arity 1 is not registered.
fn-minutes-from-time1args-1;The function fn:minutes-from-time with arity 1 is not registered.
fn-minutes-from-time1args-2;The function fn:minutes-from-time with arity 1 is not registered.
fn-minutes-from-time1args-3;The function fn:minutes-from-time with arity 1 is not registered.
fn-month-from-date-1;The function fn:month-from-date with arity 1 is not registered.
fn-month-from-date-10;The function fn:month-from-date with arity 1 is not registered.
fn-month-from-date-11;The function fn:month-from-date with arity 1 is not registered.
fn-month-from-date-12;The function fn:month-from-date with arity 1 is not registered.
fn-month-from-date-13;The function fn:month-from-date with arity 1 is not registered.
fn-month-from-date-14;The function fn:month-from-date with arity 1 is not registered.
fn-month-from-date-15;The function fn:month-from-date with arity 1 is not registered.
fn-month-from-date-16;The function fn:month-from-date with arity 1 is not registered.
fn-month-from-date-17;The function fn:month-from-date with arity 1 is not registered.
fn-month-from-date-18;The function fn:month-from-date with arity 1 is not registered.
fn-month-from-date-19;The function fn:month-from-date with arity 1 is not registered.
fn-month-from-date-2;The function fn:month-from-date with arity 1 is not registered.
fn-month-from-date-3;The function fn:month-from-date with arity 1 is not registered.
fn-month-from-date-4;The function fn:month-from-date with arity 1 is not registered.
fn-month-from-date-5;The function fn:month-from-date with arity 1 is not registered.
fn-month-from-date-6;The function fn:month-from-date with arity 1 is not registered.
fn-month-from-date-7;The function fn:month-from-date with arity 1 is not registered.
fn-month-from-date-8;The function fn:month-from-date with arity 1 is not registered.
fn-month-from-date-9;The function fn:month-from-date with arity 1 is not registered.
fn-month-from-date1args-1;The function fn:month-from-date with arity 1 is not registered.
fn-month-from-date1args-2;The function fn:month-from-date with arity 1 is not registered.
fn-month-from-date1args-3;The function fn:month-from-date with arity 1 is not registered.
fn-month-from-dateTime-1;The function fn:month-from-dateTime with arity 1 is not registered.
fn-month-from-dateTime-11;The function fn:month-from-dateTime with arity 1 is not registered.
fn-month-from-dateTime-12;The function fn:month-from-dateTime with arity 1 is not registered.
fn-month-from-dateTime-13;The function fn:month-from-dateTime with arity 1 is not registered.
fn-month-from-dateTime-14;The function fn:month-from-dateTime with arity 1 is not registered.
fn-month-from-dateTime-15;The function fn:month-from-dateTime with arity 1 is not registered.
fn-month-from-dateTime-16;The function fn:month-from-dateTime with arity 1 is not registered.
fn-month-from-dateTime-17;The function fn:month-from-dateTime with arity 1 is not registered.
fn-month-from-dateTime-18;The function fn:month-from-dateTime with arity 1 is not registered.
fn-month-from-dateTime-19;The function fn:month-from-dateTime with arity 1 is not registered.
fn-month-from-dateTime-2;The function fn:month-from-dateTime with arity 1 is not registered.
fn-month-from-dateTime-3;The function fn:month-from-dateTime with arity 1 is not registered.
fn-month-from-dateTime-4;The function fn:month-from-dateTime with arity 1 is not registered.
fn-month-from-dateTime-5;The function fn:month-from-dateTime with arity 1 is not registered.
fn-month-from-dateTime-6;The function fn:month-from-dateTime with arity 1 is not registered.
fn-month-from-dateTime-7;The function fn:month-from-dateTime with arity 1 is not registered.
fn-month-from-dateTime-8;The function fn:month-from-dateTime with arity 1 is not registered.
fn-month-from-dateTime-9;The function fn:month-from-dateTime with arity 1 is not registered.
fn-month-from-dateTime1args-1;The function fn:month-from-dateTime with arity 1 is not registered.
fn-month-from-dateTime1args-2;The function fn:month-from-dateTime with arity 1 is not registered.
fn-month-from-dateTime1args-3;The function fn:month-from-dateTime with arity 1 is not registered.
fn-month-from-dateTimeNew-10;The function fn:month-from-dateTime with arity 1 is not registered.
fn-months-from-duration-1;The function fn:months-from-duration with arity 1 is not registered.
fn-months-from-duration-10;The function fn:months-from-duration with arity 1 is not registered.
fn-months-from-duration-11;The function fn:months-from-duration with arity 1 is not registered.
fn-months-from-duration-12;The function fn:months-from-duration with arity 1 is not registered.
fn-months-from-duration-13;The function fn:months-from-duration with arity 1 is not registered.
fn-months-from-duration-14;The function fn:months-from-duration with arity 1 is not registered.
fn-months-from-duration-15;The function fn:months-from-duration with arity 1 is not registered.
fn-months-from-duration-16;The function fn:months-from-duration with arity 1 is not registered.
fn-months-from-duration-17;The function fn:months-from-duration with arity 1 is not registered.
fn-months-from-duration-18;The function fn:months-from-duration with arity 1 is not registered.
fn-months-from-duration-19;The function fn:months-from-duration with arity 1 is not registered.
fn-months-from-duration-2;The function fn:months-from-duration with arity 1 is not registered.
fn-months-from-duration-20;The function fn:months-from-duration with arity 1 is not registered.
fn-months-from-duration-3;The function fn:months-from-duration with arity 1 is not registered.
fn-months-from-duration-4;The function fn:months-from-duration with arity 1 is not registered.
fn-months-from-duration-5;The function fn:months-from-duration with arity 1 is not registered.
fn-months-from-duration-6;The function fn:months-from-duration with arity 1 is not registered.
fn-months-from-duration-7;The function fn:months-from-duration with arity 1 is not registered.
fn-months-from-duration-8;The function fn:months-from-duration with arity 1 is not registered.
fn-months-from-duration-9;The function fn:months-from-duration with arity 1 is not registered.
fn-months-from-duration1args-1;The function fn:months-from-duration with arity 1 is not registered.
fn-months-from-duration1args-2;The function fn:months-from-duration with arity 1 is not registered.
fn-months-from-duration1args-3;The function fn:months-from-duration with arity 1 is not registered.
fn-name-1;Multiplicity of function return value of type xs:string for 'name' is incorrect. Expected exactly one
fn-name-10;Haven't implemented Qnames from: works:
fn-name-11;Haven't implemented Qnames from: empnum:
fn-name-12;Haven't implemented Qnames from: empnum:
fn-name-13;Haven't implemented Qnames from: employee:
fn-name-14;Haven't implemented Qnames from: employee:
fn-name-15;Haven't implemented Qnames from: employee:
fn-name-16;Expected executing the XPath 'for $h in (./works/employee[2]) return fn:count(fn:name($h/self::div))' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: Multiplicity of function return value of type xs:string for 'name' is incorrect. Expected exactly one
fn-name-17;Haven't implemented Qnames from: employee:
fn-name-18;Haven't implemented Qnames from: name:
fn-name-19;PRSC Error: Failed to parse query 'fn:name(<anElement>Content</anElement>)'
fn-name-2;Haven't implemented Qnames from: employee:
fn-name-20;PRSC Error: Failed to parse query 'fn:name(<anElement name="attribute1">Content</anElement>)'
fn-name-21;Haven't implemented Qnames from: employee:
fn-name-22;Haven't implemented Qnames from: employee:
fn-name-23;Expected error code: XPDY0002. Query succeeded with result: 
fn-name-24;Haven't implemented Qnames from: AuctionWatchList:ma
fn-name-25;Haven't implemented Qnames from: currency:ma
fn-name-26;Haven't implemented Qnames from: lang:xml
fn-name-27;PRSC Error: Failed to parse query 'name((//namespace::*[.='http://www.w3.org/1999/xlink'])[1])'
fn-name-28;Haven't implemented Qnames from: xml-stylesheet:
fn-name-29;Haven't implemented Qnames from: recorded:
fn-name-3;Haven't implemented Qnames from: name:
fn-name-5;Multiplicity of function return value of type xs:string for 'name' is incorrect. Expected exactly one
fn-name-7;Expected error code: XPDY0002. Query succeeded with result: 
fn-name-8;Haven't implemented Qnames from: employee:
fn-name-9;Haven't implemented Qnames from: employee:
fn-node-name-1;Object reference not set to an instance of an object.
fn-node-name-10;PRSC Error: Failed to parse query 'fn:local-name-from-QName(fn:node-name(element elementName { element achild {"some text"}}))'
fn-node-name-11;PRSC Error: Failed to parse query 'fn:local-name-from-QName(fn:node-name(attribute attributeName {""}))'
fn-node-name-12;PRSC Error: Failed to parse query 'fn:local-name-from-QName(fn:node-name(attribute attributeName {"an attribute value"}))'
fn-node-name-13;PRSC Error: Failed to parse query 'fn:count(fn:namespace-uri-from-QName(fn:node-name(attribute attributeName {"an attribute value"})))'
fn-node-name-14;PRSC Error: Failed to parse query 'fn:count(fn:local-name-from-QName(fn:node-name(document {""})))'
fn-node-name-15;PRSC Error: Failed to parse query 'fn:count(fn:namespace-uri-from-QName(fn:node-name(document {""})))'
fn-node-name-16;PRSC Error: Failed to parse query 'fn:count(fn:local-name-from-QName(fn:node-name(document {"<element1> text </element1>"})))'
fn-node-name-17;PRSC Error: Failed to parse query 'fn:count(fn:namespace-uri-from-QName(fn:node-name(document {"<element1> text </element1>"})))'
fn-node-name-18;PRSC Error: Failed to parse query 'fn:count(fn:local-name-from-QName(fn:node-name(text {""})))'
fn-node-name-19;PRSC Error: Failed to parse query 'fn:count(fn:namespace-uri-from-QName(fn:node-name(text {""})))'
fn-node-name-20;PRSC Error: Failed to parse query 'fn:count(fn:local-name-from-QName(fn:node-name(text {"a text value"})))'
fn-node-name-21;PRSC Error: Failed to parse query 'fn:count(fn:namespace-uri-from-QName(fn:node-name(text {"a text value"})))'
fn-node-name-22;PRSC Error: Failed to parse query 'fn:local-name-from-QName(fn:node-name(processing-instruction piName {"Processing Instruction content"}))'
fn-node-name-23;PRSC Error: Failed to parse query 'fn:count(fn:namespace-uri-from-QName(fn:node-name(processing-instruction piName {"Processing Instruction content"})))'
fn-node-name-24;Expected error code: XPST0017. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'fn:node-name(processing-instruction piName {"Processing Instruction content"},"A Second Argument")'
fn-node-name-25;PRSC Error: Failed to parse query '<node xmlns="http://example.com/ns"/>/node-name() = QName("http://example.com/ns", "node")'
fn-node-name-26;PRSC Error: Failed to parse query '<node xml:space="preserve" xmlns="http://example.com/ns"/>/@xml:space/node-name() = QName("http://www.w3.org/XML/1998/namespace", "space")'
fn-node-name-27;PRSC Error: Failed to parse query '<?test data?>/node-name() = QName("", "test")'
fn-node-name-28;PRSC Error: Failed to parse query 'namespace{"foo"}{"http://example.com/foo"}/node-name() = QName("", "foo")'
fn-node-name-29;PRSC Error: Failed to parse query '(<a>abc</a>/text()/node-name()) => empty()'
fn-node-name-3;The function fn:local-name-from-QName with arity 1 is not registered.
fn-node-name-30;Expected XPathException with code XPTY0004, but got Casting AbstractValue(XsInteger) to NodeValue`1
fn-node-name-31;Expected XPathException with code XPTY0004, but got Casting AbstractValue(Function) to NodeValue`1
fn-node-name-32;Expected error code: XPDY0002. Query succeeded with result: 
fn-node-name-4;PRSC Error: Failed to parse query 'fn:local-name-from-QName(fn:node-name(<shoe size = "5"/>))'
fn-node-name-5;PRSC Error: Failed to parse query 'fn:count(fn:node-name(<!-- This a comment node -->))'
fn-node-name-6;PRSC Error: Failed to parse query 'fn:local-name-from-QName(fn:node-name(<?format role="output" ?>))'
fn-node-name-7;PRSC Error: Failed to parse query 'fn:namespace-uri-from-QName(fn:node-name(<anelement xmlns = "http://example.com/examples"></anelement>))'
fn-node-name-8;PRSC Error: Failed to parse query 'fn:local-name-from-QName(fn:node-name(element elementName {}))'
fn-node-name-9;PRSC Error: Failed to parse query 'fn:count(fn:namespace-uri-from-QName(fn:node-name(element elementName {})))'
fn-normalize-space-2;Expected XPathException with code XPDY0002, but got Casting AbstractValue(DocumentNode) to StringValue
fn-normalize-space-23;Casting AbstractValue(Element) to StringValue
fn-normalize-space-24;Expected error code: FOTY0012. Query succeeded with result: ns:barns:bar2ns:barDerivurn1test1test2
fn-normalize-space-25;The function current-date with arity 0 is not registered.
fn-normalize-space-26;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function current-date with arity 0 is not registered.
fn-normalize-space0args-1;Casting AbstractValue(Element) to StringValue
fn-normalize-space1args-4;Object reference not set to an instance of an object.
fn-not-18;Expected XPath fn:string(fn:not("true")) to resolve to 'false'
fn-not-19;Expected XPath fn:concat(xs:string(fn:not("true")),xs:string(fn:not("true"))) to resolve to 'falsefalse'
fn-notdbl1args-1;Expected XPath fn:not(xs:double("-1.7976931348623157E308")) to resolve to false
fn-notdec1args-1;Expected XPath fn:not(xs:decimal("-999999999999999999")) to resolve to false
fn-notflt1args-1;Expected XPath fn:not(xs:float("-3.4028235E38")) to resolve to false
fn-notint1args-1;Expected XPath fn:not(xs:int("-2147483648")) to resolve to false
fn-notint1args-2;Expected XPath fn:not(xs:int("-1873914410")) to resolve to false
fn-notintg1args-1;Expected XPath fn:not(xs:integer("-999999999999999999")) to resolve to false
fn-notlng1args-1;Expected XPath fn:not(xs:long("-92233720368547758")) to resolve to false
fn-notlng1args-2;Expected XPath fn:not(xs:long("-47175562203048468")) to resolve to false
fn-notnint1args-1;Expected XPath fn:not(xs:negativeInteger("-999999999999999999")) to resolve to false
fn-notnint1args-2;Expected XPath fn:not(xs:negativeInteger("-297014075999096793")) to resolve to false
fn-notnint1args-3;Expected XPath fn:not(xs:negativeInteger("-1")) to resolve to false
fn-notnpi1args-1;Expected XPath fn:not(xs:nonPositiveInteger("-999999999999999999")) to resolve to false
fn-notnpi1args-2;Expected XPath fn:not(xs:nonPositiveInteger("-475688437271870490")) to resolve to false
fn-notsht1args-1;Expected XPath fn:not(xs:short("-32768")) to resolve to false
fn-notsht1args-2;Expected XPath fn:not(xs:short("-5324")) to resolve to false
fn-number-1;Expected XPath fn:number(()) to resolve to NaN, but instead got Infinity
fn-number-10;PRSC Error: Failed to parse query '(number(xs:untypedAtomic("1000"))) instance of $xs:double'
fn-number-2;Input string was not in a correct format.
fn-number-3;Expected XPathException with code XPDY0002, but got Input string was not in a correct format.
fn-number-4;Expected XPathException with code XPDY0002, but got Input string was not in a correct format.
fn-number-5;PRSC Error: Failed to parse query '(number(true())) instance of $xs:double'
fn-number-6;PRSC Error: Failed to parse query '(number(false())) instance of $xs:double'
fn-number-7;PRSC Error: Failed to parse query '(number(implicit-timezone())) instance of $xs:double'
fn-number-8;PRSC Error: Failed to parse query '(number("  -22e0  ")) instance of $xs:double'
fn-number-9;PRSC Error: Failed to parse query '(number("+22e0")) instance of $xs:double'
fn-numberdbl1args-1;Expected XPath fn:number(xs:double("-1.7976931348623157E308")) to resolve to -1.7976931348623157E308, but instead got -1.7976931348623157E+308
fn-numberdbl1args-2;Expected XPath fn:number(xs:double("0")) to resolve to 0, but instead got -0
fn-numberdbl1args-3;Expected XPath fn:number(xs:double("1.7976931348623157E308")) to resolve to 1.7976931348623157E308, but instead got 1.7976931348623157E+308
fn-numberdec1args-1;Expected XPath fn:number(xs:decimal("-999999999999999999")) to resolve to -1.0E18, but instead got -1E+18
fn-numberdec1args-2;Expected XPath fn:number(xs:decimal("617375191608514839")) eq 617375191608514839 to resolve to true
fn-numberdec1args-3;Expected XPath fn:number(xs:decimal("999999999999999999")) to resolve to 1.0E18, but instead got 1E+18
fn-numberflt1args-1;PRSC Error: Failed to parse query 'fn:number(xs:float("-3.4028235E38")) eq -3.4028234663852885E38'
fn-numberflt1args-2;Expected XPath fn:number(xs:float("0")) to resolve to 0, but instead got -0
fn-numberflt1args-3;Expected executing the XPath 'fn:number(xs:float("3.4028235E38"))' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPath fn:number(xs:float("3.4028235E38")) to resolve to 3.4028234663852885E38, but instead got 3.4028234663852886E+38
fn-numberint1args-1;Expected XPath fn:number(xs:int("-2147483648")) to resolve to -2.147483648E9, but instead got -2147483648
fn-numberint1args-2;Expected XPath fn:number(xs:int("-1873914410")) to resolve to -1.87391441E9, but instead got -1873914410
fn-numberint1args-3;Expected XPath fn:number(xs:int("2147483647")) to resolve to 2.147483647E9, but instead got 2147483647
fn-numberintg1args-1;Expected XPath fn:number(xs:integer("-999999999999999999")) to resolve to -1.0E18, but instead got -1E+18
fn-numberintg1args-2;Expected XPath fn:number(xs:integer("830993497117024304")) eq 830993497117024304 to resolve to true
fn-numberintg1args-3;Expected XPath fn:number(xs:integer("999999999999999999")) to resolve to 1.0E18, but instead got 1E+18
fn-numberlng1args-1;Expected XPath fn:number(xs:long("-92233720368547758")) to resolve to -9.223372036854776E16, but instead got -92233720368547760
fn-numberlng1args-2;Expected XPath fn:number(xs:long("-47175562203048468")) eq -47175562203048468 to resolve to true
fn-numberlng1args-3;Expected XPath fn:number(xs:long("92233720368547758")) to resolve to 9.223372036854776E16, but instead got 92233720368547760
fn-numbernint1args-1;Expected XPath fn:number(xs:negativeInteger("-999999999999999999")) to resolve to -1.0E18, but instead got -1E+18
fn-numbernint1args-2;Expected XPath fn:number(xs:negativeInteger("-297014075999096793")) eq -297014075999096793 to resolve to true
fn-numbernni1args-1;Expected XPath fn:number(xs:nonNegativeInteger("0")) to resolve to 0, but instead got -0
fn-numbernni1args-2;Expected XPath fn:number(xs:nonNegativeInteger("303884545991464527")) eq 303884545991464527 to resolve to true
fn-numbernni1args-3;Expected XPath fn:number(xs:nonNegativeInteger("999999999999999999")) to resolve to 1.0E18, but instead got 1E+18
fn-numbernpi1args-1;Expected XPath fn:number(xs:nonPositiveInteger("-999999999999999999")) to resolve to -1.0E18, but instead got -1E+18
fn-numbernpi1args-2;Expected executing the XPath 'fn:number(xs:nonPositiveInteger("-475688437271870490"))' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPath fn:number(xs:nonPositiveInteger("-475688437271870490")) to resolve to -4.7568843727187049E17, but instead got -4.7568843727187046E+17
fn-numbernpi1args-3;Expected XPath fn:number(xs:nonPositiveInteger("0")) to resolve to 0, but instead got -0
fn-numberpint1args-2;Expected XPath fn:number(xs:positiveInteger("52704602390610033")) eq 52704602390610033 to resolve to true
fn-numberpint1args-3;Expected XPath fn:number(xs:positiveInteger("999999999999999999")) to resolve to 1.0E18, but instead got 1E+18
fn-numberulng1args-1;Expected XPath fn:number(xs:unsignedLong("0")) to resolve to 0, but instead got -0
fn-numberulng1args-2;Expected executing the XPath 'fn:number(xs:unsignedLong("130747108607674654"))' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPath fn:number(xs:unsignedLong("130747108607674654")) to resolve to 1.3074710860767466E17, but instead got 1.3074710860767466E+17
fn-numberulng1args-3;PRSC Error: Failed to parse query 'fn:number(xs:unsignedLong("184467440737095516")) eq 1.8446744073709551E17'
fn-numberusht1args-1;Expected XPath fn:number(xs:unsignedShort("0")) to resolve to 0, but instead got -0
fn-one-or-moredbl1args-1;Expected XPath fn:one-or-more(xs:double("-1.7976931348623157E308")) to resolve to -1.7976931348623157E308, but instead got -1.7976931348623157E+308
fn-one-or-moredbl1args-2;Expected XPath fn:one-or-more(xs:double("0")) to resolve to 0, but instead got -0
fn-one-or-moredbl1args-3;Expected XPath fn:one-or-more(xs:double("1.7976931348623157E308")) to resolve to 1.7976931348623157E308, but instead got 1.7976931348623157E+308
fn-one-or-moreflt1args-1;Expected XPath fn:one-or-more(xs:float("-3.4028235E38")) to resolve to -3.4028235E38, but instead got -3.4028235E+38
fn-one-or-moreflt1args-2;Expected XPath fn:one-or-more(xs:float("0")) to resolve to 0, but instead got -0
fn-one-or-moreflt1args-3;Expected XPath fn:one-or-more(xs:float("3.4028235E38")) to resolve to 3.4028235E38, but instead got 3.4028235E+38
fn-outermost-007;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function fn:dateTime with arity 2 is not registered.
fn-outermost-008;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function fn:current-dateTime with arity 0 is not registered.
fn-outermost-009;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function current-date with arity 0 is not registered.
fn-outermost-010;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function fn:current-dateTime with arity 0 is not registered.
fn-outermost-011;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function current-date with arity 0 is not registered.
fn-outermost-017;PRSC Error: Failed to parse query '(fn:outermost( //*/namespace::* )) => count()'
fn-outermost-018;Skipped test, it was a assert-permutation
fn-outermost-019;Skipped test, it was a assert-permutation
fn-outermost-020;Skipped test, it was a assert-permutation
fn-outermost-021;Skipped test, it was a assert-permutation
fn-outermost-022;PRSC Error: Failed to parse query 'fn:deep-equal( fn:outermost( //*/namespace::* ),\n                           //*/namespace::* )'
fn-outermost-029;Expected fn:outermost( //text() ) to resolve to 14
fn-outermost-030;Expected XPath fn:outermost( //text() ) ! string() to (deep equally) resolve to ('0t',' ',
fn-outermost-035;Expected fn:outermost( //node() ) to resolve to 1
fn-outermost-036;Expected XPath fn:deep-equal( fn:outermost( //node() ), \n                           let $nodes := //node()\n                           return $nodes except $nodes/descendant::node() ) to resolve to true
fn-outermost-045;Expected fn:outermost( /root/level[1]/level[last()]/preceding::node() ) to resolve to 10
fn-outermost-046;Expected XPath fn:deep-equal( fn:outermost( /root/level[1]/level[last()]/preceding::node() ), \n                           let $nodes := /root/level[1]/level[last()]/preceding::node()\n                           return $nodes except $nodes/descendant::node() ) to resolve to true
fn-outermost-053;Expected fn:outermost( ($doc1//node(), $doc2//node()) ) to resolve to 2
fn-outermost-054;Expected XPath fn:deep-equal( fn:outermost( ($doc1//node(), $doc2//node()) ),\n                           let $nodes := ($doc1//node(), $doc2//node())\n                           return $nodes except $nodes/descendant::node() ) to resolve to true
fn-outermost-055;Use of XQuery FLWOR expressions in XPath is not allowed
fn-outermost-056;Use of XQuery FLWOR expressions in XPath is not allowed
fn-parse-json-001;PRSC Error: Failed to parse query 'deep-equal((parse-json("{}")), (map{}))'
fn-parse-json-002;PRSC Error: Failed to parse query 'deep-equal((parse-json('{"abc":12}', map{'liberal':false()})), (map{"abc":12e0}))'
fn-parse-json-003;PRSC Error: Failed to parse query 'deep-equal((parse-json('{"abc":12e0}')), (map{"abc":12e0}))'
fn-parse-json-004;PRSC Error: Failed to parse query 'deep-equal((parse-json('{"abc":-1.2e0}')), (map{"abc":-1.2e0}))'
fn-parse-json-005;PRSC Error: Failed to parse query 'deep-equal((parse-json('{"abc":true}')), (map{"abc":true()}))'
fn-parse-json-006;PRSC Error: Failed to parse query 'deep-equal((parse-json('{"abc":false}')), (map{"abc":false()}))'
fn-parse-json-007;PRSC Error: Failed to parse query 'deep-equal((parse-json('{"abc":null}')), (map{"abc":()}))'
fn-parse-json-008;PRSC Error: Failed to parse query 'deep-equal((parse-json('{"abc":true,"xyz":false}')), (map{"abc":true(),"xyz":false()}))'
fn-parse-json-009;PRSC Error: Failed to parse query 'deep-equal((parse-json(' { "abc" : true , "xyz" : false } ')), (map{"abc":true(),"xyz":false()}))'
fn-parse-json-010;PRSC Error: Failed to parse query 'deep-equal((parse-json('    {   "abc"   :   true    ,\n            "xyz"   :   false   \n            }   ')), (map{"abc":true(),"xyz":false()}))'
fn-parse-json-011;PRSC Error: Failed to parse query '(parse-json("[]")) instance of $array(*)'
fn-parse-json-012;PRSC Error: Failed to parse query '(parse-json("[12345]")) instance of $array(*)'
fn-parse-json-013;PRSC Error: Failed to parse query '(parse-json('["abcd"]')) instance of $array(*)'
fn-parse-json-014;PRSC Error: Failed to parse query '(parse-json("[true]")) instance of $array(*)'
fn-parse-json-015;PRSC Error: Failed to parse query '(parse-json("[false]")) instance of $array(*)'
fn-parse-json-016;PRSC Error: Failed to parse query '(parse-json("[null]")) instance of $array(*)'
fn-parse-json-017;PRSC Error: Failed to parse query '(parse-json('[1,2,3, "abc", "def", true, false, null]')) instance of $array(*)'
fn-parse-json-018;PRSC Error: Failed to parse query '(parse-json('\n        [   1,     2,  3, \n        "abc",  "def",   true, \n        false,  null ]\n        ')) instance of $array(*)'
fn-parse-json-019;PRSC Error: Failed to parse query '(parse-json("[[[],[]]]")) instance of $array(array(array(*)))'
fn-parse-json-020;PRSC Error: Failed to parse query '(parse-json('[1, 2, [], [1], [1,2], [1,2,3]]')) instance of $array(*)'
fn-parse-json-021;The function parse-json with arity 1 is not registered.
fn-parse-json-022;The function parse-json with arity 1 is not registered.
fn-parse-json-023;PRSC Error: Failed to parse query 'let $result := (parse-json('[0.123]')) return $result?1 = 0.123e0'
fn-parse-json-024;PRSC Error: Failed to parse query 'let $result := (parse-json('[-0.123]')) return $result?1 = -0.123e0'
fn-parse-json-025;PRSC Error: Failed to parse query 'let $result := (parse-json('[-0.123e2]')) return $result?1 = -0.123e2'
fn-parse-json-026;PRSC Error: Failed to parse query 'let $result := (parse-json('[-0.123e+2]')) return $result?1 = -0.123e+2'
fn-parse-json-027;PRSC Error: Failed to parse query 'let $result := (parse-json('[-0.123e-2]')) return $result?1 = -0.123e-2'
fn-parse-json-028;CompileAstToExpression.CompilePathExpression lookup postfix expression not implemented yet.
fn-parse-json-029;CompileAstToExpression.CompilePathExpression lookup postfix expression not implemented yet.
fn-parse-json-030;CompileAstToExpression.CompilePathExpression lookup postfix expression not implemented yet.
fn-parse-json-031;CompileAstToExpression.CompilePathExpression lookup postfix expression not implemented yet.
fn-parse-json-032;CompileAstToExpression.CompilePathExpression lookup postfix expression not implemented yet.
fn-parse-json-033;CompileAstToExpression.CompilePathExpression lookup postfix expression not implemented yet.
fn-parse-json-034;CompileAstToExpression.CompilePathExpression lookup postfix expression not implemented yet.
fn-parse-json-035;PRSC Error: Failed to parse query 'let $result := (parse-json('["\r"]', map{'escape':true()})) return $result?1 = '\r''
fn-parse-json-036;PRSC Error: Failed to parse query 'let $result := (parse-json('["\r"]', map{'escape':false()})) return $result?1 = codepoints-to-string(13)'
fn-parse-json-037;PRSC Error: Failed to parse query 'let $result := (parse-json('["\u0000"]', map{'escape':true()})) return $result?1 = '\u0000''
fn-parse-json-038;The function parse-json with arity 1 is not registered.
fn-parse-json-039;The function parse-json with arity 1 is not registered.
fn-parse-json-040;The function parse-json with arity 1 is not registered.
fn-parse-json-041;PRSC Error: Failed to parse query 'parse-json('93.7') = 93.7e0'
fn-parse-json-042;PRSC Error: Failed to parse query 'parse-json('"abcd\n"', map{'escape':true()}) = 'abcd\n''
fn-parse-json-050;PRSC Error: Failed to parse query 'deep-equal((parse-json('{"a":1, "b":2, "a":3}', map{'duplicates':'use-first'})), (map{"a":1, "b":2}))'
fn-parse-json-051;PRSC Error: Failed to parse query 'deep-equal((parse-json('{"a":1, "b":2, "a":3}', map{'duplicates':'use-last'})), (map{"a":3, "b":2}))'
fn-parse-json-052;PRSC Error: Failed to parse query 'deep-equal((parse-json('{"a":1, "b":2, "a":3}', map{})), (map{"a":1, "b":2}))'
fn-parse-json-053;The function parse-json with arity 1 is not registered.
fn-parse-json-054;The function parse-json with arity 1 is not registered.
fn-parse-json-055;The function parse-json with arity 1 is not registered.
fn-parse-json-056;The function map:keys with arity 1 is not registered.
fn-parse-json-057;The function map:keys with arity 1 is not registered.
fn-parse-json-058;The function map:keys with arity 1 is not registered.
fn-parse-json-059;PRSC Error: Failed to parse query 'parse-json('"\uFFFF"', map{'fallback':lower-case#1}) = "\uffff"'
fn-parse-json-060;PRSC Error: Failed to parse query 'parse-json('"\uDEAD"', map{'fallback':lower-case#1}) = "\udead"'
fn-parse-json-061;Expected executing the XPath 'parse-json('"\b"', map{'fallback':lower-case#1})' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'parse-json('"\b"', map{'fallback':lower-case#1}) = "\b"'
fn-parse-json-062;PRSC Error: Failed to parse query 'parse-json('{"\uFFFF":""}', map{'fallback':lower-case#1}) => map:keys() = "\uffff"'
fn-parse-json-063;PRSC Error: Failed to parse query 'parse-json('{"\uDEAD":""}', map{'fallback':lower-case#1}) => map:keys() = "\udead"'
fn-parse-json-064;Expected executing the XPath 'parse-json('{"\b":""}', map{'fallback':lower-case#1}) => map:keys()' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'parse-json('{"\b":""}', map{'fallback':lower-case#1}) => map:keys() = "\b"'
fn-parse-json-065;PRSC Error: Failed to parse query 'deep-equal((parse-json('{"a":1, "b":2}', map{'validate':true()})), (map{"a":1, "b":2}))'
fn-parse-json-066;PRSC Error: Failed to parse query 'deep-equal((\n        parse-json('\n          {\n             "x" : [1,2,[]],\n             "y" : { "a" : {} },\n             "x" : [3,4,[]],\n             "y" : { "c" : [], "c" : 1, "c" : {} }\n          }\n        ',\n        map{'duplicates':'use-last'})\n      ), (map{"x":[3,4,[]], "y":map{"c" : map{}}}))'
fn-parse-json-101;The function parse-json with arity 1 is not registered.
fn-parse-json-102;The function parse-json with arity 1 is not registered.
fn-parse-json-103;The function parse-json with arity 1 is not registered.
fn-parse-json-104;The function parse-json with arity 1 is not registered.
fn-parse-json-105;The function parse-json with arity 1 is not registered.
fn-parse-json-106;PRSC Error: Failed to parse query 'deep-equal((parse-json('{"x":"\\", "y":"\u0025"}', map{'escape':true()})), (map{"x":"\\","y":"%"}))'
fn-parse-json-107;PRSC Error: Failed to parse query 'deep-equal((parse-json('{"\\":"x", "\u0025":"y"}', map{'escape':true()})), (map{"\\":"x", "%":"y"}))'
fn-parse-json-108;Expected error code: FOJS0003. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'parse-json('{"%":"x", "\u0025":"y"}', map{'escape':true(), 'duplicates':'reject'})'
fn-parse-json-109;Expected error code: FOJS0003. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'parse-json('{"/":"x", "\/":"y"}', map{'escape':true(), 'duplicates':'reject'})'
fn-parse-json-110;Expected error code: FOJS0003. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'parse-json('{"\u000a\u0025":"x", "\n%":"y"}', map{'escape':true(), 'duplicates':'reject'})'
fn-parse-json-111;PRSC Error: Failed to parse query 'deep-equal((parse-json('{"%\u0010%":"x", "%\n%":"y"}', map{'escape':true(), 'duplicates':'reject'})), (map{"%\u0010%":"x", "%\n%":"y"}))'
fn-parse-json-112;The function parse-json with arity 1 is not registered.
fn-parse-json-113;PRSC Error: Failed to parse query '(parse-json((),  map{'escape':true(), 'duplicates':'reject'})) => empty()'
fn-parse-json-114;The function parse-json with arity 1 is not registered.
fn-parse-json-115;PRSC Error: Failed to parse query '(parse-json("[]"[current-date() lt xs:date('1900-01-01')],  map{'escape':true(), 'duplicates':'reject'})) => empty()'
fn-parse-json-801;Expected executing the XPath 'parse-json('[-0.123e-2,]', map{'liberal':true()})' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '(parse-json('[-0.123e-2,]', map{'liberal':true()})) instance of $item()?'
fn-parse-json-802;Expected executing the XPath 'parse-json('[FALSE]', map{'liberal':true()})' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '(parse-json('[FALSE]', map{'liberal':true()})) instance of $item()?'
fn-parse-json-804;Expected executing the XPath 'parse-json('[(5)]', map{'liberal':true()})' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '(parse-json('[(5)]', map{'liberal':true()})) instance of $item()?'
fn-parse-json-806;Expected executing the XPath 'parse-json('[{x:23}]', map{'liberal':true()})' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '(parse-json('[{x:23}]', map{'liberal':true()})) instance of $item()?'
fn-parse-json-809;Expected executing the XPath 'parse-json('[1,2,3,]', map{'liberal':true()})' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '(parse-json('[1,2,3,]', map{'liberal':true()})) instance of $item()?'
fn-parse-json-810;Expected executing the XPath 'parse-json('{"a":=13}', map{'liberal':true()})' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '(parse-json('{"a":=13}', map{'liberal':true()})) instance of $item()?'
fn-parse-json-811;Expected executing the XPath 'parse-json('{"a":13,,"b":15}', map{'liberal':true()})' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '(parse-json('{"a":13,,"b":15}', map{'liberal':true()})) instance of $item()?'
fn-parse-json-814;Expected executing the XPath 'parse-json('{"a":{"b":12}}}', map{'liberal':true()})' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '(parse-json('{"a":{"b":12}}}', map{'liberal':true()})) instance of $item()?'
fn-parse-json-815;Expected executing the XPath 'parse-json('["\"]', map{'liberal':true()})' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '(parse-json('["\"]', map{'liberal':true()})) instance of $item()?'
fn-parse-json-816;Expected executing the XPath 'parse-json('["\1"]', map{'liberal':true()})' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '(parse-json('["\1"]', map{'liberal':true()})) instance of $item()?'
fn-parse-json-817;Expected executing the XPath 'parse-json('["\u2"]', map{'liberal':true()})' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '(parse-json('["\u2"]', map{'liberal':true()})) instance of $item()?'
fn-parse-json-819;Expected executing the XPath 'parse-json('["\b"]', map{'liberal':true()})' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '(parse-json('["\b"]', map{'liberal':true()})) instance of $item()?'
fn-parse-json-820;Expected executing the XPath 'parse-json('["\x20"]', map{'liberal':true()})' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '(parse-json('["\x20"]', map{'liberal':true()})) instance of $item()?'
fn-parse-json-821;Expected executing the XPath 'parse-json('["\s"]', map{'liberal':true()})' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '(parse-json('["\s"]', map{'liberal':true()})) instance of $item()?'
fn-parse-json-822;Expected executing the XPath 'parse-json('["\uD834"]', map{'liberal':true()})' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '(parse-json('["\uD834"]', map{'liberal':true()})) instance of $item()?'
fn-parse-json-823;Expected executing the XPath 'parse-json('["\udD1E"]', map{'liberal':true()})' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '(parse-json('["\udD1E"]', map{'liberal':true()})) instance of $item()?'
fn-parse-json-824;Expected executing the XPath 'parse-json('["\u0000"]', map{'escape':false(), 'liberal':true()})' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '(parse-json('["\u0000"]', map{'escape':false(), 'liberal':true()})) instance of $item()?'
fn-parse-json-830;Expected executing the XPath 'parse-json('[.3]', map{'liberal':true()})' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '(parse-json('[.3]', map{'liberal':true()})) instance of $item()?'
fn-parse-json-831;Expected executing the XPath 'parse-json('[01]', map{'liberal':true()})' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '(parse-json('[01]', map{'liberal':true()})) instance of $item()?'
fn-parse-json-832;Expected executing the XPath 'parse-json('[00.00]', map{'liberal':true()})' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '(parse-json('[00.00]', map{'liberal':true()})) instance of $item()?'
fn-parse-json-833;Expected executing the XPath 'parse-json('[+23]', map{'liberal':true()})' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '(parse-json('[+23]', map{'liberal':true()})) instance of $item()?'
fn-parse-json-834;Expected executing the XPath 'parse-json('[1.234f0]', map{'liberal':true()})' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '(parse-json('[1.234f0]', map{'liberal':true()})) instance of $item()?'
fn-parse-json-835;Expected executing the XPath 'parse-json("['wrong']", map{'liberal':true()})' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '(parse-json("['wrong']", map{'liberal':true()})) instance of $item()?'
fn-parse-json-839;Expected executing the XPath 'parse-json('', map{'liberal':true()})' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '(parse-json('', map{'liberal':true()})) instance of $item()?'
fn-parse-json-840;Expected executing the XPath 'parse-json('{"'||codepoints-to-string((10, 37))||'":"x", "yyy":"y"}', map{'liberal':true()})' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '(parse-json('{"'||codepoints-to-string((10, 37))||'":"x", "yyy":"y"}', map{'liberal':true()})) instance of $item()?'
fn-parse-json-901;Expected error code: FOJS0001. Found error code: XPST0017 with error message: The function parse-json with arity 1 is not registered.
fn-parse-json-902;Expected error code: FOJS0001. Found error code: XPST0017 with error message: The function parse-json with arity 1 is not registered.
fn-parse-json-903;Expected error code: FOJS0001. Found error code: XPST0017 with error message: The function parse-json with arity 1 is not registered.
fn-parse-json-904;Expected error code: FOJS0001. Found error code: XPST0017 with error message: The function parse-json with arity 1 is not registered.
fn-parse-json-905;Expected error code: FOJS0001. Found error code: XPST0017 with error message: The function parse-json with arity 1 is not registered.
fn-parse-json-906;Expected error code: FOJS0001. Found error code: XPST0017 with error message: The function parse-json with arity 1 is not registered.
fn-parse-json-907;Expected error code: FOJS0001. Found error code: XPST0017 with error message: The function parse-json with arity 1 is not registered.
fn-parse-json-908;Expected error code: FOJS0001. Found error code: XPST0017 with error message: The function parse-json with arity 1 is not registered.
fn-parse-json-909;Expected error code: FOJS0001. Found error code: XPST0017 with error message: The function parse-json with arity 1 is not registered.
fn-parse-json-910;Expected error code: FOJS0001. Found error code: XPST0017 with error message: The function parse-json with arity 1 is not registered.
fn-parse-json-911;Expected error code: FOJS0001. Found error code: XPST0017 with error message: The function parse-json with arity 1 is not registered.
fn-parse-json-912;Expected error code: FOJS0001. Found error code: XPST0017 with error message: The function parse-json with arity 1 is not registered.
fn-parse-json-913;Expected error code: FOJS0001. Found error code: XPST0017 with error message: The function parse-json with arity 1 is not registered.
fn-parse-json-914;Expected error code: FOJS0001. Found error code: XPST0017 with error message: The function parse-json with arity 1 is not registered.
fn-parse-json-915;Expected error code: FOJS0001. Found error code: XPST0017 with error message: The function parse-json with arity 1 is not registered.
fn-parse-json-916;Expected error code: FOJS0001. Found error code: XPST0017 with error message: The function parse-json with arity 1 is not registered.
fn-parse-json-917;Expected error code: FOJS0001. Found error code: XPST0017 with error message: The function parse-json with arity 1 is not registered.
fn-parse-json-918;Expected error code: FOJS0001. Found error code: XPST0017 with error message: The function parse-json with arity 1 is not registered.
fn-parse-json-919;Expected executing the XPath 'parse-json('["\b"]')' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'deep-equal((parse-json('["\b"]')), (['�']))'
fn-parse-json-920;Expected error code: FOJS0001. Found error code: XPST0017 with error message: The function parse-json with arity 1 is not registered.
fn-parse-json-921;Expected error code: FOJS0001. Found error code: XPST0017 with error message: The function parse-json with arity 1 is not registered.
fn-parse-json-922;PRSC Error: Failed to parse query 'deep-equal((parse-json('["\uD834"]')), (['�']))'
fn-parse-json-923;PRSC Error: Failed to parse query 'deep-equal((parse-json('["\udD1E"]')), (['�']))'
fn-parse-json-924;PRSC Error: Failed to parse query 'deep-equal((parse-json('["\u0000"]', map{'escape':false()})), (['�']))'
fn-parse-json-925;PRSC Error: Failed to parse query 'parse-json('true', map{'spec':'RFC4627'})'
fn-parse-json-926;PRSC Error: Failed to parse query 'parse-json('false', map{'spec':'RFC4627'})'
fn-parse-json-927;PRSC Error: Failed to parse query '(parse-json('null', map{'spec':'RFC4627'})) => empty()'
fn-parse-json-928;PRSC Error: Failed to parse query 'parse-json('93.7', map{'spec':'RFC4627'}) = 93.7'
fn-parse-json-929;PRSC Error: Failed to parse query 'parse-json('"abcd\n"', map{'spec':'RFC4627','escape':true()}) = 'abcd\n''
fn-parse-json-930;Expected error code: FOJS0001. Found error code: XPST0017 with error message: The function parse-json with arity 1 is not registered.
fn-parse-json-931;Expected error code: FOJS0001. Found error code: XPST0017 with error message: The function parse-json with arity 1 is not registered.
fn-parse-json-932;Expected error code: FOJS0001. Found error code: XPST0017 with error message: The function parse-json with arity 1 is not registered.
fn-parse-json-933;Expected error code: FOJS0001. Found error code: XPST0017 with error message: The function parse-json with arity 1 is not registered.
fn-parse-json-934;Expected error code: FOJS0001. Found error code: XPST0017 with error message: The function parse-json with arity 1 is not registered.
fn-parse-json-935;Expected error code: FOJS0001. Found error code: XPST0017 with error message: The function parse-json with arity 1 is not registered.
fn-parse-json-936;Expected error code: FOJS0003. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'parse-json('{"a":1, "b":2, "a":3}', map{'duplicates':'reject'})'
fn-parse-json-937;Expected error code: FOJS0005. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'parse-json('{"a":1, "b":2, "a":3}', map{'duplicates':'do-your-own-thing'})'
fn-parse-json-938;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'parse-json('{"a":1, "b":2, "c":3}', map{'liberal':'liberal'})'
fn-parse-json-939;Expected error code: FOJS0001. Found error code: XPST0017 with error message: The function parse-json with arity 1 is not registered.
fn-parse-json-940;Expected error code: FOJS0005. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'parse-json('{"a":1, "b":2, "a":3}', map{'duplicates':'retain'})'
fn-parse-json-941;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'parse-json('{"\b":""}', map{'fallback':lower-case('a')}) => map:keys()'
fn-parse-json-942;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'parse-json('{"\b":""}', map{'fallback':substring#2}) => map:keys()'
fn-parse-json-943;Expected error code: Q{}USER9999. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'parse-json('{"\b":""}', map{'fallback':error(QName("","USER9999"), ?)}) => map:keys()'
fn-parse-json-944;Expected error code: FOJS0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'parse-json('{"\xaa":""}', map{'fallback':upper-case#1}) => map:keys()'
fn-parse-json-945;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'parse-json('{"\uFFFF":""}', map{'fallback':abs#1}) => map:keys()'
fn-parse-json-946;PRSC Error: Failed to parse query 'deep-equal((parse-json('{"a":1, "b":2}', map{'duplicates':<a>use-first</a>})), (map{"a":1, "b":2}))'
fn-parse-json-947;Expected error code: FOJS0001. Found error code: XPST0017 with error message: The function parse-json with arity 1 is not registered.
fn-parse-json-948;Expected error code: FOJS0001. Found error code: XPST0017 with error message: The function parse-json with arity 1 is not registered.
fn-parse-json-949;Expected error code: FOJS0001. Found error code: XPST0017 with error message: The function parse-json with arity 1 is not registered.
fn-parse-json-950;Expected error code: FOJS0001. Found error code: XPST0017 with error message: The function parse-json with arity 1 is not registered.
fn-parse-json-951;Expected error code: FOJS0001. Found error code: XPST0017 with error message: The function parse-json with arity 1 is not registered.
fn-parse-json-952;Expected error code: FOJS0001. Found error code: XPST0017 with error message: The function parse-json with arity 1 is not registered.
fn-parse-json-953;Expected error code: FOJS0001. Found error code: XPST0017 with error message: The function parse-json with arity 1 is not registered.
fn-parse-json-954;Expected error code: FOJS0001. Found error code: XPST0017 with error message: The function parse-json with arity 1 is not registered.
fn-parse-json-955;Expected error code: FOJS0001. Found error code: XPST0017 with error message: The function parse-json with arity 1 is not registered.
fn-prefix-from-qname-10;The function fn:prefix-from-QName with arity 1 is not registered.
fn-prefix-from-qname-11;The function fn:prefix-from-QName with arity 1 is not registered.
fn-prefix-from-qname-12;The function fn:prefix-from-QName with arity 1 is not registered.
fn-prefix-from-qname-13;The function fn:prefix-from-QName with arity 1 is not registered.
fn-prefix-from-qname-14;The function fn:prefix-from-QName with arity 1 is not registered.
fn-prefix-from-qname-15;The function fn:prefix-from-QName with arity 1 is not registered.
fn-prefix-from-qname-16;The function fn:prefix-from-QName with arity 1 is not registered.
fn-prefix-from-qname-17;The function fn:prefix-from-QName with arity 1 is not registered.
fn-prefix-from-qname-18;The function fn:prefix-from-QName with arity 1 is not registered.
fn-prefix-from-qname-19;The function fn:prefix-from-QName with arity 1 is not registered.
fn-prefix-from-qname-2;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function fn:prefix-from-QName with arity 1 is not registered.
fn-prefix-from-qname-20;The function fn:prefix-from-QName with arity 1 is not registered.
fn-prefix-from-qname-21;The function fn:prefix-from-QName with arity 1 is not registered.
fn-prefix-from-qname-22;The function fn:prefix-from-QName with arity 1 is not registered.
fn-prefix-from-qname-23;The function fn:prefix-from-QName with arity 1 is not registered.
fn-prefix-from-qname-3;The function fn:prefix-from-QName with arity 1 is not registered.
fn-prefix-from-qname-4;The function fn:prefix-from-QName with arity 1 is not registered.
fn-prefix-from-qname-5;The function fn:prefix-from-QName with arity 1 is not registered.
fn-prefix-from-qname-6;The function fn:prefix-from-QName with arity 1 is not registered.
fn-prefix-from-qname-7;The function fn:prefix-from-QName with arity 1 is not registered.
fn-prefix-from-qname-8;Expected error code: FONS0004. Found error code: XPST0017 with error message: The function fn:prefix-from-QName with arity 1 is not registered.
fn-prefix-from-qname-9;The function fn:prefix-from-QName with arity 1 is not registered.
fn-remove-mix-args-005;Type casting to XsAnyUri has not been implemented yet.
fn-remove-mix-args-006;Type casting to XsAnyUri has not been implemented yet.
fn-remove-mix-args-007;Type casting to XsAnyUri has not been implemented yet.
fn-remove-mix-args-009;Type casting to XsAnyUri has not been implemented yet.
fn-remove-mix-args-018;Comparison between dates/times not implemented yet
fn-remove-mix-args-019;Comparison between dates/times not implemented yet
fn-remove-mix-args-020;Comparison between dates/times not implemented yet
fn-replace-12;Using flags in 'replace' is not supported
fn-replace-34;Using flags in 'replace' is not supported
fn-replace-35;Using flags in 'replace' is not supported
fn-replace-40;Using flags in 'replace' is not supported
fn-replace-41;Using flags in 'replace' is not supported
fn-replace-42;Using flags in 'replace' is not supported
fn-replace-43;Expected XPath fn:replace(concat('Mary', codepoints-to-string(13), 'Jones'), 'Mary.Jones', 'Jacob Jones') to resolve to concat('Mary', codepoints-to-string(13), 'Jones')
fn-replace-44;Using flags in 'replace' is not supported
fn-replace-45;Using $0 in fn:replace to replace substrings with full matches is not supported.
fn-replace-49;Using flags in 'replace' is not supported
fn-replace-50;Using flags in 'replace' is not supported
fn-replace-51;Using flags in 'replace' is not supported
fn-replace-52;Using flags in 'replace' is not supported
fn-replace-53;Using flags in 'replace' is not supported
fn-replace-54;Using flags in 'replace' is not supported
fn-replace-58;Invalid pattern '\p{IsEmoticons}+' at offset 15. Unknown property 'IsEmoticons'.
fn-replaceErr-1;Expected XPathException with code FORX0001, but got Using flags in 'replace' is not supported
fn-replaceErr-2;Expected error code: FORX0004. Query succeeded with result: a\cada\
fn-replaceErr-3;Expected error code: FORX0004. Query succeeded with result: a$ycada$y
fn-reversedbl1args-1;PRSC Error: Failed to parse query 'fn:reverse((xs:double("-1.7976931348623157E308"))) = -1.7976931348623157E308'
fn-reversedbl1args-3;PRSC Error: Failed to parse query 'fn:reverse((xs:double("1.7976931348623157E308"))) = 1.7976931348623157E308'
fn-root-1;Expected error code: XPDY0002. Query succeeded with result: 
fn-root-10;PRSC Error: Failed to parse query 'let $var := element anElement {attribute anAttribute {"Attribute Value"}} return fn:root($var)'
fn-root-11;PRSC Error: Failed to parse query 'fn:root(element anElement {attribute anAttribute {"Attribute Value"}})'
fn-root-12;PRSC Error: Failed to parse query 'let $var := document {<anElement><anInternalElement>element content</anInternalElement></anElement>} return fn:root($var)'
fn-root-13;PRSC Error: Failed to parse query 'fn:root(document {<anElement><anInternalElement>element content</anInternalElement></anElement>})'
fn-root-14;Expected all children to match between result and parsedFragment.
fn-root-15;Expected all children to match between result and parsedFragment.
fn-root-16;PRSC Error: Failed to parse query 'fn:root(text {"A text Node"})'
fn-root-17;PRSC Error: Failed to parse query 'let $var := text {"a text Node"} return fn:root($var)'
fn-root-18;PRSC Error: Failed to parse query 'let $var := element anElement {"Element Content"} return fn:root($var) is fn:root($var)'
fn-root-19;PRSC Error: Failed to parse query 'let $var := element anElement {"Element Content"} return fn:root($var) is fn:root($var)'
fn-root-20;PRSC Error: Failed to parse query 'let $var := element anElement {"Element Content"} return fn:count(fn:namespace-uri(fn:root($var))) = 1'
fn-root-21;PRSC Error: Failed to parse query 'let $var := <!-- An Element Node --> return fn:count(fn:namespace-uri(fn:root($var))) = 1'
fn-root-22;PRSC Error: Failed to parse query 'let $var := <?format role="output" ?> return fn:count(fn:namespace-uri(fn:root($var))) = 1'
fn-root-23;PRSC Error: Failed to parse query 'let $var := text {"A text node"} return fn:count(fn:namespace-uri(fn:root($var))) = 1'
fn-root-24;Expected error code: XPDY0002. Query succeeded with result: 
fn-root-4;PRSC Error: Failed to parse query 'let $var := <!-- A Comment Node --> return fn:root($var)'
fn-root-5;PRSC Error: Failed to parse query 'fn:root(<!-- A Comment Node -->)'
fn-root-6;PRSC Error: Failed to parse query 'let $var := <anElement>An Element Content</anElement> return fn:root($var)'
fn-root-7;PRSC Error: Failed to parse query 'fn:root(<anElement>An Element Content</anElement>)'
fn-root-8;PRSC Error: Failed to parse query 'let $var := <?format role="output" ?> return fn:root($var)'
fn-root-9;PRSC Error: Failed to parse query 'fn:root(<?format role="output" ?>)'
fn-round-1;The function error with arity 0 is not registered.
fn-round-decimal-10;Value was either too large or too small for a Decimal.
fn-round-decimal-11;Value was either too large or too small for a Decimal.
fn-round-decimal-12;PRSC Error: Failed to parse query '(fn:round(1.567, -3)) instance of $xs:decimal'
fn-round-decimal-2;PRSC Error: Failed to parse query '(fn:round(xs:decimal("12.1"))) instance of $xs:decimal'
fn-round-decimal-3;PRSC Error: Failed to parse query '(fn:round(xs:decimal("12.7"))) instance of $xs:decimal'
fn-round-decimal-4;Expected XPath fn:round(xs:decimal("12.5")) to resolve to 13
fn-round-decimal-5;PRSC Error: Failed to parse query '(fn:round(xs:decimal("-12.7"))) instance of $xs:decimal'
fn-round-decimal-6;PRSC Error: Failed to parse query '(fn:round(xs:decimal("-12.1"))) instance of $xs:decimal'
fn-round-decimal-7;PRSC Error: Failed to parse query '(fn:round(xs:decimal("-12.5"))) instance of $xs:decimal'
fn-round-decimal-8;PRSC Error: Failed to parse query '(fn:round(-12.567, 2)) instance of $xs:decimal'
fn-round-decimal-9;PRSC Error: Failed to parse query '(fn:round(-12.567, 4)) instance of $xs:decimal'
fn-round-half-to-even-1;The function error with arity 0 is not registered.
fn-round-half-to-even-10;PRSC Error: Failed to parse query '(round-half-to-even(4561.234567, 0)) instance of $xs:decimal'
fn-round-half-to-even-11;PRSC Error: Failed to parse query 'round-half-to-even(4561.000005e0, 0) = 4561'
fn-round-half-to-even-12;PRSC Error: Failed to parse query '(round-half-to-even(xs:float('4561.000005e0'), 0)) instance of $xs:float'
fn-round-half-to-even-13;PRSC Error: Failed to parse query '(round-half-to-even(4561234567, 0)) instance of $xs:integer'
fn-round-half-to-even-14;Expected XPath round-half-to-even(xs:float('0.05'), 1) to resolve to 0.1
fn-round-half-to-even-15;Value was either too large or too small for a Decimal.
fn-round-half-to-even-16;PRSC Error: Failed to parse query '(round-half-to-even(xs:float('3.75'), 1)) instance of $xs:float'
fn-round-half-to-even-17;PRSC Error: Failed to parse query '(round-half-to-even(123.355, 2)) instance of $xs:decimal'
fn-round-half-to-even-18;PRSC Error: Failed to parse query '(round-half-to-even(123.365, 2)) instance of $xs:decimal'
fn-round-half-to-even-19;PRSC Error: Failed to parse query '(round-half-to-even(123.375, 2)) instance of $xs:decimal'
fn-round-half-to-even-2;The function error with arity 0 is not registered.
fn-round-half-to-even-20;PRSC Error: Failed to parse query '(round-half-to-even(123.385, 2)) instance of $xs:decimal'
fn-round-half-to-even-21;PRSC Error: Failed to parse query '(round-half-to-even(-123.355, 2)) instance of $xs:decimal'
fn-round-half-to-even-22;PRSC Error: Failed to parse query '(round-half-to-even(-123.365, 2)) instance of $xs:decimal'
fn-round-half-to-even-23;PRSC Error: Failed to parse query '(round-half-to-even(-123.375, 2)) instance of $xs:decimal'
fn-round-half-to-even-24;PRSC Error: Failed to parse query '(round-half-to-even(-123.385, 2)) instance of $xs:decimal'
fn-round-half-to-even-24a;PRSC Error: Failed to parse query '(round-half-to-even(12350.00, -2)) instance of $xs:decimal'
fn-round-half-to-even-25;Value was either too large or too small for a Decimal.
fn-round-half-to-even-26;PRSC Error: Failed to parse query '(round-half-to-even(12450.00, -2)) instance of $xs:decimal'
fn-round-half-to-even-27;Value was either too large or too small for a Decimal.
fn-round-half-to-even-28;PRSC Error: Failed to parse query '(round-half-to-even(12550.00, -2)) instance of $xs:decimal'
fn-round-half-to-even-29;Value was either too large or too small for a Decimal.
fn-round-half-to-even-3;PRSC Error: Failed to parse query '(round-half-to-even(1.234567, 2)) instance of $xs:decimal'
fn-round-half-to-even-30;PRSC Error: Failed to parse query '(round-half-to-even(12350, -2)) instance of $xs:decimal'
fn-round-half-to-even-31;PRSC Error: Failed to parse query '(round-half-to-even(-12350, -2)) instance of $xs:decimal'
fn-round-half-to-even-32;PRSC Error: Failed to parse query '(round-half-to-even(12450, -2)) instance of $xs:decimal'
fn-round-half-to-even-33;PRSC Error: Failed to parse query '(round-half-to-even(-12450, -2)) instance of $xs:decimal'
fn-round-half-to-even-34;PRSC Error: Failed to parse query '(round-half-to-even(12550, -2)) instance of $xs:decimal'
fn-round-half-to-even-35;PRSC Error: Failed to parse query '(round-half-to-even(-12550, -2)) instance of $xs:decimal'
fn-round-half-to-even-36;PRSC Error: Failed to parse query '(round-half-to-even(12350e0, -2)) instance of $xs:double'
fn-round-half-to-even-37;PRSC Error: Failed to parse query '(round-half-to-even(-12350e0, -2)) instance of $xs:double'
fn-round-half-to-even-38;PRSC Error: Failed to parse query '(round-half-to-even(12450e0, -2)) instance of $xs:double'
fn-round-half-to-even-39;PRSC Error: Failed to parse query '(round-half-to-even(-12450e0, -2)) instance of $xs:double'
fn-round-half-to-even-4;PRSC Error: Failed to parse query 'round-half-to-even(1.000005e0, 2) = 1'
fn-round-half-to-even-40;PRSC Error: Failed to parse query '(round-half-to-even(12550e0, -2)) instance of $xs:double'
fn-round-half-to-even-41;PRSC Error: Failed to parse query '(round-half-to-even(-12550e0, -2)) instance of $xs:double'
fn-round-half-to-even-5;PRSC Error: Failed to parse query '(round-half-to-even(xs:float('1.000005e0'), 2)) instance of $xs:float'
fn-round-half-to-even-6;PRSC Error: Failed to parse query '(round-half-to-even(4561.234567, -2)) instance of $xs:decimal'
fn-round-half-to-even-7;PRSC Error: Failed to parse query 'round-half-to-even(4561.000005e0, -2) = 4600'
fn-round-half-to-even-8;PRSC Error: Failed to parse query '(round-half-to-even(xs:float('4561.000005e0'), -2)) instance of $xs:float'
fn-round-half-to-even-9;PRSC Error: Failed to parse query '(round-half-to-even(4561234567, -2)) instance of $xs:integer'
fn-round-half-to-evendbl1args-1;Expected executing the XPath 'fn:round-half-to-even(xs:double("-1.7976931348623157E308"))' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'fn:round-half-to-even(xs:double("-1.7976931348623157E308")) = -1.7976931348623157E308'
fn-round-half-to-evendbl1args-3;Expected executing the XPath 'fn:round-half-to-even(xs:double("1.7976931348623157E308"))' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'fn:round-half-to-even(xs:double("1.7976931348623157E308")) = 1.7976931348623157E308'
fn-round-half-to-evenflt1args-1;Expected executing the XPath 'fn:round-half-to-even(xs:float("-3.4028235E38"))' to resolve to one of the expected results, but got System.OverflowException: Value was either too large or too small for a Decimal.
fn-round-half-to-evenflt1args-3;Expected executing the XPath 'fn:round-half-to-even(xs:float("3.4028235E38"))' to resolve to one of the expected results, but got System.OverflowException: Value was either too large or too small for a Decimal.
fn-round2args-1;Expected XPath fn:round(1.125, 2) to resolve to 1.13
fn-round2args-1f;Expected XPath fn:round(xs:float(1.125), 2) to resolve to 1.13
fn-round2args-2;PRSC Error: Failed to parse query '(fn:round(8452, -2)) instance of $xs:decimal'
fn-round2args-2f;PRSC Error: Failed to parse query '(fn:round(xs:float(8452), -2)) instance of $xs:float'
fn-round2args-3;PRSC Error: Failed to parse query 'fn:round(3.1415e0, 2) = 3.14e0'
fn-round2args-3f;PRSC Error: Failed to parse query 'fn:round(xs:float(3.1415e0), 2) = xs:float(3.14e0)'
fn-round2args-4;Expected XPath fn:round(35.425, 2) to resolve to 35.43
fn-round2args-4f;Expected XPath fn:round(xs:float(0.125), 2) to resolve to xs:float(0.13)
fn-round2args-5;PRSC Error: Failed to parse query 'fn:round(-0.43e0, 1) = -0.4e0'
fn-round2args-5f;PRSC Error: Failed to parse query 'fn:round(xs:float(-0.43e0), 1) = xs:float(-0.4e0)'
fn-rounddbl1args-1;PRSC Error: Failed to parse query 'fn:round(xs:double("-1.7976931348623157E308")) = -1.7976931348623157E308'
fn-rounddbl1args-2;PRSC Error: Failed to parse query '(fn:round(xs:double("0"))) instance of $xs:double'
fn-rounddbl1args-3;PRSC Error: Failed to parse query 'fn:round(xs:double("1.7976931348623157E308")) = 1.7976931348623157E308'
fn-rounddec1args-2;PRSC Error: Failed to parse query '(fn:round(xs:decimal("617375191608514839"))) instance of $xs:decimal'
fn-roundflt1args-1;Value was either too large or too small for a Decimal.
fn-roundflt1args-2;PRSC Error: Failed to parse query '(fn:round(xs:float("0"))) instance of $xs:float'
fn-roundflt1args-3;Value was either too large or too small for a Decimal.
fn-roundint1args-1;PRSC Error: Failed to parse query '(fn:round(xs:int("-2147483648"))) instance of $xs:integer'
fn-seconds-from-dateTime-1;The function fn:seconds-from-dateTime with arity 1 is not registered.
fn-seconds-from-dateTime-10;The function fn:seconds-from-dateTime with arity 1 is not registered.
fn-seconds-from-dateTime-11;The function fn:seconds-from-dateTime with arity 1 is not registered.
fn-seconds-from-dateTime-12;The function fn:seconds-from-dateTime with arity 1 is not registered.
fn-seconds-from-dateTime-13;The function fn:seconds-from-dateTime with arity 1 is not registered.
fn-seconds-from-dateTime-14;The function fn:seconds-from-dateTime with arity 1 is not registered.
fn-seconds-from-dateTime-15;The function fn:seconds-from-dateTime with arity 1 is not registered.
fn-seconds-from-dateTime-16;The function fn:seconds-from-dateTime with arity 1 is not registered.
fn-seconds-from-dateTime-17;The function fn:seconds-from-dateTime with arity 1 is not registered.
fn-seconds-from-dateTime-18;The function fn:seconds-from-dateTime with arity 1 is not registered.
fn-seconds-from-dateTime-19;The function fn:seconds-from-dateTime with arity 1 is not registered.
fn-seconds-from-dateTime-2;The function fn:seconds-from-dateTime with arity 1 is not registered.
fn-seconds-from-dateTime-3;The function fn:seconds-from-dateTime with arity 1 is not registered.
fn-seconds-from-dateTime-4;The function fn:seconds-from-dateTime with arity 1 is not registered.
fn-seconds-from-dateTime-5;The function fn:seconds-from-dateTime with arity 1 is not registered.
fn-seconds-from-dateTime-6;The function fn:seconds-from-dateTime with arity 1 is not registered.
fn-seconds-from-dateTime-7;The function fn:seconds-from-dateTime with arity 1 is not registered.
fn-seconds-from-dateTime-8;The function fn:seconds-from-dateTime with arity 1 is not registered.
fn-seconds-from-dateTime-9;The function fn:seconds-from-dateTime with arity 1 is not registered.
fn-seconds-from-dateTime1args-1;The function fn:seconds-from-dateTime with arity 1 is not registered.
fn-seconds-from-dateTime1args-2;The function fn:seconds-from-dateTime with arity 1 is not registered.
fn-seconds-from-dateTime1args-3;The function fn:seconds-from-dateTime with arity 1 is not registered.
fn-seconds-from-duration-1;The function fn:seconds-from-duration with arity 1 is not registered.
fn-seconds-from-duration-10;The function fn:seconds-from-duration with arity 1 is not registered.
fn-seconds-from-duration-11;The function fn:seconds-from-duration with arity 1 is not registered.
fn-seconds-from-duration-12;The function fn:seconds-from-duration with arity 1 is not registered.
fn-seconds-from-duration-13;The function fn:seconds-from-duration with arity 1 is not registered.
fn-seconds-from-duration-14;The function fn:seconds-from-duration with arity 1 is not registered.
fn-seconds-from-duration-15;The function fn:seconds-from-duration with arity 1 is not registered.
fn-seconds-from-duration-16;The function fn:seconds-from-duration with arity 1 is not registered.
fn-seconds-from-duration-17;The function fn:seconds-from-duration with arity 1 is not registered.
fn-seconds-from-duration-18;The function fn:seconds-from-duration with arity 1 is not registered.
fn-seconds-from-duration-19;The function fn:seconds-from-duration with arity 1 is not registered.
fn-seconds-from-duration-2;The function fn:seconds-from-duration with arity 1 is not registered.
fn-seconds-from-duration-20;The function fn:seconds-from-duration with arity 1 is not registered.
fn-seconds-from-duration-21;The function fn:seconds-from-duration with arity 1 is not registered.
fn-seconds-from-duration-3;The function fn:seconds-from-duration with arity 1 is not registered.
fn-seconds-from-duration-4;The function fn:seconds-from-duration with arity 1 is not registered.
fn-seconds-from-duration-5;The function fn:seconds-from-duration with arity 1 is not registered.
fn-seconds-from-duration-6;The function fn:seconds-from-duration with arity 1 is not registered.
fn-seconds-from-duration-7;The function fn:seconds-from-duration with arity 1 is not registered.
fn-seconds-from-duration-8;The function fn:seconds-from-duration with arity 1 is not registered.
fn-seconds-from-duration-9;The function fn:seconds-from-duration with arity 1 is not registered.
fn-seconds-from-duration1args-1;The function fn:seconds-from-duration with arity 1 is not registered.
fn-seconds-from-duration1args-2;The function fn:seconds-from-duration with arity 1 is not registered.
fn-seconds-from-duration1args-3;The function fn:seconds-from-duration with arity 1 is not registered.
fn-seconds-from-time-1;The function fn:seconds-from-time with arity 1 is not registered.
fn-seconds-from-time-10;The function fn:seconds-from-time with arity 1 is not registered.
fn-seconds-from-time-11;The function fn:seconds-from-time with arity 1 is not registered.
fn-seconds-from-time-12;The function fn:seconds-from-time with arity 1 is not registered.
fn-seconds-from-time-13;The function fn:seconds-from-time with arity 1 is not registered.
fn-seconds-from-time-14;The function fn:seconds-from-time with arity 1 is not registered.
fn-seconds-from-time-15;The function fn:seconds-from-time with arity 1 is not registered.
fn-seconds-from-time-16;The function fn:seconds-from-time with arity 1 is not registered.
fn-seconds-from-time-17;The function fn:seconds-from-time with arity 1 is not registered.
fn-seconds-from-time-18;The function fn:seconds-from-time with arity 1 is not registered.
fn-seconds-from-time-19;The function fn:seconds-from-time with arity 1 is not registered.
fn-seconds-from-time-2;The function fn:seconds-from-time with arity 1 is not registered.
fn-seconds-from-time-3;The function fn:seconds-from-time with arity 1 is not registered.
fn-seconds-from-time-4;The function fn:seconds-from-time with arity 1 is not registered.
fn-seconds-from-time-5;The function fn:seconds-from-time with arity 1 is not registered.
fn-seconds-from-time-6;The function fn:hours-from-time with arity 1 is not registered.
fn-seconds-from-time-7;The function fn:seconds-from-time with arity 1 is not registered.
fn-seconds-from-time-8;The function fn:seconds-from-time with arity 1 is not registered.
fn-seconds-from-time-9;The function fn:seconds-from-time with arity 1 is not registered.
fn-seconds-from-time1args-1;The function fn:seconds-from-time with arity 1 is not registered.
fn-seconds-from-time1args-2;The function fn:seconds-from-time with arity 1 is not registered.
fn-seconds-from-time1args-3;The function fn:seconds-from-time with arity 1 is not registered.
fn-starts-with-17;No collations are supported
fn-starts-with-18;No collations are supported
fn-starts-with-19;No collations are supported
fn-starts-with-20;No collations are supported
fn-starts-with-21;No collations are supported
fn-starts-with-22;No collations are supported
fn-starts-with-23;No collations are supported
fn-starts-with-24;No collations are supported
fn-starts-with-25;No collations are supported
fn-starts-with-26;No collations are supported
fn-starts-with-27;No collations are supported
fn-starts-with-28;No collations are supported
fn-starts-with-29;No collations are supported
fn-starts-with-30;No collations are supported
fn-starts-with-31;No collations are supported
fn-starts-with-32;Expected executing the XPath 'fn:starts-with("Chapter-001", "Chapter-1", "http://www.w3.org/2013/collation/UCA?lang=en;numeric=yes")' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: No collations are supported
fn-starts-with-33;Expected executing the XPath 'fn:starts-with("Chapter-100", "Chapter-10", "http://www.w3.org/2013/collation/UCA?lang=en;numeric=yes")' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: No collations are supported
fn-starts-with-34;No collations are supported
fn-starts-with-35;No collations are supported
fn-starts-with-36;No collations are supported
fn-starts-with-37;No collations are supported
fn-starts-with-38;No collations are supported
fn-starts-with-39;No collations are supported
fn-starts-with-40;No collations are supported
fn-starts-with-41;No collations are supported
fn-string-1;Expected error code: XPDY0002. Query succeeded with result: 
fn-string-23;Expected XPathException with code FOTY0014, but got Can't cast a non-atomic value.
fn-string-27;PRSC Error: Failed to parse query 'string((//namespace::*[.='http://www.w3.org/1999/xlink'])[1])'
fn-string-29;Expected XPath normalize-space(string((//*:Price)[1])) to resolve to "3.00 10.00 5"
fn-string-3;Expected error code: XPDY0002. Query succeeded with result: 
fn-string-32;Expected error code: FOTY0014. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'string(map{1:2})'
fn-string-33;Expected error code: FOTY0014. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'string([1])'
fn-string-34;Expected error code: FOTY0014. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'string([[1, 2], [3, 4]])'
fn-string-35;Expected error code: FOTY0014. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'string(map{})'
fn-string-36;Expected error code: FOTY0014. Found error code: XPST0017 with error message: The function map:entry with arity 2 is not registered.
fn-string-37;Expected error code: FOTY0014. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'string(array{})'
fn-string-38;Expected error code: FOTY0014. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'string(["string"])'
fn-string-4;The function current-date with arity 0 is not registered.
fn-string-5;The string '24:00:00' is not a valid AllXsd value.
fn-string-6;The function dateTime with arity 2 is not registered.
fn-string-7;Expected XPath string(xs:duration("P24M")) to resolve to "P2Y"
fn-string-8;Haven't implemented Qnames from: example:test
fn-string-9;Expected xs:double('-INF')[string() = '-INF'] to resolve to 1
fn-string-join-23;PRSC Error: Failed to parse query '\n         let $e := <e><a>1</a><b>2</b><c>3</c></e>\n         return fn:string-join($e/*)\n      '
fn-string-join-24;PRSC Error: Failed to parse query '\n         let $e := <e><a>1</a><b></b><c>3</c></e>\n         return fn:string-join($e/*)\n      '
fn-string-join-25;PRSC Error: Failed to parse query '\n         let $e := <e><a>1</a><b></b><c>3</c></e>\n         return fn:string-join($e/d)\n      '
fn-string-join-27;Expected error code: XPTY0004. Query succeeded with result: 12345
fn-string-join-29;The function current-date with arity 0 is not registered.
fn-string-join-32;PRSC Error: Failed to parse query '\n         let $x := <a xmlns="http://sj31/"><b/><c/><d/></a> return fn:string-join($x//*/node-name(), '-')\n      '
fn-string-length-18;Expected XPathException with code XPDY0002, but got Casting AbstractValue(DocumentNode) to StringValue
fn-string-length-2;Object reference not set to an instance of an object.
fn-string-length-20;Expected XPath string-length("𐀂") to resolve to 1
fn-string-length-21;Expected error code: FOTY0013. Found error code: XPTY0004 with error message: Unable to cast argument of type function(*) to type xs:string? while calling 'string-length'
fn-string-length-22;Casting AbstractValue(Element) to StringValue
fn-string-length-23;Expected error code: FOTY0012. Query succeeded with result: 38
fn-string-length-24;Casting AbstractValue(XsInteger) to StringValue
fn-stringdbl1args-1;Expected XPath fn:string(xs:double("-1.7976931348623157E308")) to resolve to -1.7976931348623157E308, but instead got -1.7976931348623157E+308
fn-stringdbl1args-2;Expected XPath fn:string(xs:double("0")) to resolve to 0, but instead got -0
fn-stringdbl1args-3;Expected XPath fn:string(xs:double("1.7976931348623157E308")) to resolve to 1.7976931348623157E308, but instead got 1.7976931348623157E+308
fn-stringflt1args-1;Expected XPath fn:string(xs:float("-3.4028235E38")) to resolve to -3.4028235E38, but instead got -3.4028235E+38
fn-stringflt1args-2;Expected XPath fn:string(xs:float("0")) to resolve to 0, but instead got -0
fn-stringflt1args-3;Expected XPath fn:string(xs:float("3.4028235E38")) to resolve to 3.4028235E38, but instead got 3.4028235E+38
fn-subsequence-mix-args-005;Type casting to XsAnyUri has not been implemented yet.
fn-subsequence-mix-args-008;Expected XPath fn:subsequence( ("a", xs:decimal("-1.000000000001"), xs:integer("-100"), "b", "c"), 2,3) to (deep equally) resolve to -1.000000000001, -100, "b"
fn-subsequence-mix-args-021;Comparison between dates/times not implemented yet
fn-subsequence-mix-args-023;Comparison between dates/times not implemented yet
fn-substring-1;PRSC Error: Failed to parse query '(fn:substring("motor car", 6)) instance of $xs:string'
fn-substring-10;Value was either too large or too small for an Int32.
fn-substring-11;Value was either too large or too small for an Int32.
fn-substring-23;Expected XPath substring("abcd𐀁efgh", 6) to resolve to "efgh"
fn-substring-24;Expected XPath substring("abcd𐀁efgh", 5, 2) to resolve to "𐀁e"
fn-substring-26;Expected XPath substring("𐀁", 2, 1) to resolve to ""
fn-substring-27;Expected XPath substring("𐀁", 0, 2) to resolve to "𐀁"
fn-substring-29;Expected XPath substring("𐀁𐀁", 3) to resolve to ""
fn-substring-31;PRSC Error: Failed to parse query 'substring("12345", -3.1e0, 5.2e0) eq "1"'
fn-substring-5;Length cannot be less than zero. (Parameter 'length')
fn-substring-7;Value was either too large or too small for an Int32.
fn-substring-8;Value was either too large or too small for an Int32.
fn-substring-after-22;The function substring-after with arity 3 is not registered.
fn-substring-after-23;The function substring-after with arity 3 is not registered.
fn-substring-after-24;The function substring-after with arity 3 is not registered.
fn-substring-after-26;The function substring-after with arity 3 is not registered.
fn-substring-after-27;The function fn:substring-after with arity 3 is not registered.
fn-substring-after-28;The function fn:substring-after with arity 3 is not registered.
fn-substring-after-29;The function fn:substring-after with arity 3 is not registered.
fn-substring-after-30;The function fn:substring-after with arity 3 is not registered.
fn-substring-after-31;The function fn:substring-after with arity 3 is not registered.
fn-substring-after-32;The function fn:substring-after with arity 3 is not registered.
fn-substring-after-33;The function fn:substring-after with arity 3 is not registered.
fn-substring-after-34;The function fn:substring-after with arity 3 is not registered.
fn-substring-after-35;The function fn:substring-after with arity 3 is not registered.
fn-substring-after-36;The function fn:substring-after with arity 3 is not registered.
fn-substring-after-37;The function fn:substring-after with arity 3 is not registered.
fn-substring-after-38;The function fn:substring-after with arity 3 is not registered.
fn-substring-after-39;The function fn:substring-after with arity 3 is not registered.
fn-substring-after-40;The function fn:substring-after with arity 3 is not registered.
fn-substring-after-41;The function fn:substring-after with arity 3 is not registered.
fn-substring-after-42;Expected executing the XPath 'fn:substring-after("Chapter-001-section-2", "ter-1", "http://www.w3.org/2013/collation/UCA?lang=en;numeric=yes")' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function fn:substring-after with arity 3 is not registered.
fn-substring-after-43;Expected executing the XPath 'fn:substring-after("Chapter-100-bis", "Chapter-10", "http://www.w3.org/2013/collation/UCA?lang=en;numeric=yes")' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function fn:substring-after with arity 3 is not registered.
fn-substring-before-22;The function substring-before with arity 3 is not registered.
fn-substring-before-23;The function substring-before with arity 3 is not registered.
fn-substring-before-24;The function substring-before with arity 3 is not registered.
fn-substring-before-26;The function substring-before with arity 3 is not registered.
fn-substring-before-27;The function fn:substring-before with arity 3 is not registered.
fn-substring-before-28;The function fn:substring-before with arity 3 is not registered.
fn-substring-before-29;The function fn:substring-before with arity 3 is not registered.
fn-substring-before-30;The function fn:substring-before with arity 3 is not registered.
fn-substring-before-31;The function fn:substring-before with arity 3 is not registered.
fn-substring-before-32;The function fn:substring-before with arity 3 is not registered.
fn-substring-before-33;The function fn:substring-before with arity 3 is not registered.
fn-substring-before-34;The function fn:substring-before with arity 3 is not registered.
fn-substring-before-35;The function fn:substring-before with arity 3 is not registered.
fn-substring-before-36;The function fn:substring-before with arity 3 is not registered.
fn-substring-before-37;The function fn:substring-before with arity 3 is not registered.
fn-substring-before-38;The function fn:substring-before with arity 3 is not registered.
fn-substring-before-39;The function fn:substring-before with arity 3 is not registered.
fn-substring-before-40;The function fn:substring-before with arity 3 is not registered.
fn-substring-before-41;The function fn:substring-before with arity 3 is not registered.
fn-substring-before-42;Expected executing the XPath 'fn:substring-before("Chapter-001", "ter-1", "http://www.w3.org/2013/collation/UCA?lang=en;numeric=yes")' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: FOCH0004. Found error code: XPST0017 with error message: The function fn:substring-before with arity 3 is not registered.
fn-substring-before-43;Expected executing the XPath 'fn:substring-before("Chapter-100", "Chapter-10", "http://www.w3.org/2013/collation/UCA?lang=en;numeric=yes")' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: FOCH0004. Found error code: XPST0017 with error message: The function fn:substring-before with arity 3 is not registered.
fn-sum-1;Items passed to fn:sum are not all numeric.
fn-sum-11;PRSC Error: Failed to parse query 'sum([1,2,3,4,5]) = 15'
fn-sum-12;The function year-from-date with arity 1 is not registered.
fn-sum-13;The function year-from-date with arity 1 is not registered.
fn-sum-14;The function year-from-date with arity 1 is not registered.
fn-sum-2;Expected XPath sum((), xs:dayTimeDuration("PT0S")) to resolve to PT0S, but instead got PT
fn-sum-3;Items passed to fn:sum are not all numeric.
fn-sum-4;Items passed to fn:sum are not all numeric.
fn-sum-5;Expected XPath sum((), xs:yearMonthDuration("P0M")) to resolve to P0M, but instead got P
fn-sum-6;Items passed to fn:sum are not all numeric.
fn-sum-8;Expected XPath sum((), xs:duration("P0M")) to resolve to PT0S, but instead got PT
fn-sumdbl1args-1;PRSC Error: Failed to parse query 'fn:sum((xs:double("-1.7976931348623157E308"))) = -1.7976931348623157E308'
fn-sumdbl1args-3;PRSC Error: Failed to parse query 'fn:sum((xs:double("1.7976931348623157E308"))) = 1.7976931348623157E308'
fn-sumdbl2args-1;PRSC Error: Failed to parse query 'fn:sum((xs:double("0"),xs:double("-1.7976931348623157E308"))) = -1.7976931348623157E308'
fn-sumdbl2args-3;PRSC Error: Failed to parse query 'fn:sum((xs:double("-1.7976931348623157E308"),xs:double("0"))) = -1.7976931348623157E308'
fn-sumdbl3args-1;Expected executing the XPath 'fn:sum((xs:double("0"),xs:double("-1.7976931348623157E308"),xs:double("-1.7976931348623157E308")))' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPath fn:sum((xs:double("0"),xs:double("-1.7976931348623157E308"),xs:double("-1.7976931348623157E308"))) to resolve to -INF, but instead got -Infinity
fn-sumdbl3args-2;PRSC Error: Failed to parse query 'fn:sum((xs:double("1.7976931348623157E308"),xs:double("-1.7976931348623157E308"),xs:double("-1.7976931348623157E308"))) = -1.7976931348623157E308'
fn-sumdbl3args-3;PRSC Error: Failed to parse query 'fn:sum((xs:double("-1.7976931348623157E308"),xs:double("0"),xs:double("0"))) = -1.7976931348623157E308'
fn-sumdbl3args-4;PRSC Error: Failed to parse query 'fn:sum((xs:double("-1.7976931348623157E308"),xs:double("1.7976931348623157E308"),xs:double("-1.7976931348623157E308"))) = -1.7976931348623157E308'
fn-sumdbl3args-6;Expected executing the XPath 'fn:sum((xs:double("-1.7976931348623157E308"),xs:double("-1.7976931348623157E308"),xs:double("1.7976931348623157E308")))' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPath fn:sum((xs:double("-1.7976931348623157E308"),xs:double("-1.7976931348623157E308"),xs:double("1.7976931348623157E308"))) to resolve to -INF, but instead got -Infinity
fn-sumflt3args-1;Expected executing the XPath 'fn:sum((xs:float("0"),xs:float("-3.4028235E38"),xs:float("-3.4028235E38")))' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPath fn:sum((xs:float("0"),xs:float("-3.4028235E38"),xs:float("-3.4028235E38"))) to resolve to -INF, but instead got -Infinity
fn-timezone-from-date-1;The function fn:timezone-from-date with arity 1 is not registered.
fn-timezone-from-date-10;The function fn:timezone-from-date with arity 1 is not registered.
fn-timezone-from-date-11;The function fn:timezone-from-date with arity 1 is not registered.
fn-timezone-from-date-12;The function fn:timezone-from-date with arity 1 is not registered.
fn-timezone-from-date-13;The function fn:timezone-from-date with arity 1 is not registered.
fn-timezone-from-date-14;The function fn:timezone-from-date with arity 1 is not registered.
fn-timezone-from-date-15;The function fn:timezone-from-date with arity 1 is not registered.
fn-timezone-from-date-16;The function fn:timezone-from-date with arity 1 is not registered.
fn-timezone-from-date-17;The function fn:month-from-date with arity 1 is not registered.
fn-timezone-from-date-18;The function fn:timezone-from-date with arity 1 is not registered.
fn-timezone-from-date-19;The function fn:timezone-from-date with arity 1 is not registered.
fn-timezone-from-date-2;The function fn:timezone-from-date with arity 1 is not registered.
fn-timezone-from-date-20;The function fn:timezone-from-date with arity 1 is not registered.
fn-timezone-from-date-3;The function fn:timezone-from-date with arity 1 is not registered.
fn-timezone-from-date-4;The function fn:timezone-from-date with arity 1 is not registered.
fn-timezone-from-date-5;The function fn:timezone-from-date with arity 1 is not registered.
fn-timezone-from-date-6;The function fn:timezone-from-date with arity 1 is not registered.
fn-timezone-from-date-7;The function fn:timezone-from-date with arity 1 is not registered.
fn-timezone-from-date-8;The function fn:timezone-from-date with arity 1 is not registered.
fn-timezone-from-date-9;The function fn:timezone-from-date with arity 1 is not registered.
fn-timezone-from-dateTimealt-1;The function fn:timezone-from-dateTime with arity 1 is not registered.
fn-timezone-from-dateTimealt-10;The function fn:timezone-from-dateTime with arity 1 is not registered.
fn-timezone-from-dateTimealt-11;The function fn:timezone-from-dateTime with arity 1 is not registered.
fn-timezone-from-dateTimealt-12;The function fn:timezone-from-dateTime with arity 1 is not registered.
fn-timezone-from-dateTimealt-13;The function fn:timezone-from-dateTime with arity 1 is not registered.
fn-timezone-from-dateTimealt-14;The function fn:timezone-from-dateTime with arity 1 is not registered.
fn-timezone-from-dateTimealt-15;The function fn:timezone-from-dateTime with arity 1 is not registered.
fn-timezone-from-dateTimealt-16;The function fn:timezone-from-dateTime with arity 1 is not registered.
fn-timezone-from-dateTimealt-17;The function fn:timezone-from-dateTime with arity 1 is not registered.
fn-timezone-from-dateTimealt-18;The function fn:timezone-from-dateTime with arity 1 is not registered.
fn-timezone-from-dateTimealt-19;The function fn:timezone-from-dateTime with arity 1 is not registered.
fn-timezone-from-dateTimealt-2;The function fn:timezone-from-dateTime with arity 1 is not registered.
fn-timezone-from-dateTimealt-20;The function fn:timezone-from-dateTime with arity 1 is not registered.
fn-timezone-from-dateTimealt-3;The function fn:timezone-from-dateTime with arity 1 is not registered.
fn-timezone-from-dateTimealt-4;The function fn:timezone-from-dateTime with arity 1 is not registered.
fn-timezone-from-dateTimealt-5;The function fn:timezone-from-dateTime with arity 1 is not registered.
fn-timezone-from-dateTimealt-6;The function fn:timezone-from-dateTime with arity 1 is not registered.
fn-timezone-from-dateTimealt-7;The function fn:timezone-from-dateTime with arity 1 is not registered.
fn-timezone-from-dateTimealt-8;The function fn:timezone-from-dateTime with arity 1 is not registered.
fn-timezone-from-dateTimealt-9;The function fn:timezone-from-dateTime with arity 1 is not registered.
fn-timezone-from-time-1;The function fn:timezone-from-time with arity 1 is not registered.
fn-timezone-from-time-10;The function fn:timezone-from-time with arity 1 is not registered.
fn-timezone-from-time-11;The function fn:timezone-from-time with arity 1 is not registered.
fn-timezone-from-time-12;The function fn:timezone-from-time with arity 1 is not registered.
fn-timezone-from-time-13;The function fn:timezone-from-time with arity 1 is not registered.
fn-timezone-from-time-14;The function fn:timezone-from-time with arity 1 is not registered.
fn-timezone-from-time-15;The function fn:timezone-from-time with arity 1 is not registered.
fn-timezone-from-time-16;The function fn:timezone-from-time with arity 1 is not registered.
fn-timezone-from-time-17;The function fn:timezone-from-time with arity 1 is not registered.
fn-timezone-from-time-18;The function fn:timezone-from-time with arity 1 is not registered.
fn-timezone-from-time-19;The function fn:timezone-from-time with arity 1 is not registered.
fn-timezone-from-time-2;The function fn:timezone-from-time with arity 1 is not registered.
fn-timezone-from-time-20;The function fn:timezone-from-time with arity 1 is not registered.
fn-timezone-from-time-3;The function fn:timezone-from-time with arity 1 is not registered.
fn-timezone-from-time-4;The function fn:timezone-from-time with arity 1 is not registered.
fn-timezone-from-time-5;The function fn:timezone-from-time with arity 1 is not registered.
fn-timezone-from-time-6;The function fn:timezone-from-time with arity 1 is not registered.
fn-timezone-from-time-7;The function fn:timezone-from-time with arity 1 is not registered.
fn-timezone-from-time-8;The function fn:timezone-from-time with arity 1 is not registered.
fn-timezone-from-time-9;The function fn:timezone-from-time with arity 1 is not registered.
fn-tokenize-10;Expected XPath fn:tokenize("abracadabra", "ww") to resolve to abracadabra, but instead got 
fn-tokenize-11;Expected XPath fn:tokenize("abracadabra", "^a") to (deep equally) resolve to "", "bracadabra"
fn-tokenize-12;Expected XPath fn:tokenize("abracadabra^abracadabra", "\^") to (deep equally) resolve to "abracadabra", "abracadabra"
fn-tokenize-13;Expected XPath fn:tokenize("abracadabra?abracadabra", "\?") to (deep equally) resolve to "abracadabra", "abracadabra"
fn-tokenize-14;Expected XPath fn:tokenize("abracadabra*abracadabra", "\*") to (deep equally) resolve to "abracadabra", "abracadabra"
fn-tokenize-15;Expected XPath fn:tokenize("abracadabra+abracadabra", "\+") to (deep equally) resolve to "abracadabra", "abracadabra"
fn-tokenize-16;Expected XPath fn:tokenize("abracadabra{abracadabra", "\{") to (deep equally) resolve to "abracadabra", "abracadabra"
fn-tokenize-17;Expected XPath fn:tokenize("abracadabra}abracadabra", "\}") to (deep equally) resolve to "abracadabra", "abracadabra"
fn-tokenize-18;Expected XPath fn:tokenize("abracadabra(abracadabra", "\(") to (deep equally) resolve to "abracadabra", "abracadabra"
fn-tokenize-19;Expected XPath fn:tokenize("abracadabra)abracadabra", "\)") to (deep equally) resolve to "abracadabra", "abracadabra"
fn-tokenize-2;Expected XPathException with code FORX0001, but got Using flags in 'tokenize' is not supported
fn-tokenize-20;Expected XPath fn:tokenize("abracadabra[abracadabra", "\[") to (deep equally) resolve to "abracadabra", "abracadabra"
fn-tokenize-21;Expected XPath fn:tokenize("abracadabra]abracadabra", "\]") to (deep equally) resolve to "abracadabra", "abracadabra"
fn-tokenize-22;Expected XPath fn:tokenize("abracadabra-abracadabra", "\-") to (deep equally) resolve to "abracadabra", "abracadabra"
fn-tokenize-23;Expected XPath fn:tokenize("abracadabra.abracadabra", "\.") to (deep equally) resolve to "abracadabra", "abracadabra"
fn-tokenize-24;Expected XPath fn:tokenize("abracadabra|abracadabra", "\|") to (deep equally) resolve to "abracadabra", "abracadabra"
fn-tokenize-25;Expected XPath fn:tokenize("abracadabra\abracadabra", "\\") to (deep equally) resolve to "abracadabra", "abracadabra"
fn-tokenize-26;Expected XPath fn:tokenize("abracadabra\tabracadabra", "\t") to (deep equally) resolve to "abracadabra", "abracadabra"
fn-tokenize-27;Expected XPath fn:tokenize("abracadabra\nabracadabra", "\n") to (deep equally) resolve to "abracadabra", "abracadabra"
fn-tokenize-28;Expected XPath fn:tokenize("abracadabraabracadabra", "aa{1}") to (deep equally) resolve to "abracadabr", "bracadabra"
fn-tokenize-29;Expected XPath fn:tokenize("abracadabraabracadabraabracadabra", "aa{1,}") to (deep equally) resolve to "abracadabr", "bracadabr", "bracadabra"
fn-tokenize-3;Expected XPath fn:tokenize("The cat sat on the mat", "\s+") to resolve to The cat sat on the mat, but instead got          
fn-tokenize-30;Expected XPath fn:tokenize("abracadabraabracadabraabracadabra", "aa{1,2}") to (deep equally) resolve to "abracadabr", "bracadabr", "bracadabra"
fn-tokenize-31;Using flags in 'tokenize' is not supported
fn-tokenize-32;Using flags in 'tokenize' is not supported
fn-tokenize-33;Expected XPath fn:tokenize("ABRACADABRA", "A(?:B)") to (deep equally) resolve to "", "RACAD", "RA"
fn-tokenize-34;Expected XPath fn:tokenize(concat('Mary', codepoints-to-string(13), 'Jones'), 'y.J') to resolve to concat('Mary', codepoints-to-string(13), 'Jones')
fn-tokenize-35;Using flags in 'tokenize' is not supported
fn-tokenize-36;Expected XPathException with code FORX0003, but got Using flags in 'tokenize' is not supported
fn-tokenize-37;Expected XPathException with code FORX0003, but got Using flags in 'tokenize' is not supported
fn-tokenize-38;Expected XPathException with code FORX0003, but got Using flags in 'tokenize' is not supported
fn-tokenize-39;The function tokenize with arity 1 is not registered.
fn-tokenize-4;Expected XPath fn:tokenize("1, 15, 24, 50", ",\s*") to resolve to 1 15 24 50, but instead got ,  ,  , 
fn-tokenize-40;The function tokenize with arity 1 is not registered.
fn-tokenize-41;The function tokenize with arity 1 is not registered.
fn-tokenize-42;The function tokenize with arity 1 is not registered.
fn-tokenize-43;The function tokenize with arity 1 is not registered.
fn-tokenize-44;The function tokenize with arity 1 is not registered.
fn-tokenize-45;The function tokenize with arity 1 is not registered.
fn-tokenize-46;The function tokenize with arity 1 is not registered.
fn-tokenize-47;The function tokenize with arity 1 is not registered.
fn-tokenize-48;The function tokenize with arity 1 is not registered.
fn-tokenize-49;The function tokenize with arity 1 is not registered.
fn-tokenize-5;Using flags in 'tokenize' is not supported
fn-tokenize-50;The function tokenize with arity 1 is not registered.
fn-tokenize-51;The function fn:tokenize with arity 1 is not registered.
fn-tokenize-52;The function tokenize with arity 1 is not registered.
fn-tokenize-6;Using flags in 'tokenize' is not supported
fn-tokenize-9;Expected XPath string-join(fn:tokenize("abracadabra", "(ab)|(a)"), '#') to resolve to #r#c#d#r#, but instead got ab#a#a#ab#a
fn-translate-17;Index was outside the bounds of the array.
fn-translate-18;Expected XPath translate("abcd", "xa", "𐀁y") to resolve to "ybcd"
fn-translate-19;Index was outside the bounds of the array.
fn-translate-2;Index was outside the bounds of the array.
fn-translate-20;Expected XPath translate("abcd𐀄e", "a𐀄e", "𐀆YZ") to resolve to "𐀆bcdYZ"
fn-translate-21;The function current-date with arity 0 is not registered.
fn-translate-22;The function current-date with arity 0 is not registered.
fn-translate-3;Index was outside the bounds of the array.
fn-true-1;PRSC Error: Failed to parse query '(fn:true()) instance of $xs:boolean'
fn-true-18;Expected XPath fn:string(fn:true()) to resolve to "true"
fn-true-19;Expected XPath fn:concat(xs:string(fn:true()),xs:string(fn:true())) to resolve to truetrue, but instead got TrueTrue
fn-union-node-args-015;Expected all children to match between result and parsedFragment.
fn-union-node-args-016;Expected all children to match between result and parsedFragment.
fn-union-node-args-017;Expected all children to match between result and parsedFragment.
fn-unordered-108;Skipped test, it was a assert-permutation
fn-unordered-109;Skipped test, it was a assert-permutation
fn-unordered-mix-args-001;Skipped test, it was a assert-permutation
fn-unordered-mix-args-002;Skipped test, it was a assert-permutation
fn-unordered-mix-args-003;Skipped test, it was a assert-permutation
fn-unordered-mix-args-004;Skipped test, it was a assert-permutation
fn-unordered-mix-args-005;Skipped test, it was a assert-permutation
fn-unordered-mix-args-006;Skipped test, it was a assert-permutation
fn-unordered-mix-args-007;Skipped test, it was a assert-permutation
fn-unordered-mix-args-008;Skipped test, it was a assert-permutation
fn-unordered-mix-args-009;Skipped test, it was a assert-permutation
fn-unordered-mix-args-010;Skipped test, it was a assert-permutation
fn-unordered-mix-args-011;Skipped test, it was a assert-permutation
fn-unordered-mix-args-012;Skipped test, it was a assert-permutation
fn-unordered-mix-args-013;Skipped test, it was a assert-permutation
fn-unordered-mix-args-014;Skipped test, it was a assert-permutation
fn-unordered-mix-args-015;Skipped test, it was a assert-permutation
fn-unordered-mix-args-016;Skipped test, it was a assert-permutation
fn-unordered-mix-args-017;Skipped test, it was a assert-permutation
fn-unordered-mix-args-018;Skipped test, it was a assert-permutation
fn-unordered-mix-args-019;Skipped test, it was a assert-permutation
fn-unordered-mix-args-020;Skipped test, it was a assert-permutation
fn-unordered-mix-args-021;Skipped test, it was a assert-permutation
fn-unordered-mix-args-022;Skipped test, it was a assert-permutation
fn-unordered-mix-args-023;Skipped test, it was a assert-permutation
fn-upper-case-18;Expected XPath fn:string-to-codepoints(fn:upper-case(fn:codepoints-to-string(160 to 256))) to (deep equally) resolve to 
fn-upper-case-19;Expected XPath fn:string-to-codepoints(fn:upper-case(fn:codepoints-to-string(880 to 1023))) to (deep equally) resolve to 
fn-upper-case-21;Expected XPath fn:string-to-codepoints(fn:upper-case(fn:codepoints-to-string(223))) to (deep equally) resolve to 83, 83
fn-upper-case-22;Expected XPath fn:string-to-codepoints(fn:upper-case(fn:codepoints-to-string(64279))) to (deep equally) resolve to 1348, 1341
fn-year-from-date-1;The function fn:year-from-date with arity 1 is not registered.
fn-year-from-date-10;The function fn:year-from-date with arity 1 is not registered.
fn-year-from-date-11;The function fn:year-from-date with arity 1 is not registered.
fn-year-from-date-12;The function fn:year-from-date with arity 1 is not registered.
fn-year-from-date-13;The function fn:year-from-date with arity 1 is not registered.
fn-year-from-date-14;The function fn:year-from-date with arity 1 is not registered.
fn-year-from-date-15;The function fn:year-from-date with arity 1 is not registered.
fn-year-from-date-16;The function fn:year-from-date with arity 1 is not registered.
fn-year-from-date-17;The function fn:year-from-date with arity 1 is not registered.
fn-year-from-date-18;The function fn:year-from-date with arity 1 is not registered.
fn-year-from-date-19;The function fn:year-from-date with arity 1 is not registered.
fn-year-from-date-2;The function fn:year-from-date with arity 1 is not registered.
fn-year-from-date-3;The function fn:year-from-date with arity 1 is not registered.
fn-year-from-date-4;The function fn:year-from-date with arity 1 is not registered.
fn-year-from-date-5;The function fn:year-from-date with arity 1 is not registered.
fn-year-from-date-6;The function fn:year-from-date with arity 1 is not registered.
fn-year-from-date-7;Expected executing the XPath 'fn:year-from-date(xs:date("-1999-05-31Z"))' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function fn:year-from-date with arity 1 is not registered.
fn-year-from-date-8;The function fn:year-from-date with arity 1 is not registered.
fn-year-from-date-9;The function fn:year-from-date with arity 1 is not registered.
fn-year-from-date1args-1;The function fn:year-from-date with arity 1 is not registered.
fn-year-from-date1args-2;The function fn:year-from-date with arity 1 is not registered.
fn-year-from-date1args-3;The function fn:year-from-date with arity 1 is not registered.
fn-year-from-dateTime-1;The function fn:year-from-dateTime with arity 1 is not registered.
fn-year-from-dateTime-10;The function fn:year-from-dateTime with arity 1 is not registered.
fn-year-from-dateTime-11;The function fn:year-from-dateTime with arity 1 is not registered.
fn-year-from-dateTime-12;The function fn:year-from-dateTime with arity 1 is not registered.
fn-year-from-dateTime-13;The function fn:year-from-dateTime with arity 1 is not registered.
fn-year-from-dateTime-16;The function fn:year-from-dateTime with arity 1 is not registered.
fn-year-from-dateTime-17;The function fn:year-from-dateTime with arity 1 is not registered.
fn-year-from-dateTime-18;The function fn:year-from-dateTime with arity 1 is not registered.
fn-year-from-dateTime-19;The function fn:year-from-dateTime with arity 1 is not registered.
fn-year-from-dateTime-2;The function fn:year-from-dateTime with arity 1 is not registered.
fn-year-from-dateTime-3;The function fn:year-from-dateTime with arity 1 is not registered.
fn-year-from-dateTime-4;The function fn:year-from-dateTime with arity 1 is not registered.
fn-year-from-dateTime-5;The function fn:year-from-dateTime with arity 1 is not registered.
fn-year-from-dateTime-6;The function fn:year-from-dateTime with arity 1 is not registered.
fn-year-from-dateTime-7;The function fn:year-from-dateTime with arity 1 is not registered.
fn-year-from-dateTime-8;The function fn:year-from-dateTime with arity 1 is not registered.
fn-year-from-dateTime-9;The function fn:year-from-dateTime with arity 1 is not registered.
fn-year-from-dateTime1args-1;The function fn:year-from-dateTime with arity 1 is not registered.
fn-year-from-dateTime1args-2;The function fn:year-from-dateTime with arity 1 is not registered.
fn-year-from-dateTime1args-3;The function fn:year-from-dateTime with arity 1 is not registered.
fn-year-from-dateTimeNew-14;The function fn:year-from-dateTime with arity 1 is not registered.
fn-year-from-dateTimeNew-15;The function fn:year-from-dateTime with arity 1 is not registered.
fn-years-from-duration-1;The function fn:years-from-duration with arity 1 is not registered.
fn-years-from-duration-10;The function fn:years-from-duration with arity 1 is not registered.
fn-years-from-duration-11;The function fn:years-from-duration with arity 1 is not registered.
fn-years-from-duration-12;The function fn:years-from-duration with arity 1 is not registered.
fn-years-from-duration-13;The function fn:years-from-duration with arity 1 is not registered.
fn-years-from-duration-14;The function fn:years-from-duration with arity 1 is not registered.
fn-years-from-duration-15;The function fn:years-from-duration with arity 1 is not registered.
fn-years-from-duration-16;The function fn:years-from-duration with arity 1 is not registered.
fn-years-from-duration-17;The function fn:years-from-duration with arity 1 is not registered.
fn-years-from-duration-18;The function fn:years-from-duration with arity 1 is not registered.
fn-years-from-duration-19;The function fn:years-from-duration with arity 1 is not registered.
fn-years-from-duration-2;The function fn:years-from-duration with arity 1 is not registered.
fn-years-from-duration-20;The function fn:years-from-duration with arity 1 is not registered.
fn-years-from-duration-3;The function fn:years-from-duration with arity 1 is not registered.
fn-years-from-duration-4;The function fn:years-from-duration with arity 1 is not registered.
fn-years-from-duration-5;The function fn:years-from-duration with arity 1 is not registered.
fn-years-from-duration-6;The function fn:years-from-duration with arity 1 is not registered.
fn-years-from-duration-7;The function fn:years-from-duration with arity 1 is not registered.
fn-years-from-duration-8;The function fn:years-from-duration with arity 1 is not registered.
fn-years-from-duration-9;The function fn:years-from-duration with arity 1 is not registered.
fn-years-from-duration1args-1;The function fn:years-from-duration with arity 1 is not registered.
fn-years-from-duration1args-2;The function fn:years-from-duration with arity 1 is not registered.
fn-years-from-duration1args-3;The function fn:years-from-duration with arity 1 is not registered.
fn-zero-or-onedbl1args-1;Expected XPath fn:zero-or-one(xs:double("-1.7976931348623157E308")) to resolve to -1.7976931348623157E308, but instead got -1.7976931348623157E+308
fn-zero-or-onedbl1args-2;Expected XPath fn:zero-or-one(xs:double("0")) to resolve to 0, but instead got -0
fn-zero-or-onedbl1args-3;Expected XPath fn:zero-or-one(xs:double("1.7976931348623157E308")) to resolve to 1.7976931348623157E308, but instead got 1.7976931348623157E+308
fn-zero-or-oneflt1args-1;Expected XPath fn:zero-or-one(xs:float("-3.4028235E38")) to resolve to -3.4028235E38, but instead got -3.4028235E+38
fn-zero-or-oneflt1args-2;Expected XPath fn:zero-or-one(xs:float("0")) to resolve to 0, but instead got -0
fn-zero-or-oneflt1args-3;Expected XPath fn:zero-or-one(xs:float("3.4028235E38")) to resolve to 3.4028235E38, but instead got 3.4028235E+38
fo-test-array-append-001;PRSC Error: Failed to parse query 'deep-equal((\n        array:append(["a", "b", "c"], "d")\n      ), (["a", "b", "c", "d"]))'
fo-test-array-append-002;PRSC Error: Failed to parse query 'deep-equal((\n        array:append(["a", "b", "c"], ("d", "e"))\n      ), (["a", "b", "c", ("d", "e")]))'
fo-test-array-append-003;PRSC Error: Failed to parse query 'deep-equal((\n        array:append(["a", "b", "c"], ["d", "e"])\n      ), (["a", "b", "c", ["d", "e"]]))'
fo-test-array-filter-001;PRSC Error: Failed to parse query 'deep-equal((\n        array:filter(["A", "B", 1, 2], function($x) {$x instance of xs:integer})\n      ), ([1, 2]))'
fo-test-array-filter-002;PRSC Error: Failed to parse query 'deep-equal((\n        array:filter(["the cat", "sat", "on the mat"], function($s){fn:count(fn:tokenize($s)) gt 1})\n      ), (["the cat", "on the mat"]))'
fo-test-array-filter-003;PRSC Error: Failed to parse query 'deep-equal((\n        array:filter(["A", "B", "", 0, 1], boolean#1)\n      ), (["A", "B", 1]))'
fo-test-array-flatten-001;PRSC Error: Failed to parse query 'deep-equal((\n        array:flatten([1, 4, 6, 5, 3])\n      ), ((1, 4, 6, 5, 3)))'
fo-test-array-flatten-002;PRSC Error: Failed to parse query 'deep-equal((\n        array:flatten(([1, 2, 5], [[10, 11], 12], [], 13))\n      ), ((1, 2, 5, 10, 11, 12, 13)))'
fo-test-array-flatten-003;PRSC Error: Failed to parse query 'deep-equal((\n        array:flatten([(1,0), (1,1), (0,1), (0,0)])\n      ), ((1, 0, 1, 1, 0, 1, 0, 0)))'
fo-test-array-fold-left-001;PRSC Error: Failed to parse query '\n        array:fold-left([true(), true(), false()], true(), function($x, $y){$x and $y})\n      '
fo-test-array-fold-left-002;PRSC Error: Failed to parse query '\n        array:fold-left([true(), true(), false()], false(), function($x, $y){$x or $y})\n      '
fo-test-array-fold-left-003;PRSC Error: Failed to parse query 'deep-equal((\n        array:fold-left([1,2,3], [], function($x, $y){[$x, $y]})\n      ), ([[[[], 1], 2], 3]))'
fo-test-array-fold-right-001;PRSC Error: Failed to parse query '\n        array:fold-right([true(), true(), false()], true(), function($x, $y){$x and $y})\n      '
fo-test-array-fold-right-002;PRSC Error: Failed to parse query '\n        array:fold-right([true(), true(), false()], false(), function($x, $y){$x or $y})\n      '
fo-test-array-fold-right-003;PRSC Error: Failed to parse query 'deep-equal((\n        array:fold-right([1,2,3], [], function($x, $y){[$x, $y]})\n      ), ([1, [2, [3, []]]]))'
fo-test-array-for-each-001;PRSC Error: Failed to parse query 'deep-equal((\n        array:for-each(["A", "B", 1, 2], function($z) {$z instance of xs:integer})\n      ), ([false(), false(), true(), true()]))'
fo-test-array-for-each-002;PRSC Error: Failed to parse query 'deep-equal((\n        array:for-each(["the cat", "sat", "on the mat"], fn:tokenize#1)\n      ), ([("the", "cat"), "sat", ("on", "the", "mat")]))'
fo-test-array-for-each-pair-001;PRSC Error: Failed to parse query 'deep-equal((\n        array:for-each-pair(["A", "B", "C"], [1, 2, 3], function($x, $y) { array {$x, $y}})\n      ), ([["A", 1], ["B", 2], ["C", 3]]))'
fo-test-array-for-each-pair-002;PRSC Error: Failed to parse query 'deep-equal((\n        let $A := ["A", "B", "C", "D"] return array:for-each-pair($A, array:tail($A), concat#2)\n      ), (["AB", "BC", "CD"]))'
fo-test-array-get-001;PRSC Error: Failed to parse query 'deep-equal((\n        ["a", "b", "c"] => array:get(2)\n      ), ("b"))'
fo-test-array-get-002;PRSC Error: Failed to parse query 'deep-equal((\n        ["a", ["b", "c"]] => array:get(2)\n      ), (["b", "c"]))'
fo-test-array-head-001;PRSC Error: Failed to parse query 'deep-equal((\n        array:head([5, 6, 7, 8])\n      ), (5))'
fo-test-array-head-002;PRSC Error: Failed to parse query 'deep-equal((\n        array:head([["a", "b"], ["c", "d"]])\n      ), (["a", "b"]))'
fo-test-array-head-003;PRSC Error: Failed to parse query 'deep-equal((\n        array:head([("a", "b"), ("c", "d")])\n      ), ("a", "b"))'
fo-test-array-insert-before-001;PRSC Error: Failed to parse query 'deep-equal((\n        array:insert-before(["a", "b", "c", "d"], 3, ("x", "y"))\n      ), (["a", "b", ("x", "y"), "c", "d"]))'
fo-test-array-insert-before-002;PRSC Error: Failed to parse query 'deep-equal((\n        array:insert-before(["a", "b", "c", "d"], 5, ("x", "y"))\n      ), (["a", "b", "c", "d", ("x", "y")]))'
fo-test-array-insert-before-003;PRSC Error: Failed to parse query 'deep-equal((\n        array:insert-before(["a", "b", "c", "d"], 3, ["x", "y"])\n      ), (["a", "b", ["x", "y"], "c", "d"]))'
fo-test-array-join-001;PRSC Error: Failed to parse query 'deep-equal((\n        array:join(())\n      ), ([ ]))'
fo-test-array-join-002;PRSC Error: Failed to parse query 'deep-equal((\n        array:join([1, 2, 3])\n      ), ([1, 2, 3]))'
fo-test-array-join-003;PRSC Error: Failed to parse query 'deep-equal((\n        array:join((["a", "b"], ["c", "d"]))\n      ), (["a", "b", "c", "d"]))'
fo-test-array-join-004;PRSC Error: Failed to parse query 'deep-equal((\n        array:join((["a", "b"], ["c", "d"], [ ]))\n      ), (["a", "b", "c", "d"]))'
fo-test-array-join-005;PRSC Error: Failed to parse query 'deep-equal((\n        array:join((["a", "b"], ["c", "d"], [["e", "f"]]))\n      ), (["a", "b", "c", "d", ["e", "f"]]))'
fo-test-array-put-001;PRSC Error: Failed to parse query 'deep-equal((\n        array:put(["a", "b", "c"], 2, "d")\n      ), (["a", "d", "c"]))'
fo-test-array-put-002;PRSC Error: Failed to parse query 'deep-equal((\n        array:put(["a", "b", "c"], 2, ("d", "e"))\n      ), (["a", ("d", "e"), "c"]))'
fo-test-array-put-003;PRSC Error: Failed to parse query 'deep-equal((\n        array:put(["a"], 1, ["d", "e"])\n      ), ([["d", "e"]]))'
fo-test-array-remove-001;PRSC Error: Failed to parse query 'deep-equal((\n        array:remove(["a", "b", "c", "d"], 1)\n      ), (["b", "c", "d"]))'
fo-test-array-remove-002;PRSC Error: Failed to parse query 'deep-equal((\n        array:remove(["a", "b", "c", "d"], 2)\n      ), (["a", "c", "d" ]))'
fo-test-array-remove-003;PRSC Error: Failed to parse query 'deep-equal((\n        array:remove(["a"], 1)\n      ), ([ ]))'
fo-test-array-remove-004;PRSC Error: Failed to parse query 'deep-equal((\n        array:remove(["a", "b", "c", "d"], 1 to 3)\n      ), (["d"]))'
fo-test-array-remove-005;PRSC Error: Failed to parse query 'deep-equal((\n        array:remove(["a", "b", "c", "d"], ())\n      ), (["a", "b", "c", "d"]))'
fo-test-array-reverse-001;PRSC Error: Failed to parse query 'deep-equal((\n        array:reverse(["a", "b", "c", "d"])\n      ), (["d", "c", "b", "a"]))'
fo-test-array-reverse-002;PRSC Error: Failed to parse query 'deep-equal((\n        array:reverse([("a", "b"), ("c", "d")])\n      ), ([("c", "d"), ("a", "b")]))'
fo-test-array-reverse-003;PRSC Error: Failed to parse query 'deep-equal((\n        array:reverse([(1 to 5)])\n      ), ([(1, 2, 3, 4, 5)]))'
fo-test-array-reverse-004;PRSC Error: Failed to parse query 'deep-equal((\n        array:reverse([])\n      ), ([]))'
fo-test-array-size-001;PRSC Error: Failed to parse query 'deep-equal((\n        array:size(["a", "b", "c"])\n      ), (3))'
fo-test-array-size-002;PRSC Error: Failed to parse query 'deep-equal((\n        array:size(["a", ["b", "c"]])\n      ), (2))'
fo-test-array-size-003;PRSC Error: Failed to parse query 'deep-equal((\n        array:size([ ])\n      ), (0))'
fo-test-array-size-004;PRSC Error: Failed to parse query 'deep-equal((\n        array:size([[ ]])\n      ), (1))'
fo-test-array-sort-001;PRSC Error: Failed to parse query 'deep-equal((\n        array:sort([1, 4, 6, 5, 3])\n      ), ([1, 3, 4, 5, 6]))'
fo-test-array-sort-002;PRSC Error: Failed to parse query 'deep-equal((\n        array:sort([1, -2, 5, 10, -10, 10, 8], (), fn:abs#1)\n      ), ([1, -2, 5, 8, 10, -10, 10]))'
fo-test-array-sort-003;PRSC Error: Failed to parse query 'deep-equal((\n        array:sort([(1,0), (1,1), (0,1), (0,0)])\n      ), ([(0,0), (0,1), (1,0), (1,1)]))'
fo-test-array-subarray-001;PRSC Error: Failed to parse query 'deep-equal((\n        array:subarray(["a", "b", "c", "d"], 2)\n      ), (["b", "c", "d"]))'
fo-test-array-subarray-002;PRSC Error: Failed to parse query 'deep-equal((\n        array:subarray(["a", "b", "c", "d"], 5)\n      ), ([ ]))'
fo-test-array-subarray-003;PRSC Error: Failed to parse query 'deep-equal((\n        array:subarray(["a", "b", "c", "d"], 2, 0)\n      ), ([ ]))'
fo-test-array-subarray-004;PRSC Error: Failed to parse query 'deep-equal((\n        array:subarray(["a", "b", "c", "d"], 2, 1)\n      ), (["b"]))'
fo-test-array-subarray-005;PRSC Error: Failed to parse query 'deep-equal((\n        array:subarray(["a", "b", "c", "d"], 2, 2)\n      ), (["b", "c"]))'
fo-test-array-subarray-006;PRSC Error: Failed to parse query 'deep-equal((\n        array:subarray(["a", "b", "c", "d"], 5, 0)\n      ), ([ ]))'
fo-test-array-subarray-007;PRSC Error: Failed to parse query 'deep-equal((\n        array:subarray([ ], 1, 0)\n      ), ([ ]))'
fo-test-array-tail-001;PRSC Error: Failed to parse query 'deep-equal((\n        array:tail([5, 6, 7, 8])\n      ), ([6, 7, 8]))'
fo-test-array-tail-002;PRSC Error: Failed to parse query 'deep-equal((\n        array:tail([5])\n      ), ([ ]))'
fo-test-fn-abs-002;Expected XPath fn:abs(-10.5) to (deep equally) resolve to 10.5
fo-test-fn-adjust-date-to-timezone-003;The function fn:adjust-date-to-timezone with arity 2 is not registered.
fo-test-fn-adjust-date-to-timezone-004;The function fn:adjust-date-to-timezone with arity 2 is not registered.
fo-test-fn-adjust-date-to-timezone-005;The function fn:adjust-date-to-timezone with arity 2 is not registered.
fo-test-fn-adjust-date-to-timezone-006;The function fn:adjust-date-to-timezone with arity 2 is not registered.
fo-test-fn-adjust-dateTime-to-timezone-002;The function fn:adjust-dateTime-to-timezone with arity 1 is not registered.
fo-test-fn-adjust-dateTime-to-timezone-003;The function fn:adjust-dateTime-to-timezone with arity 2 is not registered.
fo-test-fn-adjust-dateTime-to-timezone-004;The function fn:adjust-dateTime-to-timezone with arity 2 is not registered.
fo-test-fn-adjust-dateTime-to-timezone-005;The function fn:adjust-dateTime-to-timezone with arity 2 is not registered.
fo-test-fn-adjust-dateTime-to-timezone-006;The function fn:adjust-dateTime-to-timezone with arity 2 is not registered.
fo-test-fn-adjust-dateTime-to-timezone-007;The function fn:adjust-dateTime-to-timezone with arity 2 is not registered.
fo-test-fn-adjust-dateTime-to-timezone-008;The function fn:adjust-dateTime-to-timezone with arity 2 is not registered.
fo-test-fn-adjust-time-to-timezone-002;The function fn:adjust-time-to-timezone with arity 1 is not registered.
fo-test-fn-adjust-time-to-timezone-003;The function fn:adjust-time-to-timezone with arity 2 is not registered.
fo-test-fn-adjust-time-to-timezone-004;The function fn:adjust-time-to-timezone with arity 2 is not registered.
fo-test-fn-adjust-time-to-timezone-005;The function fn:adjust-time-to-timezone with arity 2 is not registered.
fo-test-fn-adjust-time-to-timezone-006;The function fn:adjust-time-to-timezone with arity 2 is not registered.
fo-test-fn-adjust-time-to-timezone-007;The function fn:adjust-time-to-timezone with arity 2 is not registered.
fo-test-fn-analyze-string-001;The function fn:analyze-string with arity 2 is not registered.
fo-test-fn-analyze-string-002;The function fn:analyze-string with arity 2 is not registered.
fo-test-fn-analyze-string-003;The function fn:analyze-string with arity 2 is not registered.
fo-test-fn-apply-001;PRSC Error: Failed to parse query 'deep-equal((\n        fn:apply(fn:concat#3, ["a", "b", "c"])\n      ), ("abc"))'
fo-test-fn-avg-002;Expected XPath let $d1 := xs:yearMonthDuration("P20Y")\n          \n           return \n\n        \n          let $d2 := xs:yearMonthDuration("P10M")\n          \n           return \n\n        \n        fn:avg(($d1, $d2)) to (deep equally) resolve to xs:yearMonthDuration("P10Y5M")
fo-test-fn-avg-004;Overflow when creating a Int64 from NaN.
fo-test-fn-avg-005;Overflow when creating a Int64 from NaN.
fo-test-fn-ceiling-002;Expected XPath fn:ceiling(-10.5) to (deep equally) resolve to -10
fo-test-fn-collation-key-001;PRSC Error: Failed to parse query 'deep-equal((\n          let $C := 'http://www.w3.org/2013/collation/UCA?strength=primary'\n          \n           return \n\n        \n        map:merge((map{collation-key("A", $C):1}, map{collation-key("a",\n                  $C):2}), map{"duplicates":"use-last"})(collation-key("A", $C))\n      ), (2))'
fo-test-fn-collation-key-002;PRSC Error: Failed to parse query 'deep-equal((\n          let $C := 'http://www.w3.org/2013/collation/UCA?strength=primary'\n          \n           return \n\n        \n        let $M := map{collation-key("A", $C):1, collation-key("B", $C):2}\n                  return $M(collation-key("a", $C))\n      ), (1))'
fo-test-fn-compare-002;Expected XPath fn:compare('Strasse', 'Straße') to (deep equally) resolve to 0
fo-test-fn-compare-003;No collations are supported
fo-test-fn-compare-004;Expected XPath fn:compare('Strassen', 'Straße') to (deep equally) resolve to 1
fo-test-fn-concat-005;Expected XPath fn:concat(01, 02, 03, 04, true()) to (deep equally) resolve to "1234true"
fo-test-fn-contains-004;No collations are supported
fo-test-fn-contains-005;No collations are supported
fo-test-fn-contains-006;No collations are supported
fo-test-fn-contains-007;No collations are supported
fo-test-fn-contains-token-001;The function fn:contains-token with arity 2 is not registered.
fo-test-fn-contains-token-002;The function fn:contains-token with arity 2 is not registered.
fo-test-fn-contains-token-003;The function fn:contains-token with arity 2 is not registered.
fo-test-fn-contains-token-004;The function fn:contains-token with arity 3 is not registered.
fo-test-fn-count-001;PRSC Error: Failed to parse query 'deep-equal((\n          let $po := \n          <PurchaseOrder> <line-item>\n         <description>Large widget</description> <price>8.95</price>\n         <quantity>5.0</quantity> </line-item> <line-item>\n         <description>Small widget</description> <price>3.99</price>\n         <quantity>2.0</quantity> </line-item> <line-item>\n         <description>Tiny widget</description> <price>1.49</price>a\n         <quantity>805</quantity> </line-item>\n         </PurchaseOrder>\n           return \n\n        \n          let $item1 := $po/line-item[1]\n          \n           return \n\n        \n          let $item2 := $po/line-item[2]\n          \n           return \n\n        \n          let $seq1 := ($item1, $item2)\n          \n           return \n\n        \n        fn:count($seq1)\n      ), (2))'
fo-test-fn-count-005;PRSC Error: Failed to parse query 'deep-equal((\n        fn:count([])\n      ), (1))'
fo-test-fn-count-006;PRSC Error: Failed to parse query 'deep-equal((\n        fn:count([1,2,3])\n      ), (1))'
fo-test-fn-data-003;PRSC Error: Failed to parse query 'deep-equal((\n        data([[1,2],[3,4]])\n      ), (1, 2, 3, 4))'
fo-test-fn-data-004;PRSC Error: Failed to parse query 'deep-equal((\n          let $para := \n          \n<para>In a hole in the ground there lived a <term author="Tolkien">hobbit</term>.</para>\n         \n           return \n\n        \n        data($para)\n      ), (xs:untypedAtomic("In a hole in the ground there lived a hobbit.")))'
fo-test-fn-data-005;PRSC Error: Failed to parse query 'deep-equal((\n          let $para := \n          \n<para>In a hole in the ground there lived a <term author="Tolkien">hobbit</term>.</para>\n         \n           return \n\n        \n        data($para/term/@author)\n      ), (xs:untypedAtomic("Tolkien")))'
fo-test-fn-dateTime-001;The function fn:dateTime with arity 2 is not registered.
fo-test-fn-dateTime-002;The function fn:dateTime with arity 2 is not registered.
fo-test-fn-day-from-date-001;The function fn:day-from-date with arity 1 is not registered.
fo-test-fn-day-from-date-002;The function fn:day-from-date with arity 1 is not registered.
fo-test-fn-day-from-dateTime-001;The function fn:day-from-dateTime with arity 1 is not registered.
fo-test-fn-day-from-dateTime-002;The function fn:day-from-dateTime with arity 1 is not registered.
fo-test-fn-day-from-dateTime-003;The function fn:day-from-dateTime with arity 1 is not registered.
fo-test-fn-days-from-duration-001;The function fn:days-from-duration with arity 1 is not registered.
fo-test-fn-days-from-duration-002;The function fn:days-from-duration with arity 1 is not registered.
fo-test-fn-days-from-duration-003;The function fn:days-from-duration with arity 1 is not registered.
fo-test-fn-deep-equal-001;PRSC Error: Failed to parse query '\n          let $at := \n          <attendees> <name last='Parker'\n            first='Peter'/> <name last='Barker' first='Bob'/> <name last='Parker'\n            first='Peter'/> </attendees>\n           return \n\n        \n        fn:deep-equal($at, $at/*)\n      '
fo-test-fn-deep-equal-002;PRSC Error: Failed to parse query '\n          let $at := \n          <attendees> <name last='Parker'\n            first='Peter'/> <name last='Barker' first='Bob'/> <name last='Parker'\n            first='Peter'/> </attendees>\n           return \n\n        \n        fn:deep-equal($at/name[1], $at/name[2])\n      '
fo-test-fn-deep-equal-003;PRSC Error: Failed to parse query '\n          let $at := \n          <attendees> <name last='Parker'\n            first='Peter'/> <name last='Barker' first='Bob'/> <name last='Parker'\n            first='Peter'/> </attendees>\n           return \n\n        \n        fn:deep-equal($at/name[1], $at/name[3])\n      '
fo-test-fn-deep-equal-004;PRSC Error: Failed to parse query '\n          let $at := \n          <attendees> <name last='Parker'\n            first='Peter'/> <name last='Barker' first='Bob'/> <name last='Parker'\n            first='Peter'/> </attendees>\n           return \n\n        \n        fn:deep-equal($at/name[1], 'Peter Parker')\n      '
fo-test-fn-deep-equal-005;PRSC Error: Failed to parse query '\n        fn:deep-equal(map{1:'a', 2:'b'}, map{2:'b', 1:'a'})\n      '
fo-test-fn-deep-equal-006;PRSC Error: Failed to parse query '\n        fn:deep-equal([1, 2, 3], [1, 2, 3])\n      '
fo-test-fn-deep-equal-007;PRSC Error: Failed to parse query '\n        fn:deep-equal((1, 2, 3), [1, 2, 3])\n      '
fo-test-fn-distinct-values-001;Skipped test, it was a assert-permutation
fo-test-fn-distinct-values-002;Skipped test, it was a assert-permutation
fo-test-fn-element-with-id-001;PRSC Error: Failed to parse query 'deep-equal((\n          let $emp := \n          \n         validate lax{    \n          document{\n            <employee xml:id="ID21256"\n                      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  \n                      xmlns:xs="http://www.w3.org/2001/XMLSchema">\n               <empnr xsi:type="xs:ID">E21256</empnr>\n               <first>John</first>\n               <last>Brown</last>\n            </employee>\n          }\n        }\n         \n           return \n\n        \n        $emp/fn:element-with-id('ID21256')/name()\n      ), ("employee"))'
fo-test-fn-element-with-id-002;PRSC Error: Failed to parse query 'deep-equal((\n          let $emp := \n          \n         validate lax{    \n          document{\n            <employee xml:id="ID21256"\n                      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  \n                      xmlns:xs="http://www.w3.org/2001/XMLSchema">\n               <empnr xsi:type="xs:ID">E21256</empnr>\n               <first>John</first>\n               <last>Brown</last>\n            </employee>\n          }\n        }\n         \n           return \n\n        \n        $emp/fn:element-with-id('E21256')/name()\n      ), ("employee"))'
fo-test-fn-empty-003;PRSC Error: Failed to parse query '\n        fn:empty([])\n      '
fo-test-fn-empty-004;PRSC Error: Failed to parse query '\n        fn:empty(map{})\n      '
fo-test-fn-encode-for-uri-001;Expected XPath fn:encode-for-uri("http://www.example.com/00/Weather/CA/Los%20Angeles#ocean") to (deep equally) resolve to "http%3A%2F%2Fwww.example.com%2F00%2FWeather%2FCA%2FLos%2520Angeles%23ocean"
fo-test-fn-encode-for-uri-002;Expected XPath concat("http://www.example.com/",\n                  encode-for-uri("~bébé")) to (deep equally) resolve to "http://www.example.com/~b%C3%A9b%C3%A9"
fo-test-fn-encode-for-uri-003;Expected XPath concat("http://www.example.com/", encode-for-uri("100% organic")) to (deep equally) resolve to "http://www.example.com/100%25%20organic"
fo-test-fn-ends-with-004;No collations are supported
fo-test-fn-ends-with-005;No collations are supported
fo-test-fn-ends-with-006;No collations are supported
fo-test-fn-ends-with-007;No collations are supported
fo-test-fn-ends-with-008;No collations are supported
fo-test-fn-error-001;Expected error code: FOER0000. Found error code: XPST0017 with error message: The function fn:error with arity 0 is not registered.
fo-test-fn-error-002;Expected error code: *. Found error code: XPST0017 with error message: The function fn:error with arity 2 is not registered.
fo-test-fn-escape-html-uri-001;The function fn:escape-html-uri with arity 1 is not registered.
fo-test-fn-escape-html-uri-002;The function fn:escape-html-uri with arity 1 is not registered.
fo-test-fn-exists-003;PRSC Error: Failed to parse query '\n        fn:exists([])\n      '
fo-test-fn-exists-004;PRSC Error: Failed to parse query '\n        fn:exists(map{})\n      '
fo-test-fn-filter-002;The function fn:lang with arity 2 is not registered.
fo-test-fn-floor-002;Expected XPath fn:floor(-10.5) to (deep equally) resolve to -11
fo-test-fn-fold-left-008;PRSC Error: Failed to parse query 'deep-equal((\n        fn:fold-left(1 to 5, map{}, function($map, $n) {map:put($map, $n, $n*2)})\n      ), (map{1:2, 2:4, 3:6, 4:8, 5:10}))'
fo-test-fn-fold-right-002;Expected XPath fn:fold-right(1 to 5, "", fn:concat(?, ".", ?)) to (deep equally) resolve to "1.2.3.4.5."
fo-test-fn-fold-right-003;Expected XPath fn:fold-right(1 to 5, "$zero", concat("$f(", ?, ", ", ?,\n                  ")")) to (deep equally) resolve to "$f(1, $f(2, $f(3, $f(4, $f(5, $zero)))))"
fo-test-fn-for-each-pair-001;The function fn:for-each-pair with arity 3 is not registered.
fo-test-fn-for-each-pair-002;The function fn:for-each-pair with arity 3 is not registered.
fo-test-fn-for-each-pair-003;The function fn:for-each-pair with arity 3 is not registered.
fo-test-fn-format-integer-001;Casting AbstractValue(XsInteger) to StringValue
fo-test-fn-format-integer-002;The function format-integer with arity 3 is not registered.
fo-test-fn-format-integer-003;Casting AbstractValue(XsInteger) to StringValue
fo-test-fn-format-integer-004;Casting AbstractValue(XsInteger) to StringValue
fo-test-fn-format-integer-005;Casting AbstractValue(XsInteger) to StringValue
fo-test-fn-format-number-001;The function format-number with arity 2 is not registered.
fo-test-fn-format-number-002;The function format-number with arity 2 is not registered.
fo-test-fn-format-number-003;The function format-number with arity 2 is not registered.
fo-test-fn-format-number-004;The function format-number with arity 2 is not registered.
fo-test-fn-format-number-005;The function format-number with arity 2 is not registered.
fo-test-fn-format-number-006;The function format-number with arity 3 is not registered.
fo-test-fn-format-number-007;The function format-number with arity 3 is not registered.
fo-test-fn-format-number-008;The function format-number with arity 3 is not registered.
fo-test-fn-format-number-009;The function format-number with arity 3 is not registered.
fo-test-fn-format-number-010;The function format-number with arity 3 is not registered.
fo-test-fn-function-arity-001;The function fn:function-arity with arity 1 is not registered.
fo-test-fn-function-arity-002;The function fn:function-arity with arity 1 is not registered.
fo-test-fn-function-arity-003;The function fn:function-arity with arity 1 is not registered.
fo-test-fn-function-lookup-001;Expected base expression of a function call to evaluate to a sequence of single function item
fo-test-fn-function-name-001;The function fn:function-name with arity 1 is not registered.
fo-test-fn-function-name-002;The function fn:function-name with arity 1 is not registered.
fo-test-fn-head-004;PRSC Error: Failed to parse query 'deep-equal((\n        fn:head([1,2,3])\n      ), ([1,2,3]))'
fo-test-fn-hours-from-dateTime-001;The function fn:hours-from-dateTime with arity 1 is not registered.
fo-test-fn-hours-from-dateTime-002;The function fn:hours-from-dateTime with arity 1 is not registered.
fo-test-fn-hours-from-dateTime-003;The function fn:hours-from-dateTime with arity 1 is not registered.
fo-test-fn-hours-from-dateTime-004;The function fn:hours-from-dateTime with arity 1 is not registered.
fo-test-fn-hours-from-dateTime-005;The function fn:hours-from-dateTime with arity 1 is not registered.
fo-test-fn-hours-from-duration-001;The function fn:hours-from-duration with arity 1 is not registered.
fo-test-fn-hours-from-duration-002;The function fn:hours-from-duration with arity 1 is not registered.
fo-test-fn-hours-from-duration-003;The function fn:hours-from-duration with arity 1 is not registered.
fo-test-fn-hours-from-duration-004;The function fn:hours-from-duration with arity 1 is not registered.
fo-test-fn-hours-from-time-001;The function fn:hours-from-time with arity 1 is not registered.
fo-test-fn-hours-from-time-002;The function fn:hours-from-time with arity 1 is not registered.
fo-test-fn-hours-from-time-003;The function fn:hours-from-time with arity 1 is not registered.
fo-test-fn-hours-from-time-004;The function fn:hours-from-time with arity 1 is not registered.
fo-test-fn-hours-from-time-005;The function fn:hours-from-time with arity 1 is not registered.
fo-test-fn-id-001;PRSC Error: Failed to parse query 'deep-equal((\n          let $emp := \n          \n        validate lax{    \n          document{\n            <employee xml:id="ID21256"\n                      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  \n                      xmlns:xs="http://www.w3.org/2001/XMLSchema">\n               <empnr xsi:type="xs:ID">E21256</empnr>\n               <first>John</first>\n               <last>Brown</last>\n            </employee>\n          }\n        }\n         \n           return \n\n        \n        $emp/id('ID21256')/name()\n      ), ("employee"))'
fo-test-fn-id-002;PRSC Error: Failed to parse query 'deep-equal((\n          let $emp := \n          \n        validate lax{    \n          document{\n            <employee xml:id="ID21256"\n                      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  \n                      xmlns:xs="http://www.w3.org/2001/XMLSchema">\n               <empnr xsi:type="xs:ID">E21256</empnr>\n               <first>John</first>\n               <last>Brown</last>\n            </employee>\n          }\n        }\n         \n           return \n\n        \n        $emp/id('E21256')/name()\n      ), ("empnr"))'
fo-test-fn-idref-001;PRSC Error: Failed to parse query 'deep-equal((\n          let $emp := \n          \n      validate lax {  \n        document {    \n          <employees xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  \n                     xmlns:xs="http://www.w3.org/2001/XMLSchema">  \n            <employee xml:id="ID21256">\n               <empnr xsi:type="xs:ID">E21256</empnr>\n               <first>Anil</first>\n               <last>Singh</last>\n               <deputy xsi:type="xs:IDREF">E30561</deputy>\n            </employee>\n            <employee xml:id="ID30561">\n               <empnr xsi:type="xs:ID">E30561</empnr>\n               <first>John</first>\n               <last>Brown</last>\n               <manager xsi:type="xs:IDREF">ID21256</manager>\n            </employee>\n          </employees>\n        }\n      }\n         \n           return \n\n        \n        $emp/(element-with-id('ID21256')/@xml:id => fn:idref())/ancestor::employee/last => string()\n      ), ("Brown"))'
fo-test-fn-idref-002;PRSC Error: Failed to parse query 'deep-equal((\n          let $emp := \n          \n      validate lax {  \n        document {    \n          <employees xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  \n                     xmlns:xs="http://www.w3.org/2001/XMLSchema">  \n            <employee xml:id="ID21256">\n               <empnr xsi:type="xs:ID">E21256</empnr>\n               <first>Anil</first>\n               <last>Singh</last>\n               <deputy xsi:type="xs:IDREF">E30561</deputy>\n            </employee>\n            <employee xml:id="ID30561">\n               <empnr xsi:type="xs:ID">E30561</empnr>\n               <first>John</first>\n               <last>Brown</last>\n               <manager xsi:type="xs:IDREF">ID21256</manager>\n            </employee>\n          </employees>\n        }\n      }\n         \n           return \n\n        \n        $emp/(element-with-id('E30561')/empnr => fn:idref())/ancestor::employee/last => string()\n      ), ("Singh"))'
fo-test-fn-index-of-004;The function current-date with arity 0 is not registered.
fo-test-fn-index-of-005;PRSC Error: Failed to parse query 'deep-equal((\n        fn:index-of([1, [5, 6], [6, 7]], 6)\n      ), ((3, 4)))'
fo-test-fn-json-to-xml-001;The function json-to-xml with arity 1 is not registered.
fo-test-fn-json-to-xml-002;PRSC Error: Failed to parse query '\n        json-to-xml('"abcd"', map{'liberal': false()})\n      '
fo-test-fn-json-to-xml-003;The function json-to-xml with arity 1 is not registered.
fo-test-fn-json-to-xml-004;PRSC Error: Failed to parse query '\n        json-to-xml('{"x": "\\", "y": "\u0025"}', map{'escape':\n                  true()})\n      '
fo-test-fn-local-name-from-QName-001;The function fn:local-name-from-QName with arity 1 is not registered.
fo-test-fn-matches-001;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fo-test-fn-matches-002;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fo-test-fn-matches-003;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
fo-test-fn-matches-004;PRSC Error: Failed to parse query '\n          let $poem := \n          \n<poem author="Wilhelm Busch">\nKaum hat dies der Hahn gesehen,\nFängt er auch schon an zu krähen:\nKikeriki! Kikikerikih!!\nTak, tak, tak! - da kommen sie.\n</poem>\n           return \n\n        \n        fn:matches($poem, "Kaum.*krähen")\n      '
fo-test-fn-matches-005;PRSC Error: Failed to parse query '\n          let $poem := \n          \n<poem author="Wilhelm Busch">\nKaum hat dies der Hahn gesehen,\nFängt er auch schon an zu krähen:\nKikeriki! Kikikerikih!!\nTak, tak, tak! - da kommen sie.\n</poem>\n           return \n\n        \n        fn:matches($poem, "Kaum.*krähen", "s")\n      '
fo-test-fn-matches-006;PRSC Error: Failed to parse query '\n          let $poem := \n          \n<poem author="Wilhelm Busch">\nKaum hat dies der Hahn gesehen,\nFängt er auch schon an zu krähen:\nKikeriki! Kikikerikih!!\nTak, tak, tak! - da kommen sie.\n</poem>\n           return \n\n        \n        fn:matches($poem, "^Kaum.*gesehen,$", "m")\n      '
fo-test-fn-matches-007;PRSC Error: Failed to parse query '\n          let $poem := \n          \n<poem author="Wilhelm Busch">\nKaum hat dies der Hahn gesehen,\nFängt er auch schon an zu krähen:\nKikeriki! Kikikerikih!!\nTak, tak, tak! - da kommen sie.\n</poem>\n           return \n\n        \n        fn:matches($poem, "^Kaum.*gesehen,$")\n      '
fo-test-fn-matches-008;PRSC Error: Failed to parse query '\n          let $poem := \n          \n<poem author="Wilhelm Busch">\nKaum hat dies der Hahn gesehen,\nFängt er auch schon an zu krähen:\nKikeriki! Kikikerikih!!\nTak, tak, tak! - da kommen sie.\n</poem>\n           return \n\n        \n        fn:matches($poem, "kiki", "i")\n      '
fo-test-fn-max-002;PRSC Error: Failed to parse query 'deep-equal((\n        fn:max([3,4,5])\n      ), (5))'
fo-test-fn-max-003;PRSC Error: Failed to parse query 'deep-equal((\n        fn:max((xs:integer(5), xs:float(5.0), xs:double(0)))\n      ), (xs:double(5.0e0)))'
fo-test-fn-max-004;The function fn:current-date with arity 0 is not registered.
fo-test-fn-max-005;Input string was not in a correct format.
fo-test-fn-min-002;PRSC Error: Failed to parse query 'deep-equal((\n        fn:min([3,4,5])\n      ), (3))'
fo-test-fn-min-003;PRSC Error: Failed to parse query 'deep-equal((\n        fn:min((xs:integer(5), xs:float(5), xs:double(10)))\n      ), (xs:double(5.0e0)))'
fo-test-fn-min-004;The function fn:current-date with arity 0 is not registered.
fo-test-fn-min-005;Input string was not in a correct format.
fo-test-fn-minutes-from-dateTime-001;The function fn:minutes-from-dateTime with arity 1 is not registered.
fo-test-fn-minutes-from-dateTime-002;The function fn:minutes-from-dateTime with arity 1 is not registered.
fo-test-fn-minutes-from-duration-001;The function fn:minutes-from-duration with arity 1 is not registered.
fo-test-fn-minutes-from-duration-002;The function fn:minutes-from-duration with arity 1 is not registered.
fo-test-fn-minutes-from-time-001;The function fn:minutes-from-time with arity 1 is not registered.
fo-test-fn-month-from-date-001;The function fn:month-from-date with arity 1 is not registered.
fo-test-fn-month-from-date-002;The function fn:month-from-date with arity 1 is not registered.
fo-test-fn-month-from-dateTime-001;The function fn:month-from-dateTime with arity 1 is not registered.
fo-test-fn-month-from-dateTime-002;The function fn:month-from-dateTime with arity 1 is not registered.
fo-test-fn-month-from-dateTime-003;The function fn:month-from-dateTime with arity 1 is not registered.
fo-test-fn-months-from-duration-001;The function fn:months-from-duration with arity 1 is not registered.
fo-test-fn-months-from-duration-002;The function fn:months-from-duration with arity 1 is not registered.
fo-test-fn-months-from-duration-003;The function fn:months-from-duration with arity 1 is not registered.
fo-test-fn-namespace-uri-for-prefix-001;PRSC Error: Failed to parse query 'deep-equal((\n          let $e := \n          \n<z:a xmlns="http://example.org/one" xmlns:z="http://example.org/two">\n  <b xmlns=""/>\n</z:a>\n           return \n\n        \n        fn:namespace-uri-for-prefix("z", $e)\n      ), ("http://example.org/two"))'
fo-test-fn-namespace-uri-for-prefix-002;PRSC Error: Failed to parse query 'deep-equal((\n          let $e := \n          \n<z:a xmlns="http://example.org/one" xmlns:z="http://example.org/two">\n  <b xmlns=""/>\n</z:a>\n           return \n\n        \n        fn:namespace-uri-for-prefix("", $e)\n      ), ("http://example.org/one"))'
fo-test-fn-namespace-uri-for-prefix-003;PRSC Error: Failed to parse query 'deep-equal((\n          let $e := \n          \n<z:a xmlns="http://example.org/one" xmlns:z="http://example.org/two">\n  <b xmlns=""/>\n</z:a>\n           return \n\n        \n        fn:namespace-uri-for-prefix((), $e)\n      ), ("http://example.org/one"))'
fo-test-fn-namespace-uri-for-prefix-004;PRSC Error: Failed to parse query 'deep-equal((\n          let $e := \n          \n<z:a xmlns="http://example.org/one" xmlns:z="http://example.org/two">\n  <b xmlns=""/>\n</z:a>\n           return \n\n        \n        fn:namespace-uri-for-prefix("xml", $e)\n      ), ("http://www.w3.org/XML/1998/namespace"))'
fo-test-fn-namespace-uri-for-prefix-005;PRSC Error: Failed to parse query 'deep-equal((\n          let $e := \n          \n<z:a xmlns="http://example.org/one" xmlns:z="http://example.org/two">\n  <b xmlns=""/>\n</z:a>\n           return \n\n        \n        fn:namespace-uri-for-prefix("xml", $e)\n      ), ("http://www.w3.org/XML/1998/namespace"))'
fo-test-fn-namespace-uri-from-QName-001;The function fn:namespace-uri-from-QName with arity 1 is not registered.
fo-test-fn-normalize-space-002;Object reference not set to an instance of an object.
fo-test-fn-number-001;PRSC Error: Failed to parse query 'deep-equal((\n          let $po := \n          <PurchaseOrder> <line-item>\n         <description>Large widget</description> <price>8.95</price>\n         <quantity>5.0</quantity> </line-item> <line-item>\n         <description>Small widget</description> <price>3.99</price>\n         <quantity>2.0</quantity> </line-item> <line-item>\n         <description>Tiny widget</description> <price>1.49</price>a\n         <quantity>805</quantity> </line-item>\n         </PurchaseOrder>\n           return \n\n        \n          let $item1 := $po/line-item[1]\n          \n           return \n\n        \n        fn:number($item1/quantity)\n      ), (5.0e0))'
fo-test-fn-number-002;PRSC Error: Failed to parse query 'deep-equal((\n          let $po := \n          <PurchaseOrder> <line-item>\n         <description>Large widget</description> <price>8.95</price>\n         <quantity>5.0</quantity> </line-item> <line-item>\n         <description>Small widget</description> <price>3.99</price>\n         <quantity>2.0</quantity> </line-item> <line-item>\n         <description>Tiny widget</description> <price>1.49</price>a\n         <quantity>805</quantity> </line-item>\n         </PurchaseOrder>\n           return \n\n        \n          let $item2 := $po/line-item[2]\n          \n           return \n\n        \n        fn:number($item2/description)\n      ), (xs:double('NaN')))'
fo-test-fn-parse-ietf-date-001;The function fn:parse-ietf-date with arity 1 is not registered.
fo-test-fn-parse-ietf-date-002;The function fn:parse-ietf-date with arity 1 is not registered.
fo-test-fn-parse-ietf-date-003;The function fn:parse-ietf-date with arity 1 is not registered.
fo-test-fn-parse-ietf-date-004;The function fn:parse-ietf-date with arity 1 is not registered.
fo-test-fn-parse-ietf-date-005;The function fn:parse-ietf-date with arity 1 is not registered.
fo-test-fn-parse-json-001;PRSC Error: Failed to parse query 'deep-equal((\n        parse-json('{"x":1, "y":[3,4,5]}')\n      ), (map{"x":1e0,"y":[3e0,4e0,5e0]}))'
fo-test-fn-parse-json-002;The function parse-json with arity 1 is not registered.
fo-test-fn-parse-json-003;PRSC Error: Failed to parse query 'deep-equal((\n        parse-json('{"x":"\\", "y":"\u0025"}')\n      ), (map{"x":"\","y":"%"}))'
fo-test-fn-parse-json-004;PRSC Error: Failed to parse query 'deep-equal((\n        parse-json('{"x":"\\", "y":"\u0025"}', map{'escape':true()})\n      ), (map{"x":"\\","y":"%"}))'
fo-test-fn-parse-json-005;PRSC Error: Failed to parse query 'deep-equal((\n        parse-json('{"x":"\\", "y":"\u0000"}')\n      ), (map{"x":"\","y":codepoints-to-string(65533)}))'
fo-test-fn-parse-json-006;PRSC Error: Failed to parse query 'deep-equal((\n        parse-json('{"x":"\\", "y":"\u0000"}', map{'escape':true()})\n      ), (map{"x":"\\","y":"\u0000"}))'
fo-test-fn-parse-json-007;PRSC Error: Failed to parse query 'deep-equal((\n        parse-json('{"x":"\\", "y":"\u0000"}', map{'fallback':function($s){'['||$s||']'}})\n      ), (map{"x":"\","y":"[\u0000]"}))'
fo-test-fn-path-001;PRSC Error: Failed to parse query 'deep-equal((\n          let $e := \n          \ndocument {            \n<p xmlns="http://example.com/one" xml:lang="de" author="Friedrich von Schiller">\nFreude, schöner Götterfunken,<br/>\nTochter aus Elysium,<br/>\nWir betreten feuertrunken,<br/>\nHimmlische, dein Heiligtum.</p>}\n         \n           return \n\n        \n        fn:path($e)\n      ), ('/'))'
fo-test-fn-path-002;PRSC Error: Failed to parse query 'deep-equal((\n          let $e := \n          \ndocument {            \n<p xmlns="http://example.com/one" xml:lang="de" author="Friedrich von Schiller">\nFreude, schöner Götterfunken,<br/>\nTochter aus Elysium,<br/>\nWir betreten feuertrunken,<br/>\nHimmlische, dein Heiligtum.</p>}\n         \n           return \n\n        \n        fn:path($e/*:p)\n      ), ('/Q{http://example.com/one}p[1]'))'
fo-test-fn-path-003;PRSC Error: Failed to parse query 'deep-equal((\n          let $e := \n          \ndocument {            \n<p xmlns="http://example.com/one" xml:lang="de" author="Friedrich von Schiller">\nFreude, schöner Götterfunken,<br/>\nTochter aus Elysium,<br/>\nWir betreten feuertrunken,<br/>\nHimmlische, dein Heiligtum.</p>}\n         \n           return \n\n        \n        fn:path($e/*:p/@xml:lang)\n      ), ('/Q{http://example.com/one}p[1]/@Q{http://www.w3.org/XML/1998/namespace}lang'))'
fo-test-fn-path-004;PRSC Error: Failed to parse query 'deep-equal((\n          let $e := \n          \ndocument {            \n<p xmlns="http://example.com/one" xml:lang="de" author="Friedrich von Schiller">\nFreude, schöner Götterfunken,<br/>\nTochter aus Elysium,<br/>\nWir betreten feuertrunken,<br/>\nHimmlische, dein Heiligtum.</p>}\n         \n           return \n\n        \n        fn:path($e/*:p/@author)\n      ), ('/Q{http://example.com/one}p[1]/@author'))'
fo-test-fn-path-005;PRSC Error: Failed to parse query 'deep-equal((\n          let $e := \n          \ndocument {            \n<p xmlns="http://example.com/one" xml:lang="de" author="Friedrich von Schiller">\nFreude, schöner Götterfunken,<br/>\nTochter aus Elysium,<br/>\nWir betreten feuertrunken,<br/>\nHimmlische, dein Heiligtum.</p>}\n         \n           return \n\n        \n        fn:path($e/*:p/*:br[2])\n      ), ('/Q{http://example.com/one}p[1]/Q{http://example.com/one}br[2]'))'
fo-test-fn-path-006;PRSC Error: Failed to parse query 'deep-equal((\n          let $e := \n          \ndocument {            \n<p xmlns="http://example.com/one" xml:lang="de" author="Friedrich von Schiller">\nFreude, schöner Götterfunken,<br/>\nTochter aus Elysium,<br/>\nWir betreten feuertrunken,<br/>\nHimmlische, dein Heiligtum.</p>}\n         \n           return \n\n        \n        fn:path($e//text()[starts-with(normalize-space(),\n                  'Tochter')])\n      ), ('/Q{http://example.com/one}p[1]/text()[2]'))'
fo-test-fn-path-007;PRSC Error: Failed to parse query 'deep-equal((\n          let $emp := \n          \n            <employee xml:id="ID21256">\n               <empnr>E21256</empnr>\n               <first>John</first>\n               <last>Brown</last>\n            </employee>\n         \n           return \n\n        \n        fn:path($emp)\n      ), ('Q{http://www.w3.org/2005/xpath-functions}root()'))'
fo-test-fn-path-008;PRSC Error: Failed to parse query 'deep-equal((\n          let $emp := \n          \n            <employee xml:id="ID21256">\n               <empnr>E21256</empnr>\n               <first>John</first>\n               <last>Brown</last>\n            </employee>\n         \n           return \n\n        \n        fn:path($emp/@xml:id)\n      ), ('Q{http://www.w3.org/2005/xpath-functions}root()/@Q{http://www.w3.org/XML/1998/namespace}id'))'
fo-test-fn-path-009;PRSC Error: Failed to parse query 'deep-equal((\n          let $emp := \n          \n            <employee xml:id="ID21256">\n               <empnr>E21256</empnr>\n               <first>John</first>\n               <last>Brown</last>\n            </employee>\n         \n           return \n\n        \n        fn:path($emp/empnr)\n      ), ('Q{http://www.w3.org/2005/xpath-functions}root()/Q{}empnr[1]'))'
fo-test-fn-reverse-004;PRSC Error: Failed to parse query 'deep-equal((\n        fn:reverse([1,2,3])\n      ), ([1,2,3]))'
fo-test-fn-reverse-005;PRSC Error: Failed to parse query 'deep-equal((\n        fn:reverse(([1,2,3],[4,5,6]))\n      ), (([4,5,6],[1,2,3])))'
fo-test-fn-round-001;Expected XPath fn:round(2.5) to (deep equally) resolve to 3.0
fo-test-fn-round-004;Expected XPath fn:round(1.125, 2) to (deep equally) resolve to 1.13
fo-test-fn-round-006;PRSC Error: Failed to parse query 'deep-equal((\n        fn:round(3.1415e0, 2)\n      ), (3.14e0))'
fo-test-fn-round-half-to-even-004;PRSC Error: Failed to parse query 'deep-equal((\n        fn:round-half-to-even(3.567812e+3, 2)\n      ), (3567.81e0))'
fo-test-fn-round-half-to-even-005;PRSC Error: Failed to parse query 'deep-equal((\n        fn:round-half-to-even(4.7564e-3, 2)\n      ), (0.0e0))'
fo-test-fn-seconds-from-dateTime-001;The function fn:seconds-from-dateTime with arity 1 is not registered.
fo-test-fn-seconds-from-duration-001;The function fn:seconds-from-duration with arity 1 is not registered.
fo-test-fn-seconds-from-duration-002;The function fn:seconds-from-duration with arity 1 is not registered.
fo-test-fn-seconds-from-time-001;The function fn:seconds-from-time with arity 1 is not registered.
fo-test-fn-serialize-001;PRSC Error: Failed to parse query 'deep-equal((\n          let $params := \n          \n<output:serialization-parameters \n        xmlns:output="http://www.w3.org/2010/xslt-xquery-serialization">\n  <output:omit-xml-declaration value="yes"/>\n</output:serialization-parameters>\n         \n           return \n\n        \n          let $data := \n          \n<a b="3"/>\n         \n           return \n\n        \n        fn:serialize($data, $params)\n      ), ('<a b="3"/>'))'
fo-test-fn-serialize-002;PRSC Error: Failed to parse query 'deep-equal((\n          let $data := \n          \n<a b="3"/>\n         \n           return \n\n        \n        fn:serialize($data, map{"method":"xml", "omit-xml-declaration":true()})\n      ), ('<a b="3"/>'))'
fo-test-fn-sort-001;The function fn:sort with arity 1 is not registered.
fo-test-fn-sort-002;The function fn:sort with arity 3 is not registered.
fo-test-fn-starts-with-004;No collations are supported
fo-test-fn-starts-with-005;No collations are supported
fo-test-fn-starts-with-006;No collations are supported
fo-test-fn-starts-with-007;No collations are supported
fo-test-fn-starts-with-008;No collations are supported
fo-test-fn-string-002;Expected XPath string(false()) to (deep equally) resolve to "false"
fo-test-fn-string-005;Expected error code: FOTY0014. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        string([[1, 2], [3, 4]])\n      '
fo-test-fn-string-006;Expected XPathException with code FOTY0014, but got Can't cast a non-atomic value.
fo-test-fn-string-007;PRSC Error: Failed to parse query 'deep-equal((\n          let $para := \n          \n<para>In a hole in the ground there lived a <term author="Tolkien">hobbit</term>.</para>\n         \n           return \n\n        \n        string($para)\n      ), ("In a hole in the ground there lived a hobbit."))'
fo-test-fn-string-join-006;PRSC Error: Failed to parse query 'deep-equal((\n          let $doc := \n          <doc>\n  <chap>\n    <section xml:id="xyz"/>\n  </chap>\n</doc>\n           return \n\n        \n        $doc//@xml:id ! fn:string-join((node-name(), '="', ., '"'))\n      ), ('xml:id="xyz"'))'
fo-test-fn-string-join-007;PRSC Error: Failed to parse query 'deep-equal((\n          let $doc := \n          <doc>\n  <chap>\n    <section xml:id="xyz"/>\n  </chap>\n</doc>\n           return \n\n        \n        $doc//section ! fn:string-join(ancestor-or-self::*/name(), '/')\n      ), ("doc/chap/section"))'
fo-test-fn-string-length-002;Object reference not set to an instance of an object.
fo-test-fn-substring-005;Length cannot be less than zero. (Parameter 'length')
fo-test-fn-substring-007;Value was either too large or too small for an Int32.
fo-test-fn-substring-008;Value was either too large or too small for an Int32.
fo-test-fn-substring-010;Value was either too large or too small for an Int32.
fo-test-fn-substring-011;Value was either too large or too small for an Int32.
fo-test-fn-substring-after-004;The function fn:substring-after with arity 3 is not registered.
fo-test-fn-substring-after-005;The function fn:substring-after with arity 3 is not registered.
fo-test-fn-substring-after-006;The function fn:substring-after with arity 3 is not registered.
fo-test-fn-substring-after-007;The function fn:substring-after with arity 3 is not registered.
fo-test-fn-substring-before-004;The function fn:substring-before with arity 3 is not registered.
fo-test-fn-substring-before-005;The function fn:substring-before with arity 3 is not registered.
fo-test-fn-substring-before-006;The function fn:substring-before with arity 3 is not registered.
fo-test-fn-substring-before-007;The function fn:substring-before with arity 3 is not registered.
fo-test-fn-sum-001;Items passed to fn:sum are not all numeric.
fo-test-fn-sum-002;Expected XPath let $d1 := xs:yearMonthDuration("P20Y")\n          \n           return \n\n        \n          let $d2 := xs:yearMonthDuration("P10M")\n          \n           return \n\n        \n          let $seq1 := ($d1, $d2)\n          \n           return \n\n        \n        fn:sum($seq1[. lt xs:yearMonthDuration('P3M')],\n                  xs:yearMonthDuration('P0M')) to (deep equally) resolve to xs:yearMonthDuration("P0M")
fo-test-fn-sum-007;Items passed to fn:sum are not all numeric.
fo-test-fn-sum-008;PRSC Error: Failed to parse query 'deep-equal((\n        fn:sum([1, 2, 3])\n      ), (6))'
fo-test-fn-sum-009;PRSC Error: Failed to parse query 'deep-equal((\n        fn:sum([[1, 2], [3, 4]])\n      ), (10))'
fo-test-fn-tail-005;PRSC Error: Failed to parse query 'deep-equal((\n        fn:tail([1,2,3])\n      ), (()))'
fo-test-fn-timezone-from-date-001;The function fn:timezone-from-date with arity 1 is not registered.
fo-test-fn-timezone-from-date-002;The function fn:timezone-from-date with arity 1 is not registered.
fo-test-fn-timezone-from-dateTime-001;The function fn:timezone-from-dateTime with arity 1 is not registered.
fo-test-fn-timezone-from-dateTime-002;The function fn:timezone-from-dateTime with arity 1 is not registered.
fo-test-fn-timezone-from-dateTime-003;The function fn:timezone-from-dateTime with arity 1 is not registered.
fo-test-fn-timezone-from-time-001;The function fn:timezone-from-time with arity 1 is not registered.
fo-test-fn-timezone-from-time-002;The function fn:timezone-from-time with arity 1 is not registered.
fo-test-fn-tokenize-001;The function fn:tokenize with arity 1 is not registered.
fo-test-fn-tokenize-002;Expected XPath fn:tokenize("The cat sat on the mat", "\s+") to (deep equally) resolve to ("The", "cat", "sat", "on", "the", "mat")
fo-test-fn-tokenize-003;Expected XPath fn:tokenize(" red green blue ", "\s+") to (deep equally) resolve to ("", "red", "green", "blue", "")
fo-test-fn-tokenize-004;Expected XPath fn:tokenize("1, 15, 24, 50", ",\s*") to (deep equally) resolve to ("1", "15", "24", "50")
fo-test-fn-tokenize-005;Expected XPath fn:tokenize("1,15,,24,50,", ",") to (deep equally) resolve to ("1", "15", "", "24", "50", "")
fo-test-fn-tokenize-006;Using flags in 'tokenize' is not supported
fo-test-fn-translate-002;Index was outside the bounds of the array.
fo-test-fn-translate-003;Index was outside the bounds of the array.
fo-test-fn-unordered-001;Skipped test, it was a assert-permutation
fo-test-fn-year-from-date-001;The function fn:year-from-date with arity 1 is not registered.
fo-test-fn-year-from-date-002;The function fn:year-from-date with arity 1 is not registered.
fo-test-fn-year-from-date-003;The function fn:year-from-date with arity 1 is not registered.
fo-test-fn-year-from-dateTime-001;The function fn:year-from-dateTime with arity 1 is not registered.
fo-test-fn-year-from-dateTime-002;The function fn:year-from-dateTime with arity 1 is not registered.
fo-test-fn-year-from-dateTime-003;The function fn:year-from-dateTime with arity 1 is not registered.
fo-test-fn-year-from-dateTime-004;The function fn:year-from-dateTime with arity 1 is not registered.
fo-test-fn-year-from-dateTime-005;The function fn:year-from-dateTime with arity 1 is not registered.
fo-test-fn-years-from-duration-001;The function fn:years-from-duration with arity 1 is not registered.
fo-test-fn-years-from-duration-002;The function fn:years-from-duration with arity 1 is not registered.
fo-test-fn-years-from-duration-003;The function fn:years-from-duration with arity 1 is not registered.
fo-test-map-contains-001;PRSC Error: Failed to parse query '\n          let $week := map{0:"Sonntag", 1:"Montag", 2:"Dienstag",\n     3:"Mittwoch", 4:"Donnerstag", 5:"Freitag", 6:"Samstag"}\n          \n           return \n\n        \n        map:contains($week, 2)\n      '
fo-test-map-contains-002;PRSC Error: Failed to parse query '\n          let $week := map{0:"Sonntag", 1:"Montag", 2:"Dienstag",\n     3:"Mittwoch", 4:"Donnerstag", 5:"Freitag", 6:"Samstag"}\n          \n           return \n\n        \n        map:contains($week, 9)\n      '
fo-test-map-contains-003;PRSC Error: Failed to parse query '\n        map:contains(map{}, "xyz")\n      '
fo-test-map-contains-004;PRSC Error: Failed to parse query '\n        map:contains(map{"xyz":23}, "xyz")\n      '
fo-test-map-contains-005;PRSC Error: Failed to parse query '\n        map:contains(map{"abc":23, "xyz":()}, "xyz")\n      '
fo-test-map-entry-001;PRSC Error: Failed to parse query 'deep-equal((\n        map:entry("M", "Monday")\n      ), (map{"M":"Monday"}))'
fo-test-map-find-001;PRSC Error: Failed to parse query 'deep-equal((\n          let $responses := [map{0:'no', 1:'yes'}, map{0:'non', 1:'oui'}, \n                  map{0:'nein', 1:('ja', 'doch')}]\n          \n           return \n\n        \n        map:find($responses, 0)\n      ), (['no', 'non', 'nein']))'
fo-test-map-find-002;PRSC Error: Failed to parse query 'deep-equal((\n          let $responses := [map{0:'no', 1:'yes'}, map{0:'non', 1:'oui'}, \n                  map{0:'nein', 1:('ja', 'doch')}]\n          \n           return \n\n        \n        map:find($responses, 1)\n      ), (['yes', 'oui', ('ja', 'doch')]))'
fo-test-map-find-003;PRSC Error: Failed to parse query 'deep-equal((\n          let $responses := [map{0:'no', 1:'yes'}, map{0:'non', 1:'oui'}, \n                  map{0:'nein', 1:('ja', 'doch')}]\n          \n           return \n\n        \n        map:find($responses, 2)\n      ), ([]))'
fo-test-map-find-004;PRSC Error: Failed to parse query 'deep-equal((\n          let $inventory := map{"name":"car", "id":"QZ123", \n      "parts": [map{"name":"engine", "id":"YW678", "parts":[]}]}\n          \n           return \n\n        \n        map:find($inventory, "parts")\n      ), ([[map{"name":"engine", "id":"YW678", "parts":[]}], []]))'
fo-test-map-for-each-001;Skipped test, it was a assert-permutation
fo-test-map-for-each-002;Skipped test, it was a assert-permutation
fo-test-map-for-each-003;PRSC Error: Failed to parse query 'deep-equal((\n        map:merge(map:for-each(map{"a":1, "b":2}, function($k,\n                  $v){map:entry($k, $v+1)}))\n      ), (map{"a":2, "b":3}))'
fo-test-map-get-001;PRSC Error: Failed to parse query 'deep-equal((\n          let $week := map{0:"Sonntag", 1:"Montag", 2:"Dienstag",\n     3:"Mittwoch", 4:"Donnerstag", 5:"Freitag", 6:"Samstag"}\n          \n           return \n\n        \n        map:get($week, 4)\n      ), ("Donnerstag"))'
fo-test-map-get-002;PRSC Error: Failed to parse query 'deep-equal((\n          let $week := map{0:"Sonntag", 1:"Montag", 2:"Dienstag",\n     3:"Mittwoch", 4:"Donnerstag", 5:"Freitag", 6:"Samstag"}\n          \n           return \n\n        \n        map:get($week, 9)\n      ), (()))'
fo-test-map-get-003;The function map:get with arity 2 is not registered.
fo-test-map-keys-001;Skipped test, it was a assert-permutation
fo-test-map-merge-001;PRSC Error: Failed to parse query 'deep-equal((\n        map:merge(())\n      ), (map{}))'
fo-test-map-merge-002;PRSC Error: Failed to parse query 'deep-equal((\n        map:merge((map:entry(0, "no"), map:entry(1, "yes")))\n      ), (map{0:"no", 1:"yes"}))'
fo-test-map-merge-003;PRSC Error: Failed to parse query 'deep-equal((\n          let $week := map{0:"Sonntag", 1:"Montag", 2:"Dienstag",\n     3:"Mittwoch", 4:"Donnerstag", 5:"Freitag", 6:"Samstag"}\n          \n           return \n\n        \n        map:merge(($week, map{7:"Unbekannt"}))\n      ), (map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag",\n                  5:"Freitag", 6:"Samstag", 7:"Unbekannt"}))'
fo-test-map-merge-004;PRSC Error: Failed to parse query 'deep-equal((\n          let $week := map{0:"Sonntag", 1:"Montag", 2:"Dienstag",\n     3:"Mittwoch", 4:"Donnerstag", 5:"Freitag", 6:"Samstag"}\n          \n           return \n\n        \n        map:merge(($week, map{6:"Sonnabend"}), map{"duplicates":"use-last"})\n      ), (map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag",\n                  5:"Freitag", 6:"Sonnabend"}))'
fo-test-map-merge-005;PRSC Error: Failed to parse query 'deep-equal((\n          let $week := map{0:"Sonntag", 1:"Montag", 2:"Dienstag",\n     3:"Mittwoch", 4:"Donnerstag", 5:"Freitag", 6:"Samstag"}\n          \n           return \n\n        \n        map:merge(($week, map{6:"Sonnabend"}), map{"duplicates":"use-first"})\n      ), (map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag",\n                  5:"Freitag", 6:"Samstag"}))'
fo-test-map-merge-006;PRSC Error: Failed to parse query 'deep-equal((\n          let $week := map{0:"Sonntag", 1:"Montag", 2:"Dienstag",\n     3:"Mittwoch", 4:"Donnerstag", 5:"Freitag", 6:"Samstag"}\n          \n           return \n\n        \n        map:merge(($week, map{6:"Sonnabend"}), map{"duplicates":"combine"})\n      ), (map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag",\n                  5:"Freitag", 6:("Samstag", "Sonnabend")}))'
fo-test-map-put-001;PRSC Error: Failed to parse query 'deep-equal((\n          let $week := map{0:"Sonntag", 1:"Montag", 2:"Dienstag",\n       3:"Mittwoch", 4:"Donnerstag", 5:"Freitag", 6:"Samstag"}\n          \n           return \n\n        \n        map:put($week, 6, "Sonnabend")\n      ), (map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag",\n                  5:"Freitag", 6:"Sonnabend"}))'
fo-test-map-put-002;PRSC Error: Failed to parse query 'deep-equal((\n          let $week := map{0:"Sonntag", 1:"Montag", 2:"Dienstag",\n       3:"Mittwoch", 4:"Donnerstag", 5:"Freitag", 6:"Samstag"}\n          \n           return \n\n        \n        map:put($week, -1, "Unbekannt")\n      ), (map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag",\n                  5:"Freitag", 6:"Samstag", -1:"Unbekannt"}))'
fo-test-map-remove-001;PRSC Error: Failed to parse query 'deep-equal((\n          let $week := map{0:"Sonntag", 1:"Montag", 2:"Dienstag",\n       3:"Mittwoch", 4:"Donnerstag", 5:"Freitag", 6:"Samstag"}\n          \n           return \n\n        \n        map:remove($week, 4)\n      ), (map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 5:"Freitag",\n                  6:"Samstag"}))'
fo-test-map-remove-002;PRSC Error: Failed to parse query 'deep-equal((\n          let $week := map{0:"Sonntag", 1:"Montag", 2:"Dienstag",\n       3:"Mittwoch", 4:"Donnerstag", 5:"Freitag", 6:"Samstag"}\n          \n           return \n\n        \n        map:remove($week, 23)\n      ), (map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag",\n                  5:"Freitag", 6:"Samstag"}))'
fo-test-map-remove-003;PRSC Error: Failed to parse query 'deep-equal((\n          let $week := map{0:"Sonntag", 1:"Montag", 2:"Dienstag",\n       3:"Mittwoch", 4:"Donnerstag", 5:"Freitag", 6:"Samstag"}\n          \n           return \n\n        \n        map:remove($week, (0, 6 to 7))\n      ), (map{1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag", 5:"Freitag"}))'
fo-test-map-remove-004;PRSC Error: Failed to parse query 'deep-equal((\n          let $week := map{0:"Sonntag", 1:"Montag", 2:"Dienstag",\n       3:"Mittwoch", 4:"Donnerstag", 5:"Freitag", 6:"Samstag"}\n          \n           return \n\n        \n        map:remove($week, ())\n      ), (map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag", 5:"Freitag",\n                  6:"Samstag"}))'
fo-test-map-size-001;PRSC Error: Failed to parse query 'deep-equal((\n        map:size(map{})\n      ), (0))'
fo-test-map-size-002;PRSC Error: Failed to parse query 'deep-equal((\n        map:size(map{"true":1, "false":0})\n      ), (2))'
fo-test-math-acos-001;The function math:acos with arity 1 is not registered.
fo-test-math-acos-002;PRSC Error: Failed to parse query 'let $result := (\n        math:acos(0)\n      ) return abs($result - 1.5707963267948966e0) lt 1e-5'
fo-test-math-acos-003;PRSC Error: Failed to parse query 'let $result := (\n        math:acos(-0.0e0)\n      ) return abs($result - 1.5707963267948966e0) lt 1e-5'
fo-test-math-acos-004;PRSC Error: Failed to parse query 'deep-equal((\n        math:acos(1.0e0)\n      ), (0.0e0))'
fo-test-math-acos-005;PRSC Error: Failed to parse query 'let $result := (\n        math:acos(-1.0e0)\n      ) return abs($result - 3.141592653589793e0) lt 1e-5'
fo-test-math-acos-006;PRSC Error: Failed to parse query 'deep-equal((\n        math:acos(2.0e0)\n      ), (xs:double('NaN')))'
fo-test-math-acos-007;The function math:acos with arity 1 is not registered.
fo-test-math-acos-008;The function math:acos with arity 1 is not registered.
fo-test-math-acos-009;The function math:acos with arity 1 is not registered.
fo-test-math-asin-001;The function math:asin with arity 1 is not registered.
fo-test-math-asin-002;PRSC Error: Failed to parse query 'deep-equal((\n        math:asin(0)\n      ), (0.0e0))'
fo-test-math-asin-003;PRSC Error: Failed to parse query 'deep-equal((\n        math:asin(-0.0e0)\n      ), (-0.0e0))'
fo-test-math-asin-004;PRSC Error: Failed to parse query 'let $result := (\n        math:asin(1.0e0)\n      ) return abs($result - 1.5707963267948966e0) lt 1e-5'
fo-test-math-asin-005;PRSC Error: Failed to parse query 'let $result := (\n        math:asin(-1.0e0)\n      ) return abs($result - -1.5707963267948966e0) lt 1e-5'
fo-test-math-asin-006;PRSC Error: Failed to parse query 'deep-equal((\n        math:asin(2.0e0)\n      ), (xs:double('NaN')))'
fo-test-math-asin-007;The function math:asin with arity 1 is not registered.
fo-test-math-asin-008;The function math:asin with arity 1 is not registered.
fo-test-math-asin-009;The function math:asin with arity 1 is not registered.
fo-test-math-atan-001;The function math:atan with arity 1 is not registered.
fo-test-math-atan-002;PRSC Error: Failed to parse query 'deep-equal((\n        math:atan(0)\n      ), (0.0e0))'
fo-test-math-atan-003;PRSC Error: Failed to parse query 'deep-equal((\n        math:atan(-0.0e0)\n      ), (-0.0e0))'
fo-test-math-atan-004;PRSC Error: Failed to parse query 'let $result := (\n        math:atan(1.0e0)\n      ) return abs($result - 0.7853981633974483e0) lt 1e-5'
fo-test-math-atan-005;PRSC Error: Failed to parse query 'let $result := (\n        math:atan(-1.0e0)\n      ) return abs($result - -0.7853981633974483e0) lt 1e-5'
fo-test-math-atan-006;The function math:atan with arity 1 is not registered.
fo-test-math-atan-007;PRSC Error: Failed to parse query 'let $result := (\n        math:atan(xs:double('INF'))\n      ) return abs($result - 1.5707963267948966e0) lt 1e-5'
fo-test-math-atan-008;PRSC Error: Failed to parse query 'let $result := (\n        math:atan(xs:double('-INF'))\n      ) return abs($result - -1.5707963267948966e0) lt 1e-5'
fo-test-math-atan2-001;PRSC Error: Failed to parse query 'deep-equal((\n        math:atan2(+0.0e0, 0.0e0)\n      ), (0.0e0))'
fo-test-math-atan2-002;PRSC Error: Failed to parse query 'deep-equal((\n        math:atan2(-0.0e0, 0.0e0)\n      ), (-0.0e0))'
fo-test-math-atan2-003;PRSC Error: Failed to parse query 'deep-equal((\n        math:atan2(+0.0e0, -0.0e0)\n      ), (3.141592653589793e0))'
fo-test-math-atan2-004;PRSC Error: Failed to parse query 'deep-equal((\n        math:atan2(-0.0e0, -0.0e0)\n      ), (-3.141592653589793e0))'
fo-test-math-atan2-005;PRSC Error: Failed to parse query 'deep-equal((\n        math:atan2(-1, 0.0e0)\n      ), (-1.5707963267948966e0))'
fo-test-math-atan2-006;PRSC Error: Failed to parse query 'deep-equal((\n        math:atan2(+1, 0.0e0)\n      ), (1.5707963267948966e0))'
fo-test-math-atan2-007;PRSC Error: Failed to parse query 'deep-equal((\n        math:atan2(-0.0e0, -1)\n      ), (-3.141592653589793e0))'
fo-test-math-atan2-008;PRSC Error: Failed to parse query 'deep-equal((\n        math:atan2(+0.0e0, -1)\n      ), (3.141592653589793e0))'
fo-test-math-atan2-009;PRSC Error: Failed to parse query 'deep-equal((\n        math:atan2(-0.0e0, +1)\n      ), (-0.0e0))'
fo-test-math-atan2-010;PRSC Error: Failed to parse query 'deep-equal((\n        math:atan2(+0.0e0, +1)\n      ), (+0.0e0))'
fo-test-math-cos-001;The function math:cos with arity 1 is not registered.
fo-test-math-cos-002;PRSC Error: Failed to parse query 'deep-equal((\n        math:cos(0)\n      ), (1.0e0))'
fo-test-math-cos-003;PRSC Error: Failed to parse query 'deep-equal((\n        math:cos(-0.0e0)\n      ), (1.0e0))'
fo-test-math-cos-004;PRSC Error: Failed to parse query 'let $result := (\n        math:cos(math:pi() div 2)\n      ) return abs($result - 0.0e0) lt 1e-5'
fo-test-math-cos-005;PRSC Error: Failed to parse query 'let $result := (\n        math:cos(-math:pi() div 2)\n      ) return abs($result - 0.0e0) lt 1e-5'
fo-test-math-cos-006;PRSC Error: Failed to parse query 'let $result := (\n        math:cos(math:pi())\n      ) return abs($result - -1.0e0) lt 1e-5'
fo-test-math-cos-007;The function math:cos with arity 1 is not registered.
fo-test-math-cos-008;The function math:cos with arity 1 is not registered.
fo-test-math-cos-009;The function math:cos with arity 1 is not registered.
fo-test-math-exp-001;The function math:exp with arity 1 is not registered.
fo-test-math-exp-002;PRSC Error: Failed to parse query 'deep-equal((\n        math:exp(0)\n      ), (1.0e0))'
fo-test-math-exp-003;PRSC Error: Failed to parse query 'let $result := (\n        math:exp(1)\n      ) return abs($result - 2.7182818284590455e0) lt 1e-5'
fo-test-math-exp-004;PRSC Error: Failed to parse query 'deep-equal((\n        math:exp(2)\n      ), (7.38905609893065e0))'
fo-test-math-exp-005;PRSC Error: Failed to parse query 'deep-equal((\n        math:exp(-1)\n      ), (0.36787944117144233e0))'
fo-test-math-exp-006;PRSC Error: Failed to parse query 'deep-equal((\n        math:exp(math:pi())\n      ), (23.140692632779267e0))'
fo-test-math-exp-007;The function math:exp with arity 1 is not registered.
fo-test-math-exp-008;The function math:exp with arity 1 is not registered.
fo-test-math-exp-009;PRSC Error: Failed to parse query 'deep-equal((\n        math:exp(xs:double('-INF'))\n      ), (0.0e0))'
fo-test-math-exp10-001;The function math:exp10 with arity 1 is not registered.
fo-test-math-exp10-002;PRSC Error: Failed to parse query 'deep-equal((\n        math:exp10(0)\n      ), (1.0e0))'
fo-test-math-exp10-003;PRSC Error: Failed to parse query 'deep-equal((\n        math:exp10(1)\n      ), (1.0e1))'
fo-test-math-exp10-004;PRSC Error: Failed to parse query 'deep-equal((\n        math:exp10(0.5)\n      ), (3.1622776601683795e0))'
fo-test-math-exp10-005;PRSC Error: Failed to parse query 'deep-equal((\n        math:exp10(-1)\n      ), (1.0e-1))'
fo-test-math-exp10-006;The function math:exp10 with arity 1 is not registered.
fo-test-math-exp10-007;The function math:exp10 with arity 1 is not registered.
fo-test-math-exp10-008;PRSC Error: Failed to parse query 'deep-equal((\n        math:exp10(xs:double('-INF'))\n      ), (0.0e0))'
fo-test-math-log-001;The function math:log with arity 1 is not registered.
fo-test-math-log-002;The function math:log with arity 1 is not registered.
fo-test-math-log-003;PRSC Error: Failed to parse query 'deep-equal((\n        math:log(math:exp(1))\n      ), (1.0e0))'
fo-test-math-log-004;PRSC Error: Failed to parse query 'deep-equal((\n        math:log(1.0e-3)\n      ), (-6.907755278982137e0))'
fo-test-math-log-005;PRSC Error: Failed to parse query 'deep-equal((\n        math:log(2)\n      ), (0.6931471805599453e0))'
fo-test-math-log-006;The function math:log with arity 1 is not registered.
fo-test-math-log-007;The function math:log with arity 1 is not registered.
fo-test-math-log-008;The function math:log with arity 1 is not registered.
fo-test-math-log-009;The function math:log with arity 1 is not registered.
fo-test-math-log10-001;The function math:log10 with arity 1 is not registered.
fo-test-math-log10-002;The function math:log10 with arity 1 is not registered.
fo-test-math-log10-003;PRSC Error: Failed to parse query 'deep-equal((\n        math:log10(1.0e3)\n      ), (3.0e0))'
fo-test-math-log10-004;PRSC Error: Failed to parse query 'deep-equal((\n        math:log10(1.0e-3)\n      ), (-3.0e0))'
fo-test-math-log10-005;PRSC Error: Failed to parse query 'deep-equal((\n        math:log10(2)\n      ), (0.3010299956639812e0))'
fo-test-math-log10-006;The function math:log10 with arity 1 is not registered.
fo-test-math-log10-007;The function math:log10 with arity 1 is not registered.
fo-test-math-log10-008;The function math:log10 with arity 1 is not registered.
fo-test-math-log10-009;The function math:log10 with arity 1 is not registered.
fo-test-math-pi-001;PRSC Error: Failed to parse query 'deep-equal((\n        2*math:pi()\n      ), (6.283185307179586e0))'
fo-test-math-pow-001;The function math:pow with arity 2 is not registered.
fo-test-math-pow-002;PRSC Error: Failed to parse query 'deep-equal((\n        math:pow(2, 3)\n      ), (8.0e0))'
fo-test-math-pow-003;PRSC Error: Failed to parse query 'deep-equal((\n        math:pow(-2, 3)\n      ), (-8.0e0))'
fo-test-math-pow-004;PRSC Error: Failed to parse query 'deep-equal((\n        math:pow(2, -3)\n      ), (0.125e0))'
fo-test-math-pow-005;PRSC Error: Failed to parse query 'deep-equal((\n        math:pow(-2, -3)\n      ), (-0.125e0))'
fo-test-math-pow-006;PRSC Error: Failed to parse query 'deep-equal((\n        math:pow(2, 0)\n      ), (1.0e0))'
fo-test-math-pow-007;PRSC Error: Failed to parse query 'deep-equal((\n        math:pow(0, 0)\n      ), (1.0e0))'
fo-test-math-pow-008;PRSC Error: Failed to parse query 'deep-equal((\n        math:pow(xs:double('INF'), 0)\n      ), (1.0e0))'
fo-test-math-pow-009;PRSC Error: Failed to parse query 'deep-equal((\n        math:pow(xs:double('NaN'), 0)\n      ), (1.0e0))'
fo-test-math-pow-010;PRSC Error: Failed to parse query 'deep-equal((\n        math:pow(-math:pi(), 0)\n      ), (1.0e0))'
fo-test-math-pow-011;PRSC Error: Failed to parse query 'deep-equal((\n        math:pow(0e0, 3)\n      ), (0.0e0))'
fo-test-math-pow-012;PRSC Error: Failed to parse query 'deep-equal((\n        math:pow(0e0, 4)\n      ), (0.0e0))'
fo-test-math-pow-013;PRSC Error: Failed to parse query 'deep-equal((\n        math:pow(-0e0, 3)\n      ), (-0.0e0))'
fo-test-math-pow-014;PRSC Error: Failed to parse query 'deep-equal((\n        math:pow(0, 4)\n      ), (0.0e0))'
fo-test-math-pow-015;The function math:pow with arity 2 is not registered.
fo-test-math-pow-016;The function math:pow with arity 2 is not registered.
fo-test-math-pow-017;The function math:pow with arity 2 is not registered.
fo-test-math-pow-018;The function math:pow with arity 2 is not registered.
fo-test-math-pow-019;PRSC Error: Failed to parse query 'deep-equal((\n        math:pow(16, 0.5e0)\n      ), (4.0e0))'
fo-test-math-pow-020;PRSC Error: Failed to parse query 'deep-equal((\n        math:pow(16, 0.25e0)\n      ), (2.0e0))'
fo-test-math-pow-021;PRSC Error: Failed to parse query 'deep-equal((\n        math:pow(0e0, -3.0e0)\n      ), (xs:double('INF')))'
fo-test-math-pow-022;PRSC Error: Failed to parse query 'deep-equal((\n        math:pow(-0e0, -3.0e0)\n      ), (xs:double('-INF')))'
fo-test-math-pow-023;PRSC Error: Failed to parse query 'deep-equal((\n        math:pow(0e0, -3.1e0)\n      ), (xs:double('INF')))'
fo-test-math-pow-024;PRSC Error: Failed to parse query 'deep-equal((\n        math:pow(-0e0, -3.1e0)\n      ), (xs:double('INF')))'
fo-test-math-pow-025;PRSC Error: Failed to parse query 'deep-equal((\n        math:pow(0e0, 3.0e0)\n      ), (0.0e0))'
fo-test-math-pow-026;PRSC Error: Failed to parse query 'deep-equal((\n        math:pow(-0e0, 3.0e0)\n      ), (-0.0e0))'
fo-test-math-pow-027;PRSC Error: Failed to parse query 'deep-equal((\n        math:pow(0e0, 3.1e0)\n      ), (0.0e0))'
fo-test-math-pow-028;PRSC Error: Failed to parse query 'deep-equal((\n        math:pow(-0e0, 3.1e0)\n      ), (0.0e0))'
fo-test-math-pow-029;PRSC Error: Failed to parse query 'deep-equal((\n        math:pow(-1, xs:double('INF'))\n      ), (1.0e0))'
fo-test-math-pow-030;PRSC Error: Failed to parse query 'deep-equal((\n        math:pow(-1, xs:double('-INF'))\n      ), (1.0e0))'
fo-test-math-pow-031;PRSC Error: Failed to parse query 'deep-equal((\n        math:pow(1, xs:double('INF'))\n      ), (1.0e0))'
fo-test-math-pow-032;PRSC Error: Failed to parse query 'deep-equal((\n        math:pow(1, xs:double('-INF'))\n      ), (1.0e0))'
fo-test-math-pow-033;PRSC Error: Failed to parse query 'deep-equal((\n        math:pow(1, xs:double('NaN'))\n      ), (1.0e0))'
fo-test-math-pow-034;PRSC Error: Failed to parse query 'deep-equal((\n        math:pow(-2.5e0, 2.0e0)\n      ), (6.25e0))'
fo-test-math-pow-035;PRSC Error: Failed to parse query 'deep-equal((\n        math:pow(-2.5e0, 2.00000001e0)\n      ), (xs:double('NaN')))'
fo-test-math-sin-001;The function math:sin with arity 1 is not registered.
fo-test-math-sin-002;PRSC Error: Failed to parse query 'deep-equal((\n        math:sin(0)\n      ), (0.0e0))'
fo-test-math-sin-003;PRSC Error: Failed to parse query 'deep-equal((\n        math:sin(-0.0e0)\n      ), (-0.0e0))'
fo-test-math-sin-004;PRSC Error: Failed to parse query 'let $result := (\n        math:sin(math:pi() div 2)\n      ) return abs($result - 1.0e0) lt 1e-5'
fo-test-math-sin-005;PRSC Error: Failed to parse query 'let $result := (\n        math:sin(-math:pi() div 2)\n      ) return abs($result - -1.0e0) lt 1e-5'
fo-test-math-sin-006;PRSC Error: Failed to parse query 'let $result := (\n        math:sin(math:pi())\n      ) return abs($result - 0.0e0) lt 1e-5'
fo-test-math-sin-007;The function math:sin with arity 1 is not registered.
fo-test-math-sin-008;The function math:sin with arity 1 is not registered.
fo-test-math-sin-009;The function math:sin with arity 1 is not registered.
fo-test-math-sqrt-001;The function math:sqrt with arity 1 is not registered.
fo-test-math-sqrt-002;PRSC Error: Failed to parse query 'deep-equal((\n        math:sqrt(0.0e0)\n      ), (0.0e0))'
fo-test-math-sqrt-003;PRSC Error: Failed to parse query 'deep-equal((\n        math:sqrt(-0.0e0)\n      ), (-0.0e0))'
fo-test-math-sqrt-004;PRSC Error: Failed to parse query 'deep-equal((\n        math:sqrt(1.0e6)\n      ), (1.0e3))'
fo-test-math-sqrt-005;PRSC Error: Failed to parse query 'deep-equal((\n        math:sqrt(2.0e0)\n      ), (1.4142135623730951e0))'
fo-test-math-sqrt-006;PRSC Error: Failed to parse query 'deep-equal((\n        math:sqrt(-2.0e0)\n      ), (xs:double('NaN')))'
fo-test-math-sqrt-007;The function math:sqrt with arity 1 is not registered.
fo-test-math-sqrt-008;The function math:sqrt with arity 1 is not registered.
fo-test-math-sqrt-009;The function math:sqrt with arity 1 is not registered.
fo-test-math-tan-001;The function math:tan with arity 1 is not registered.
fo-test-math-tan-002;PRSC Error: Failed to parse query 'deep-equal((\n        math:tan(0)\n      ), (0.0e0))'
fo-test-math-tan-003;PRSC Error: Failed to parse query 'deep-equal((\n        math:tan(-0.0e0)\n      ), (-0.0e0))'
fo-test-math-tan-004;PRSC Error: Failed to parse query 'let $result := (\n        math:tan(math:pi() div 4)\n      ) return abs($result - 1.0e0) lt 1e-5'
fo-test-math-tan-005;PRSC Error: Failed to parse query 'let $result := (\n        math:tan(-math:pi() div 4)\n      ) return abs($result - -1.0e0) lt 1e-5'
fo-test-math-tan-006;PRSC Error: Failed to parse query 'let $result := (\n        1 div math:tan(math:pi() div 2)\n      ) return abs($result - 0.0e0) lt 1e-5'
fo-test-math-tan-007;PRSC Error: Failed to parse query 'let $result := (\n        1 div math:tan(-math:pi() div 2)\n      ) return abs($result - -0.0e0) lt 1e-5'
fo-test-math-tan-008;PRSC Error: Failed to parse query 'let $result := (\n        math:tan(math:pi())\n      ) return abs($result - 0.0e0) lt 1e-5'
fo-test-math-tan-009;The function math:tan with arity 1 is not registered.
fo-test-math-tan-010;The function math:tan with arity 1 is not registered.
fo-test-math-tan-011;The function math:tan with arity 1 is not registered.
FOAR0001_1;Expected error code: FOAR0001. Found error code: FOCA0001 with error message: Overflow when creating a Decimal from Infinity.
FOAR0001_2;Expected error code: FOAR0001. Found error code: FOCA0001 with error message: Overflow when creating a Decimal from Infinity.
FOAR0001_3;Expected error code: FOAR0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '1.0e0 idiv 0.0e0'
FOAR0001_4;Expected error code: FOAR0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'xs:float(1.0e0) idiv xs:float(0.0e0)'
FOAR0001_6;Expected error code: FOAR0001. Found error code: FOCA0001 with error message: Overflow when creating a Decimal from Infinity.
FOAR0001_7;Expected error code: FOAR0001. Found error code: FOCA0001 with error message: Overflow when creating a Int64 from NaN.
FOAR0001_8;Expected error code: FOAR0001. Found error code: FOCA0001 with error message: Overflow when creating a Decimal from NaN.
FOAR0001_9;Expected XPathException with code FOAR0001, but got Attempted to divide by zero.
FOAR0002_1;Expected executing the XPath '2e308' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: FOAR0002. Query succeeded with result: Infinity
FOAR0002-5;Expected executing the XPath 'xs:dayTimeDuration('P5999999999999999999DT00H00M01S') div\n         xs:dayTimeDuration('P0DT00H00M0.000001S')' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPathException with code FOAR0002, but got Value was either too large or too small for an Int32.
FOCA0002_2;Expected XPathException with code FOCA0002, but got Haven't implemented Qnames from: 1:
FOCA0002_3;Expected XPathException with code FOCA0002, but got Haven't implemented Qnames from: localName:prefix
FOCA0002_4;Expected XPathException with code FOCA0002, but got Haven't implemented Qnames from: localName:1prefix
FOCA0002_5;Expected XPathException with code FOCA0002, but got Haven't implemented Qnames from: 2localName:prefix
FOCA0002_6;Expected XPathException with code FOCA0002, but got Haven't implemented Qnames from: 2localName:
FOCA0002_7;Expected error code: FOCA0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'resolve-QName("2localName", <localName />)'
FOCA0002_8;Expected error code: FOCA0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'resolve-QName("1prefix:localName", <localName />)'
FOCA0002_9;Expected error code: FOCA0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'resolve-QName("2localName", <localName />)'
FOCA0003_1;Expected executing the XPath 'xs:integer(xs:double(1e308))' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: FOCA0003. Found error code: FOCA0001 with error message: Overflow when creating a Int64 from 1E+308.
FOCH0002_10;Expected error code: FOCH0002. Found error code: XPST0017 with error message: The function substring-before with arity 3 is not registered.
FOCH0002_9;Expected error code: FOCH0002. Found error code: XPST0017 with error message: The function substring-after with arity 3 is not registered.
FODC0001_1;Expected error code: FODC0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'fn:id('id', <a />)'
FODC0001_2;Expected error code: FODC0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<a />/fn:idref('id')'
FODC0002_1;Expected error code: FODC0002. Found error code: XPST0017 with error message: The function doc with arity 1 is not registered.
FODC0002_2;Expected error code: FODC0002. Found error code: XPST0017 with error message: The function doc with arity 1 is not registered.
FODC0002_3;Expected error code: FODC0002. Found error code: XPST0017 with error message: The function doc with arity 1 is not registered.
FODC0002_4;Expected error code: FODC0002. Found error code: XPST0017 with error message: The function collection with arity 0 is not registered.
FODC0004;Expected executing the XPath 'collection('%gg')' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: FODC0004. Found error code: XPST0017 with error message: The function collection with arity 1 is not registered.
FODC0005-1;Expected executing the XPath 'doc('%gg')' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: FODC0005. Found error code: XPST0017 with error message: The function doc with arity 1 is not registered.
FODC0005-2;Expected executing the XPath 'doc-available('%gg')' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: FODC0005. Found error code: XPST0017 with error message: The function doc-available with arity 1 is not registered.
FODT0001-1;Expected error code: FODT0001. Found error code: XPST0017 with error message: The function adjust-dateTime-to-timezone with arity 2 is not registered.
FODT0001-10;Expected XPathException with code FODT0001, but got The string '25252734927766555-07-28-14:00' is not a valid AllXsd value.
FODT0001-11;Expected XPathException with code FODT0001, but got The string '25252734927766555-07-28-14:00' is not a valid AllXsd value.
FODT0001-12;Expected XPathException with code FODT0001, but got The string '25252734927766555-07-28T23:59:59-14:00' is not a valid AllXsd value.
FODT0001-2;Expected error code: FODT0001. Found error code: XPST0017 with error message: The function adjust-date-to-timezone with arity 2 is not registered.
FODT0001-3;Expected XPathException with code FODT0001, but got The string '25252734927766555-07-28T23:59:59-14:00' is not a valid AllXsd value.
FODT0001-4;Expected XPathException with code FODT0001, but got The string '25252734927766555-07-28-14:00' is not a valid AllXsd value.
FODT0001-5;Expected XPathException with code FODT0001, but got The string '25252734927766555-07-28T23:59:59-14:00' is not a valid AllXsd value.
FODT0001-6;Expected XPathException with code FODT0001, but got The string '25252734927766555-07-28-14:00' is not a valid AllXsd value.
FODT0001-7;Expected XPathException with code FODT0001, but got The string '25252734927766555-07-28T23:59:59-14:00' is not a valid AllXsd value.
FODT0001-8;Expected XPathException with code FODT0001, but got The string '25252734927766555-07-28-14:00' is not a valid AllXsd value.
FODT0001-9;Expected XPathException with code FODT0001, but got The string '25252734927766555-07-28T23:59:59-14:00' is not a valid AllXsd value.
FODT0002-1;Expected XPathException with code FODT0002, but got Value was either too large or too small for an Int32.
FODT0002-2;Expected XPathException with code FODT0002, but got Value was either too large or too small for an Int32.
FODT0002-3;Expected XPathException with code FODT0002, but got Value was either too large or too small for an Int32.
FODT0002-4;Expected XPathException with code FODT0002, but got Value was either too large or too small for an Int32.
FODT0002-6;Expected XPathException with code FODT0002, but got Value was either too large or too small for an Int32.
FODT0002-7;Expected XPathException with code FODT0002, but got Value was either too large or too small for an Int32.
FODT0002-8;Expected XPathException with code FODT0002, but got Value was either too large or too small for an Int32.
FODT0002-9;Expected XPathException with code FODT0002, but got Value was either too large or too small for an Int32.
FODT0003-1;Expected error code: FODT0003. Found error code: XPST0017 with error message: The function adjust-date-to-timezone with arity 2 is not registered.
FODT0003-2;Expected error code: FODT0003. Found error code: XPST0017 with error message: The function adjust-date-to-timezone with arity 2 is not registered.
FOER0000;Expected error code: FOER0000. Found error code: XPST0017 with error message: The function error with arity 0 is not registered.
fold-left-008;PRSC Error: Failed to parse query '(\n            let $hours := function ($emp as element(employee)) as xs:integer { sum($emp/hours/xs:integer(.)) },\n                $highest := function ($f as function(item()) as xs:anyAtomicType, $seq as item()*)  {           \n                    fold-left($seq, (), function($highestSoFar as item()*, $this as item()*) as item()* {\n                          if (empty($highestSoFar))\n                          then $this\n                          else let $thisValue := $f($this),\n                                   $highestValue := $f($highestSoFar[1])\n                               return if ($thisValue gt $highestValue)\n                                      then $this\n                                      else if ($thisValue eq $highestValue)\n                                           then ($highestSoFar, $this)\n                                           else $highestSoFar\n                       })\n            }\n            \n            return $highest($hours, /works/employee) \n        ) => count()'
fold-left-009;PRSC Error: Failed to parse query '\n            declare function local:distinct-nodes-stable($seq as node()*) { \n                fold-left( $seq, (), function($foundSoFar as node()*, $this as node()) as node()* {\n                if ($foundSoFar intersect $this)\n                then $foundSoFar\n                else ($foundSoFar, $this) })\n            }; \n            let $nodes := (<a/>, <b/>, <c/>, <d/>, <e/>, <f/>) \n            let $perm := ($nodes[1], $nodes[2], $nodes[4], $nodes[1], $nodes[2], $nodes[3], $nodes[2], $nodes[1]) \n            return local:distinct-nodes-stable($perm)/local-name()\n      '
fold-left-011;Expected error code: XPTY0004. Query succeeded with result: 16
fold-left-016;PRSC Error: Failed to parse query '\nlet $html := <html>\n  <body>\n	<div id="main">\n	  <p class="para">Hello World!</p>	\n	</div>\n	<p class="para">Goodbye!</p>	\n  </body>\n</html>\nlet $css-selectors := <selectors>\n  <id>main</id>\n  <class>para</class>\n</selectors>/*\nlet $interpreter  := function($ctx, $selector){\n  typeswitch($selector)\n    case $a as element(id) return $ctx//*[@id = $a/text()]\n    case $a as element(class) return $ctx//*[@class = $a/text()]\n  default return ()\n}\nlet $result := fold-left($css-selectors, $html, $interpreter)\nreturn\n  $result/text()\n	 '
fold-left-018;PRSC Error: Failed to parse query 'deep-equal((\nlet $text := "Peter Piper picked a peck of pickled peppers A peck of pickled peppers Peter Piper picked"\nlet $tokens := tokenize($text, '\s')\nlet $counter := function($result, $word){\n  let $word-count := $result[@value = $word]\n  return\n    if(empty($word-count)) then\n      ($result, <word value="{$word}" count="1" />)\n    else\n    (\n      $result except $word-count,\n      <word value="{$word-count/@value}" count="{number($word-count/@count) + 1}" />\n    )\n}\nlet $words := fold-left($tokens, (), $counter)\nreturn (\n  number($words[@value="Peter"]/@count),\n  number($words[@value="Piper"]/@count),\n  number($words[@value="pickled"]/@count)\n)\n), (2, 2, 2))'
fold-left-021;PRSC Error: Failed to parse query '\n            declare variable $in := (<doc><A/><B/>{(1 to 10000)!<C/>}<B/><A/></doc>)/*;\n            declare variable $fsm := map{\n    0: function($x) {if ($x[self::B]) then 1 else 0},\n    1: function($x) {if ($x[self::B]) then 1 else 2},\n    2: function($x) {if ($x[self::B]) then 3 else 2},\n    3: function($x) {3}};\n    \n    fold-left($in, 0, function($state, $node){$fsm($state)($node)}) ne 3\n            '
fold-left-101;PRSC Error: Failed to parse query '\n        declare function local:fold-left(\n          $seq as item()*,\n          $zero as item()*,\n          $f as function(item()*, item()) as item()*)\n        as item()* {\n            if (fn:empty($seq))\n            then $zero\n            else fn:fold-left(fn:tail($seq), $f($zero, fn:head($seq)), $f)\n        };\n        local:fold-left(1 to 5, 0, function($a, $b) { $a + $b }) = 15'
fold-left-102;PRSC Error: Failed to parse query '\n        declare function local:fold-left(\n          $seq as item()*,\n          $zero as item()*,\n          $f as function(item()*, item()) as item()*)\n        as item()* {\n            if (fn:empty($seq))\n            then $zero\n            else fn:fold-left(fn:tail($seq), $f($zero, fn:head($seq)), $f)\n        };\n        local:fold-left((2,3,5,7), 1, function($a, $b) { $a * $b })\n       = 210'
fold-left-103;PRSC Error: Failed to parse query '\n        declare function local:fold-left(\n          $seq as item()*,\n          $zero as item()*,\n          $f as function(item()*, item()) as item()*)\n        as item()* {\n            if (fn:empty($seq))\n            then $zero\n            else fn:fold-left(fn:tail($seq), $f($zero, fn:head($seq)), $f)\n        };\n        local:fold-left((true(), false(), false()), false(), function($a, $b) { $a or $b })'
fold-left-104;PRSC Error: Failed to parse query '\n        declare function local:fold-left(\n          $seq as item()*,\n          $zero as item()*,\n          $f as function(item()*, item()) as item()*)\n        as item()* {\n            if (fn:empty($seq))\n            then $zero\n            else fn:fold-left(fn:tail($seq), $f($zero, fn:head($seq)), $f)\n        };\n        local:fold-left((true(), false(), false()), false(), function($a, $b) { $a and $b })'
fold-left-105;PRSC Error: Failed to parse query 'deep-equal((\n        declare function local:fold-left(\n          $seq as item()*,\n          $zero as item()*,\n          $f as function(item()*, item()) as item()*)\n        as item()* {\n            if (fn:empty($seq))\n            then $zero\n            else fn:fold-left(fn:tail($seq), $f($zero, fn:head($seq)), $f)\n        };\n        local:fold-left(1 to 5, (), function($a, $b) {($b, $a)})), (5, 4, 3, 2, 1))'
fold-right-005;Expected XPath let $f := function($a, $b){($b, $a)} return fold-right(1 to 5, (), $f) to (deep equally) resolve to 5,4,3,2,1
fold-right-006;Expected XPath fold-right(1 to 5, "", fn:concat(?, ".", ?)) to resolve to '1.2.3.4.5.'
fold-right-007;Expected XPath fold-right(1 to 5, "$zero", fn:concat("$f(", ?, ", ", ?, ")")) to resolve to $f(1, $f(2, $f(3, $f(4, $f(5, $zero))))), but instead got $f($f($f($f($f($zero, 5), 4), 3), 2), 1)
fold-right-012;Expected error code: XPTY0004. Query succeeded with result: 15
fold-right-013;Expected XPath fold-right(1 to 1000000, 0, function($a, $b){ $b + 1 }) to resolve to 1000000, but instead got 2
fold-right-014;Expected XPath fold-right((1 to 5), (), function($a , $b){ ($b, $a) }) to (deep equally) resolve to 5, 4, 3, 2, 1
fold-right-015;Expected XPath fold-right((1, 2, 2, 3, 3, 3, 4, 5, 5), (), function($a, $b){ if(exists($b[. eq $a])) then $b else ($a, $b) }) to (deep equally) resolve to 1, 2, 3, 4, 5
fold-right-016;Expected XPath fold-right((1 to 5), (), function($a, $b){ ($a, $a, $b) }) to (deep equally) resolve to 1, 1, 2, 2, 3, 3, 4, 4, 5, 5
fold-right-017;Expected XPath fold-right((1 to 13), 0, concat("(", ?, "+", ?, ")")) to resolve to (1+(2+(3+(4+(5+(6+(7+(8+(9+(10+(11+(12+(13+0))))))))))))), but instead got (((((((((((((0+13)+12)+11)+10)+9)+8)+7)+6)+5)+4)+3)+2)+1)
fold-right-018;Unable to cast argument of type xs:integer to type xs:string? while calling 'string-length'
fold-right-019;Expected XPath fold-right( 1 to 10, (), function($a, $b){ if(empty($b)) then $a else if($a lt $b) then $b else $a }) to resolve to 10, but instead got 
fold-right-020;Expected XPath fold-right(1 to 10, (), function($a, $b){ if(empty($b)) then $a else if($a gt $b) then $b else $a }) to resolve to 1, but instead got 
fold-right-101;PRSC Error: Failed to parse query 'declare function local:fold-right(\n          $seq as item()*, \n          $zero as item()*, \n          $f as function(item(), item()*) as item()*) \n          as item()* {\n            if (fn:empty($seq))\n            then $zero\n            else $f(fn:head($seq), fn:fold-right(fn:tail($seq), $zero, $f))\n          };\n          local:fold-right(1 to 5, 0,function($a, $b) { $a + $b }) = 15'
fold-right-102;PRSC Error: Failed to parse query 'declare function local:fold-right(\n          $seq as item()*, \n          $zero as item()*, \n          $f as function(item(), item()*) as item()*) \n          as item()* {\n            if (fn:empty($seq))\n            then $zero\n            else $f(fn:head($seq), fn:fold-right(fn:tail($seq), $zero, $f))\n          };\n          local:fold-right((2,3,5,7), 1,function($a, $b) { $a * $b }) = 210'
fold-right-103;PRSC Error: Failed to parse query 'declare function local:fold-right(\n          $seq as item()*, \n          $zero as item()*, \n          $f as function(item(), item()*) as item()*) \n          as item()* {\n            if (fn:empty($seq))\n            then $zero\n            else $f(fn:head($seq), fn:fold-right(fn:tail($seq), $zero, $f))\n          };\n          local:fold-right((true(), false(), false()), false(),function($a, $b) { $a or $b })'
fold-right-104;PRSC Error: Failed to parse query 'declare function local:fold-right(\n          $seq as item()*, \n          $zero as item()*, \n          $f as function(item(), item()*) as item()*) \n          as item()* {\n            if (fn:empty($seq))\n            then $zero\n            else $f(fn:head($seq), fn:fold-right(fn:tail($seq), $zero, $f))\n          };\n          local:fold-right((true(), false(), false()), false(),function($a, $b) { $a and $b })'
fold-right-105;PRSC Error: Failed to parse query 'deep-equal((declare function local:fold-right(\n          $seq as item()*, \n          $zero as item()*, \n          $f as function(item(), item()*) as item()*) \n          as item()* {\n            if (fn:empty($seq))\n            then $zero\n            else $f(fn:head($seq), fn:fold-right(fn:tail($seq), $zero, $f))\n          };\n          let $f := function($a, $b){($b, $a)} return local:fold-right(1 to 5, (), $f)), (5,4,3,2,1))'
following-21;PRSC Error: Failed to parse query 'let $var := <anElement>Some Content</anElement> return fn:count($var/following::*) = 0'
following-22;Expected XPath exists(//employee[@name="John Doe 10"]/following::text()[.='Monday']) to resolve to true
following-sibling-attr;PRSC Error: Failed to parse query '<foo a='1' b='2' c='3'> <bar>4</bar> <bar>5</bar> <bar>6</bar> </foo>/@a/following-sibling::node()'
followingsibling-21;PRSC Error: Failed to parse query 'let $var := <anElement>Some Content</anElement> return fn:count($var/following::*) = 0'
FONS0004-1;Expected error code: FONS0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'resolve-QName('prefix:localName', <element />)'
for-each-006;PRSC Error: Failed to parse query '\n            declare function local:children($n as node()) as node()* \n                { $n/child::node() }; \n            declare function local:attributes($e as node()) as node()* \n                { $e/attribute::node() }; \n            declare function local:self($e as node()) as node() \n                { $e }; \n            declare function local:union(\n                        $f as function(node()) as node()*, \n                        $g as function(node()) as node()*) as function(node()) as node()* { \n                function($a) {$f($a) | $g($a)} };\n            let $data := (/a), \n                $f := local:union(local:children#1, local:union(local:attributes#1, local:self#1)) \n            return for-each($data/*, $f)[not(. instance of attribute())]\n        '
for-each-009;The function sqrt with arity 1 is not registered.
for-each-010;The function namespace-uri-from-QName with arity 1 is not registered.
for-each-011;PRSC Error: Failed to parse query 'deep-equal((\n          let $f := function($ff as (function(item()) as item()), $s as xs:string){$ff($ff($s))} return\n          for-each((upper-case#1, lower-case#1, normalize-space#1, concat(?, '!')), $f(?, ' Say NO! '))), (' SAY NO! ', ' say no! ', 'Say NO!', ' Say NO! !!'))'
for-each-012;PRSC Error: Failed to parse query 'deep-equal((\n          for-each((<a>1</a>, <b>22</b>, <c>33</c>), \n                   function($a as xs:string) as xs:integer {string-length($a)})\n        ), (1,2,2))'
for-each-013;PRSC Error: Failed to parse query 'deep-equal((\n            for-each((4, 5, 6), map{4: "four", 5: "five", 6: "six"})\n        ), ("four", "five", "six"))'
for-each-014;PRSC Error: Failed to parse query 'deep-equal((\n            for-each((4, 5, 6), [(), (), (), "four", "five", "six"])\n        ), ("four", "five", "six"))'
ForExpr002;Expected error code: XPST0008. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'for $folder in $folder/File return <file name="{$folder/File/FileName}"/>'
ForExpr003;PRSC Error: Failed to parse query 'for $f in /MyComputer/Drive4/Folder[@id="128"] return <FolderName>{$f/@name}</FolderName>'
ForExpr004;PRSC Error: Failed to parse query 'for $f in /MyComputer/Drive1/Folder[@creator="Mani"]/File[@creation_date="08/06/00"] return <file>{$f/../@creator}{$f/@creation_date}</file>'
ForExpr006;PRSC Error: Failed to parse query '<fragment-result>{ for $folder in /MyComputer/Drive3/Folder ,$file in /MyComputer/Drive3/Folder/File return <Folder>{ $folder/@name, $folder/@id }<file>{ $file/@idref }{ data($file/@name) }</file> </Folder> }</fragment-result>'
ForExpr008;Use of XQuery FLWOR expressions in XPath is not allowed
ForExpr010;PRSC Error: Failed to parse query 'for $folder in //Folder for $file in $folder//File return <File folder="{$folder/FolderName}">{string($file/FileName[1])}</File>'
ForExpr011;PRSC Error: Failed to parse query 'for $folder in //Folder, $file in $folder//File return <File folder="{$folder/FolderName}">{string($file/FileName[1])}</File>'
ForExpr013;Could not find a part of the path ending in: 'qt3tests//ForClause/ForExpr-013.out'
ForExpr024;Expected error code: XQST0089. Found error code: XPTY0019 with error message: The result of E1 in a path expression E1/E2 should not evaluate to a sequence of nodes.
ForExpr028;PRSC Error: Failed to parse query 'for $num in ( <one/>, <two/>, <three/> ) return $num'
ForExpr029;Use of XQuery FLWOR expressions in XPath is not allowed
ForExpr031;Expected error code: XQST0089. Query succeeded with result: 1 4
ForExpr032;PRSC Error: Failed to parse query '\n         declare variable $j external := 1;\n         for $x at $i in (2, 3)\n         where $i = $j\n         return $x\n       = 2'
ForExprType006;Expected error code: XPTY0004. Query succeeded with result: 1 2
ForExprType009;Expected executing the XPath 'declare namespace xqt="http://www.w3.org/XQueryTestOrderBy"; \n        for $num as element(xqt:NegativeNumbers) in /xqt:DataValues/xqt:NegativeNumbers return $num' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n        declare namespace xqt="http://www.w3.org/XQueryTestOrderBy"; \n        for $num as element(xqt:NegativeNumbers) in /xqt:DataValues/xqt:NegativeNumbers return $num'
ForExprType010;Expected executing the XPath 'import schema namespace xqt="http://www.w3.org/XQueryTestOrderBy"; \n        for $num as xs:decimal in data( /xqt:DataValues/xqt:NegativeNumbers/xqt:orderData ) \n        return $num' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n        import schema namespace xqt="http://www.w3.org/XQueryTestOrderBy"; \n        for $num as xs:decimal in data( /xqt:DataValues/xqt:NegativeNumbers/xqt:orderData ) \n        return $num\n      '
ForExprType011;Expected error code: XPST0051. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare namespace xqt="http://www.w3.org/XQueryTestOrderBy"; \n        for $num as xs:undefinedType in data( /xqt:DataValues/xqt:NegativeNumbers/xqt:orderData ) return $num'
ForExprType014;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare namespace xqt="http://www.w3.org/XQueryTestOrderBy"; \n        for $num as empty-sequence() in data( /xqt:DataValues/xqt:NegativeNumbers/xqt:orderData ) return $num'
ForExprType017;Expected error code: XPTY0004. Query succeeded with result: 1 2 3
ForExprType022;PRSC Error: Failed to parse query '\n        declare default element namespace "http://www.example.com/typedecl"; \n        for $test as attribute(*) in ( /root/InterleaveType2/@integer, /root/InterleaveType2/@decimal ) \n        return data( $test )\n      '
ForExprType023;PRSC Error: Failed to parse query '\n        declare default element namespace "http://www.example.com/typedecl"; \n        for $test as attribute(integer) in ( /root/InterleaveType2/@integer ) return data( $test )\n      '
ForExprType024;PRSC Error: Failed to parse query '\n        declare default element namespace "http://www.example.com/typedecl"; \n        for $test as attribute(att, xs:anySimpleType) in /root/anyAtomicType/@att return data( $test )\n      '
ForExprType025;PRSC Error: Failed to parse query '\n        import schema default element namespace "http://www.example.com/typedecl";\n        for $test as attribute(*,xs:decimal) in ( /root/InterleaveType2/@integer, /root/InterleaveType2/@decimal ) return data( $test )'
ForExprType026;PRSC Error: Failed to parse query 'import schema default element namespace "http://www.example.com/typedecl";\n            for $test as attribute( att,Enumeration ) in /root/UserDefinedSimpleTypeAttribute/@att return data( $test )'
ForExprType027;PRSC Error: Failed to parse query 'import schema default element namespace "http://www.example.com/typedecl";\n            for $test as attribute( *,Enumeration ) in /root/UserDefinedSimpleTypeAttribute/@att return data( $test )'
ForExprType030;Atomic Value for XsLanguage is not implemented yet.
ForExprType031;Expected XPath for $test as xs:anyAtomicType in ( xs:duration("P0Y1347M0D"), xs:dateTime("1999-05-31T13:20:00-05:00"), \n                    xs:time("13:00:00-05:00"), xs:date("1999-05-10Z"), xs:gYearMonth("2002-03"), xs:gYear("1999"), \n                    xs:gMonthDay("--05-10"), xs:gDay("---10"), xs:gMonth("--05") ) \n        return $test to resolve to P112Y3M 1999-05-31T13:20:00-05:00 13:00:00-05:00 1999-05-10Z 2002-03 1999 --05-10 ---10 --05, but instead got PT 1999-05-31T13:20:00-05:00 13:00:00-05:00 1999-05-10Z 2002-03 1999 --05-10 ---10 --05
ForExprType032;Type casting to XsBase64Binary has not been implemented yet.
ForExprType033;Atomic Value for XsEntity is not implemented yet.
ForExprType036;PRSC Error: Failed to parse query '\n        declare default element namespace "http://www.example.com/typedecl"; \n        for $test as element(*) in /root/InterleaveType/* return $test\n      '
ForExprType037;PRSC Error: Failed to parse query 'import schema default element namespace "http://www.example.com/typedecl";\n            for $test as element(decimal) in /root/InterleaveType/decimal return $test'
ForExprType038;PRSC Error: Failed to parse query 'import schema default element namespace "http://www.example.com/typedecl";\n            for $test as element(InterleaveType,InterleaveType) in /root/InterleaveType return $test'
ForExprType039;PRSC Error: Failed to parse query 'import schema default element namespace "http://www.example.com/typedecl";\n            for $test as element(*,InterleaveType) in /root/InterleaveType return $test'
ForExprType040;PRSC Error: Failed to parse query 'import schema default element namespace "http://www.example.com/typedecl";\n            for $test as element( UserDefinedSimpleType, Enumeration ) in /root/UserDefinedSimpleType return $test'
ForExprType041;PRSC Error: Failed to parse query 'import schema default element namespace "http://www.example.com/typedecl";\n            for $test as element( *, Enumeration ) in /root/UserDefinedSimpleType return $test'
ForExprType042;PRSC Error: Failed to parse query 'import schema default element namespace "http://www.example.com/typedecl";\n            for $test as element(*,xs:decimal) in /root/InterleaveType/* return $test'
ForExprType043;PRSC Error: Failed to parse query 'import schema default element namespace "http://www.example.com/typedecl";\n            for $test as element(*,xs:decimal) in /root/UnionType/* return $test'
ForExprType044;PRSC Error: Failed to parse query 'import schema default element namespace "http://www.example.com/typedecl";\n            for $test as element(ListType,xs:string) in /root/ListType return $test'
ForExprType045;Expected error code: XPST0051. Query succeeded with result: 1 2 3
ForExprType046;Expected error code: XPTY0004. Query succeeded with result: 1 100 0.3
ForExprType047;Expected XPathException with code XPST0051, but got Atomic Value for XsNmToken is not implemented yet.
ForExprType048;PRSC Error: Failed to parse query 'import schema default element namespace "http://www.example.com/typedecl";\n            for $test as xs:anyAtomicType in data( /root/anyAtomicType/@att ) return $test'
ForExprType049;PRSC Error: Failed to parse query 'import schema default element namespace "http://www.example.com/typedecl";\n            for $test as xs:decimal in data(/root/InterleaveType/*) return $test'
ForExprType050;PRSC Error: Failed to parse query 'import schema default element namespace "http://www.example.com/typedecl";\n            for $test as xs:decimal in data( exactly-one(/root/UnionType/*) ) return $test = 20'
ForExprType051;PRSC Error: Failed to parse query 'import schema default element namespace "http://www.example.com/typedecl";\n            for $test as xs:string in exactly-one(data( /root/ListType )) return $test'
ForExprType052;PRSC Error: Failed to parse query 'import schema default element namespace "http://www.example.com/typedecl";\n            for $test as Enumeration in exactly-one(data( /root/UserDefinedSimpleType )) return $test'
ForExprType053;PRSC Error: Failed to parse query 'import schema default element namespace "http://www.example.com/typedecl";\n            for $test as Enumeration in exactly-one(data( /root/UserDefinedSimpleTypeAttribute/@att )) return $test'
ForExprType054;PRSC Error: Failed to parse query '\n        declare namespace fs="http://www.example.com/filesystem"; \n        for $test as item() in data( (//fs:Folder)[1]/fs:File/fs:FileName ) return $test\n      '
ForExprType055;PRSC Error: Failed to parse query '\n        declare namespace fs="http://www.example.com/filesystem"; \n        for $test as node() in (//fs:Folder)[1]/fs:File return $test/fs:FileName\n      '
ForExprType056;PRSC Error: Failed to parse query '\n        declare namespace fs="http://www.example.com/filesystem"; \n        for $test as document-node() in (/) return ($test//fs:Folder)[1]/fs:FolderName\n      '
ForExprType057;PRSC Error: Failed to parse query '\n        declare namespace fs="http://www.example.com/filesystem"; \n        document{for $test as text() in (//fs:Folder)[1]/fs:File/fs:FileName/text() return $test}\n      '
ForExprType058;PRSC Error: Failed to parse query '\n        declare namespace fs="http://www.example.com/filesystem"; \n        document{for $test as comment() in (//fs:Folder)[1]/comment() return $test}\n      '
ForExprType059;PRSC Error: Failed to parse query '\n        declare namespace fs="http://www.example.com/filesystem"; \n        for $test as processing-instruction() in (//fs:Folder)[1]//processing-instruction() return $test\n      '
ForExprType060;PRSC Error: Failed to parse query 'declare namespace fs="http://www.example.com/filesystem"; for $test as processing-instruction() in (//fs:Folder)[1]//processing-instruction() return $test'
ForExprType061;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare namespace fs="http://www.example.com/filesystem"; \n        for $test as processing-instruction("unknown") in (//fs:Folder)[1]//processing-instruction() return $test\n      '
ForExprType062;PRSC Error: Failed to parse query '\n        declare namespace fs="http://www.example.com/filesystem"; \n        for $test as item() in (//fs:Folder)[1]/fs:File/fs:FileName return $test\n      '
ForExprType063;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare namespace fs="http://www.example.com/filesystem"; \n        for $test as node() in data( (//fs:Folder)[1]/fs:File/fs:FileName ) return $test\n      '
ForExprType064;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare namespace fs="http://www.example.com/filesystem"; \n        for $test as text() in (//fs:Folder)[1]/fs:File/fs:FileName return $test\n      '
ForExprType065;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare namespace fs="http://www.example.com/filesystem"; \n        for $test as text() in data( (//fs:Folder)[1]/fs:File/fs:FileName ) return $test\n      '
ForExprType066;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare namespace fs="http://www.example.com/filesystem"; \n        for $test as comment() in (//fs:Folder)[1]/fs:File/fs:FileName return $test\n      '
ForExprType067;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare namespace fs="http://www.example.com/filesystem"; \n        for $test as comment() in data( (//fs:Folder)[1]/fs:File/fs:FileName ) return $test\n      '
ForExprType068;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare namespace fs="http://www.example.com/filesystem"; \n        for $test as processing-instruction() in (//fs:Folder)[1]/fs:File/fs:FileName return $test\n      '
ForExprType069;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare namespace fs="http://www.example.com/filesystem"; \n        for $test as processing-instruction() in data( (//fs:Folder)[1]/fs:File/fs:FileName ) return $test\n      '
ForExprType070;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare namespace fs="http://www.example.com/filesystem"; \n        for $test as processing-instruction("foo") in (//fs:Folder)[1]/fs:File/fs:FileName return $test\n      '
ForExprType071;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare namespace fs="http://www.example.com/filesystem"; \n        for $test as processing-instruction("foo") in data( (//fs:Folder)[1]/fs:File/fs:FileName ) return $test\n      '
ForExprType072;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare namespace fs="http://www.example.com/filesystem"; \n        for $test as document-node() in (//fs:Folder)[1]/fs:File/fs:FileName return $test\n      '
ForExprType073;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare namespace fs="http://www.example.com/filesystem"; \n        for $test as document-node() in data( (//fs:Folder)[1]/fs:File/fs:FileName ) return $test\n      '
FORG0002;Expected error code: FORG0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare base-uri "http://www.w3.org/"; resolve-uri("%gg")'
forg0008-1;Expected error code: FORG0008. Found error code: XPST0017 with error message: The function fn:dateTime with arity 2 is not registered.
FORG0008;Expected error code: FORG0008. Found error code: XPST0017 with error message: The function dateTime with arity 2 is not registered.
FORG0009;Expected error code: FORG0002. Found error code: XPST0017 with error message: The function resolve-uri with arity 2 is not registered.
FOTY0012;Expected error code: FOTY0012. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'import schema namespace foo = "http://www.example.org/2007/schema/FOTY0012"; data(validate strict { <foo:element /> } )'
function-call-reserved-function-names-014;PRSC Error: Failed to parse query '\n	declare default function namespace "http://www.w3.org/2005/xquery-local-functions";\n	declare function local:function() { fn:true() };\n	function()\n      '
function-call-reserved-function-names-015;PRSC Error: Failed to parse query '\n	declare default function namespace "http://www.w3.org/2005/xquery-local-functions";\n	declare function namespace-node($arg) { fn:true() };\n	namespace-node(1)\n      '
function-call-reserved-function-names-016;PRSC Error: Failed to parse query '\n	declare default function namespace "http://www.w3.org/2005/xquery-local-functions";\n	declare function local:switch() { fn:true() };\n	switch()\n      '
function-call-reserved-function-names-033;Expected error code: XPST0017. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n	function()\n      '
function-call-reserved-function-names-034;Expected error code: XPST0017. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n	namespace-node(1)\n      '
function-call-reserved-function-names-035;Expected error code: XPST0017. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n	switch()\n      '
function-call-reserved-function-names-039;PRSC Error: Failed to parse query '\n	declare default function namespace "http://www.w3.org/2005/xquery-local-functions";\n	declare function local:array() { fn:true() };\n	array()\n      '
function-call-reserved-function-names-041;Expected error code: XPST0017. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n	array()\n      '
function-call-reserved-function-names-043;PRSC Error: Failed to parse query '\n	declare default function namespace "http://www.w3.org/2005/xquery-local-functions";\n	declare function local:map() { fn:true() };\n	map()\n      '
function-call-reserved-function-names-045;Expected error code: XPST0017. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n	map()\n      '
function-decl-reserved-function-names-001;PRSC Error: Failed to parse query '\n	declare default function namespace "http://www.w3.org/2005/xquery-local-functions";\n	declare function attribute() { fn:true() };\n	local:attribute()\n      '
function-decl-reserved-function-names-003;PRSC Error: Failed to parse query '\n	declare default function namespace "http://www.w3.org/2005/xquery-local-functions";\n	declare function comment() { fn:true() };\n	local:comment()\n      '
function-decl-reserved-function-names-005;PRSC Error: Failed to parse query '\n	declare default function namespace "http://www.w3.org/2005/xquery-local-functions";\n	declare function document-node() { fn:true() };\n	local:document-node()\n      '
function-decl-reserved-function-names-007;PRSC Error: Failed to parse query '\n	declare default function namespace "http://www.w3.org/2005/xquery-local-functions";\n	declare function element() { fn:true() };\n	local:element()\n      '
function-decl-reserved-function-names-009;PRSC Error: Failed to parse query '\n	declare default function namespace "http://www.w3.org/2005/xquery-local-functions";\n	declare function empty-sequence() { fn:true() };\n	local:empty-sequence()\n      '
function-decl-reserved-function-names-011;PRSC Error: Failed to parse query '\n	declare default function namespace "http://www.w3.org/2005/xquery-local-functions";\n	declare function function() { fn:true() };\n	local:function()\n      '
function-decl-reserved-function-names-013;PRSC Error: Failed to parse query '\n	declare default function namespace "http://www.w3.org/2005/xquery-local-functions";\n	declare function if() { fn:true() };\n	local:if()\n      '
function-decl-reserved-function-names-015;PRSC Error: Failed to parse query '\n	declare default function namespace "http://www.w3.org/2005/xquery-local-functions";\n	declare function item() { fn:true() };\n	local:item()\n      '
function-decl-reserved-function-names-017;PRSC Error: Failed to parse query '\n	declare default function namespace "http://www.w3.org/2005/xquery-local-functions";\n	declare function namespace-node() { fn:true() };\n	local:namespace-node()\n      '
function-decl-reserved-function-names-019;PRSC Error: Failed to parse query '\n	declare default function namespace "http://www.w3.org/2005/xquery-local-functions";\n	declare function node() { fn:true() };\n	local:node()\n      '
function-decl-reserved-function-names-021;PRSC Error: Failed to parse query '\n	declare default function namespace "http://www.w3.org/2005/xquery-local-functions";\n	declare function processing-instruction() { fn:true() };\n	local:processing-instruction()\n      '
function-decl-reserved-function-names-023;PRSC Error: Failed to parse query '\n	declare default function namespace "http://www.w3.org/2005/xquery-local-functions";\n	declare function schema-attribute() { fn:true() };\n	local:schema-attribute()\n      '
function-decl-reserved-function-names-025;PRSC Error: Failed to parse query '\n	declare default function namespace "http://www.w3.org/2005/xquery-local-functions";\n	declare function schema-element() { fn:true() };\n	local:schema-element()\n      '
function-decl-reserved-function-names-027;PRSC Error: Failed to parse query '\n	declare default function namespace "http://www.w3.org/2005/xquery-local-functions";\n	declare function switch() { fn:true() };\n	local:switch()\n      '
function-decl-reserved-function-names-029;PRSC Error: Failed to parse query '\n	declare default function namespace "http://www.w3.org/2005/xquery-local-functions";\n	declare function text() { fn:true() };\n	local:text()\n      '
function-decl-reserved-function-names-031;PRSC Error: Failed to parse query '\n	declare default function namespace "http://www.w3.org/2005/xquery-local-functions";\n	declare function typeswitch() { fn:true() };\n	local:typeswitch()\n      '
function-declaration-001;PRSC Error: Failed to parse query '\n        declare namespace foo = "http://www..oracle.com/xquery/test";\n        declare function foo:price ($b as element()) as element()* { $b/price };\n        1\n       = 1'
function-declaration-002;PRSC Error: Failed to parse query '        \n        declare function local:foo($n as xs:integer) { <tr> {$n} </tr> };\n        local:foo(4)\n      '
function-declaration-003;PRSC Error: Failed to parse query '\n        declare function local:price ($i as element()) as element()? { $i/price };\n        for $j in /bib/book return local:price($j)'
function-declaration-004;PRSC Error: Failed to parse query '\n        declare function local:summary($emps as element(employee)*) as element(dept)* { \n            for $d in distinct-values($emps/deptno) \n            let $e := $emps[deptno = $d] \n            return <dept> \n                      <deptno>{$d}</deptno> \n                      <headcount> {count($e)} </headcount> \n                      <payroll> {sum($e/salary)} </payroll> \n                   </dept> \n        };\n        local:summary(//employee[location = "Denver"])\n      '
function-declaration-005;PRSC Error: Failed to parse query '\n        declare function local:mysum($i as xs:integer, $j as xs:integer) { let $j := $i + $j return $j };\n        declare function local:invoke_mysum() { let $s := 1 for $d in (1,2,3,4,5) let $s := local:mysum($s, $d) return $s };\n        local:invoke_mysum()'
function-declaration-006;PRSC Error: Failed to parse query '\n        declare function local:mysum($i as xs:integer, $j as xs:integer) { let $j := $i + $j return $j };\n        declare function local:invoke_mysum($st as xs:integer) { for $d in (1,2,3,4,5) let $st := local:mysum($d, $st) return $st };\n        local:invoke_mysum(0)'
function-declaration-007;PRSC Error: Failed to parse query '\n        declare variable $a := 1;\n        declare function local:foo($a as xs:integer) { \n            if ($a > 100) then $a else let $a := $a + 1 return local:foo($a) };\n        local:foo($a) = 101'
function-declaration-008;PRSC Error: Failed to parse query '\n        declare namespace my = "urn:foo";\n        declare function my:fact($n as xs:integer) as xs:integer { if ($n < 2) then 1 else $n * my:fact($n - 1) };\n        declare variable $my:ten := my:fact(10);\n        <table> { for $i in 1 to 10 return <tr> <td>10!/{$i}! = {$my:ten div my:fact($i)}</td> </tr> } </table>'
function-declaration-009;PRSC Error: Failed to parse query '       \n        declare function local:fact($n as xs:integer) as xs:integer { if ($n < 2) then 1 else $n * local:fact(($n)-1) };\n        <table> { for $i in 1 to 10 return <tr> <td>{$i}! = {local:fact($i)}</td> </tr> } </table>'
function-declaration-010;PRSC Error: Failed to parse query '       \n        declare function local:prnt($n as xs:integer,$n2 as xs:string, $n3 as xs:date, $n4 as xs:long, $n5 as xs:string, $n6 as xs:decimal) { if ($n < 2) then 1 else concat($n, " ",$n2," ",$n3," ",$n4," ",$n5," ",$n6) };\n        <table> { <td>Value is = {local:prnt(4,xs:string("hello"),xs:date("2005-02-22"), xs:long(5),xs:string("well"),xs:decimal(1.2))}</td> } </table>'
function-declaration-011;PRSC Error: Failed to parse query '       \n        declare function local:fn1 ($n as xs:integer) as xs:integer { local:fn2($n) };\n        declare function local:fn2 ($n as xs:integer) as xs:integer { if ($n = 1) then 1 else $n + local:fn1($n - 1) };\n        local:fn1(4) = 10'
function-declaration-012;PRSC Error: Failed to parse query '       \n        declare function local:fn1 ($n as xs:integer) as xs:integer { local:fn2($n) };\n        declare function local:fn2 ($n as xs:integer) as xs:integer { if ($n = 1) then 1 else $n + local:fn1($n - 1) };\n        local:fn1(4) = 10'
function-declaration-013;PRSC Error: Failed to parse query '       \n        declare function local:foo2($i as xs:string) as xs:string {local:foo($i)};\n        declare function local:foo($i as xs:string) as xs:string {$i};\n        local:foo2("abc")'
function-declaration-014;PRSC Error: Failed to parse query '\n        declare function local:odd($x as xs:integer) as xs:boolean {if ($x = 0) then false() else local:even($x - 1)};\n        declare function local:even($x as xs:integer) as xs:boolean {if ($x = 0) then true() else local:odd($x - 1)};\n        local:even(4)'
function-declaration-015;PRSC Error: Failed to parse query '\n        declare function local:odd($x as xs:integer) as xs:boolean {if ($x = 0) then false() else local:even($x - 1)};\n        declare function local:even($x as xs:integer) as xs:boolean {if ($x = 0) then true() else local:odd($x - 1)};\n        local:even(3)'
function-declaration-016;PRSC Error: Failed to parse query '\n        declare function local:title($a_book as element()) { for $i in $a_book return $i/title };\n        /bib/book/(local:title(.))'
function-declaration-017;PRSC Error: Failed to parse query '\n        declare default element namespace "http://www.example.com/filesystem";\n        declare variable $v as xs:integer := 100;\n        declare function local:udf1 ($CUSTNO as xs:integer) { <empty> {$CUSTNO*$v} </empty> };\n        local:udf1(10)\n      '
function-declaration-018;PRSC Error: Failed to parse query '\n        declare default element namespace "http://www.example.com/filesystem";\n        declare function local:udf1 () { <empty> {10*10} </empty> };\n        local:udf1 ()\n      '
function-declaration-019;PRSC Error: Failed to parse query '\n        declare default element namespace "http://www.example.com/def";\n        declare namespace test="http://www.example.com/test";\n        declare namespace test2="http://www.example.com/test2";\n        declare function test:udf1() { <empty> {10*10} </empty> };\n        declare function test2:udf1() { <empty/> };\n        <A> {test:udf1()} {test2:udf1()} </A>'
function-declaration-020;PRSC Error: Failed to parse query 'declare namespace foo = "http://www..oracle.com/xquery/test";\n        declare function foo:price () as xs:integer+ { 100 };\n        declare function foo:price ($z as xs:integer) as xs:integer+ { $z };\n        declare function foo:price ($x as xs:integer, $y as xs:integer) as xs:integer+ { $x, $y };\n        declare function foo:price ($x as xs:integer, $y as xs:integer, $z as xs:integer) as xs:integer+ { $x+$y+$z };\n        foo:price(), foo:price(1), foo:price(2,3), foo:price(4,5,6)'
function-declaration-021;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:foo ($n as xs:integer) as xs:string { $n };\n        local:foo(4)'
function-declaration-022;Expected error code: XQST0034. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:foo ($m as xs:integer) { $m };\n        declare function local:foo ($n as xs:integer) { $n };\n        local:foo(4)'
function-declaration-023;Expected executing the XPath 'declare function foo ($n as xs:integer) { $n };\n        foo(4)' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XQST0045. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function foo ($n as xs:integer) { $n };\n        foo(4)'
function-declaration-024;Expected error code: XQST0039. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:foo ($n as xs:integer, $n as xs:integer) { $n };\n        local:foo(4, 1)'
function-declaration-025;Expected error code: XQST0060. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare default function namespace "";\n        declare function foo ($n as xs:integer, $m as xs:integer) { $n };\n        foo(4, 1)'
function-declaration-026;PRSC Error: Failed to parse query '\n        declare variable $global := node();\n        declare function local:function() { exists($global) };\n        local:function()'
function-declaration-028;PRSC Error: Failed to parse query '(\n         declare function local:function() { };\n         local:function()) => empty()'
function-declaration-029;PRSC Error: Failed to parse query '(\n         declare function local:function($x) { (:there is nothing here:) };\n         local:function(3)) => empty()'
function-declaration-030;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         declare function local:function($x as xs:integer) as xs:integer { (:there is nothing here:) };\n         local:function(3)'
function-item-1;PRSC Error: Failed to parse query 'concat#64 instance of function(*)'
function-item-10;PRSC Error: Failed to parse query '(let $a := 92, $b := true() return function($c) { $a, $b, $c }) instance of function(item()*) as item()*'
function-item-11;PRSC Error: Failed to parse query 'deep-equal(((let $a := 92, $b := true() return function($c) { $a, $b, $c })((xs:QName("foo"), 5.0e3))), (92, true(), fn:QName("","foo"), 5000))'
function-item-12;PRSC Error: Failed to parse query 'function($a as item()) as item() { $a } instance of function(*)'
function-item-13;PRSC Error: Failed to parse query 'function($a as item()) as xs:integer { $a } instance of function(item()) as item()'
function-item-14;PRSC Error: Failed to parse query 'function($a as item()) as item() { $a } instance of function(xs:string) as item()'
function-item-15;PRSC Error: Failed to parse query 'function($a as item()) as item() { $a } instance of function() as item()'
function-item-16;PRSC Error: Failed to parse query 'function($a as item()) as xs:integer { $a } instance of function(item(), item()) as item()'
function-item-17;PRSC Error: Failed to parse query 'function($a as xs:string) as item() { $a } instance of function(item()) as item()'
function-item-5;Expected error code: XQTY0105. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'element a { avg#1 }'
function-item-6;Expected error code: FOTY0013. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'attribute a { avg#1 }'
function-item-8;The function function-name with arity 1 is not registered.
function-item-9;The function function-name with arity 1 is not registered.
function-literal-002;Haven't implemented Qnames from: root:
function-literal-004;Haven't implemented Qnames from: root:
function-literal-005;The function nilled with arity 0 is not registered.
function-literal-006;The function nilled with arity 0 is not registered.
function-literal-007;The function nilled with arity 1 is not registered.
function-literal-008;The function nilled with arity 1 is not registered.
function-literal-017;The function base-uri with arity 0 is not registered.
function-literal-018;The function base-uri with arity 0 is not registered.
function-literal-019;The function base-uri with arity 1 is not registered.
function-literal-020;The function base-uri with arity 1 is not registered.
function-literal-021;The function document-uri with arity 0 is not registered.
function-literal-022;The function document-uri with arity 0 is not registered.
function-literal-023;The function document-uri with arity 1 is not registered.
function-literal-024;The function document-uri with arity 1 is not registered.
function-literal-025;The function error with arity 0 is not registered.
function-literal-026;Expected error code: FOER0000. Found error code: XPST0017 with error message: The function error with arity 0 is not registered.
function-literal-027;The function error with arity 1 is not registered.
function-literal-028;Expected error code: XXXX0000. Found error code: XPST0017 with error message: The function error with arity 1 is not registered.
function-literal-029;The function error with arity 2 is not registered.
function-literal-030;Expected error code: XXXX0000. Found error code: XPST0017 with error message: The function error with arity 2 is not registered.
function-literal-031;The function error with arity 3 is not registered.
function-literal-032;Expected error code: XXXX0000. Found error code: XPST0017 with error message: The function error with arity 3 is not registered.
function-literal-033;The function trace with arity 2 is not registered.
function-literal-033a;The function trace with arity 1 is not registered.
function-literal-034;The function trace with arity 2 is not registered.
function-literal-034a;The function trace with arity 1 is not registered.
function-literal-054;Casting AbstractValue(XsInteger) to StringValue
function-literal-055;The function format-integer with arity 3 is not registered.
function-literal-056;The function format-integer with arity 3 is not registered.
function-literal-057;The function format-number with arity 2 is not registered.
function-literal-058;The function format-number with arity 2 is not registered.
function-literal-059;The function format-number with arity 3 is not registered.
function-literal-060;The function format-number with arity 3 is not registered.
function-literal-061;The function pi with arity 0 is not registered.
function-literal-062;The function pi with arity 0 is not registered.
function-literal-063;The function exp with arity 1 is not registered.
function-literal-064;The function format-number with arity 2 is not registered.
function-literal-065;The function exp10 with arity 1 is not registered.
function-literal-066;The function exp10 with arity 1 is not registered.
function-literal-067;The function log with arity 1 is not registered.
function-literal-068;The function log with arity 1 is not registered.
function-literal-069;The function log10 with arity 1 is not registered.
function-literal-070;The function log10 with arity 1 is not registered.
function-literal-071;The function pow with arity 2 is not registered.
function-literal-072;The function pow with arity 2 is not registered.
function-literal-073;The function sqrt with arity 1 is not registered.
function-literal-074;The function sqrt with arity 1 is not registered.
function-literal-075;The function sin with arity 1 is not registered.
function-literal-076;The function sin with arity 1 is not registered.
function-literal-077;The function cos with arity 1 is not registered.
function-literal-078;The function cos with arity 1 is not registered.
function-literal-079;The function tan with arity 1 is not registered.
function-literal-080;The function tan with arity 1 is not registered.
function-literal-081;The function asin with arity 1 is not registered.
function-literal-082;The function asin with arity 1 is not registered.
function-literal-083;The function acos with arity 1 is not registered.
function-literal-084;The function acos with arity 1 is not registered.
function-literal-085;The function atan with arity 1 is not registered.
function-literal-086;The function atan with arity 1 is not registered.
function-literal-087;The function atan2 with arity 2 is not registered.
function-literal-088;The function atan2 with arity 2 is not registered.
function-literal-096;No collations are supported
function-literal-110;Casting AbstractValue(Element) to StringValue
function-literal-114;Casting AbstractValue(Element) to StringValue
function-literal-117;The function normalize-unicode with arity 1 is not registered.
function-literal-118;The function normalize-unicode with arity 1 is not registered.
function-literal-119;The function normalize-unicode with arity 2 is not registered.
function-literal-120;The function normalize-unicode with arity 2 is not registered.
function-literal-130;No collations are supported
function-literal-134;No collations are supported
function-literal-138;No collations are supported
function-literal-141;The function substring-before with arity 3 is not registered.
function-literal-142;The function substring-before with arity 3 is not registered.
function-literal-145;The function substring-after with arity 3 is not registered.
function-literal-146;The function substring-after with arity 3 is not registered.
function-literal-148;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
function-literal-149;The function matches with arity 3 is not registered.
function-literal-150;The function matches with arity 3 is not registered.
function-literal-154;Using flags in 'replace' is not supported
function-literal-155a;The function tokenize with arity 1 is not registered.
function-literal-156;Expected XPath Q{http://www.w3.org/2005/xpath-functions}tokenize#2('string', 'i') to resolve to str ng, but instead got i
function-literal-156a;The function tokenize with arity 1 is not registered.
function-literal-158;Using flags in 'tokenize' is not supported
function-literal-159;The function analyze-string with arity 2 is not registered.
function-literal-160;The function analyze-string with arity 2 is not registered.
function-literal-161;The function analyze-string with arity 3 is not registered.
function-literal-162;The function analyze-string with arity 3 is not registered.
function-literal-163;The function resolve-uri with arity 1 is not registered.
function-literal-164;PRSC Error: Failed to parse query '(Q{http://www.w3.org/2005/xpath-functions}resolve-uri#1('http://www.w3.org/2005/xpath-functions')) instance of $xs:anyURI'
function-literal-165;The function resolve-uri with arity 2 is not registered.
function-literal-166;The function resolve-uri with arity 2 is not registered.
function-literal-168;Expected XPath Q{http://www.w3.org/2005/xpath-functions}encode-for-uri#1(' ') to resolve to %20, but instead got +
function-literal-171;The function escape-html-uri with arity 1 is not registered.
function-literal-172;The function escape-html-uri with arity 1 is not registered.
function-literal-181;The function years-from-duration with arity 1 is not registered.
function-literal-182;The function years-from-duration with arity 1 is not registered.
function-literal-183;The function months-from-duration with arity 1 is not registered.
function-literal-184;The function months-from-duration with arity 1 is not registered.
function-literal-185;The function days-from-duration with arity 1 is not registered.
function-literal-186;The function days-from-duration with arity 1 is not registered.
function-literal-187;The function hours-from-duration with arity 1 is not registered.
function-literal-188;The function hours-from-duration with arity 1 is not registered.
function-literal-189;The function minutes-from-duration with arity 1 is not registered.
function-literal-190;The function minutes-from-duration with arity 1 is not registered.
function-literal-191;The function seconds-from-duration with arity 1 is not registered.
function-literal-192;The function seconds-from-duration with arity 1 is not registered.
function-literal-193;The function dateTime with arity 2 is not registered.
function-literal-194;The function dateTime with arity 2 is not registered.
function-literal-195;The function year-from-dateTime with arity 1 is not registered.
function-literal-196;The function year-from-dateTime with arity 1 is not registered.
function-literal-197;The function month-from-dateTime with arity 1 is not registered.
function-literal-198;The function month-from-dateTime with arity 1 is not registered.
function-literal-199;The function day-from-dateTime with arity 1 is not registered.
function-literal-200;The function day-from-dateTime with arity 1 is not registered.
function-literal-201;The function hours-from-dateTime with arity 1 is not registered.
function-literal-202;The function hours-from-dateTime with arity 1 is not registered.
function-literal-203;The function minutes-from-dateTime with arity 1 is not registered.
function-literal-204;The function minutes-from-dateTime with arity 1 is not registered.
function-literal-205;The function seconds-from-dateTime with arity 1 is not registered.
function-literal-206;The function seconds-from-dateTime with arity 1 is not registered.
function-literal-207;The function timezone-from-dateTime with arity 1 is not registered.
function-literal-208;The function timezone-from-dateTime with arity 1 is not registered.
function-literal-209;The function year-from-date with arity 1 is not registered.
function-literal-210;The function year-from-date with arity 1 is not registered.
function-literal-211;The function month-from-date with arity 1 is not registered.
function-literal-212;The function month-from-date with arity 1 is not registered.
function-literal-213;The function day-from-date with arity 1 is not registered.
function-literal-214;The function day-from-date with arity 1 is not registered.
function-literal-215;The function timezone-from-date with arity 1 is not registered.
function-literal-216;The function timezone-from-date with arity 1 is not registered.
function-literal-217;The function hours-from-time with arity 1 is not registered.
function-literal-218;The function hours-from-time with arity 1 is not registered.
function-literal-219;The function minutes-from-time with arity 1 is not registered.
function-literal-220;The function minutes-from-time with arity 1 is not registered.
function-literal-221;The function seconds-from-time with arity 1 is not registered.
function-literal-222;The function seconds-from-time with arity 1 is not registered.
function-literal-223;The function timezone-from-time with arity 1 is not registered.
function-literal-224;The function timezone-from-time with arity 1 is not registered.
function-literal-225;The function adjust-dateTime-to-timezone with arity 1 is not registered.
function-literal-226;PRSC Error: Failed to parse query '(Q{http://www.w3.org/2005/xpath-functions}adjust-dateTime-to-timezone#1(xs:dateTime('2012-01-01T00:00:00Z'))) instance of $xs:dateTime'
function-literal-227;The function adjust-dateTime-to-timezone with arity 2 is not registered.
function-literal-228;The function adjust-dateTime-to-timezone with arity 2 is not registered.
function-literal-229;The function adjust-date-to-timezone with arity 1 is not registered.
function-literal-230;PRSC Error: Failed to parse query '(Q{http://www.w3.org/2005/xpath-functions}adjust-date-to-timezone#1(xs:date('2012-01-01Z'))) instance of $xs:date'
function-literal-231;The function adjust-date-to-timezone with arity 2 is not registered.
function-literal-232;The function adjust-date-to-timezone with arity 2 is not registered.
function-literal-233;The function adjust-time-to-timezone with arity 1 is not registered.
function-literal-234;PRSC Error: Failed to parse query '(Q{http://www.w3.org/2005/xpath-functions}adjust-time-to-timezone#1(xs:time('00:00:00Z'))) instance of $xs:time'
function-literal-235;The function adjust-time-to-timezone with arity 2 is not registered.
function-literal-236;The function adjust-time-to-timezone with arity 2 is not registered.
function-literal-237;The function format-dateTime with arity 2 is not registered.
function-literal-238;PRSC Error: Failed to parse query '(Q{http://www.w3.org/2005/xpath-functions}format-dateTime#2(xs:dateTime('2012-01-01T00:00:00Z'), '[Y]')) instance of $xs:string'
function-literal-239;The function format-dateTime with arity 5 is not registered.
function-literal-240;The function format-dateTime with arity 5 is not registered.
function-literal-241;The function format-date with arity 2 is not registered.
function-literal-242;PRSC Error: Failed to parse query '(Q{http://www.w3.org/2005/xpath-functions}format-date#2(xs:date('2012-01-01Z'), '[Y]')) instance of $xs:string'
function-literal-243;The function format-date with arity 5 is not registered.
function-literal-244;The function format-date with arity 5 is not registered.
function-literal-245;The function format-time with arity 2 is not registered.
function-literal-246;PRSC Error: Failed to parse query '(Q{http://www.w3.org/2005/xpath-functions}format-time#2(xs:time('00:00:00Z'), '[H01]')) instance of $xs:string'
function-literal-247;The function format-time with arity 5 is not registered.
function-literal-248;The function format-time with arity 5 is not registered.
function-literal-249;The function resolve-QName with arity 2 is not registered.
function-literal-250;The function resolve-QName with arity 2 is not registered.
function-literal-252;Haven't implemented Qnames from: local:ns
function-literal-253;The function prefix-from-QName with arity 1 is not registered.
function-literal-254;The function prefix-from-QName with arity 1 is not registered.
function-literal-255;The function local-name-from-QName with arity 1 is not registered.
function-literal-256;The function local-name-from-QName with arity 1 is not registered.
function-literal-257;The function namespace-uri-from-QName with arity 1 is not registered.
function-literal-258;The function namespace-uri-from-QName with arity 1 is not registered.
function-literal-259;The function namespace-uri-for-prefix with arity 2 is not registered.
function-literal-260;The function namespace-uri-for-prefix with arity 2 is not registered.
function-literal-261;The function in-scope-prefixes with arity 1 is not registered.
function-literal-262;The function in-scope-prefixes with arity 1 is not registered.
function-literal-264;Haven't implemented Qnames from: root:
function-literal-266;Haven't implemented Qnames from: root:
function-literal-272;Atomic Value for XsAnyUri is not implemented yet.
function-literal-274;Atomic Value for XsAnyUri is not implemented yet.
function-literal-275;The function lang with arity 1 is not registered.
function-literal-276;The function lang with arity 1 is not registered.
function-literal-277;The function lang with arity 2 is not registered.
function-literal-278;The function lang with arity 2 is not registered.
function-literal-280;PRSC Error: Failed to parse query '(/root/Q{http://www.w3.org/2005/xpath-functions}root#0()) instance of $document-node()'
function-literal-302;Expected XPath Q{http://www.w3.org/2005/xpath-functions}tail#1((1, true())) to resolve to true, but instead got True
function-literal-310;Expected XPath Q{http://www.w3.org/2005/xpath-functions}subsequence#2((1, true()), 2e0) to resolve to true, but instead got True
function-literal-318;No collations are supported
function-literal-320;Equal not available for XsInteger and XsString
function-literal-322;No collations are supported
function-literal-326;No collations are supported
function-literal-340;No collations are supported
function-literal-344;No collations are supported
function-literal-349;The function id with arity 1 is not registered.
function-literal-350;The function id with arity 1 is not registered.
function-literal-351;The function id with arity 2 is not registered.
function-literal-352;The function id with arity 2 is not registered.
function-literal-353;The function element-with-id with arity 1 is not registered.
function-literal-354;The function element-with-id with arity 1 is not registered.
function-literal-355;The function element-with-id with arity 2 is not registered.
function-literal-356;The function element-with-id with arity 2 is not registered.
function-literal-357;The function idref with arity 1 is not registered.
function-literal-358;The function idref with arity 1 is not registered.
function-literal-359;The function idref with arity 2 is not registered.
function-literal-360;The function idref with arity 2 is not registered.
function-literal-361;The function generate-id with arity 0 is not registered.
function-literal-362;PRSC Error: Failed to parse query '(/Q{http://www.w3.org/2005/xpath-functions}generate-id#0()) instance of $xs:string'
function-literal-363;The function generate-id with arity 1 is not registered.
function-literal-364;PRSC Error: Failed to parse query '(Q{http://www.w3.org/2005/xpath-functions}generate-id#1(())) instance of $xs:string'
function-literal-365;The function doc with arity 1 is not registered.
function-literal-366;PRSC Error: Failed to parse query '(Q{http://www.w3.org/2005/xpath-functions}doc#1('http://www.w3.org/fots/fn/function-lookup/function-lookup.xml')) instance of $document-node()'
function-literal-367;The function doc-available with arity 1 is not registered.
function-literal-368;The function doc-available with arity 1 is not registered.
function-literal-369;The function collection with arity 0 is not registered.
function-literal-370;PRSC Error: Failed to parse query '(Q{http://www.w3.org/2005/xpath-functions}collection#0()) instance of $node()+'
function-literal-371;The function collection with arity 1 is not registered.
function-literal-372;PRSC Error: Failed to parse query '(Q{http://www.w3.org/2005/xpath-functions}collection#1(())) instance of $node()+'
function-literal-373;The function uri-collection with arity 0 is not registered.
function-literal-374;PRSC Error: Failed to parse query '(Q{http://www.w3.org/2005/xpath-functions}uri-collection#0()) instance of $xs:anyURI+'
function-literal-375;The function uri-collection with arity 1 is not registered.
function-literal-376;PRSC Error: Failed to parse query '(Q{http://www.w3.org/2005/xpath-functions}uri-collection#1(())) instance of $xs:anyURI+'
function-literal-377;The function unparsed-text with arity 1 is not registered.
function-literal-378;PRSC Error: Failed to parse query '(Q{http://www.w3.org/2005/xpath-functions}unparsed-text#1('http://www.w3.org/fots/unparsed-text/text-plain-utf-8.txt')) instance of $xs:string'
function-literal-379;The function unparsed-text with arity 2 is not registered.
function-literal-380;PRSC Error: Failed to parse query '(Q{http://www.w3.org/2005/xpath-functions}unparsed-text#2('http://www.w3.org/fots/unparsed-text/text-plain-utf-8.txt', 'utf-8')) instance of $xs:string'
function-literal-381;The function unparsed-text-lines with arity 1 is not registered.
function-literal-382;PRSC Error: Failed to parse query '(Q{http://www.w3.org/2005/xpath-functions}unparsed-text-lines#1('http://www.w3.org/fots/unparsed-text/text-plain-utf-8.txt')) instance of $xs:string+'
function-literal-383;The function unparsed-text-lines with arity 2 is not registered.
function-literal-384;PRSC Error: Failed to parse query '(Q{http://www.w3.org/2005/xpath-functions}unparsed-text-lines#2('http://www.w3.org/fots/unparsed-text/text-plain-utf-8.txt', 'utf-8')) instance of $xs:string+'
function-literal-385;The function unparsed-text-available with arity 1 is not registered.
function-literal-386;The function unparsed-text-available with arity 1 is not registered.
function-literal-387;The function unparsed-text-available with arity 2 is not registered.
function-literal-388;The function unparsed-text-available with arity 2 is not registered.
function-literal-389;The function environment-variable with arity 1 is not registered.
function-literal-390;The function environment-variable with arity 1 is not registered.
function-literal-391;The function available-environment-variables with arity 0 is not registered.
function-literal-392;PRSC Error: Failed to parse query '(Q{http://www.w3.org/2005/xpath-functions}available-environment-variables#0()) instance of $xs:string*'
function-literal-393;The function parse-xml with arity 1 is not registered.
function-literal-394;PRSC Error: Failed to parse query '(Q{http://www.w3.org/2005/xpath-functions}parse-xml#1('<doc />')) instance of $node()'
function-literal-395;The function parse-xml-fragment with arity 1 is not registered.
function-literal-396;PRSC Error: Failed to parse query '(Q{http://www.w3.org/2005/xpath-functions}parse-xml-fragment#1('<doc />')) instance of $node()'
function-literal-397;The function serialize with arity 1 is not registered.
function-literal-398;The function serialize with arity 1 is not registered.
function-literal-399;The function serialize with arity 2 is not registered.
function-literal-400;The function serialize with arity 2 is not registered.
function-literal-405;The function current-dateTime with arity 0 is not registered.
function-literal-406;PRSC Error: Failed to parse query '(Q{http://www.w3.org/2005/xpath-functions}current-dateTime#0()) instance of $xs:dateTime'
function-literal-407;The function current-date with arity 0 is not registered.
function-literal-408;PRSC Error: Failed to parse query '(Q{http://www.w3.org/2005/xpath-functions}current-date#0()) instance of $xs:date'
function-literal-409;The function current-time with arity 0 is not registered.
function-literal-410;PRSC Error: Failed to parse query '(Q{http://www.w3.org/2005/xpath-functions}current-time#0()) instance of $xs:time'
function-literal-411;The function implicit-timezone with arity 0 is not registered.
function-literal-412;PRSC Error: Failed to parse query '(Q{http://www.w3.org/2005/xpath-functions}implicit-timezone#0()) instance of $xs:dayTimeDuration'
function-literal-413;The function default-collation with arity 0 is not registered.
function-literal-414;The function default-collation with arity 0 is not registered.
function-literal-415;The function static-base-uri with arity 0 is not registered.
function-literal-416;PRSC Error: Failed to parse query '(Q{http://www.w3.org/2005/xpath-functions}static-base-uri#0()) instance of $xs:anyURI?'
function-literal-419;The function function-name with arity 1 is not registered.
function-literal-420;The function function-name with arity 1 is not registered.
function-literal-421;The function function-arity with arity 1 is not registered.
function-literal-422;The function function-arity with arity 1 is not registered.
function-literal-430;Expected XPath Q{http://www.w3.org/2005/xpath-functions}fold-right#3(1 to 5, "", fn:concat(?, ".", ?)) to resolve to 1.2.3.4.5., but instead got .5.4.3.2.1
function-literal-431;The function for-each-pair with arity 3 is not registered.
function-literal-432;The function for-each-pair with arity 3 is not registered.
function-literal-442;Expected XPath Q{http://www.w3.org/2001/XMLSchema}duration#1('P5Y2M10DT15H') to resolve to P5Y2M10DT15H, but instead got PT
function-literal-444;Expected XPath Q{http://www.w3.org/2001/XMLSchema}yearMonthDuration#1('P1Y') to resolve to P1Y, but instead got P
function-literal-446;Expected XPath Q{http://www.w3.org/2001/XMLSchema}dayTimeDuration#1('PT15H') to resolve to PT15H, but instead got PT
function-literal-494;Atomic Value for XsNormalizedString is not implemented yet.
function-literal-496;Atomic Value for XsToken is not implemented yet.
function-literal-498;Atomic Value for XsLanguage is not implemented yet.
function-literal-500;Atomic Value for XsNmToken is not implemented yet.
function-literal-502;Atomic Value for XsName is not implemented yet.
function-literal-504;Atomic Value for XsNcName is not implemented yet.
function-literal-506;Atomic Value for XsId is not implemented yet.
function-literal-508;Atomic Value for XsIdRef is not implemented yet.
function-literal-510;Atomic Value for XsEntity is not implemented yet.
function-literal-512;Expected XPath Q{http://www.w3.org/2001/XMLSchema}boolean#1('1') to resolve to true, but instead got True
function-literal-514;Type casting to XsBase64Binary has not been implemented yet.
function-literal-516;Type casting to XsHexBinary has not been implemented yet.
function-literal-518;Type casting to XsAnyUri has not been implemented yet.
function-literal-520;Haven't implemented Qnames from: QName:fn
function-literal-524;Atomic Value for XsIdRefs is not implemented yet.
function-literal-526;Atomic Value for XsNmTokens is not implemented yet.
function-literal-528;Atomic Value for XsEntities is not implemented yet.
function-literal-701;PRSC Error: Failed to parse query '\n        declare function local:plus($x, $y) {\n          $x + $y\n        };\n        function-name(local:plus#2)  \n     = QName("http://www.w3.org/2005/xquery-local-functions", "plus")'
function-literal-702;PRSC Error: Failed to parse query '\n        declare function local:plus($x, $y) {\n          $x + $y\n        };\n        function-arity(local:plus#2)  \n     = 2'
function-literal-703;PRSC Error: Failed to parse query '\n        declare function local:plus($x, $y) {\n          $x + $y\n        };\n        let $f := (if (current-date() gt xs:date('1900-01-01')) then local:plus#2 else round#2)\n        return $f(5, 7)  \n     = 12'
function-literal-704;PRSC Error: Failed to parse query '\n        declare variable $v := function-name(local:plus#2);\n        declare function local:plus($x, $y) {\n          $x + $y\n        };\n        $v \n     = QName("http://www.w3.org/2005/xquery-local-functions", "plus")'
function-literal-705;PRSC Error: Failed to parse query '\n        declare variable $v := function-arity(local:plus#2);\n        declare function local:plus($x, $y) {\n          $x + $y\n        };\n        $v\n     = 2'
function-literal-706;PRSC Error: Failed to parse query '\n        declare variable $f := (if (current-date() gt xs:date('1900-01-01')) then local:plus#2 else round#2);\n        declare function local:plus($x, $y) {\n          $x + $y\n        };\n        $f(5, 7)  \n     = 12'
function-literal-707;PRSC Error: Failed to parse query '\n        declare variable $f := (if (current-date() gt xs:date('1900-01-01')) then local:plus#2 else round#2);\n        declare function local:plus($x, $y) {\n          $x + $y + $a\n        };\n        declare variable $a := function-arity($f);\n        $f(3, 4) \n     = 9'
function-literal-708;PRSC Error: Failed to parse query '\n        declare default function namespace "http://example.com/functions";\n        declare variable $f := (if (fn:current-date() gt xs:date('1900-01-01')) then plus#2 else fn:round#2);\n        declare function plus($x, $y) {\n          $x + $y\n        };\n        $f(5, 7)  \n     = 12'
FunctionCall-001;PRSC Error: Failed to parse query 'concat(<a>X</a>, <a>Y</a>)'
FunctionCall-002;PRSC Error: Failed to parse query 'xs:boolean(<a>0</a>)'
FunctionCall-003;PRSC Error: Failed to parse query '(xs:integer(validate type xs:decimal {<a>93.7</a>})) instance of $xs:integer'
FunctionCall-004;PRSC Error: Failed to parse query '\n         declare function local:f($in as xs:boolean) as xs:boolean { $in };\n         local:f(<a>0</a>)'
FunctionCall-005;PRSC Error: Failed to parse query '\n         declare function local:f($in as xs:anyAtomicType) as xs:boolean { $in instance of xs:decimal };\n         local:f(validate type xs:integer {<a>12</a>})'
FunctionCall-006;PRSC Error: Failed to parse query '\n         let $f := function ($in as xs:boolean) as xs:boolean { $in }\n         return $f(<a>0</a>)\n      '
FunctionCall-007;PRSC Error: Failed to parse query '\n         declare function local:f($in as xs:anyAtomicType) as xs:boolean { $in instance of xs:decimal };\n         let $f := function-lookup(xs:QName('local:f'), 1)\n         return $f(validate type xs:integer {<a>12</a>})'
FunctionCall-008;PRSC Error: Failed to parse query '(\n        let $f := xs:integer#1\n        return $f(validate type xs:decimal {<a>93.7</a>})\n      ) instance of $xs:integer'
FunctionCall-009;PRSC Error: Failed to parse query '(\n        declare function local:f($in as xs:decimal*) as xs:decimal {sum($in, 0.0)};\n        local:f(xs:NMTOKENS('1 1.2 1.3 1.4')!xs:untypedAtomic(.))\n      ) instance of $xs:decimal'
FunctionCall-010;PRSC Error: Failed to parse query '(function($in as xs:decimal*) as xs:decimal {sum($in, 0.0)}(xs:NMTOKENS('1 1.2 1.3 1.4')!xs:untypedAtomic(.))) instance of $xs:decimal'
FunctionCall-011;PRSC Error: Failed to parse query '(codepoints-to-string(xs:NMTOKENS('48 49 50 51')!xs:untypedAtomic(.))) instance of $xs:string'
FunctionCall-012;Expected XPathException with code XPTY0004, but got Atomic Value for XsNmTokens is not implemented yet.
FunctionCall-013;PRSC Error: Failed to parse query '(\n        declare function local:f($a as xs:integer, $b as xs:integer) as xs:integer {\n          data(<a>{$a}{$b}</a>)\n        };\n        local:f(12, 34)\n      ) instance of $xs:integer'
FunctionCall-014;PRSC Error: Failed to parse query '(\n        let $f := function($a as xs:integer, $b as xs:integer) as xs:integer {\n          data(<a>{$a}{$b}</a>)\n        }\n        return $f(12, 34)\n      ) instance of $xs:integer'
FunctionCall-015;PRSC Error: Failed to parse query '\n         declare function local:f($in as xs:integer) as xs:integer { $in + 1 };\n         let $f := function-lookup(xs:QName(<f>local:f</f>), 1)\n         return $f(12) = 13'
FunctionCall-016;Expected error code: XPTY0117. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         declare function local:f($in as xs:QName) as xs:integer { string-length(local-name-from-QName($in)) };\n         let $e := <a xsi:type='my:integer' xmlns:my='http://my.example.com/'>123</a>\n         return local:f($e/@xsi:type)'
FunctionCall-017;Expected error code: XPTY0117. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         let $f := function ($in as xs:QName) as xs:integer { string-length(local-name-from-QName($in)) }\n         let $e := <a xsi:type='my:integer' xmlns:my='http://my.example.com/'>123</a>\n         return $f($e/@xsi:type)\n      '
FunctionCall-018;Expected error code: XPTY0117. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         let $e := <a xsi:type='my:integer' xmlns:my='http://my.example.com/'>123</a>\n         return local-name-from-QName($e/@xsi:type)'
FunctionCall-019;Expected error code: XPTY0117. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         declare function local:q ($prefix as xs:string, $local as xs:string) as xs:QName {\n            <a>{$prefix}:{$local}</a>\n         };\n         local:q('fn', 'abs')\n      '
FunctionCall-020;Expected error code: XPTY0117. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         let $q := function ($prefix as xs:string, $local as xs:string) as xs:QName {\n            <a>{$prefix}:{$local}</a>\n         }\n         return $q('fn', 'abs')\n      '
FunctionCall-021;Expected error code: XPTY0117. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         declare function local:q ($prefix as xs:string, $local as xs:string) as xs:QName {\n            <a>{$prefix}:{$local}</a>\n         };\n         let $curried := local:q('fn', ?)\n         return $curried('abs')\n      '
FunctionCall-022;PRSC Error: Failed to parse query 'deep-equal((\n         declare function local:unique($in as xs:integer*) as xs:boolean { count($in) = count(distinct-values($in)) };\n         (local:unique([1,2,3,4,5]), local:unique([1,2,3,4,4]))), (true(), false()))'
FunctionCall-023;PRSC Error: Failed to parse query 'string-join((<a>X</a>, <a>Y</a>, <a>Z</a>), '')'
FunctionCall-025;PRSC Error: Failed to parse query '(function($in as xs:double*) as xs:double {sum($in, 0.0e0)}((1, xs:float(0.25), xs:decimal(0.5)))) instance of $xs:double'
FunctionCall-026;PRSC Error: Failed to parse query '(function($in as xs:string*) as xs:string {string-join($in, ';')}((xs:anyURI('http://one.com/'), xs:anyURI('http://two.com/')))) instance of $xs:string'
FunctionCall-027;Expected XPathException with code XPST0051, but got Atomic Value for XsNmTokens is not implemented yet.
FunctionCall-028;PRSC Error: Failed to parse query '\n        declare namespace lu = 'http://www.w3.org/XQueryTest/ListUnionTypes' ;\n        import schema "http://www.w3.org/XQueryTest/ListUnionTypes";\n      	function($in as lu:unionType) as xs:boolean {$in instance of xs:integer}(23)'
FunctionCall-029;PRSC Error: Failed to parse query '\n        declare namespace lu = 'http://www.w3.org/XQueryTest/ListUnionTypes' ;\n        import schema "http://www.w3.org/XQueryTest/ListUnionTypes";\n      	function($in as lu:unionType) as xs:boolean {$in instance of xs:integer}(xs:float(12))'
FunctionCall-030;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare namespace lu = 'http://www.w3.org/XQueryTest/ListUnionTypes' ;\n        import schema "http://www.w3.org/XQueryTest/ListUnionTypes";\n      	function($in as lu:unionType) as xs:boolean {$in instance of xs:integer}(12.3)'
FunctionCall-031;PRSC Error: Failed to parse query '\n        declare namespace lu = 'http://www.w3.org/XQueryTest/ListUnionTypes' ;\n        import schema "http://www.w3.org/XQueryTest/ListUnionTypes";\n      	function($in as lu:unionType) as xs:boolean {$in instance of xs:integer}(xs:untypedAtomic('123'))'
FunctionCall-032;Expected error code: XPST0051. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare namespace lu = 'http://www.w3.org/XQueryTest/ListUnionTypes' ;\n        import schema "http://www.w3.org/XQueryTest/ListUnionTypes";\n      	function($in as lu:unionOfListType) as xs:boolean {$in instance of xs:integer}(23)'
FunctionCall-033;Expected error code: XPST0051. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare namespace lu = 'http://www.w3.org/XQueryTest/ListUnionTypes' ;\n        import schema "http://www.w3.org/XQueryTest/ListUnionTypes";\n      	function($in as lu:restrictedUnionType) as xs:boolean {$in instance of xs:integer}(23)'
FunctionCall-034;Expected error code: XPST0051. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare namespace lu = 'http://www.w3.org/XQueryTest/ListUnionTypes' ;\n        import schema "http://www.w3.org/XQueryTest/ListUnionTypes";\n      	function($in as lu:listType) as xs:boolean {$in instance of xs:integer}(23)'
FunctionCall-035;PRSC Error: Failed to parse query '(\n        declare namespace lu = 'http://www.w3.org/XQueryTest/ListUnionTypes' ;\n        import schema "http://www.w3.org/XQueryTest/ListUnionTypes";\n      	function($in as xs:integer) as lu:unionOfUnionType {$in + 23}(9)) instance of $xs:integer'
FunctionCall-036;PRSC Error: Failed to parse query '(\n        declare namespace lu = 'http://www.w3.org/XQueryTest/ListUnionTypes' ;\n        import schema "http://www.w3.org/XQueryTest/ListUnionTypes";\n      	declare function local:daysAhead($in as xs:integer) as lu:unionOfUnionType {current-date() + (xs:dayTimeDuration('P1D')*$in)};\n      	local:daysAhead(9)\n      ) instance of $xs:date'
FunctionCall-037;PRSC Error: Failed to parse query '(\n        declare namespace lu = 'http://www.w3.org/XQueryTest/ListUnionTypes' ;\n        import schema "http://www.w3.org/XQueryTest/ListUnionTypes";\n      	declare function local:makeDate($in as xs:string) as lu:unionOfUnionType {\n      	  if ($in castable as xs:date)\n      	  then xs:untypedAtomic($in)\n      	  else current-date()\n      	};\n      	local:makeDate('2012-12-12')\n      ) instance of $xs:date'
FunctionCall-038;PRSC Error: Failed to parse query '(\n        declare namespace lu = 'http://www.w3.org/XQueryTest/ListUnionTypes' ;\n        import schema "http://www.w3.org/XQueryTest/ListUnionTypes";\n      	declare function local:makeDate($in as xs:string, $year as xs:integer) as lu:unionOfUnionType {\n      	  let $date := $year || '-' || $in\n      	  return if ($date castable as xs:date)\n      	         then xs:untypedAtomic($date)\n      	         else current-date()\n      	};\n      	let $make2012date := local:makeDate(?, 2012)\n      	return $make2012date('12-12')\n      ) instance of $xs:date'
FunctionCall-039;Expected error code: XPST0051. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare namespace lu = 'http://www.w3.org/XQueryTest/ListUnionTypes' ;\n        import schema "http://www.w3.org/XQueryTest/ListUnionTypes";\n      	function() as lu:restrictedUnionType {23}()'
FunctionCall-040;PRSC Error: Failed to parse query '\n        declare namespace lu = 'http://www.w3.org/XQueryTest/ListUnionTypes' ;\n        import schema "http://www.w3.org/XQueryTest/ListUnionTypes";\n      	let $f := function() as lu:namespaceSensitiveUnionType {node-name(<a/>)}\n      	return local-name-from-QName($f())\n      '
FunctionCall-041;Expected error code: XPTY0117. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare namespace lu = 'http://www.w3.org/XQueryTest/ListUnionTypes' ;\n        import schema "http://www.w3.org/XQueryTest/ListUnionTypes";\n      	let $f := function() as lu:namespaceSensitiveUnionType {xs:untypedAtomic('xsi:type')}\n      	return local-name-from-QName($f())'
FunctionCall-042;PRSC Error: Failed to parse query '(\n        declare namespace lu = 'http://www.w3.org/XQueryTest/ListUnionTypes' ;\n        import schema "http://www.w3.org/XQueryTest/ListUnionTypes";\n        declare function local:hof($f as function(xs:integer) as xs:integer) as xs:integer {$f(3) + 1};\n      	let $f := function($a as lu:unionType) as xs:integer {$a + 2}\n      	return local:hof($f)) instance of $xs:integer'
FunctionCall-043;PRSC Error: Failed to parse query '(\n        declare namespace lu = 'http://www.w3.org/XQueryTest/ListUnionTypes' ;\n        import schema "http://www.w3.org/XQueryTest/ListUnionTypes";\n        declare function local:hof($f as function(lu:unionType) as xs:integer) as xs:integer {$f(3) + 1};\n      	let $f := function($a as lu:unionOfUnionType) as xs:integer {$a + 2}\n      	return local:hof($f)) instance of $xs:integer'
FunctionCall-044;Expected error code: XPST0003. Query succeeded with result: 
FunctionCall-049;PRSC Error: Failed to parse query '\n         declare namespace lu = 'http://www.w3.org/XQueryTest/unionListDefined' ;\n         import schema "http://www.w3.org/XQueryTest/unionListDefined";\n         declare variable $elem as node() := validate strict {<lu:elementContainingApproximateDate><lu:e>2018-11-06</lu:e></lu:elementContainingApproximateDate>};\n         declare function local:hof(\n                 $f as function(element(*, lu:restrictedUnion)) as xs:integer, \n                 $e as node()) as xs:boolean {\n             $f($e) = 10\n         };\n         local:hof(\n             function($in as element(*, lu:approximateDate)) as xs:integer {string-length(string($in))}, $elem/lu:e)\n      \n      '
FunctionCall-050;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         declare namespace lu = 'http://www.w3.org/XQueryTest/unionListDefined' ;\n         import schema "http://www.w3.org/XQueryTest/unionListDefined";\n         declare variable $elem as node() := validate strict {<lu:elementContainingApproximateDate><lu:e>2018-11-06</lu:e></lu:elementContainingApproximateDate>};\n         declare function local:hof(\n                 $f as function(element(*, lu:approximateDate)) as xs:integer, \n                 $e as node()) as xs:boolean {\n             $f($e) = 10\n         };\n         local:hof(\n             function($in as element(*, lu:restrictedUnion)) as xs:integer {string-length(string($in))}, $elem/lu:e)\n      \n      '
FunctionCall-051;PRSC Error: Failed to parse query '\n         declare namespace lu = 'http://www.w3.org/XQueryTest/unionListDefined' ;\n         import schema "http://www.w3.org/XQueryTest/unionListDefined";\n         declare variable $f := function($in as element(*, lu:approximateDate)) as xs:integer {string-length(string($in))};\n         $f instance of function(element(*, lu:restrictedUnion)) as xs:integer \n      '
FunctionCall-052;PRSC Error: Failed to parse query '\n         declare namespace lu = 'http://www.w3.org/XQueryTest/unionListDefined' ;\n         import schema "http://www.w3.org/XQueryTest/unionListDefined";\n         declare variable $f := function($in as element(*, lu:restrictedUnion)) as xs:integer {string-length(string($in))};\n         $f instance of function(element(*, lu:approximateDate)) as xs:integer \n      '
FunctionCall-053;PRSC Error: Failed to parse query '\n         declare namespace lu = 'http://www.w3.org/XQueryTest/unionListDefined' ;\n         import schema "http://www.w3.org/XQueryTest/unionListDefined";\n         declare variable $f := function($in as element(*, lu:approximateDateAlternative)) as xs:integer {string-length(string($in))};\n         $f instance of function(element(*, lu:restrictedUnion)) as xs:integer \n      '
FunctionCall-054;PRSC Error: Failed to parse query '\n         declare namespace lu = 'http://www.w3.org/XQueryTest/unionListDefined' ;\n         import schema "http://www.w3.org/XQueryTest/unionListDefined";\n         declare variable $f := function($in as element(*, lu:restrictedUnion)) as xs:integer {string-length(string($in))};\n         $f instance of function(element(*, lu:approximateDateAlternative)) as xs:integer \n      '
FunctionCall-055;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         declare function local:product ($s as xs:double+) as xs:double { \n            if (not($s[2])) then $s[1] else $s[1] * local:product($s[position() > 1]) \n         };  \n         local:product((1, '2', 3)) (: '2' is not xs:double, error should be raised :)\n      '
functx-fn-abs-3;Expected XPath (abs(xs:float('-INF'))) to resolve to INF, but instead got Infinity
functx-fn-abs-all;Expected XPath (abs(3.5), abs(-4), abs(xs:float('-INF'))) to resolve to 3.5 4 INF, but instead got 3.5 4 Infinity
functx-fn-adjust-date-to-timezone-1;The function adjust-date-to-timezone with arity 2 is not registered.
functx-fn-adjust-date-to-timezone-2;The function adjust-date-to-timezone with arity 2 is not registered.
functx-fn-adjust-date-to-timezone-3;The function adjust-date-to-timezone with arity 2 is not registered.
functx-fn-adjust-date-to-timezone-4;The function adjust-date-to-timezone with arity 2 is not registered.
functx-fn-adjust-date-to-timezone-all;The function adjust-date-to-timezone with arity 2 is not registered.
functx-fn-adjust-dateTime-to-timezone-1;The function adjust-dateTime-to-timezone with arity 2 is not registered.
functx-fn-adjust-dateTime-to-timezone-2;The function adjust-dateTime-to-timezone with arity 2 is not registered.
functx-fn-adjust-dateTime-to-timezone-3;The function adjust-dateTime-to-timezone with arity 2 is not registered.
functx-fn-adjust-dateTime-to-timezone-4;The function adjust-dateTime-to-timezone with arity 2 is not registered.
functx-fn-adjust-dateTime-to-timezone-5;The function adjust-dateTime-to-timezone with arity 2 is not registered.
functx-fn-adjust-dateTime-to-timezone-all;The function adjust-dateTime-to-timezone with arity 2 is not registered.
functx-fn-adjust-time-to-timezone-1;The function adjust-time-to-timezone with arity 2 is not registered.
functx-fn-adjust-time-to-timezone-2;The function adjust-time-to-timezone with arity 2 is not registered.
functx-fn-adjust-time-to-timezone-3;The function adjust-time-to-timezone with arity 2 is not registered.
functx-fn-adjust-time-to-timezone-4;The function adjust-time-to-timezone with arity 2 is not registered.
functx-fn-adjust-time-to-timezone-all;The function adjust-time-to-timezone with arity 2 is not registered.
functx-fn-avg-3;Expected XPath (avg( (xs:yearMonthDuration('P4M'), xs:yearMonthDuration('P6M') ) )) to resolve to P5M, but instead got P
functx-fn-avg-4;Items passed to fn:avg are not all numeric or duration types are mixed.
functx-fn-avg-all;Items passed to fn:avg are not all numeric or duration types are mixed.
functx-fn-base-uri-1;The function base-uri with arity 1 is not registered.
functx-fn-base-uri-2;The function base-uri with arity 1 is not registered.
functx-fn-base-uri-3;The function base-uri with arity 1 is not registered.
functx-fn-base-uri-all;The function base-uri with arity 1 is not registered.
functx-fn-boolean-9;PRSC Error: Failed to parse query 'let $ordDoc := (/) return (boolean(<a>false</a>))'
functx-fn-boolean-all;PRSC Error: Failed to parse query 'let $ordDoc := (/) return (boolean( () ), boolean(''), boolean(0), boolean('0'), boolean('false'), boolean(xs:float('NaN')), boolean($ordDoc/order[1]), boolean($ordDoc/noSuchChild), boolean(<a>false</a>))'
functx-fn-ceiling-4;Value was either too large or too small for a Decimal.
functx-fn-ceiling-5;Value was either too large or too small for a Decimal.
functx-fn-ceiling-all;Expected XPath (ceiling(5), ceiling(5.1), ceiling(5.5), ceiling(-5.5), ceiling(-5.51), ceiling( () )) to resolve to 5 6 6 -5 -5, but instead got 5 6 6 Infinity Infinity
functx-fn-codepoint-equal-all;Expected XPath (codepoint-equal('abc', 'abc'), codepoint-equal('abc', 'ab c'), codepoint-equal('abc', ())) to resolve to true false, but instead got True False
functx-fn-compare-5;Expected XPath (compare('a', 'B')) to resolve to 1
functx-fn-compare-all;Expected XPath (compare('a', 'b'), compare('a', 'a'), compare('b', 'a'), compare('ab', 'abc'), compare('a', 'B'), compare(upper-case('a'), upper-case('B')), compare('a', ())) to resolve to -1 0 1 -1 1 -1, but instead got -1 0 1 -1 31 -1
functx-fn-concat-4;PRSC Error: Failed to parse query '(concat('a', <x>b</x>, 'c'))'
functx-fn-concat-all;PRSC Error: Failed to parse query '(concat('a', 'b'), concat('a', 'b', 'c'), concat('a', (), 'b', '', 'c'), concat('a', <x>b</x>, 'c'))'
functx-fn-contains-all;Expected XPath (contains('query', 'e'), contains('query', 'ery'), contains('query', 'query'), contains('query', 'x'), contains('query', ''), contains('query', ()), contains( (), 'q')) to resolve to true true true false true true false, but instead got True True True False True True False
functx-fn-data-5;Expected XPath let $cat := (/) return (data($cat//product[1])) to resolve to 557 Fleece Pullover navy black, but instead got 557Fleece Pullovernavy black
functx-fn-data-all;Expected XPath let $cat := (/) return (data($cat//product[1]/number), data($cat//number), data($cat//product[1]/@dept), data($cat//product[1]/colorChoices), data($cat//product[1]), data($cat//product[4]/desc)) to resolve to 557 557 563 443 784 WMN navy black 557 Fleece Pullover navy black Our favorite shirt!, but instead got 557 557 563 443 784 WMN navy black 557Fleece Pullovernavy black Our favorite shirt!
functx-fn-dateTime-1;The function dateTime with arity 2 is not registered.
functx-fn-day-from-date-1;The function day-from-date with arity 1 is not registered.
functx-fn-day-from-dateTime-1;The function day-from-dateTime with arity 1 is not registered.
functx-fn-days-from-duration-1;The function days-from-duration with arity 1 is not registered.
functx-fn-days-from-duration-2;The function days-from-duration with arity 1 is not registered.
functx-fn-days-from-duration-3;The function days-from-duration with arity 1 is not registered.
functx-fn-days-from-duration-4;The function days-from-duration with arity 1 is not registered.
functx-fn-days-from-duration-5;The function days-from-duration with arity 1 is not registered.
functx-fn-days-from-duration-all;The function days-from-duration with arity 1 is not registered.
functx-fn-deep-equal-1;PRSC Error: Failed to parse query 'let $prod1 := <product dept='MEN' id='P123'> <number>784</number> </product> return let $prod2 := <product id='P123' dept='MEN'><!--comment--> <number>784</number> </product> return (deep-equal( 1, 1 ))'
functx-fn-deep-equal-2;PRSC Error: Failed to parse query 'let $prod1 := <product dept='MEN' id='P123'> <number>784</number> </product> return let $prod2 := <product id='P123' dept='MEN'><!--comment--> <number>784</number> </product> return (deep-equal( (1, 1), (1, 1) ))'
functx-fn-deep-equal-3;PRSC Error: Failed to parse query 'let $prod1 := <product dept='MEN' id='P123'> <number>784</number> </product> return let $prod2 := <product id='P123' dept='MEN'><!--comment--> <number>784</number> </product> return (deep-equal( (1, 2), (1.0, 2.0) ))'
functx-fn-deep-equal-4;PRSC Error: Failed to parse query 'let $prod1 := <product dept='MEN' id='P123'> <number>784</number> </product> return let $prod2 := <product id='P123' dept='MEN'><!--comment--> <number>784</number> </product> return (deep-equal( (1, 2), (2, 1) ))'
functx-fn-deep-equal-5;PRSC Error: Failed to parse query 'let $prod1 := <product dept='MEN' id='P123'> <number>784</number> </product> return let $prod2 := <product id='P123' dept='MEN'><!--comment--> <number>784</number> </product> return (deep-equal( $prod1, $prod2 ))'
functx-fn-deep-equal-6;PRSC Error: Failed to parse query 'let $prod1 := <product dept='MEN' id='P123'> <number>784</number> </product> return let $prod2 := <product id='P123' dept='MEN'><!--comment--> <number>784</number> </product> return (deep-equal( $prod1/number, $prod2/number ))'
functx-fn-deep-equal-all;PRSC Error: Failed to parse query 'let $prod1 := <product dept='MEN' id='P123'> <number>784</number> </product> return let $prod2 := <product id='P123' dept='MEN'><!--comment--> <number>784</number> </product> return (deep-equal( 1, 1 ), deep-equal( (1, 1), (1, 1) ), deep-equal( (1, 2), (1.0, 2.0) ), deep-equal( (1, 2), (2, 1) ), deep-equal( $prod1, $prod2 ), deep-equal( $prod1/number, $prod2/number ))'
functx-fn-default-collation-1;The function default-collation with arity 0 is not registered.
functx-fn-distinct-values-1;PRSC Error: Failed to parse query 'let $in-xml := <in-xml> <a>3</a> <b>5</b> <b>3</b> </in-xml> return (distinct-values( ('a', 'b', 'a') ))'
functx-fn-distinct-values-2;PRSC Error: Failed to parse query 'let $in-xml := <in-xml> <a>3</a> <b>5</b> <b>3</b> </in-xml> return (distinct-values( (1, 2, 3) ))'
functx-fn-distinct-values-3;PRSC Error: Failed to parse query 'let $in-xml := <in-xml> <a>3</a> <b>5</b> <b>3</b> </in-xml> return (distinct-values( ('a', 2, 3) ))'
functx-fn-distinct-values-4;PRSC Error: Failed to parse query 'let $in-xml := <in-xml> <a>3</a> <b>5</b> <b>3</b> </in-xml> return (distinct-values( (xs:integer('1'), xs:decimal('1.0'), xs:float('1.0E0') ) )) = 1'
functx-fn-distinct-values-5;PRSC Error: Failed to parse query 'let $in-xml := <in-xml> <a>3</a> <b>5</b> <b>3</b> </in-xml> return (distinct-values($in-xml/*))'
functx-fn-distinct-values-6;PRSC Error: Failed to parse query 'let $in-xml := <in-xml> <a>3</a> <b>5</b> <b>3</b> </in-xml> return (distinct-values( () ))'
functx-fn-distinct-values-all;PRSC Error: Failed to parse query 'let $in-xml := <in-xml> <a>3</a> <b>5</b> <b>3</b> </in-xml> return (distinct-values( ('a', 'b', 'a') ), distinct-values( (1, 2, 3) ), distinct-values( ('a', 2, 3) ), distinct-values( (xs:integer('1'), xs:decimal('1.0'), xs:float('1.0E0') ) ), distinct-values($in-xml/*), distinct-values( () ))'
functx-fn-doc-available-1;The function doc-available with arity 1 is not registered.
functx-fn-empty-1;PRSC Error: Failed to parse query 'let $in-xml := <in-xml> <a></a> <b/> <c>xyz</c> </in-xml> return (empty( ('a', 'b', 'c') ))'
functx-fn-empty-2;PRSC Error: Failed to parse query 'let $in-xml := <in-xml> <a></a> <b/> <c>xyz</c> </in-xml> return (empty( () ))'
functx-fn-empty-3;PRSC Error: Failed to parse query 'let $in-xml := <in-xml> <a></a> <b/> <c>xyz</c> </in-xml> return (empty(0))'
functx-fn-empty-4;PRSC Error: Failed to parse query 'let $in-xml := <in-xml> <a></a> <b/> <c>xyz</c> </in-xml> return (empty($in-xml/a))'
functx-fn-empty-5;PRSC Error: Failed to parse query 'let $in-xml := <in-xml> <a></a> <b/> <c>xyz</c> </in-xml> return (empty($in-xml/b))'
functx-fn-empty-6;PRSC Error: Failed to parse query 'let $in-xml := <in-xml> <a></a> <b/> <c>xyz</c> </in-xml> return (empty($in-xml/c))'
functx-fn-empty-7;PRSC Error: Failed to parse query 'let $in-xml := <in-xml> <a></a> <b/> <c>xyz</c> </in-xml> return (empty($in-xml/foo))'
functx-fn-empty-all;PRSC Error: Failed to parse query 'let $in-xml := <in-xml> <a></a> <b/> <c>xyz</c> </in-xml> return (empty( ('a', 'b', 'c') ), empty( () ), empty(0), empty($in-xml/a), empty($in-xml/b), empty($in-xml/c), empty($in-xml/foo))'
functx-fn-encode-for-uri-1;Expected XPath (encode-for-uri( 'Sales % Numbers.pdf')) to resolve to Sales%20%25%20Numbers.pdf, but instead got Sales+%25+Numbers.pdf
functx-fn-encode-for-uri-2;Expected XPath (encode-for-uri( 'http://datypic.com/a%20URI#frag')) to resolve to http%3A%2F%2Fdatypic.com%2Fa%2520URI%23frag, but instead got http%3a%2f%2fdatypic.com%2fa%2520URI%23frag
functx-fn-encode-for-uri-all;Expected XPath (encode-for-uri( 'Sales % Numbers.pdf'), encode-for-uri( 'http://datypic.com/a%20URI#frag')) to resolve to Sales%20%25%20Numbers.pdf http%3A%2F%2Fdatypic.com%2Fa%2520URI%23frag, but instead got Sales+%25+Numbers.pdf http%3a%2f%2fdatypic.com%2fa%2520URI%23frag
functx-fn-ends-with-all;Expected XPath (ends-with('query', 'y'), ends-with('query', 'query'), ends-with('query', ''), ends-with('query ', 'y'), ends-with('', 'y')) to resolve to true true true false false, but instead got True True True False False
functx-fn-escape-html-uri-1;The function escape-html-uri with arity 1 is not registered.
functx-fn-escape-html-uri-2;The function escape-html-uri with arity 1 is not registered.
functx-fn-escape-html-uri-all;The function escape-html-uri with arity 1 is not registered.
functx-fn-exists-all;Expected XPath (exists( ('a', 'b', 'c') ), exists( '' ), exists( () ), exists( false() )) to resolve to true true false true, but instead got True True False True
functx-fn-floor-4;Value was either too large or too small for a Decimal.
functx-fn-floor-5;Value was either too large or too small for a Decimal.
functx-fn-floor-all;Expected XPath (floor(5), floor(5.1), floor(5.7), floor(-5.1), floor(-5.7), floor( () )) to resolve to 5 5 5 -6 -6, but instead got 5 5 5 Infinity Infinity
functx-fn-hours-from-dateTime-1;The function hours-from-dateTime with arity 1 is not registered.
functx-fn-hours-from-dateTime-2;The function hours-from-dateTime with arity 1 is not registered.
functx-fn-hours-from-dateTime-all;The function hours-from-dateTime with arity 1 is not registered.
functx-fn-hours-from-duration-1;The function hours-from-duration with arity 1 is not registered.
functx-fn-hours-from-duration-2;The function hours-from-duration with arity 1 is not registered.
functx-fn-hours-from-duration-3;The function hours-from-duration with arity 1 is not registered.
functx-fn-hours-from-duration-4;The function hours-from-duration with arity 1 is not registered.
functx-fn-hours-from-duration-5;The function hours-from-duration with arity 1 is not registered.
functx-fn-hours-from-duration-all;The function hours-from-duration with arity 1 is not registered.
functx-fn-hours-from-time-1;The function hours-from-time with arity 1 is not registered.
functx-fn-hours-from-time-2;The function hours-from-time with arity 1 is not registered.
functx-fn-hours-from-time-all;The function hours-from-time with arity 1 is not registered.
functx-fn-index-of-7;PRSC Error: Failed to parse query '(index-of( (<a>1</a>, <b>1</b>), <c>1</c> ))'
functx-fn-index-of-all;PRSC Error: Failed to parse query '(index-of( ('a', 'b', 'c'), 'a'), index-of( ('a', 'b', 'c'), 'd'), index-of( (4, 5, 6, 4), 4), index-of( (4, 5, 6, 4), 04.0), index-of( ('a', 5, 6), 'a'), index-of( (), 'a'), index-of( (<a>1</a>, <b>1</b>), <c>1</c> ))'
functx-fn-lang-1;PRSC Error: Failed to parse query 'let $in-xml := <desclist xml:lang="en"> <desc xml:lang="en-US"> <line>A line of text.</line> </desc> <desc xml:lang="fr"> <line>Une ligne de texte.</line> </desc> </desclist> return ($in-xml// desc[lang('en')])'
functx-fn-lang-2;PRSC Error: Failed to parse query 'let $in-xml := <desclist xml:lang="en"> <desc xml:lang="en-US"> <line>A line of text.</line> </desc> <desc xml:lang="fr"> <line>Une ligne de texte.</line> </desc> </desclist> return ($in-xml// desc[lang('en-US')])'
functx-fn-lang-3;PRSC Error: Failed to parse query 'let $in-xml := <desclist xml:lang="en"> <desc xml:lang="en-US"> <line>A line of text.</line> </desc> <desc xml:lang="fr"> <line>Une ligne de texte.</line> </desc> </desclist> return ($in-xml// desc[lang('fr')])'
functx-fn-lang-4;PRSC Error: Failed to parse query 'let $in-xml := <desclist xml:lang="en"> <desc xml:lang="en-US"> <line>A line of text.</line> </desc> <desc xml:lang="fr"> <line>Une ligne de texte.</line> </desc> </desclist> return ($in-xml// desc/line[lang('en')])'
functx-fn-lang-5;PRSC Error: Failed to parse query 'let $in-xml := <desclist xml:lang="en"> <desc xml:lang="en-US"> <line>A line of text.</line> </desc> <desc xml:lang="fr"> <line>Une ligne de texte.</line> </desc> </desclist> return ($in-xml[lang('en-US')])'
functx-fn-lang-6;PRSC Error: Failed to parse query 'let $in-xml := <desclist xml:lang="en"> <desc xml:lang="en-US"> <line>A line of text.</line> </desc> <desc xml:lang="fr"> <line>Une ligne de texte.</line> </desc> </desclist> return ($in-xml// desc[lang('FR')])'
functx-fn-lang-all;PRSC Error: Failed to parse query 'let $in-xml := <desclist xml:lang="en"> <desc xml:lang="en-US"> <line>A line of text.</line> </desc> <desc xml:lang="fr"> <line>Une ligne de texte.</line> </desc> </desclist> return ($in-xml// desc[lang('en')], $in-xml// desc[lang('en-US')], $in-xml// desc[lang('fr')], $in-xml// desc/line[lang('en')], $in-xml[lang('en-US')], $in-xml// desc[lang('FR')])'
functx-fn-local-name-1;PRSC Error: Failed to parse query 'declare namespace pre = "http://datypic.com/pre";\n         declare namespace unpre = "http://datypic.com/unpre";\n         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (local-name($in-xml))'
functx-fn-local-name-2;PRSC Error: Failed to parse query 'declare namespace pre = "http://datypic.com/pre";\n         declare namespace unpre = "http://datypic.com/unpre";\n         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (local-name($in-xml//pre:prefixed))'
functx-fn-local-name-3;PRSC Error: Failed to parse query 'declare namespace pre = "http://datypic.com/pre";\n         declare namespace unpre = "http://datypic.com/unpre";\n         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (local-name($in-xml//unpre:unprefixed))'
functx-fn-local-name-4;PRSC Error: Failed to parse query 'declare namespace pre = "http://datypic.com/pre";\n         declare namespace unpre = "http://datypic.com/unpre";\n         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (local-name($in-xml//@pre:prefAttr))'
functx-fn-local-name-5;PRSC Error: Failed to parse query 'declare namespace pre = "http://datypic.com/pre";\n         declare namespace unpre = "http://datypic.com/unpre";\n         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (local-name($in-xml//@noNSAttr))'
functx-fn-local-name-all;PRSC Error: Failed to parse query 'declare namespace pre = "http://datypic.com/pre";\n         declare namespace unpre = "http://datypic.com/unpre";\n         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (local-name($in-xml), local-name($in-xml//pre:prefixed), local-name($in-xml//unpre:unprefixed), local-name($in-xml//@pre:prefAttr), local-name($in-xml//@noNSAttr))'
functx-fn-local-name-from-QName-1;The function local-name-from-QName with arity 1 is not registered.
functx-fn-local-name-from-QName-2;The function local-name-from-QName with arity 1 is not registered.
functx-fn-local-name-from-QName-3;The function local-name-from-QName with arity 1 is not registered.
functx-fn-local-name-from-QName-all;The function local-name-from-QName with arity 1 is not registered.
functx-fn-matches-1;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
functx-fn-matches-10;The function matches with arity 3 is not registered.
functx-fn-matches-11;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
functx-fn-matches-12;The function matches with arity 3 is not registered.
functx-fn-matches-13;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
functx-fn-matches-14;The function matches with arity 3 is not registered.
functx-fn-matches-15;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
functx-fn-matches-16;The function matches with arity 3 is not registered.
functx-fn-matches-17;The function matches with arity 3 is not registered.
functx-fn-matches-18;The function matches with arity 3 is not registered.
functx-fn-matches-2;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
functx-fn-matches-3;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
functx-fn-matches-4;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
functx-fn-matches-5;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
functx-fn-matches-6;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
functx-fn-matches-7;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
functx-fn-matches-8;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
functx-fn-matches-9;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
functx-fn-matches-all;The function matches with arity 3 is not registered.
functx-fn-max-2;Input string was not in a correct format.
functx-fn-max-4;Input string was not in a correct format.
functx-fn-max-all;Input string was not in a correct format.
functx-fn-min-2;Input string was not in a correct format.
functx-fn-min-3;Input string was not in a correct format.
functx-fn-min-4;Input string was not in a correct format.
functx-fn-min-all;Input string was not in a correct format.
functx-fn-minutes-from-dateTime-1;The function minutes-from-dateTime with arity 1 is not registered.
functx-fn-minutes-from-duration-1;The function minutes-from-duration with arity 1 is not registered.
functx-fn-minutes-from-duration-2;The function minutes-from-duration with arity 1 is not registered.
functx-fn-minutes-from-duration-3;The function minutes-from-duration with arity 1 is not registered.
functx-fn-minutes-from-duration-4;The function minutes-from-duration with arity 1 is not registered.
functx-fn-minutes-from-duration-5;The function minutes-from-duration with arity 1 is not registered.
functx-fn-minutes-from-duration-all;The function minutes-from-duration with arity 1 is not registered.
functx-fn-minutes-from-time-1;The function minutes-from-time with arity 1 is not registered.
functx-fn-month-from-date-1;The function month-from-date with arity 1 is not registered.
functx-fn-month-from-dateTime-1;The function month-from-dateTime with arity 1 is not registered.
functx-fn-months-from-duration-1;The function months-from-duration with arity 1 is not registered.
functx-fn-months-from-duration-2;The function months-from-duration with arity 1 is not registered.
functx-fn-months-from-duration-3;The function months-from-duration with arity 1 is not registered.
functx-fn-months-from-duration-4;The function months-from-duration with arity 1 is not registered.
functx-fn-months-from-duration-all;The function months-from-duration with arity 1 is not registered.
functx-fn-name-1;PRSC Error: Failed to parse query 'declare namespace pre2 = "http://datypic.com/pre";\n         declare namespace unpre2 = "http://datypic.com/unpre";\n         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (name($in-xml))'
functx-fn-name-2;PRSC Error: Failed to parse query 'declare namespace pre2 = "http://datypic.com/pre";\n         declare namespace unpre2 = "http://datypic.com/unpre";\n         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (name($in-xml//pre2:prefixed))'
functx-fn-name-3;PRSC Error: Failed to parse query 'declare namespace pre2 = "http://datypic.com/pre";\n         declare namespace unpre2 = "http://datypic.com/unpre";\n         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (name($in-xml//unpre2:unprefixed))'
functx-fn-name-4;PRSC Error: Failed to parse query 'declare namespace pre2 = "http://datypic.com/pre";\n         declare namespace unpre2 = "http://datypic.com/unpre";\n         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (name($in-xml//@pre2:prefAttr))'
functx-fn-name-5;PRSC Error: Failed to parse query 'declare namespace pre2 = "http://datypic.com/pre";\n         declare namespace unpre2 = "http://datypic.com/unpre";\n         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (name($in-xml//@noNSAttr))'
functx-fn-name-all;PRSC Error: Failed to parse query 'declare namespace pre2 = "http://datypic.com/pre";\n         declare namespace unpre2 = "http://datypic.com/unpre";\n         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (name($in-xml), name($in-xml//pre2:prefixed), name($in-xml//unpre2:unprefixed), name($in-xml//@pre2:prefAttr), name($in-xml//@noNSAttr))'
functx-fn-namespace-uri-1;PRSC Error: Failed to parse query 'declare namespace pre = "http://datypic.com/pre";\n         declare namespace unpre = "http://datypic.com/unpre";\n         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (namespace-uri($in-xml))'
functx-fn-namespace-uri-2;PRSC Error: Failed to parse query 'declare namespace pre = "http://datypic.com/pre";\n         declare namespace unpre = "http://datypic.com/unpre";\n         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (namespace-uri($in-xml//pre:prefixed))'
functx-fn-namespace-uri-3;PRSC Error: Failed to parse query 'declare namespace pre = "http://datypic.com/pre";\n         declare namespace unpre = "http://datypic.com/unpre";\n         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (namespace-uri($in-xml//unpre:unprefixed))'
functx-fn-namespace-uri-4;PRSC Error: Failed to parse query 'declare namespace pre = "http://datypic.com/pre";\n         declare namespace unpre = "http://datypic.com/unpre";\n         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (namespace-uri($in-xml//@pre:prefAttr))'
functx-fn-namespace-uri-5;PRSC Error: Failed to parse query 'declare namespace pre = "http://datypic.com/pre";\n         declare namespace unpre = "http://datypic.com/unpre";\n         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (namespace-uri($in-xml//@noNSAttr))'
functx-fn-namespace-uri-all;PRSC Error: Failed to parse query 'declare namespace pre = "http://datypic.com/pre";\n         declare namespace unpre = "http://datypic.com/unpre";\n         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (namespace-uri($in-xml), namespace-uri($in-xml//pre:prefixed), namespace-uri($in-xml//unpre:unprefixed), namespace-uri($in-xml//@pre:prefAttr), namespace-uri($in-xml//@noNSAttr))'
functx-fn-namespace-uri-for-prefix-1;PRSC Error: Failed to parse query 'declare namespace pre = "http://datypic.com/pre";\n         declare namespace unpre = "http://datypic.com/unpre";\n         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (namespace-uri-for-prefix( '', $in-xml))'
functx-fn-namespace-uri-for-prefix-2;PRSC Error: Failed to parse query 'declare namespace pre = "http://datypic.com/pre";\n         declare namespace unpre = "http://datypic.com/unpre";\n         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (namespace-uri-for-prefix( 'pre',$in-xml//pre:prefixed))'
functx-fn-namespace-uri-for-prefix-3;PRSC Error: Failed to parse query 'declare namespace pre = "http://datypic.com/pre";\n         declare namespace unpre = "http://datypic.com/unpre";\n         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (namespace-uri-for-prefix( '',$in-xml//unpre:unprefixed))'
functx-fn-namespace-uri-for-prefix-4;PRSC Error: Failed to parse query 'declare namespace pre = "http://datypic.com/pre";\n         declare namespace unpre = "http://datypic.com/unpre";\n         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (namespace-uri-for-prefix( 'pre',$in-xml//unpre:unprefixed))'
functx-fn-namespace-uri-for-prefix-all;PRSC Error: Failed to parse query 'declare namespace pre = "http://datypic.com/pre";\n         declare namespace unpre = "http://datypic.com/unpre";\n         let $in-xml := \n         <noNamespace> \n            <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> \n                <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> \n            </pre:prefixed> \n        </noNamespace> \n        return (namespace-uri-for-prefix('', $in-xml),\n                namespace-uri-for-prefix('pre',$in-xml//pre:prefixed),\n                namespace-uri-for-prefix('',$in-xml//unpre:unprefixed),\n                namespace-uri-for-prefix('pre',$in-xml//unpre:unprefixed))\n      '
functx-fn-namespace-uri-from-QName-1;The function namespace-uri-from-QName with arity 1 is not registered.
functx-fn-namespace-uri-from-QName-2;The function namespace-uri-from-QName with arity 1 is not registered.
functx-fn-namespace-uri-from-QName-3;The function namespace-uri-from-QName with arity 1 is not registered.
functx-fn-namespace-uri-from-QName-all;The function namespace-uri-from-QName with arity 1 is not registered.
functx-fn-nilled-1;PRSC Error: Failed to parse query 'let $in-xml := <root xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> <child>12</child> <child xsi:nil="true"></child> <child></child> <child/> <child xsi:nil="false"></child> </root> return (nilled($in-xml//child[1]))'
functx-fn-nilled-2;PRSC Error: Failed to parse query 'let $in-xml := <root xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> <child>12</child> <child xsi:nil="true"></child> <child></child> <child/> <child xsi:nil="false"></child> </root> return (nilled($in-xml//child[3]))'
functx-fn-nilled-3;PRSC Error: Failed to parse query 'let $in-xml := <root xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> <child>12</child> <child xsi:nil="true"></child> <child></child> <child/> <child xsi:nil="false"></child> </root> return (nilled($in-xml//child[4]))'
functx-fn-nilled-4;PRSC Error: Failed to parse query 'let $in-xml := <root xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> <child>12</child> <child xsi:nil="true"></child> <child></child> <child/> <child xsi:nil="false"></child> </root> return (nilled($in-xml//child[5]))'
functx-fn-nilled-all;PRSC Error: Failed to parse query 'let $in-xml := <root xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> <child>12</child> <child xsi:nil="true"></child> <child></child> <child/> <child xsi:nil="false"></child> </root> return (nilled($in-xml//child[1]), nilled($in-xml//child[3]), nilled($in-xml//child[4]), nilled($in-xml//child[5]))'
functx-fn-node-name-1;PRSC Error: Failed to parse query 'declare namespace pre2 = "http://datypic.com/pre";\n         declare namespace unpre2 = "http://datypic.com/unpre";\n         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (node-name($in-xml))'
functx-fn-node-name-2;PRSC Error: Failed to parse query 'declare namespace pre2 = "http://datypic.com/pre";\n         declare namespace unpre2 = "http://datypic.com/unpre";\n         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (node-name($in-xml/pre2:prefixed))'
functx-fn-node-name-3;PRSC Error: Failed to parse query 'declare namespace pre2 = "http://datypic.com/pre";\n         declare namespace unpre2 = "http://datypic.com/unpre";\n         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (node-name($in-xml//unpre2:unprefixed))'
functx-fn-node-name-4;PRSC Error: Failed to parse query 'declare namespace pre2 = "http://datypic.com/pre";\n         declare namespace unpre2 = "http://datypic.com/unpre";\n         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (node-name($in-xml//@pre2:prefAttr))'
functx-fn-node-name-5;PRSC Error: Failed to parse query 'declare namespace pre2 = "http://datypic.com/pre";\n         declare namespace unpre2 = "http://datypic.com/unpre";\n         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (node-name($in-xml//@noNSAttr))'
functx-fn-node-name-all;PRSC Error: Failed to parse query 'declare namespace pre2 = "http://datypic.com/pre";\n         declare namespace unpre2 = "http://datypic.com/unpre";\n         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (node-name($in-xml), node-name($in-xml/pre2:prefixed), node-name($in-xml//unpre2:unprefixed), node-name($in-xml//@pre2:prefAttr), node-name($in-xml//@noNSAttr))'
functx-fn-normalize-space-8;Object reference not set to an instance of an object.
functx-fn-normalize-space-9;PRSC Error: Failed to parse query '(normalize-space( <element> query </element>))'
functx-fn-normalize-space-all;PRSC Error: Failed to parse query '(normalize-space('query'), normalize-space(' query '), normalize-space('xml query'), normalize-space('xml query'), normalize-space('xml query'), normalize-space(''), normalize-space(' '), normalize-space(()), normalize-space( <element> query </element>))'
functx-fn-normalize-unicode-1;The function normalize-unicode with arity 1 is not registered.
functx-fn-normalize-unicode-2;The function normalize-unicode with arity 2 is not registered.
functx-fn-normalize-unicode-all;The function normalize-unicode with arity 1 is not registered.
functx-fn-not-7;PRSC Error: Failed to parse query '(not(<e>false</e>))'
functx-fn-not-all;PRSC Error: Failed to parse query '(not(32 > 20), not((/) //product), not(true()), not(()), not(''), not(0), not(<e>false</e>))'
functx-fn-number-2;Expected XPath let $priceDoc := (/) return (number( $priceDoc//prod[1]/@currency)) to resolve to NaN, but instead got Infinity
functx-fn-number-4;Input string was not in a correct format.
functx-fn-number-5;Expected XPath let $priceDoc := (/) return (number( () )) to resolve to NaN, but instead got Infinity
functx-fn-number-all;Input string was not in a correct format.
functx-fn-position-1;PRSC Error: Failed to parse query 'let $in-xml := <in-xml> <a>1</a> <c>2</c> <a>3</a> <a>4</a> <a>5</a> </in-xml> return ($in-xml/*[position() > 2])'
functx-fn-position-2;PRSC Error: Failed to parse query 'let $in-xml := <in-xml> <a>1</a> <c>2</c> <a>3</a> <a>4</a> <a>5</a> </in-xml> return ($in-xml/a[position() > 2])'
functx-fn-position-3;PRSC Error: Failed to parse query 'let $in-xml := <in-xml> <a>1</a> <c>2</c> <a>3</a> <a>4</a> <a>5</a> </in-xml> return ($in-xml/a[position() = 3])'
functx-fn-position-all;PRSC Error: Failed to parse query 'let $in-xml := <in-xml> <a>1</a> <c>2</c> <a>3</a> <a>4</a> <a>5</a> </in-xml> return ($in-xml/*[position() > 2], $in-xml/a[position() > 2], $in-xml/a[position() = 3])'
functx-fn-prefix-from-QName-1;PRSC Error: Failed to parse query 'declare namespace pre2 = "http://datypic.com/pre";\n         declare namespace unpre = "http://datypic.com/unpre";\n         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (prefix-from-QName( node-name($in-xml)))'
functx-fn-prefix-from-QName-2;PRSC Error: Failed to parse query 'declare namespace pre2 = "http://datypic.com/pre";\n         declare namespace unpre = "http://datypic.com/unpre";\n         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (prefix-from-QName( node-name($in-xml//pre2:prefixed)))'
functx-fn-prefix-from-QName-3;PRSC Error: Failed to parse query 'declare namespace pre2 = "http://datypic.com/pre";\n         declare namespace unpre = "http://datypic.com/unpre";\n         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (prefix-from-QName( node-name($in-xml//unpre:unprefixed)))'
functx-fn-prefix-from-QName-4;PRSC Error: Failed to parse query 'declare namespace pre2 = "http://datypic.com/pre";\n         declare namespace unpre = "http://datypic.com/unpre";\n         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (prefix-from-QName( node-name($in-xml//@pre2:prefAttr)))'
functx-fn-prefix-from-QName-5;PRSC Error: Failed to parse query 'declare namespace pre2 = "http://datypic.com/pre";\n         declare namespace unpre = "http://datypic.com/unpre";\n         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (prefix-from-QName( node-name($in-xml//@noNSAttr)))'
functx-fn-prefix-from-QName-6;PRSC Error: Failed to parse query 'declare namespace pre2 = "http://datypic.com/pre";\n         declare namespace unpre = "http://datypic.com/unpre";\n         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (prefix-from-QName( node-name(<pre2:new>xyz</pre2:new>)))'
functx-fn-prefix-from-QName-all;PRSC Error: Failed to parse query 'declare namespace pre2 = "http://datypic.com/pre";\n         declare namespace unpre = "http://datypic.com/unpre";\n         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (prefix-from-QName( node-name($in-xml)), prefix-from-QName( node-name($in-xml//pre2:prefixed)), prefix-from-QName( node-name($in-xml//unpre:unprefixed)), prefix-from-QName( node-name($in-xml//@pre2:prefAttr)), prefix-from-QName( node-name($in-xml//@noNSAttr)), prefix-from-QName( node-name(<pre2:new>xyz</pre2:new>)))'
functx-fn-QName-1;Haven't implemented Qnames from: product:
functx-fn-QName-2;Haven't implemented Qnames from: product:pre
functx-fn-QName-3;Haven't implemented Qnames from: product:
functx-fn-QName-all;Haven't implemented Qnames from: product:
functx-fn-resolve-QName-1;PRSC Error: Failed to parse query 'declare namespace ord = "http://datypic.com/ord";\n         declare namespace dty = "http://datypic.com";\n         declare namespace dty2 = "http://datypic.com/ns2";\n         let $root := <root> <order xmlns:ord="http://datypic.com/ord" xmlns="http://datypic.com"> <!-- ... --> </order> </root> return (resolve-QName('myName', $root))'
functx-fn-resolve-QName-2;PRSC Error: Failed to parse query 'declare namespace ord = "http://datypic.com/ord";\n         declare namespace dty = "http://datypic.com";\n         declare namespace dty2 = "http://datypic.com/ns2";\n         let $root := <root> <order xmlns:ord="http://datypic.com/ord" xmlns="http://datypic.com"> <!-- ... --> </order> </root> return (resolve-QName('myName', $root/dty:order))'
functx-fn-resolve-QName-3;PRSC Error: Failed to parse query 'declare namespace ord = "http://datypic.com/ord";\n         declare namespace dty = "http://datypic.com";\n         declare namespace dty2 = "http://datypic.com/ns2";\n         let $root := <root> <order xmlns:ord="http://datypic.com/ord" xmlns="http://datypic.com"> <!-- ... --> </order> </root> return (resolve-QName( 'ord:myName', $root/dty:order))'
functx-fn-resolve-QName-all;PRSC Error: Failed to parse query 'declare namespace ord = "http://datypic.com/ord";\n         declare namespace dty = "http://datypic.com";\n         declare namespace dty2 = "http://datypic.com/ns2";\n         let $root := <root> <order xmlns:ord="http://datypic.com/ord" xmlns="http://datypic.com"> <!-- ... --> </order> </root> return (resolve-QName('myName', $root), resolve-QName('myName', $root/dty:order), resolve-QName( 'ord:myName', $root/dty:order))'
functx-fn-resolve-uri-1;The function resolve-uri with arity 2 is not registered.
functx-fn-resolve-uri-2;The function resolve-uri with arity 2 is not registered.
functx-fn-resolve-uri-3;The function resolve-uri with arity 2 is not registered.
functx-fn-resolve-uri-4;Expected executing the XPath '(resolve-uri( 'http://datypic.com', '../base'))' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function resolve-uri with arity 2 is not registered.
functx-fn-resolve-uri-5;Expected executing the XPath '(resolve-uri( '', 'http://datypic.com'))' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function resolve-uri with arity 2 is not registered.
functx-fn-resolve-uri-all;The function resolve-uri with arity 2 is not registered.
functx-fn-root-1;PRSC Error: Failed to parse query 'let $in-xml := <a><x>123</x></a> return (root( (/) //item[1]))'
functx-fn-root-2;PRSC Error: Failed to parse query 'let $in-xml := <a><x>123</x></a> return (root($in-xml/x))'
functx-fn-root-all;PRSC Error: Failed to parse query '\n         let $in-xml := <a><x>123</x></a> \n         return document{(root( (/) //item[1]), root($in-xml/x))}\n      '
functx-fn-round-4;Value was either too large or too small for a Decimal.
functx-fn-round-5;Value was either too large or too small for a Decimal.
functx-fn-round-all;Expected XPath (round(5), round(5.1), round(5.5), round(-5.5), round(-5.51)) to resolve to 5 5 6 -5 -6, but instead got 5 5 6 Infinity Infinity
functx-fn-seconds-from-dateTime-1;The function seconds-from-dateTime with arity 1 is not registered.
functx-fn-seconds-from-duration-1;The function seconds-from-duration with arity 1 is not registered.
functx-fn-seconds-from-duration-2;The function seconds-from-duration with arity 1 is not registered.
functx-fn-seconds-from-duration-3;The function seconds-from-duration with arity 1 is not registered.
functx-fn-seconds-from-duration-4;The function seconds-from-duration with arity 1 is not registered.
functx-fn-seconds-from-duration-all;The function seconds-from-duration with arity 1 is not registered.
functx-fn-seconds-from-time-1;The function seconds-from-time with arity 1 is not registered.
functx-fn-starts-with-all;Expected XPath (starts-with('query', 'que'), starts-with('query', 'query'), starts-with('query', 'u'), starts-with('query', ''), starts-with('', 'query'), starts-with('', ''), starts-with('query', ()), starts-with(' query', 'q')) to resolve to true true false true false true true false, but instead got True True False True False True True False
functx-fn-string-1;PRSC Error: Failed to parse query 'let $in-xml-2 := <product dept="MEN"> <number>784</number> <name language="en">Cotton Dress Shirt</name> <colorChoices>white gray</colorChoices> <desc>Our <i>favorite</i> shirt!</desc> </product> return (string($in-xml-2/number))'
functx-fn-string-2;PRSC Error: Failed to parse query 'let $in-xml-2 := <product dept="MEN"> <number>784</number> <name language="en">Cotton Dress Shirt</name> <colorChoices>white gray</colorChoices> <desc>Our <i>favorite</i> shirt!</desc> </product> return (string($in-xml-2/desc))'
functx-fn-string-3;PRSC Error: Failed to parse query 'let $in-xml-2 := <product dept="MEN"> <number>784</number> <name language="en">Cotton Dress Shirt</name> <colorChoices>white gray</colorChoices> <desc>Our <i>favorite</i> shirt!</desc> </product> return (string($in-xml-2/@dept))'
functx-fn-string-all;PRSC Error: Failed to parse query 'let $in-xml-2 := <product dept="MEN"> <number>784</number> <name language="en">Cotton Dress Shirt</name> <colorChoices>white gray</colorChoices> <desc>Our <i>favorite</i> shirt!</desc> </product> return (string($in-xml-2/number), string($in-xml-2/desc), string($in-xml-2/@dept))'
functx-fn-string-length-6;Object reference not set to an instance of an object.
functx-fn-string-length-all;Object reference not set to an instance of an object.
functx-fn-substring-5;Index and length must refer to a location within the string. (Parameter 'length')
functx-fn-substring-6;Index and length must refer to a location within the string. (Parameter 'length')
functx-fn-substring-all;Index and length must refer to a location within the string. (Parameter 'length')
functx-fn-sum-2;Items passed to fn:sum are not all numeric.
functx-fn-sum-3;Items passed to fn:sum are not all numeric.
functx-fn-sum-all;Items passed to fn:sum are not all numeric.
functx-fn-timezone-from-date-1;The function timezone-from-date with arity 1 is not registered.
functx-fn-timezone-from-date-2;The function timezone-from-date with arity 1 is not registered.
functx-fn-timezone-from-date-all;The function timezone-from-date with arity 1 is not registered.
functx-fn-timezone-from-dateTime-1;The function timezone-from-dateTime with arity 1 is not registered.
functx-fn-timezone-from-dateTime-2;The function timezone-from-dateTime with arity 1 is not registered.
functx-fn-timezone-from-dateTime-all;The function timezone-from-dateTime with arity 1 is not registered.
functx-fn-timezone-from-time-1;The function timezone-from-time with arity 1 is not registered.
functx-fn-timezone-from-time-2;The function timezone-from-time with arity 1 is not registered.
functx-fn-timezone-from-time-3;The function timezone-from-time with arity 1 is not registered.
functx-fn-timezone-from-time-4;The function timezone-from-time with arity 1 is not registered.
functx-fn-timezone-from-time-all;The function timezone-from-time with arity 1 is not registered.
functx-fn-tokenize-1;Expected XPath (tokenize( 'a b c', '\s')) to resolve to a b c, but instead got    
functx-fn-tokenize-11;Expected XPath (tokenize( 'abc', '\s')) to resolve to abc, but instead got 
functx-fn-tokenize-12;Expected XPath (tokenize( 'a,xb,xc', ',|,x')) to resolve to a xb xc, but instead got , ,
functx-fn-tokenize-1a;The function tokenize with arity 1 is not registered.
functx-fn-tokenize-1b;The function tokenize with arity 1 is not registered.
functx-fn-tokenize-2;Expected XPath string-join(tokenize( 'a    b c', '\s'), '|') to resolve to a||||b|c, but instead got  | | | | 
functx-fn-tokenize-3;Expected XPath (tokenize( 'a b c', '\s+')) to resolve to a b c, but instead got    
functx-fn-tokenize-4;Expected XPath (tokenize( ' b c', '\s')) to resolve to  b c, but instead got    
functx-fn-tokenize-5;Expected XPath (tokenize( 'a,b,c', ',')) to resolve to a b c, but instead got , ,
functx-fn-tokenize-6;Expected XPath (tokenize( 'a,b,,c', ',')) to resolve to a b  c, but instead got , , ,
functx-fn-tokenize-7;Expected XPath (tokenize( 'a, b, c', '[,\s]+')) to resolve to a b c, but instead got ,  , 
functx-fn-tokenize-8;Expected XPath (tokenize( '2006-12-25T12:15:00', '[\-T:]')) to resolve to 2006 12 25 12 15 00, but instead got - - T : :
functx-fn-tokenize-9;Expected XPath (tokenize( 'Hello, there.', '\W+')) to resolve to Hello there , but instead got ,  .
functx-fn-tokenize-all;Expected XPath (tokenize( 'a b c', '\s'), tokenize( 'a b c', '\s'), tokenize( 'a b c', '\s+'), tokenize( ' b c', '\s'), tokenize( 'a,b,c', ','), tokenize( 'a,b,,c', ','), tokenize( 'a, b, c', '[,\s]+'), tokenize( '2006-12-25T12:15:00', '[\-T:]'), tokenize( 'Hello, there.', '\W+'), tokenize( (), '\s+'), tokenize( 'abc', '\s'), tokenize( 'a,xb,xc', ',|,x')) to resolve to a b c a b c a b c  b c a b c a b  c a b c 2006 12 25 12 15 00 Hello there  abc a xb xc, but instead got                 , , , , , ,  ,  - - T : : ,  . , ,
functx-fn-translate-3;Index was outside the bounds of the array.
functx-fn-translate-4;Index was outside the bounds of the array.
functx-fn-translate-all;Index was outside the bounds of the array.
functx-fn-year-from-date-1;The function year-from-date with arity 1 is not registered.
functx-fn-year-from-dateTime-1;The function year-from-dateTime with arity 1 is not registered.
functx-fn-years-from-duration-1;The function years-from-duration with arity 1 is not registered.
functx-fn-years-from-duration-2;The function years-from-duration with arity 1 is not registered.
functx-fn-years-from-duration-3;The function years-from-duration with arity 1 is not registered.
functx-fn-years-from-duration-4;The function years-from-duration with arity 1 is not registered.
functx-fn-years-from-duration-5;The function years-from-duration with arity 1 is not registered.
functx-fn-years-from-duration-all;The function years-from-duration with arity 1 is not registered.
functx-functx-add-attributes-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n            declare namespace new = "http://new";\n            (:~ \n               : Adds attributes to XML elements : \n               : @author Priscilla Walmsley, Datypic \n               : @version 1.0 \n               : @see http://www.xqueryfunctions.com/xq/functx_add-attributes.html \n               : @param $elements the element(s) to which you wish to add the attribute \n               : @param $attrNames the name(s) of the attribute(s) to add \n               : @param $attrValues the value(s) of the attribute(s) to add :)\n            declare function functx:add-attributes ( $elements as element()* , $attrNames as xs:QName* , $attrValues as xs:anyAtomicType* ) as element()? { \n               for $element in $elements return element { node-name($element)} { \n                  for $attrName at $seq in $attrNames return                     \n                    if ($element/@*[node-name(.) = $attrName]) then () else attribute {$attrName} {$attrValues[$seq]}, $element/@*, $element/node() } \n            } ;\n            let $in-xml := <in-xml> <a>x</a> <b att1="x">x</b> </in-xml> \n            return (functx:add-attributes( $in-xml/a, xs:QName('att1'), 1))\n      '
functx-functx-add-attributes-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n         declare namespace new = "http://new";\n         (:~ \n            : Adds attributes to XML elements : \n            : @author Priscilla Walmsley, Datypic \n            : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_add-attributes.html \n            : @param $elements the element(s) to which you wish to add the attribute \n            : @param $attrNames the name(s) of the attribute(s) to add \n            : @param $attrValues the value(s) of the attribute(s) to add :)\n         declare function functx:add-attributes ( $elements as element()* , $attrNames as xs:QName* , $attrValues as xs:anyAtomicType* ) as element()? { \n            for $element in $elements \n            return element { node-name($element)} { \n               for $attrName at $seq in $attrNames \n               return if ($element/@*[node-name(.) = $attrName]) then () else attribute {$attrName} {$attrValues[$seq]}, $element/@*, $element/node() } \n         } ;\n         let $in-xml := <in-xml> <a>x</a> <b att1="x">x</b> </in-xml> \n         return (functx:add-attributes( $in-xml/a, (xs:QName('att1'),xs:QName('att2')), (1,2)))\n      '
functx-functx-add-attributes-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n         declare namespace new = "http://new";\n         (:~ \n            : Adds attributes to XML elements : \n            : @author Priscilla Walmsley, Datypic \n            : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_add-attributes.html \n            : @param $elements the element(s) to which you wish to add the attribute \n            : @param $attrNames the name(s) of the attribute(s) to add \n            : @param $attrValues the value(s) of the attribute(s) to add :)\n         declare function functx:add-attributes ( $elements as element()* , $attrNames as xs:QName* , $attrValues as xs:anyAtomicType* ) as element()? { \n            for $element in $elements \n            return element { node-name($element)} { \n               for $attrName at $seq in $attrNames \n               return if ($element/@*[node-name(.) = $attrName]) then () else attribute {$attrName} {$attrValues[$seq]}, $element/@*, $element/node() } \n         } ;\n         let $in-xml := <in-xml> <a>x</a> <b att1="x">x</b> </in-xml> \n         return (functx:add-attributes( $in-xml/b, (xs:QName('att1'),xs:QName('att2')), (1,2)))\n      '
functx-functx-add-attributes-4;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n         declare namespace new = "http://new";\n                    (:~ : Adds attributes to XML elements : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_add-attributes.html : @param $elements the element(s) to which you wish to add the attribute : @param $attrNames the name(s) of the attribute(s) to add : @param $attrValues the value(s) of the attribute(s) to add :)\n         declare function functx:add-attributes ( $elements as element()* , $attrNames as xs:QName* , $attrValues as xs:anyAtomicType* ) as element()? { \n            for $element in $elements return element { node-name($element)} { \n               for $attrName at $seq in $attrNames \n               return if ($element/@*[node-name(.) = $attrName]) then () else attribute {$attrName} {$attrValues[$seq]}, $element/@*, $element/node() } \n         } ;\n         let $in-xml := <in-xml> <a>x</a> <b att1="x">x</b> </in-xml> \n         return (functx:add-attributes( $in-xml/a, xs:QName('new:att1'), 1))\n      '
functx-functx-add-attributes-5;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n         declare namespace new = "http://new";\n                    (:~ : Adds attributes to XML elements : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_add-attributes.html : @param $elements the element(s) to which you wish to add the attribute : @param $attrNames the name(s) of the attribute(s) to add : @param $attrValues the value(s) of the attribute(s) to add :)\n         declare function functx:add-attributes ( $elements as element()* , $attrNames as xs:QName* , $attrValues as xs:anyAtomicType* ) as element()? { \n            for $element in $elements \n            return element { node-name($element)} { \n               for $attrName at $seq in $attrNames \n               return if ($element/@*[node-name(.) = $attrName]) then () else attribute {$attrName} {$attrValues[$seq]}, $element/@*, $element/node() } \n            } ;\n         let $in-xml := <in-xml> <a>x</a> <b att1="x">x</b> </in-xml> \n         return (functx:add-attributes( $in-xml/a, QName('http://new','new:att1'), 1))\n      '
functx-functx-add-attributes-all;PRSC Error: Failed to parse query '\n         declare namespace functx = "http://www.example.com/";\n         declare namespace new = "http://new";\n         (:~ \n            : Adds attributes to XML elements : \n            : @author Priscilla Walmsley, Datypic \n            : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_add-attributes.html \n            : @param $elements the element(s) to which you wish to add the attribute \n            : @param $attrNames the name(s) of the attribute(s) to add \n            : @param $attrValues the value(s) of the attribute(s) to add :)\n         declare function functx:add-attributes ( $elements as element()* , $attrNames as xs:QName* , $attrValues as xs:anyAtomicType* ) as element()? { \n            for $element in $elements \n            return element { node-name($element)} { \n               for $attrName at $seq in $attrNames \n               return if ($element/@*[node-name(.) = $attrName]) then () else attribute {$attrName} {$attrValues[$seq]}, $element/@*, $element/node() } \n         } ;\n         let $in-xml := <in-xml> <a>x</a> <b att1="x">x</b> </in-xml> \n         return (functx:add-attributes( $in-xml/a, xs:QName('att1'), 1), \n                  functx:add-attributes( $in-xml/a, (xs:QName('att1'),xs:QName('att2')), (1,2)), \n                  functx:add-attributes( $in-xml/b, (xs:QName('att1'),xs:QName('att2')), (1,2)), \n                  functx:add-attributes( $in-xml/a, xs:QName('new:att1'), 1), \n                  functx:add-attributes( $in-xml/a, QName('http://new','new:att1'), 1))\n      '
functx-functx-add-months-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Adds months to a date : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_add-months.html : @param $date the date : @param $months the number of months to add :)\n         declare function functx:add-months ( $date as xs:anyAtomicType? , $months as xs:integer ) as xs:date? { xs:date($date) + functx:yearMonthDuration(0,$months) } ;\n                    (:~ : The first argument if it is not blank, otherwise the second argument : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_if-empty.html : @param $arg the node that may be empty : @param $value the item(s) to use if the node is empty :)\n         declare function functx:if-empty ( $arg as item()? , $value as item()* ) as item()* { if (string($arg) != '') then data($arg) else $value } ;\n                    (:~ : Construct a yearMonthDuration from a number of years and months : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_yearmonthduration.html : @param $years the number of years : @param $months the number of months :)\n         declare function functx:yearMonthDuration ( $years as xs:decimal? , $months as xs:integer? ) as xs:yearMonthDuration { (xs:yearMonthDuration('P1M') * functx:if-empty($months,0)) + (xs:yearMonthDuration('P1Y') * functx:if-empty($years,0)) } ;\n                    (functx:add-months(xs:date('2004-01-23'),1))'
functx-functx-add-months-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Adds months to a date : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_add-months.html : @param $date the date : @param $months the number of months to add :)\n         declare function functx:add-months ( $date as xs:anyAtomicType? , $months as xs:integer ) as xs:date? { xs:date($date) + functx:yearMonthDuration(0,$months) } ;\n                    (:~ : The first argument if it is not blank, otherwise the second argument : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_if-empty.html : @param $arg the node that may be empty : @param $value the item(s) to use if the node is empty :)\n         declare function functx:if-empty ( $arg as item()? , $value as item()* ) as item()* { if (string($arg) != '') then data($arg) else $value } ;\n                    (:~ : Construct a yearMonthDuration from a number of years and months : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_yearmonthduration.html : @param $years the number of years : @param $months the number of months :)\n         declare function functx:yearMonthDuration ( $years as xs:decimal? , $months as xs:integer? ) as xs:yearMonthDuration { (xs:yearMonthDuration('P1M') * functx:if-empty($months,0)) + (xs:yearMonthDuration('P1Y') * functx:if-empty($years,0)) } ;\n                    (functx:add-months( xs:dateTime('2005-12-31T12:00:13'),2))'
functx-functx-add-months-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Adds months to a date : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_add-months.html : @param $date the date : @param $months the number of months to add :)\n         declare function functx:add-months ( $date as xs:anyAtomicType? , $months as xs:integer ) as xs:date? { xs:date($date) + functx:yearMonthDuration(0,$months) } ;\n                    (:~ : The first argument if it is not blank, otherwise the second argument : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_if-empty.html : @param $arg the node that may be empty : @param $value the item(s) to use if the node is empty :)\n         declare function functx:if-empty ( $arg as item()? , $value as item()* ) as item()* { if (string($arg) != '') then data($arg) else $value } ;\n                    (:~ : Construct a yearMonthDuration from a number of years and months : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_yearmonthduration.html : @param $years the number of years : @param $months the number of months :)\n         declare function functx:yearMonthDuration ( $years as xs:decimal? , $months as xs:integer? ) as xs:yearMonthDuration { (xs:yearMonthDuration('P1M') * functx:if-empty($months,0)) + (xs:yearMonthDuration('P1Y') * functx:if-empty($years,0)) } ;\n                    (functx:add-months('2005-12-31',-3))'
functx-functx-add-months-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Adds months to a date : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_add-months.html : @param $date the date : @param $months the number of months to add :)\n         declare function functx:add-months ( $date as xs:anyAtomicType? , $months as xs:integer ) as xs:date? { xs:date($date) + functx:yearMonthDuration(0,$months) } ;\n                    (:~ : The first argument if it is not blank, otherwise the second argument : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_if-empty.html : @param $arg the node that may be empty : @param $value the item(s) to use if the node is empty :)\n         declare function functx:if-empty ( $arg as item()? , $value as item()* ) as item()* { if (string($arg) != '') then data($arg) else $value } ;\n                    (:~ : Construct a yearMonthDuration from a number of years and months : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_yearmonthduration.html : @param $years the number of years : @param $months the number of months :)\n         declare function functx:yearMonthDuration ( $years as xs:decimal? , $months as xs:integer? ) as xs:yearMonthDuration { (xs:yearMonthDuration('P1M') * functx:if-empty($months,0)) + (xs:yearMonthDuration('P1Y') * functx:if-empty($years,0)) } ;\n                    (functx:add-months(xs:date('2004-01-23'),1), functx:add-months( xs:dateTime('2005-12-31T12:00:13'),2), functx:add-months('2005-12-31',-3))'
functx-functx-add-or-update-attributes-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n         declare namespace new = "http://new";\n                    (:~ : Adds attributes to XML elements : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_add-or-update-attributes.html : @param $elements the element(s) to which you wish to add the attribute : @param $attrNames the name(s) of the attribute(s) to add : @param $attrValues the value(s) of the attribute(s) to add :)\n         declare function functx:add-or-update-attributes ( $elements as element()* , $attrNames as xs:QName* , $attrValues as xs:anyAtomicType* ) as element()? { for $element in $elements return element { node-name($element)} { for $attrName at $seq in $attrNames return attribute {$attrName} {$attrValues[$seq]}, $element/@*[not(node-name(.) = $attrNames)], $element/node() } } ;\n                    let $in-xml := <in-xml> <a>x</a> <b att1="x">x</b> </in-xml> return (functx:add-or-update-attributes( $in-xml/a, xs:QName('att1'), 1))'
functx-functx-add-or-update-attributes-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n         declare namespace new = "http://new";\n                    (:~ : Adds attributes to XML elements : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_add-or-update-attributes.html : @param $elements the element(s) to which you wish to add the attribute : @param $attrNames the name(s) of the attribute(s) to add : @param $attrValues the value(s) of the attribute(s) to add :)\n         declare function functx:add-or-update-attributes ( $elements as element()* , $attrNames as xs:QName* , $attrValues as xs:anyAtomicType* ) as element()? { for $element in $elements return element { node-name($element)} { for $attrName at $seq in $attrNames return attribute {$attrName} {$attrValues[$seq]}, $element/@*[not(node-name(.) = $attrNames)], $element/node() } } ;\n                    let $in-xml := <in-xml> <a>x</a> <b att1="x">x</b> </in-xml> return (functx:add-or-update-attributes( $in-xml/a, (xs:QName('att1'),xs:QName('att2')), (1,2)))'
functx-functx-add-or-update-attributes-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n         declare namespace new = "http://new";\n                    (:~ : Adds attributes to XML elements : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_add-or-update-attributes.html : @param $elements the element(s) to which you wish to add the attribute : @param $attrNames the name(s) of the attribute(s) to add : @param $attrValues the value(s) of the attribute(s) to add :)\n         declare function functx:add-or-update-attributes ( $elements as element()* , $attrNames as xs:QName* , $attrValues as xs:anyAtomicType* ) as element()? { for $element in $elements return element { node-name($element)} { for $attrName at $seq in $attrNames return attribute {$attrName} {$attrValues[$seq]}, $element/@*[not(node-name(.) = $attrNames)], $element/node() } } ;\n                    let $in-xml := <in-xml> <a>x</a> <b att1="x">x</b> </in-xml> return (functx:add-or-update-attributes( $in-xml/b, (xs:QName('att1'),xs:QName('att2')), (1,2)))'
functx-functx-add-or-update-attributes-4;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n         declare namespace new = "http://new";\n                    (:~ : Adds attributes to XML elements : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_add-or-update-attributes.html : @param $elements the element(s) to which you wish to add the attribute : @param $attrNames the name(s) of the attribute(s) to add : @param $attrValues the value(s) of the attribute(s) to add :)\n         declare function functx:add-or-update-attributes ( $elements as element()* , $attrNames as xs:QName* , $attrValues as xs:anyAtomicType* ) as element()? { for $element in $elements return element { node-name($element)} { for $attrName at $seq in $attrNames return attribute {$attrName} {$attrValues[$seq]}, $element/@*[not(node-name(.) = $attrNames)], $element/node() } } ;\n                    let $in-xml := <in-xml> <a>x</a> <b att1="x">x</b> </in-xml> return (functx:add-or-update-attributes( $in-xml/a, xs:QName('new:att1'), 1))'
functx-functx-add-or-update-attributes-5;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n         declare namespace new = "http://new";\n                    (:~ : Adds attributes to XML elements : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_add-or-update-attributes.html : @param $elements the element(s) to which you wish to add the attribute : @param $attrNames the name(s) of the attribute(s) to add : @param $attrValues the value(s) of the attribute(s) to add :)\n         declare function functx:add-or-update-attributes ( $elements as element()* , $attrNames as xs:QName* , $attrValues as xs:anyAtomicType* ) as element()? { for $element in $elements return element { node-name($element)} { for $attrName at $seq in $attrNames return attribute {$attrName} {$attrValues[$seq]}, $element/@*[not(node-name(.) = $attrNames)], $element/node() } } ;\n                    let $in-xml := <in-xml> <a>x</a> <b att1="x">x</b> </in-xml> return (functx:add-or-update-attributes( $in-xml/a, QName('http://new','new:att1'), 1))'
functx-functx-add-or-update-attributes-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n         declare namespace new = "http://new";\n                    (:~ : Adds attributes to XML elements : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_add-or-update-attributes.html : @param $elements the element(s) to which you wish to add the attribute : @param $attrNames the name(s) of the attribute(s) to add : @param $attrValues the value(s) of the attribute(s) to add :)\n         declare function functx:add-or-update-attributes ( $elements as element()* , $attrNames as xs:QName* , $attrValues as xs:anyAtomicType* ) as element()? { for $element in $elements return element { node-name($element)} { for $attrName at $seq in $attrNames return attribute {$attrName} {$attrValues[$seq]}, $element/@*[not(node-name(.) = $attrNames)], $element/node() } } ;\n                    let $in-xml := <in-xml> <a>x</a> <b att1="x">x</b> </in-xml> return (functx:add-or-update-attributes( $in-xml/a, xs:QName('att1'), 1), functx:add-or-update-attributes( $in-xml/a, (xs:QName('att1'),xs:QName('att2')), (1,2)), functx:add-or-update-attributes( $in-xml/b, (xs:QName('att1'),xs:QName('att2')), (1,2)), functx:add-or-update-attributes( $in-xml/a, xs:QName('new:att1'), 1), functx:add-or-update-attributes( $in-xml/a, QName('http://new','new:att1'), 1))'
functx-functx-all-whitespace-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a value is all whitespace or a zero-length string : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_all-whitespace.html : @param $arg the string (or node) to test :)\n         declare function functx:all-whitespace ( $arg as xs:string? ) as xs:boolean { normalize-space($arg) = '' } ;\n                    let $in-xml := <in-xml> <a> </a> <b>x </b> <c> <x>x</x> </c> </in-xml> return (functx:all-whitespace(' '))'
functx-functx-all-whitespace-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a value is all whitespace or a zero-length string : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_all-whitespace.html : @param $arg the string (or node) to test :)\n         declare function functx:all-whitespace ( $arg as xs:string? ) as xs:boolean { normalize-space($arg) = '' } ;\n                    let $in-xml := <in-xml> <a> </a> <b>x </b> <c> <x>x</x> </c> </in-xml> return (functx:all-whitespace(' x '))'
functx-functx-all-whitespace-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a value is all whitespace or a zero-length string : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_all-whitespace.html : @param $arg the string (or node) to test :)\n         declare function functx:all-whitespace ( $arg as xs:string? ) as xs:boolean { normalize-space($arg) = '' } ;\n                    let $in-xml := <in-xml> <a> </a> <b>x </b> <c> <x>x</x> </c> </in-xml> return (functx:all-whitespace($in-xml/a))'
functx-functx-all-whitespace-4;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a value is all whitespace or a zero-length string : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_all-whitespace.html : @param $arg the string (or node) to test :)\n         declare function functx:all-whitespace ( $arg as xs:string? ) as xs:boolean { normalize-space($arg) = '' } ;\n                    let $in-xml := <in-xml> <a> </a> <b>x </b> <c> <x>x</x> </c> </in-xml> return (functx:all-whitespace($in-xml/b))'
functx-functx-all-whitespace-5;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a value is all whitespace or a zero-length string : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_all-whitespace.html : @param $arg the string (or node) to test :)\n         declare function functx:all-whitespace ( $arg as xs:string? ) as xs:boolean { normalize-space($arg) = '' } ;\n                    let $in-xml := <in-xml> <a> </a> <b>x </b> <c> <x>x</x> </c> </in-xml> return (functx:all-whitespace($in-xml/c))'
functx-functx-all-whitespace-6;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a value is all whitespace or a zero-length string : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_all-whitespace.html : @param $arg the string (or node) to test :)\n         declare function functx:all-whitespace ( $arg as xs:string? ) as xs:boolean { normalize-space($arg) = '' } ;\n                    let $in-xml := <in-xml> <a> </a> <b>x </b> <c> <x>x</x> </c> </in-xml> return (functx:all-whitespace($in-xml/c/text()[1]))'
functx-functx-all-whitespace-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a value is all whitespace or a zero-length string : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_all-whitespace.html : @param $arg the string (or node) to test :)\n         declare function functx:all-whitespace ( $arg as xs:string? ) as xs:boolean { normalize-space($arg) = '' } ;\n                    let $in-xml := <in-xml> <a> </a> <b>x </b> <c> <x>x</x> </c> </in-xml> return (functx:all-whitespace(' '), functx:all-whitespace(' x '), functx:all-whitespace($in-xml/a), functx:all-whitespace($in-xml/b), functx:all-whitespace($in-xml/c), functx:all-whitespace($in-xml/c/text()[1]))'
functx-functx-are-distinct-values-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether all the values in a sequence are distinct : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_are-distinct-values.html : @param $seq the sequence of values :)\n         declare function functx:are-distinct-values ( $seq as xs:anyAtomicType* ) as xs:boolean { count(distinct-values($seq)) = count($seq) } ;\n                    (functx:are-distinct-values( (1,2,1,3)))'
functx-functx-are-distinct-values-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether all the values in a sequence are distinct : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_are-distinct-values.html : @param $seq the sequence of values :)\n         declare function functx:are-distinct-values ( $seq as xs:anyAtomicType* ) as xs:boolean { count(distinct-values($seq)) = count($seq) } ;\n                    (functx:are-distinct-values( (1,2,1,3,2.0)))'
functx-functx-are-distinct-values-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether all the values in a sequence are distinct : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_are-distinct-values.html : @param $seq the sequence of values :)\n         declare function functx:are-distinct-values ( $seq as xs:anyAtomicType* ) as xs:boolean { count(distinct-values($seq)) = count($seq) } ;\n                    (functx:are-distinct-values( (1,2,3) ))'
functx-functx-are-distinct-values-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether all the values in a sequence are distinct : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_are-distinct-values.html : @param $seq the sequence of values :)\n         declare function functx:are-distinct-values ( $seq as xs:anyAtomicType* ) as xs:boolean { count(distinct-values($seq)) = count($seq) } ;\n                    (functx:are-distinct-values( (1,2,1,3)), functx:are-distinct-values( (1,2,1,3,2.0)), functx:are-distinct-values( (1,2,3) ))'
functx-functx-atomic-type-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The built-in type of an atomic value : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_atomic-type.html : @param $values the value(s) whose type you want to determine :)\n         declare function functx:atomic-type ( $values as xs:anyAtomicType* ) as xs:string* { for $val in $values return (if ($val instance of xs:untypedAtomic) then 'xs:untypedAtomic' else if ($val instance of xs:anyURI) then 'xs:anyURI' else if ($val instance of xs:ENTITY) then 'xs:ENTITY' else if ($val instance of xs:ID) then 'xs:ID' else if ($val instance of xs:NMTOKEN) then 'xs:NMTOKEN' else if ($val instance of xs:language) then 'xs:language' else if ($val instance of xs:NCName) then 'xs:NCName' else if ($val instance of xs:Name) then 'xs:Name' else if ($val instance of xs:token) then 'xs:token' else if ($val instance of xs:normalizedString) then 'xs:normalizedString' else if ($val instance of xs:string) then 'xs:string' else if ($val instance of xs:QName) then 'xs:QName' else if ($val instance of xs:boolean) then 'xs:boolean' else if ($val instance of xs:base64Binary) then 'xs:base64Binary' else if ($val instance of xs:hexBinary) then 'xs:hexBinary' else if ($val instance of xs:byte) then 'xs:byte' else if ($val instance of xs:short) then 'xs:short' else if ($val instance of xs:int) then 'xs:int' else if ($val instance of xs:long) then 'xs:long' else if ($val instance of xs:unsignedByte) then 'xs:unsignedByte' else if ($val instance of xs:unsignedShort) then 'xs:unsignedShort' else if ($val instance of xs:unsignedInt) then 'xs:unsignedInt' else if ($val instance of xs:unsignedLong) then 'xs:unsignedLong' else if ($val instance of xs:positiveInteger) then 'xs:positiveInteger' else if ($val instance of xs:nonNegativeInteger) then 'xs:nonNegativeInteger' else if ($val instance of xs:negativeInteger) then 'xs:negativeInteger' else if ($val instance of xs:nonPositiveInteger) then 'xs:nonPositiveInteger' else if ($val instance of xs:integer) then 'xs:integer' else if ($val instance of xs:decimal) then 'xs:decimal' else if ($val instance of xs:float) then 'xs:float' else if ($val instance of xs:double) then 'xs:double' else if ($val instance of xs:date) then 'xs:date' else if ($val instance of xs:time) then 'xs:time' else if ($val instance of xs:dateTime) then 'xs:dateTime' else if ($val instance of xs:dayTimeDuration) then 'xs:dayTimeDuration' else if ($val instance of xs:yearMonthDuration) then 'xs:yearMonthDuration' else if ($val instance of xs:duration) then 'xs:duration' else if ($val instance of xs:gMonth) then 'xs:gMonth' else if ($val instance of xs:gYear) then 'xs:gYear' else if ($val instance of xs:gYearMonth) then 'xs:gYearMonth' else if ($val instance of xs:gDay) then 'xs:gDay' else if ($val instance of xs:gMonthDay) then 'xs:gMonthDay' else 'unknown') } ;\n                    (functx:atomic-type(2))'
functx-functx-atomic-type-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The built-in type of an atomic value : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_atomic-type.html : @param $values the value(s) whose type you want to determine :)\n         declare function functx:atomic-type ( $values as xs:anyAtomicType* ) as xs:string* { for $val in $values return (if ($val instance of xs:untypedAtomic) then 'xs:untypedAtomic' else if ($val instance of xs:anyURI) then 'xs:anyURI' else if ($val instance of xs:ENTITY) then 'xs:ENTITY' else if ($val instance of xs:ID) then 'xs:ID' else if ($val instance of xs:NMTOKEN) then 'xs:NMTOKEN' else if ($val instance of xs:language) then 'xs:language' else if ($val instance of xs:NCName) then 'xs:NCName' else if ($val instance of xs:Name) then 'xs:Name' else if ($val instance of xs:token) then 'xs:token' else if ($val instance of xs:normalizedString) then 'xs:normalizedString' else if ($val instance of xs:string) then 'xs:string' else if ($val instance of xs:QName) then 'xs:QName' else if ($val instance of xs:boolean) then 'xs:boolean' else if ($val instance of xs:base64Binary) then 'xs:base64Binary' else if ($val instance of xs:hexBinary) then 'xs:hexBinary' else if ($val instance of xs:byte) then 'xs:byte' else if ($val instance of xs:short) then 'xs:short' else if ($val instance of xs:int) then 'xs:int' else if ($val instance of xs:long) then 'xs:long' else if ($val instance of xs:unsignedByte) then 'xs:unsignedByte' else if ($val instance of xs:unsignedShort) then 'xs:unsignedShort' else if ($val instance of xs:unsignedInt) then 'xs:unsignedInt' else if ($val instance of xs:unsignedLong) then 'xs:unsignedLong' else if ($val instance of xs:positiveInteger) then 'xs:positiveInteger' else if ($val instance of xs:nonNegativeInteger) then 'xs:nonNegativeInteger' else if ($val instance of xs:negativeInteger) then 'xs:negativeInteger' else if ($val instance of xs:nonPositiveInteger) then 'xs:nonPositiveInteger' else if ($val instance of xs:integer) then 'xs:integer' else if ($val instance of xs:decimal) then 'xs:decimal' else if ($val instance of xs:float) then 'xs:float' else if ($val instance of xs:double) then 'xs:double' else if ($val instance of xs:date) then 'xs:date' else if ($val instance of xs:time) then 'xs:time' else if ($val instance of xs:dateTime) then 'xs:dateTime' else if ($val instance of xs:dayTimeDuration) then 'xs:dayTimeDuration' else if ($val instance of xs:yearMonthDuration) then 'xs:yearMonthDuration' else if ($val instance of xs:duration) then 'xs:duration' else if ($val instance of xs:gMonth) then 'xs:gMonth' else if ($val instance of xs:gYear) then 'xs:gYear' else if ($val instance of xs:gYearMonth) then 'xs:gYearMonth' else if ($val instance of xs:gDay) then 'xs:gDay' else if ($val instance of xs:gMonthDay) then 'xs:gMonthDay' else 'unknown') } ;\n                    (functx:atomic-type('abc'))'
functx-functx-atomic-type-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The built-in type of an atomic value : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_atomic-type.html : @param $values the value(s) whose type you want to determine :)\n         declare function functx:atomic-type ( $values as xs:anyAtomicType* ) as xs:string* { for $val in $values return (if ($val instance of xs:untypedAtomic) then 'xs:untypedAtomic' else if ($val instance of xs:anyURI) then 'xs:anyURI' else if ($val instance of xs:ENTITY) then 'xs:ENTITY' else if ($val instance of xs:ID) then 'xs:ID' else if ($val instance of xs:NMTOKEN) then 'xs:NMTOKEN' else if ($val instance of xs:language) then 'xs:language' else if ($val instance of xs:NCName) then 'xs:NCName' else if ($val instance of xs:Name) then 'xs:Name' else if ($val instance of xs:token) then 'xs:token' else if ($val instance of xs:normalizedString) then 'xs:normalizedString' else if ($val instance of xs:string) then 'xs:string' else if ($val instance of xs:QName) then 'xs:QName' else if ($val instance of xs:boolean) then 'xs:boolean' else if ($val instance of xs:base64Binary) then 'xs:base64Binary' else if ($val instance of xs:hexBinary) then 'xs:hexBinary' else if ($val instance of xs:byte) then 'xs:byte' else if ($val instance of xs:short) then 'xs:short' else if ($val instance of xs:int) then 'xs:int' else if ($val instance of xs:long) then 'xs:long' else if ($val instance of xs:unsignedByte) then 'xs:unsignedByte' else if ($val instance of xs:unsignedShort) then 'xs:unsignedShort' else if ($val instance of xs:unsignedInt) then 'xs:unsignedInt' else if ($val instance of xs:unsignedLong) then 'xs:unsignedLong' else if ($val instance of xs:positiveInteger) then 'xs:positiveInteger' else if ($val instance of xs:nonNegativeInteger) then 'xs:nonNegativeInteger' else if ($val instance of xs:negativeInteger) then 'xs:negativeInteger' else if ($val instance of xs:nonPositiveInteger) then 'xs:nonPositiveInteger' else if ($val instance of xs:integer) then 'xs:integer' else if ($val instance of xs:decimal) then 'xs:decimal' else if ($val instance of xs:float) then 'xs:float' else if ($val instance of xs:double) then 'xs:double' else if ($val instance of xs:date) then 'xs:date' else if ($val instance of xs:time) then 'xs:time' else if ($val instance of xs:dateTime) then 'xs:dateTime' else if ($val instance of xs:dayTimeDuration) then 'xs:dayTimeDuration' else if ($val instance of xs:yearMonthDuration) then 'xs:yearMonthDuration' else if ($val instance of xs:duration) then 'xs:duration' else if ($val instance of xs:gMonth) then 'xs:gMonth' else if ($val instance of xs:gYear) then 'xs:gYear' else if ($val instance of xs:gYearMonth) then 'xs:gYearMonth' else if ($val instance of xs:gDay) then 'xs:gDay' else if ($val instance of xs:gMonthDay) then 'xs:gMonthDay' else 'unknown') } ;\n                    (functx:atomic-type(xs:date('2005-12-15')))'
functx-functx-atomic-type-4;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The built-in type of an atomic value : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_atomic-type.html : @param $values the value(s) whose type you want to determine :)\n         declare function functx:atomic-type ( $values as xs:anyAtomicType* ) as xs:string* { for $val in $values return (if ($val instance of xs:untypedAtomic) then 'xs:untypedAtomic' else if ($val instance of xs:anyURI) then 'xs:anyURI' else if ($val instance of xs:ENTITY) then 'xs:ENTITY' else if ($val instance of xs:ID) then 'xs:ID' else if ($val instance of xs:NMTOKEN) then 'xs:NMTOKEN' else if ($val instance of xs:language) then 'xs:language' else if ($val instance of xs:NCName) then 'xs:NCName' else if ($val instance of xs:Name) then 'xs:Name' else if ($val instance of xs:token) then 'xs:token' else if ($val instance of xs:normalizedString) then 'xs:normalizedString' else if ($val instance of xs:string) then 'xs:string' else if ($val instance of xs:QName) then 'xs:QName' else if ($val instance of xs:boolean) then 'xs:boolean' else if ($val instance of xs:base64Binary) then 'xs:base64Binary' else if ($val instance of xs:hexBinary) then 'xs:hexBinary' else if ($val instance of xs:byte) then 'xs:byte' else if ($val instance of xs:short) then 'xs:short' else if ($val instance of xs:int) then 'xs:int' else if ($val instance of xs:long) then 'xs:long' else if ($val instance of xs:unsignedByte) then 'xs:unsignedByte' else if ($val instance of xs:unsignedShort) then 'xs:unsignedShort' else if ($val instance of xs:unsignedInt) then 'xs:unsignedInt' else if ($val instance of xs:unsignedLong) then 'xs:unsignedLong' else if ($val instance of xs:positiveInteger) then 'xs:positiveInteger' else if ($val instance of xs:nonNegativeInteger) then 'xs:nonNegativeInteger' else if ($val instance of xs:negativeInteger) then 'xs:negativeInteger' else if ($val instance of xs:nonPositiveInteger) then 'xs:nonPositiveInteger' else if ($val instance of xs:integer) then 'xs:integer' else if ($val instance of xs:decimal) then 'xs:decimal' else if ($val instance of xs:float) then 'xs:float' else if ($val instance of xs:double) then 'xs:double' else if ($val instance of xs:date) then 'xs:date' else if ($val instance of xs:time) then 'xs:time' else if ($val instance of xs:dateTime) then 'xs:dateTime' else if ($val instance of xs:dayTimeDuration) then 'xs:dayTimeDuration' else if ($val instance of xs:yearMonthDuration) then 'xs:yearMonthDuration' else if ($val instance of xs:duration) then 'xs:duration' else if ($val instance of xs:gMonth) then 'xs:gMonth' else if ($val instance of xs:gYear) then 'xs:gYear' else if ($val instance of xs:gYearMonth) then 'xs:gYearMonth' else if ($val instance of xs:gDay) then 'xs:gDay' else if ($val instance of xs:gMonthDay) then 'xs:gMonthDay' else 'unknown') } ;\n                    (functx:atomic-type( (2,'abc',xs:date('2005-12-15'))))'
functx-functx-atomic-type-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The built-in type of an atomic value : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_atomic-type.html : @param $values the value(s) whose type you want to determine :)\n         declare function functx:atomic-type ( $values as xs:anyAtomicType* ) as xs:string* { for $val in $values return (if ($val instance of xs:untypedAtomic) then 'xs:untypedAtomic' else if ($val instance of xs:anyURI) then 'xs:anyURI' else if ($val instance of xs:ENTITY) then 'xs:ENTITY' else if ($val instance of xs:ID) then 'xs:ID' else if ($val instance of xs:NMTOKEN) then 'xs:NMTOKEN' else if ($val instance of xs:language) then 'xs:language' else if ($val instance of xs:NCName) then 'xs:NCName' else if ($val instance of xs:Name) then 'xs:Name' else if ($val instance of xs:token) then 'xs:token' else if ($val instance of xs:normalizedString) then 'xs:normalizedString' else if ($val instance of xs:string) then 'xs:string' else if ($val instance of xs:QName) then 'xs:QName' else if ($val instance of xs:boolean) then 'xs:boolean' else if ($val instance of xs:base64Binary) then 'xs:base64Binary' else if ($val instance of xs:hexBinary) then 'xs:hexBinary' else if ($val instance of xs:byte) then 'xs:byte' else if ($val instance of xs:short) then 'xs:short' else if ($val instance of xs:int) then 'xs:int' else if ($val instance of xs:long) then 'xs:long' else if ($val instance of xs:unsignedByte) then 'xs:unsignedByte' else if ($val instance of xs:unsignedShort) then 'xs:unsignedShort' else if ($val instance of xs:unsignedInt) then 'xs:unsignedInt' else if ($val instance of xs:unsignedLong) then 'xs:unsignedLong' else if ($val instance of xs:positiveInteger) then 'xs:positiveInteger' else if ($val instance of xs:nonNegativeInteger) then 'xs:nonNegativeInteger' else if ($val instance of xs:negativeInteger) then 'xs:negativeInteger' else if ($val instance of xs:nonPositiveInteger) then 'xs:nonPositiveInteger' else if ($val instance of xs:integer) then 'xs:integer' else if ($val instance of xs:decimal) then 'xs:decimal' else if ($val instance of xs:float) then 'xs:float' else if ($val instance of xs:double) then 'xs:double' else if ($val instance of xs:date) then 'xs:date' else if ($val instance of xs:time) then 'xs:time' else if ($val instance of xs:dateTime) then 'xs:dateTime' else if ($val instance of xs:dayTimeDuration) then 'xs:dayTimeDuration' else if ($val instance of xs:yearMonthDuration) then 'xs:yearMonthDuration' else if ($val instance of xs:duration) then 'xs:duration' else if ($val instance of xs:gMonth) then 'xs:gMonth' else if ($val instance of xs:gYear) then 'xs:gYear' else if ($val instance of xs:gYearMonth) then 'xs:gYearMonth' else if ($val instance of xs:gDay) then 'xs:gDay' else if ($val instance of xs:gMonthDay) then 'xs:gMonthDay' else 'unknown') } ;\n                    (functx:atomic-type(2), functx:atomic-type('abc'), functx:atomic-type(xs:date('2005-12-15')), functx:atomic-type( (2,'abc',xs:date('2005-12-15'))))'
functx-functx-avg-empty-is-zero-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The average, counting "empty" values as zero : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_avg-empty-is-zero.html : @param $values the values to be averaged : @param $allNodes the sequence of all nodes to find the average over :)\n         declare function functx:avg-empty-is-zero ( $values as xs:anyAtomicType* , $allNodes as node()* ) as xs:double { if (empty($allNodes)) then 0 else sum($values[string(.) != '']) div count($allNodes) } ;\n                    let $in-xml := <prices> <price value="29.99" discount="10.00"/> <price value="39.99" discount="6.00"/> <price value="69.99"/> <price value="49.99" discount=""/> </prices> return (functx:avg-empty-is-zero( $in-xml//price/@discount, $in-xml//price)) = 4'
functx-functx-between-exclusive-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a value is between two provided values : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_between-exclusive.html : @param $value the value to be tested : @param $minValue the minimum value : @param $maxValue the maximum value :)\n         declare function functx:between-exclusive ( $value as xs:anyAtomicType? , $minValue as xs:anyAtomicType , $maxValue as xs:anyAtomicType ) as xs:boolean { $value > $minValue and $value < $maxValue } ;\n                    (functx:between-exclusive(55, 1, 1000))'
functx-functx-between-exclusive-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a value is between two provided values : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_between-exclusive.html : @param $value the value to be tested : @param $minValue the minimum value : @param $maxValue the maximum value :)\n         declare function functx:between-exclusive ( $value as xs:anyAtomicType? , $minValue as xs:anyAtomicType , $maxValue as xs:anyAtomicType ) as xs:boolean { $value > $minValue and $value < $maxValue } ;\n                    (functx:between-exclusive(1, 1, 1000))'
functx-functx-between-exclusive-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a value is between two provided values : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_between-exclusive.html : @param $value the value to be tested : @param $minValue the minimum value : @param $maxValue the maximum value :)\n         declare function functx:between-exclusive ( $value as xs:anyAtomicType? , $minValue as xs:anyAtomicType , $maxValue as xs:anyAtomicType ) as xs:boolean { $value > $minValue and $value < $maxValue } ;\n                    (functx:between-exclusive(1200, 1, 1000))'
functx-functx-between-exclusive-4;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a value is between two provided values : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_between-exclusive.html : @param $value the value to be tested : @param $minValue the minimum value : @param $maxValue the maximum value :)\n         declare function functx:between-exclusive ( $value as xs:anyAtomicType? , $minValue as xs:anyAtomicType , $maxValue as xs:anyAtomicType ) as xs:boolean { $value > $minValue and $value < $maxValue } ;\n                    (functx:between-exclusive('b', 'a', 'c'))'
functx-functx-between-exclusive-5;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a value is between two provided values : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_between-exclusive.html : @param $value the value to be tested : @param $minValue the minimum value : @param $maxValue the maximum value :)\n         declare function functx:between-exclusive ( $value as xs:anyAtomicType? , $minValue as xs:anyAtomicType , $maxValue as xs:anyAtomicType ) as xs:boolean { $value > $minValue and $value < $maxValue } ;\n                    (functx:between-exclusive(xs:date('2004-10-31'), xs:date('2004-10-15'), xs:date('2004-11-01')))'
functx-functx-between-exclusive-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a value is between two provided values : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_between-exclusive.html : @param $value the value to be tested : @param $minValue the minimum value : @param $maxValue the maximum value :)\n         declare function functx:between-exclusive ( $value as xs:anyAtomicType? , $minValue as xs:anyAtomicType , $maxValue as xs:anyAtomicType ) as xs:boolean { $value > $minValue and $value < $maxValue } ;\n                    (functx:between-exclusive(55, 1, 1000), functx:between-exclusive(1, 1, 1000), functx:between-exclusive(1200, 1, 1000), functx:between-exclusive('b', 'a', 'c'), functx:between-exclusive(xs:date('2004-10-31'), xs:date('2004-10-15'), xs:date('2004-11-01')))'
functx-functx-between-inclusive-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a value is between two provided values, or equal to one of them : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_between-inclusive.html : @param $value the value to be tested : @param $minValue the minimum value : @param $maxValue the maximum value :)\n         declare function functx:between-inclusive ( $value as xs:anyAtomicType? , $minValue as xs:anyAtomicType , $maxValue as xs:anyAtomicType ) as xs:boolean { $value >= $minValue and $value <= $maxValue } ;\n                    (functx:between-inclusive(55, 1, 1000))'
functx-functx-between-inclusive-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a value is between two provided values, or equal to one of them : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_between-inclusive.html : @param $value the value to be tested : @param $minValue the minimum value : @param $maxValue the maximum value :)\n         declare function functx:between-inclusive ( $value as xs:anyAtomicType? , $minValue as xs:anyAtomicType , $maxValue as xs:anyAtomicType ) as xs:boolean { $value >= $minValue and $value <= $maxValue } ;\n                    (functx:between-inclusive(1, 1, 1000))'
functx-functx-between-inclusive-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a value is between two provided values, or equal to one of them : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_between-inclusive.html : @param $value the value to be tested : @param $minValue the minimum value : @param $maxValue the maximum value :)\n         declare function functx:between-inclusive ( $value as xs:anyAtomicType? , $minValue as xs:anyAtomicType , $maxValue as xs:anyAtomicType ) as xs:boolean { $value >= $minValue and $value <= $maxValue } ;\n                    (functx:between-inclusive(1200, 1, 1000))'
functx-functx-between-inclusive-4;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a value is between two provided values, or equal to one of them : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_between-inclusive.html : @param $value the value to be tested : @param $minValue the minimum value : @param $maxValue the maximum value :)\n         declare function functx:between-inclusive ( $value as xs:anyAtomicType? , $minValue as xs:anyAtomicType , $maxValue as xs:anyAtomicType ) as xs:boolean { $value >= $minValue and $value <= $maxValue } ;\n                    (functx:between-inclusive('b', 'b', 'd'))'
functx-functx-between-inclusive-5;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a value is between two provided values, or equal to one of them : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_between-inclusive.html : @param $value the value to be tested : @param $minValue the minimum value : @param $maxValue the maximum value :)\n         declare function functx:between-inclusive ( $value as xs:anyAtomicType? , $minValue as xs:anyAtomicType , $maxValue as xs:anyAtomicType ) as xs:boolean { $value >= $minValue and $value <= $maxValue } ;\n                    (functx:between-inclusive(xs:date('2004-10-31'), xs:date('2004-10-15'), xs:date('2004-11-01')))'
functx-functx-between-inclusive-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a value is between two provided values, or equal to one of them : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_between-inclusive.html : @param $value the value to be tested : @param $minValue the minimum value : @param $maxValue the maximum value :)\n         declare function functx:between-inclusive ( $value as xs:anyAtomicType? , $minValue as xs:anyAtomicType , $maxValue as xs:anyAtomicType ) as xs:boolean { $value >= $minValue and $value <= $maxValue } ;\n                    (functx:between-inclusive(55, 1, 1000), functx:between-inclusive(1, 1, 1000), functx:between-inclusive(1200, 1, 1000), functx:between-inclusive('b', 'b', 'd'), functx:between-inclusive(xs:date('2004-10-31'), xs:date('2004-10-15'), xs:date('2004-11-01')))'
functx-functx-camel-case-to-words-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Turns a camelCase string into space-separated words : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_camel-case-to-words.html : @param $arg the string to modify : @param $delim the delimiter for the words (e.g. a space) :)\n         declare function functx:camel-case-to-words ( $arg as xs:string? , $delim as xs:string ) as xs:string { concat(substring($arg,1,1), replace(substring($arg,2),'(\p{Lu})', concat($delim, '$1'))) } ;\n                    (functx:camel-case-to-words( 'thisIsACamelCaseTerm',' '))'
functx-functx-camel-case-to-words-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Turns a camelCase string into space-separated words : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_camel-case-to-words.html : @param $arg the string to modify : @param $delim the delimiter for the words (e.g. a space) :)\n         declare function functx:camel-case-to-words ( $arg as xs:string? , $delim as xs:string ) as xs:string { concat(substring($arg,1,1), replace(substring($arg,2),'(\p{Lu})', concat($delim, '$1'))) } ;\n                    (functx:camel-case-to-words( 'thisIsACamelCaseTerm',','))'
functx-functx-camel-case-to-words-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Turns a camelCase string into space-separated words : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_camel-case-to-words.html : @param $arg the string to modify : @param $delim the delimiter for the words (e.g. a space) :)\n         declare function functx:camel-case-to-words ( $arg as xs:string? , $delim as xs:string ) as xs:string { concat(substring($arg,1,1), replace(substring($arg,2),'(\p{Lu})', concat($delim, '$1'))) } ;\n                    (functx:camel-case-to-words( 'thisIsACamelCaseTerm',' '), functx:camel-case-to-words( 'thisIsACamelCaseTerm',','))'
functx-functx-capitalize-first-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Capitalizes the first character of a string : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_capitalize-first.html : @param $arg the word or phrase to capitalize :)\n         declare function functx:capitalize-first ( $arg as xs:string? ) as xs:string? { concat(upper-case(substring($arg,1,1)), substring($arg,2)) } ;\n                    (functx:capitalize-first('hello'))'
functx-functx-capitalize-first-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Capitalizes the first character of a string : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_capitalize-first.html : @param $arg the word or phrase to capitalize :)\n         declare function functx:capitalize-first ( $arg as xs:string? ) as xs:string? { concat(upper-case(substring($arg,1,1)), substring($arg,2)) } ;\n                    (functx:capitalize-first('hello world'))'
functx-functx-capitalize-first-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Capitalizes the first character of a string : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_capitalize-first.html : @param $arg the word or phrase to capitalize :)\n         declare function functx:capitalize-first ( $arg as xs:string? ) as xs:string? { concat(upper-case(substring($arg,1,1)), substring($arg,2)) } ;\n                    (functx:capitalize-first('Hello world'))'
functx-functx-capitalize-first-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Capitalizes the first character of a string : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_capitalize-first.html : @param $arg the word or phrase to capitalize :)\n         declare function functx:capitalize-first ( $arg as xs:string? ) as xs:string? { concat(upper-case(substring($arg,1,1)), substring($arg,2)) } ;\n                    (functx:capitalize-first('hello'), functx:capitalize-first('hello world'), functx:capitalize-first('Hello world'))'
functx-functx-change-element-names-deep-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n         declare namespace dty = "http://datypic.com";\n                    (:~ : Changes the names of elements in an XML fragment : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_change-element-names-deep.html : @param $nodes the element(s) to change : @param $oldNames the sequence of names to change from : @param $newNames the sequence of names to change to :)\n         declare function functx:change-element-names-deep ( $nodes as node()* , $oldNames as xs:QName* , $newNames as xs:QName* ) as node()* { if (count($oldNames) != count($newNames)) then error(xs:QName('functx:Different_number_of_names')) else for $node in $nodes return if ($node instance of element()) then element {functx:if-empty ($newNames[index-of($oldNames, node-name($node))], node-name($node)) } {$node/@*, functx:change-element-names-deep($node/node(), $oldNames, $newNames)} else if ($node instance of document-node()) then functx:change-element-names-deep($node/node(), $oldNames, $newNames) else $node } ;\n                    (:~ : The first argument if it is not blank, otherwise the second argument : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_if-empty.html : @param $arg the node that may be empty : @param $value the item(s) to use if the node is empty :)\n         declare function functx:if-empty ( $arg as item()? , $value as item()* ) as item()* { if (string($arg) != '') then data($arg) else $value } ;\n                    let $in-xml-1 := <in-xml> <a> <b>b</b> <c>c</c> </a> </in-xml> return let $in-xml-2 := <in-xml xmlns:dty="http://datypic.com"> <a> <dty:b>b</dty:b> <c>c</c> </a> </in-xml> return (functx:change-element-names-deep( $in-xml-1, xs:QName('b'), xs:QName('y')))'
functx-functx-change-element-names-deep-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n         declare namespace dty = "http://datypic.com";\n                    (:~ : Changes the names of elements in an XML fragment : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_change-element-names-deep.html : @param $nodes the element(s) to change : @param $oldNames the sequence of names to change from : @param $newNames the sequence of names to change to :)\n         declare function functx:change-element-names-deep ( $nodes as node()* , $oldNames as xs:QName* , $newNames as xs:QName* ) as node()* { if (count($oldNames) != count($newNames)) then error(xs:QName('functx:Different_number_of_names')) else for $node in $nodes return if ($node instance of element()) then element {functx:if-empty ($newNames[index-of($oldNames, node-name($node))], node-name($node)) } {$node/@*, functx:change-element-names-deep($node/node(), $oldNames, $newNames)} else if ($node instance of document-node()) then functx:change-element-names-deep($node/node(), $oldNames, $newNames) else $node } ;\n                    (:~ : The first argument if it is not blank, otherwise the second argument : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_if-empty.html : @param $arg the node that may be empty : @param $value the item(s) to use if the node is empty :)\n         declare function functx:if-empty ( $arg as item()? , $value as item()* ) as item()* { if (string($arg) != '') then data($arg) else $value } ;\n                    let $in-xml-1 := <in-xml> <a> <b>b</b> <c>c</c> </a> </in-xml> return let $in-xml-2 := <in-xml xmlns:dty="http://datypic.com"> <a> <dty:b>b</dty:b> <c>c</c> </a> </in-xml> return (functx:change-element-names-deep( $in-xml-1, (xs:QName('a'), xs:QName('b'),xs:QName('c')), (xs:QName('x'), xs:QName('y'),xs:QName('z'))))'
functx-functx-change-element-names-deep-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n         declare namespace dty = "http://datypic.com";\n                    (:~ : Changes the names of elements in an XML fragment : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_change-element-names-deep.html : @param $nodes the element(s) to change : @param $oldNames the sequence of names to change from : @param $newNames the sequence of names to change to :)\n         declare function functx:change-element-names-deep ( $nodes as node()* , $oldNames as xs:QName* , $newNames as xs:QName* ) as node()* { if (count($oldNames) != count($newNames)) then error(xs:QName('functx:Different_number_of_names')) else for $node in $nodes return if ($node instance of element()) then element {functx:if-empty ($newNames[index-of($oldNames, node-name($node))], node-name($node)) } {$node/@*, functx:change-element-names-deep($node/node(), $oldNames, $newNames)} else if ($node instance of document-node()) then functx:change-element-names-deep($node/node(), $oldNames, $newNames) else $node } ;\n                    (:~ : The first argument if it is not blank, otherwise the second argument : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_if-empty.html : @param $arg the node that may be empty : @param $value the item(s) to use if the node is empty :)\n         declare function functx:if-empty ( $arg as item()? , $value as item()* ) as item()* { if (string($arg) != '') then data($arg) else $value } ;\n                    let $in-xml-1 := <in-xml> <a> <b>b</b> <c>c</c> </a> </in-xml> return let $in-xml-2 := <in-xml xmlns:dty="http://datypic.com"> <a> <dty:b>b</dty:b> <c>c</c> </a> </in-xml> return (functx:change-element-names-deep( $in-xml-2, (xs:QName('dty:b'),xs:QName('c')), (xs:QName('q'), QName('http://new','new:c'))))'
functx-functx-change-element-names-deep-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n         declare namespace dty = "http://datypic.com";\n                    (:~ : Changes the names of elements in an XML fragment : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_change-element-names-deep.html : @param $nodes the element(s) to change : @param $oldNames the sequence of names to change from : @param $newNames the sequence of names to change to :)\n         declare function functx:change-element-names-deep ( $nodes as node()* , $oldNames as xs:QName* , $newNames as xs:QName* ) as node()* { if (count($oldNames) != count($newNames)) then error(xs:QName('functx:Different_number_of_names')) else for $node in $nodes return if ($node instance of element()) then element {functx:if-empty ($newNames[index-of($oldNames, node-name($node))], node-name($node)) } {$node/@*, functx:change-element-names-deep($node/node(), $oldNames, $newNames)} else if ($node instance of document-node()) then functx:change-element-names-deep($node/node(), $oldNames, $newNames) else $node } ;\n                    (:~ : The first argument if it is not blank, otherwise the second argument : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_if-empty.html : @param $arg the node that may be empty : @param $value the item(s) to use if the node is empty :)\n         declare function functx:if-empty ( $arg as item()? , $value as item()* ) as item()* { if (string($arg) != '') then data($arg) else $value } ;\n                    let $in-xml-1 := <in-xml> <a> <b>b</b> <c>c</c> </a> </in-xml> return let $in-xml-2 := <in-xml xmlns:dty="http://datypic.com"> <a> <dty:b>b</dty:b> <c>c</c> </a> </in-xml> return (functx:change-element-names-deep( $in-xml-1, xs:QName('b'), xs:QName('y')), functx:change-element-names-deep( $in-xml-1, (xs:QName('a'), xs:QName('b'),xs:QName('c')), (xs:QName('x'), xs:QName('y'),xs:QName('z'))), functx:change-element-names-deep( $in-xml-2, (xs:QName('dty:b'),xs:QName('c')), (xs:QName('q'), QName('http://new','new:c'))))'
functx-functx-change-element-ns-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Changes the namespace of XML elements : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_change-element-ns.html : @param $elements the elements to change : @param $newns the new namespace : @param $prefix the prefix to use for the new namespace :)\n         declare function functx:change-element-ns ( $elements as element()* , $newns as xs:string , $prefix as xs:string ) as element()? { for $element in $elements return element {QName ($newns, concat($prefix, if ($prefix = '') then '' else ':', local-name($element)))} {$element/@*, $element/node()} } ;\n                    let $in-xml := <bar:a xmlns:bar="http://bar"> <bar:b>557</bar:b> <bar:c>xyz</bar:c> </bar:a> return (functx:change-element-ns( $in-xml, 'http://foo',''))'
functx-functx-change-element-ns-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Changes the namespace of XML elements : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_change-element-ns.html : @param $elements the elements to change : @param $newns the new namespace : @param $prefix the prefix to use for the new namespace :)\n         declare function functx:change-element-ns ( $elements as element()* , $newns as xs:string , $prefix as xs:string ) as element()? { for $element in $elements return element {QName ($newns, concat($prefix, if ($prefix = '') then '' else ':', local-name($element)))} {$element/@*, $element/node()} } ;\n                    let $in-xml := <bar:a xmlns:bar="http://bar"> <bar:b>557</bar:b> <bar:c>xyz</bar:c> </bar:a> return (functx:change-element-ns( $in-xml, 'http://foo','foo'))'
functx-functx-change-element-ns-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Changes the namespace of XML elements : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_change-element-ns.html : @param $elements the elements to change : @param $newns the new namespace : @param $prefix the prefix to use for the new namespace :)\n         declare function functx:change-element-ns ( $elements as element()* , $newns as xs:string , $prefix as xs:string ) as element()? { for $element in $elements return element {QName ($newns, concat($prefix, if ($prefix = '') then '' else ':', local-name($element)))} {$element/@*, $element/node()} } ;\n                    let $in-xml := <bar:a xmlns:bar="http://bar"> <bar:b>557</bar:b> <bar:c>xyz</bar:c> </bar:a> return (functx:change-element-ns( $in-xml, 'http://foo',''), functx:change-element-ns( $in-xml, 'http://foo','foo'))'
functx-functx-change-element-ns-deep-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Changes the namespace of XML elements and its descendants : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_change-element-ns-deep.html : @param $nodes the nodes to change : @param $newns the new namespace : @param $prefix the prefix to use for the new namespace :)\n         declare function functx:change-element-ns-deep ( $nodes as node()* , $newns as xs:string , $prefix as xs:string ) as node()* { for $node in $nodes return if ($node instance of element()) then (element {QName ($newns, concat($prefix, if ($prefix = '') then '' else ':', local-name($node)))} {$node/@*, functx:change-element-ns-deep($node/node(), $newns, $prefix)}) else if ($node instance of document-node()) then functx:change-element-ns-deep($node/node(), $newns, $prefix) else $node } ;\n                    let $in-xml := <bar:a xmlns:bar="http://bar"> <bar:b>557</bar:b> <bar:c>xyz</bar:c> </bar:a> return (functx:change-element-ns-deep( $in-xml, 'http://foo',''))'
functx-functx-change-element-ns-deep-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Changes the namespace of XML elements and its descendants : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_change-element-ns-deep.html : @param $nodes the nodes to change : @param $newns the new namespace : @param $prefix the prefix to use for the new namespace :)\n         declare function functx:change-element-ns-deep ( $nodes as node()* , $newns as xs:string , $prefix as xs:string ) as node()* { for $node in $nodes return if ($node instance of element()) then (element {QName ($newns, concat($prefix, if ($prefix = '') then '' else ':', local-name($node)))} {$node/@*, functx:change-element-ns-deep($node/node(), $newns, $prefix)}) else if ($node instance of document-node()) then functx:change-element-ns-deep($node/node(), $newns, $prefix) else $node } ;\n                    let $in-xml := <bar:a xmlns:bar="http://bar"> <bar:b>557</bar:b> <bar:c>xyz</bar:c> </bar:a> return (functx:change-element-ns-deep( $in-xml, 'http://foo','foo'))'
functx-functx-change-element-ns-deep-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Changes the namespace of XML elements and its descendants : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_change-element-ns-deep.html : @param $nodes the nodes to change : @param $newns the new namespace : @param $prefix the prefix to use for the new namespace :)\n         declare function functx:change-element-ns-deep ( $nodes as node()* , $newns as xs:string , $prefix as xs:string ) as node()* { for $node in $nodes return if ($node instance of element()) then (element {QName ($newns, concat($prefix, if ($prefix = '') then '' else ':', local-name($node)))} {$node/@*, functx:change-element-ns-deep($node/node(), $newns, $prefix)}) else if ($node instance of document-node()) then functx:change-element-ns-deep($node/node(), $newns, $prefix) else $node } ;\n                    let $in-xml := <bar:a xmlns:bar="http://bar"> <bar:b>557</bar:b> <bar:c>xyz</bar:c> </bar:a> return (functx:change-element-ns-deep( $in-xml, 'http://foo',''), functx:change-element-ns-deep( $in-xml, 'http://foo','foo'))'
functx-functx-chars-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Converts a string to a sequence of characters : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_chars.html : @param $arg the string to split :)\n         declare function functx:chars ( $arg as xs:string? ) as xs:string* { for $ch in string-to-codepoints($arg) return codepoints-to-string($ch) } ;\n                    (functx:chars('abc'))'
functx-functx-chars-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Converts a string to a sequence of characters : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_chars.html : @param $arg the string to split :)\n         declare function functx:chars ( $arg as xs:string? ) as xs:string* { for $ch in string-to-codepoints($arg) return codepoints-to-string($ch) } ;\n                    (functx:chars('a b c'))'
functx-functx-chars-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Converts a string to a sequence of characters : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_chars.html : @param $arg the string to split :)\n         declare function functx:chars ( $arg as xs:string? ) as xs:string* { for $ch in string-to-codepoints($arg) return codepoints-to-string($ch) } ;\n                    (functx:chars('abc'), functx:chars('a b c'))'
functx-functx-contains-any-of-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a string contains any of a sequence of strings : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_contains-any-of.html : @param $arg the string to test : @param $searchStrings the strings to look for :)\n         declare function functx:contains-any-of ( $arg as xs:string? , $searchStrings as xs:string* ) as xs:boolean { some $searchString in $searchStrings satisfies contains($arg,$searchString) } ;\n                    (functx:contains-any-of('abc',('bc','xy')))'
functx-functx-contains-any-of-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a string contains any of a sequence of strings : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_contains-any-of.html : @param $arg the string to test : @param $searchStrings the strings to look for :)\n         declare function functx:contains-any-of ( $arg as xs:string? , $searchStrings as xs:string* ) as xs:boolean { some $searchString in $searchStrings satisfies contains($arg,$searchString) } ;\n                    (functx:contains-any-of('abc',('de','xy')))'
functx-functx-contains-any-of-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a string contains any of a sequence of strings : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_contains-any-of.html : @param $arg the string to test : @param $searchStrings the strings to look for :)\n         declare function functx:contains-any-of ( $arg as xs:string? , $searchStrings as xs:string* ) as xs:boolean { some $searchString in $searchStrings satisfies contains($arg,$searchString) } ;\n                    (functx:contains-any-of('abc',('bc','xy')), functx:contains-any-of('abc',('de','xy')))'
functx-functx-contains-case-insensitive-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether one string contains another, without regard to case : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_contains-case-insensitive.html : @param $arg the string to search : @param $substring the substring to find :)\n         declare function functx:contains-case-insensitive ( $arg as xs:string? , $substring as xs:string ) as xs:boolean? { contains(upper-case($arg), upper-case($substring)) } ;\n                    (functx:contains-case-insensitive( 'abcdef', 'def'))'
functx-functx-contains-case-insensitive-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether one string contains another, without regard to case : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_contains-case-insensitive.html : @param $arg the string to search : @param $substring the substring to find :)\n         declare function functx:contains-case-insensitive ( $arg as xs:string? , $substring as xs:string ) as xs:boolean? { contains(upper-case($arg), upper-case($substring)) } ;\n                    (functx:contains-case-insensitive( 'abcdEF', 'def'))'
functx-functx-contains-case-insensitive-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether one string contains another, without regard to case : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_contains-case-insensitive.html : @param $arg the string to search : @param $substring the substring to find :)\n         declare function functx:contains-case-insensitive ( $arg as xs:string? , $substring as xs:string ) as xs:boolean? { contains(upper-case($arg), upper-case($substring)) } ;\n                    (functx:contains-case-insensitive( 'abcdef', 'def'), functx:contains-case-insensitive( 'abcdEF', 'def'))'
functx-functx-contains-word-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether one string contains another, as a separate word : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_contains-word.html : @param $arg the string to search : @param $word the word to find :)\n         declare function functx:contains-word ( $arg as xs:string? , $word as xs:string ) as xs:boolean { matches(upper-case($arg), concat('^(.*\W)?', upper-case(functx:escape-for-regex($word)), '(\W.*)?$')) } ;\n                    (:~ : Escapes regex special characters : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_escape-for-regex.html : @param $arg the string to escape :)\n         declare function functx:escape-for-regex ( $arg as xs:string? ) as xs:string { replace($arg, '(\.|\[|\]|\\|\||\-|\^|\$|\?|\*|\+|\{|\}|\(|\))','\\$1') } ;\n                    (functx:contains-word('abc def ghi', 'def'))'
functx-functx-contains-word-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether one string contains another, as a separate word : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_contains-word.html : @param $arg the string to search : @param $word the word to find :)\n         declare function functx:contains-word ( $arg as xs:string? , $word as xs:string ) as xs:boolean { matches(upper-case($arg), concat('^(.*\W)?', upper-case(functx:escape-for-regex($word)), '(\W.*)?$')) } ;\n                    (:~ : Escapes regex special characters : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_escape-for-regex.html : @param $arg the string to escape :)\n         declare function functx:escape-for-regex ( $arg as xs:string? ) as xs:string { replace($arg, '(\.|\[|\]|\\|\||\-|\^|\$|\?|\*|\+|\{|\}|\(|\))','\\$1') } ;\n                    (functx:contains-word('abc.def\ghi', 'def'))'
functx-functx-contains-word-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether one string contains another, as a separate word : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_contains-word.html : @param $arg the string to search : @param $word the word to find :)\n         declare function functx:contains-word ( $arg as xs:string? , $word as xs:string ) as xs:boolean { matches(upper-case($arg), concat('^(.*\W)?', upper-case(functx:escape-for-regex($word)), '(\W.*)?$')) } ;\n                    (:~ : Escapes regex special characters : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_escape-for-regex.html : @param $arg the string to escape :)\n         declare function functx:escape-for-regex ( $arg as xs:string? ) as xs:string { replace($arg, '(\.|\[|\]|\\|\||\-|\^|\$|\?|\*|\+|\{|\}|\(|\))','\\$1') } ;\n                    (functx:contains-word('abc def ghi', 'abc'))'
functx-functx-contains-word-4;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether one string contains another, as a separate word : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_contains-word.html : @param $arg the string to search : @param $word the word to find :)\n         declare function functx:contains-word ( $arg as xs:string? , $word as xs:string ) as xs:boolean { matches(upper-case($arg), concat('^(.*\W)?', upper-case(functx:escape-for-regex($word)), '(\W.*)?$')) } ;\n                    (:~ : Escapes regex special characters : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_escape-for-regex.html : @param $arg the string to escape :)\n         declare function functx:escape-for-regex ( $arg as xs:string? ) as xs:string { replace($arg, '(\.|\[|\]|\\|\||\-|\^|\$|\?|\*|\+|\{|\}|\(|\))','\\$1') } ;\n                    (functx:contains-word('abc', 'abc'))'
functx-functx-contains-word-5;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether one string contains another, as a separate word : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_contains-word.html : @param $arg the string to search : @param $word the word to find :)\n         declare function functx:contains-word ( $arg as xs:string? , $word as xs:string ) as xs:boolean { matches(upper-case($arg), concat('^(.*\W)?', upper-case(functx:escape-for-regex($word)), '(\W.*)?$')) } ;\n                    (:~ : Escapes regex special characters : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_escape-for-regex.html : @param $arg the string to escape :)\n         declare function functx:escape-for-regex ( $arg as xs:string? ) as xs:string { replace($arg, '(\.|\[|\]|\\|\||\-|\^|\$|\?|\*|\+|\{|\}|\(|\))','\\$1') } ;\n                    (functx:contains-word('abcdef', 'abc'))'
functx-functx-contains-word-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether one string contains another, as a separate word : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_contains-word.html : @param $arg the string to search : @param $word the word to find :)\n         declare function functx:contains-word ( $arg as xs:string? , $word as xs:string ) as xs:boolean { matches(upper-case($arg), concat('^(.*\W)?', upper-case(functx:escape-for-regex($word)), '(\W.*)?$')) } ;\n                    (:~ : Escapes regex special characters : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_escape-for-regex.html : @param $arg the string to escape :)\n         declare function functx:escape-for-regex ( $arg as xs:string? ) as xs:string { replace($arg, '(\.|\[|\]|\\|\||\-|\^|\$|\?|\*|\+|\{|\}|\(|\))','\\$1') } ;\n                    (functx:contains-word('abc def ghi', 'def'), functx:contains-word('abc.def\ghi', 'def'), functx:contains-word('abc def ghi', 'abc'), functx:contains-word('abc', 'abc'), functx:contains-word('abcdef', 'abc'))'
functx-functx-copy-attributes-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Copies attributes from one element to another : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_copy-attributes.html : @param $copyTo the element to copy attributes to : @param $copyFrom the element to copy attributes from :)\n         declare function functx:copy-attributes ( $copyTo as element() , $copyFrom as element() ) as element() { element { node-name($copyTo)} { $copyTo/@*[not(node-name(.) = $copyFrom/@*/node-name(.))], $copyFrom/@*, $copyTo/node() } } ;\n                    let $in-xml := <in-xml> <a>123</a>> <b x="1" y="2">456</b> <c x="9">123</c> <d z="5">123</d> </in-xml> return (functx:copy-attributes( $in-xml/a, $in-xml/b))'
functx-functx-copy-attributes-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Copies attributes from one element to another : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_copy-attributes.html : @param $copyTo the element to copy attributes to : @param $copyFrom the element to copy attributes from :)\n         declare function functx:copy-attributes ( $copyTo as element() , $copyFrom as element() ) as element() { element { node-name($copyTo)} { $copyTo/@*[not(node-name(.) = $copyFrom/@*/node-name(.))], $copyFrom/@*, $copyTo/node() } } ;\n                    let $in-xml := <in-xml> <a>123</a>> <b x="1" y="2">456</b> <c x="9">123</c> <d z="5">123</d> </in-xml> return (functx:copy-attributes( $in-xml/b, $in-xml/c))'
functx-functx-copy-attributes-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Copies attributes from one element to another : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_copy-attributes.html : @param $copyTo the element to copy attributes to : @param $copyFrom the element to copy attributes from :)\n         declare function functx:copy-attributes ( $copyTo as element() , $copyFrom as element() ) as element() { element { node-name($copyTo)} { $copyTo/@*[not(node-name(.) = $copyFrom/@*/node-name(.))], $copyFrom/@*, $copyTo/node() } } ;\n                    let $in-xml := <in-xml> <a>123</a>> <b x="1" y="2">456</b> <c x="9">123</c> <d z="5">123</d> </in-xml> return (functx:copy-attributes( $in-xml/d, $in-xml/c))'
functx-functx-copy-attributes-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Copies attributes from one element to another : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_copy-attributes.html : @param $copyTo the element to copy attributes to : @param $copyFrom the element to copy attributes from :)\n         declare function functx:copy-attributes ( $copyTo as element() , $copyFrom as element() ) as element() { element { node-name($copyTo)} { $copyTo/@*[not(node-name(.) = $copyFrom/@*/node-name(.))], $copyFrom/@*, $copyTo/node() } } ;\n                    let $in-xml := <in-xml> <a>123</a>> <b x="1" y="2">456</b> <c x="9">123</c> <d z="5">123</d> </in-xml> return (functx:copy-attributes( $in-xml/a, $in-xml/b), functx:copy-attributes( $in-xml/b, $in-xml/c), functx:copy-attributes( $in-xml/d, $in-xml/c))'
functx-functx-date-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Construct a date from a year, month and day : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_date.html : @param $year the year : @param $month the month : @param $day the day :)\n         declare function functx:date ( $year as xs:anyAtomicType , $month as xs:anyAtomicType , $day as xs:anyAtomicType ) as xs:date { xs:date( concat( functx:pad-integer-to-length(xs:integer($year),4),'-', functx:pad-integer-to-length(xs:integer($month),2),'-', functx:pad-integer-to-length(xs:integer($day),2))) } ;\n                    (:~ : Pads an integer to a desired length by adding leading zeros : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_pad-integer-to-length.html : @param $integerToPad the integer to pad : @param $length the desired length :)\n         declare function functx:pad-integer-to-length ( $integerToPad as xs:anyAtomicType? , $length as xs:integer ) as xs:string { if ($length < string-length(string($integerToPad))) then error(xs:QName('functx:Integer_Longer_Than_Length')) else concat (functx:repeat-string( '0',$length - string-length(string($integerToPad))), string($integerToPad)) } ;\n                    (:~ : Repeats a string a given number of times : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_repeat-string.html : @param $stringToRepeat the string to repeat : @param $count the desired number of copies :)\n         declare function functx:repeat-string ( $stringToRepeat as xs:string? , $count as xs:integer ) as xs:string { string-join((for $i in 1 to $count return $stringToRepeat), '') } ;\n                    (functx:date(2006,6,12))'
functx-functx-date-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Construct a date from a year, month and day : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_date.html : @param $year the year : @param $month the month : @param $day the day :)\n         declare function functx:date ( $year as xs:anyAtomicType , $month as xs:anyAtomicType , $day as xs:anyAtomicType ) as xs:date { xs:date( concat( functx:pad-integer-to-length(xs:integer($year),4),'-', functx:pad-integer-to-length(xs:integer($month),2),'-', functx:pad-integer-to-length(xs:integer($day),2))) } ;\n                    (:~ : Pads an integer to a desired length by adding leading zeros : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_pad-integer-to-length.html : @param $integerToPad the integer to pad : @param $length the desired length :)\n         declare function functx:pad-integer-to-length ( $integerToPad as xs:anyAtomicType? , $length as xs:integer ) as xs:string { if ($length < string-length(string($integerToPad))) then error(xs:QName('functx:Integer_Longer_Than_Length')) else concat (functx:repeat-string( '0',$length - string-length(string($integerToPad))), string($integerToPad)) } ;\n                    (:~ : Repeats a string a given number of times : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_repeat-string.html : @param $stringToRepeat the string to repeat : @param $count the desired number of copies :)\n         declare function functx:repeat-string ( $stringToRepeat as xs:string? , $count as xs:integer ) as xs:string { string-join((for $i in 1 to $count return $stringToRepeat), '') } ;\n                    (functx:date('2006','06','12'))'
functx-functx-date-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Construct a date from a year, month and day : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_date.html : @param $year the year : @param $month the month : @param $day the day :)\n         declare function functx:date ( $year as xs:anyAtomicType , $month as xs:anyAtomicType , $day as xs:anyAtomicType ) as xs:date { xs:date( concat( functx:pad-integer-to-length(xs:integer($year),4),'-', functx:pad-integer-to-length(xs:integer($month),2),'-', functx:pad-integer-to-length(xs:integer($day),2))) } ;\n                    (:~ : Pads an integer to a desired length by adding leading zeros : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_pad-integer-to-length.html : @param $integerToPad the integer to pad : @param $length the desired length :)\n         declare function functx:pad-integer-to-length ( $integerToPad as xs:anyAtomicType? , $length as xs:integer ) as xs:string { if ($length < string-length(string($integerToPad))) then error(xs:QName('functx:Integer_Longer_Than_Length')) else concat (functx:repeat-string( '0',$length - string-length(string($integerToPad))), string($integerToPad)) } ;\n                    (:~ : Repeats a string a given number of times : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_repeat-string.html : @param $stringToRepeat the string to repeat : @param $count the desired number of copies :)\n         declare function functx:repeat-string ( $stringToRepeat as xs:string? , $count as xs:integer ) as xs:string { string-join((for $i in 1 to $count return $stringToRepeat), '') } ;\n                    (functx:date(2006,6,12), functx:date('2006','06','12'))'
functx-functx-dateTime-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Construct a date/time from individual components : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_datetime.html : @param $year the year : @param $month the month : @param $day the day : @param $hour the hour : @param $minute the minute : @param $second the second :)\n         declare function functx:dateTime ( $year as xs:anyAtomicType , $month as xs:anyAtomicType , $day as xs:anyAtomicType , $hour as xs:anyAtomicType , $minute as xs:anyAtomicType , $second as xs:anyAtomicType ) as xs:dateTime { xs:dateTime( concat(functx:date($year,$month,$day),'T', functx:time($hour,$minute,$second))) } ;\n                    (:~ : Construct a date from a year, month and day : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_date.html : @param $year the year : @param $month the month : @param $day the day :)\n         declare function functx:date ( $year as xs:anyAtomicType , $month as xs:anyAtomicType , $day as xs:anyAtomicType ) as xs:date { xs:date( concat( functx:pad-integer-to-length(xs:integer($year),4),'-', functx:pad-integer-to-length(xs:integer($month),2),'-', functx:pad-integer-to-length(xs:integer($day),2))) } ;\n                    (:~ : Pads an integer to a desired length by adding leading zeros : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_pad-integer-to-length.html : @param $integerToPad the integer to pad : @param $length the desired length :)\n         declare function functx:pad-integer-to-length ( $integerToPad as xs:anyAtomicType? , $length as xs:integer ) as xs:string { if ($length < string-length(string($integerToPad))) then error(xs:QName('functx:Integer_Longer_Than_Length')) else concat (functx:repeat-string( '0',$length - string-length(string($integerToPad))), string($integerToPad)) } ;\n                    (:~ : Repeats a string a given number of times : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_repeat-string.html : @param $stringToRepeat the string to repeat : @param $count the desired number of copies :)\n         declare function functx:repeat-string ( $stringToRepeat as xs:string? , $count as xs:integer ) as xs:string { string-join((for $i in 1 to $count return $stringToRepeat), '') } ;\n                    (:~ : Construct a time from an hour, minute and second : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_time.html : @param $hour the hour : @param $minute the minute : @param $second the second :)\n         declare function functx:time ( $hour as xs:anyAtomicType , $minute as xs:anyAtomicType , $second as xs:anyAtomicType ) as xs:time { xs:time( concat( functx:pad-integer-to-length(xs:integer($hour),2),':', functx:pad-integer-to-length(xs:integer($minute),2),':', functx:pad-integer-to-length(xs:integer($second),2))) } ;\n                    (functx:dateTime(2006,6,12,20,6,12))'
functx-functx-dateTime-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Construct a date/time from individual components : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_datetime.html : @param $year the year : @param $month the month : @param $day the day : @param $hour the hour : @param $minute the minute : @param $second the second :)\n         declare function functx:dateTime ( $year as xs:anyAtomicType , $month as xs:anyAtomicType , $day as xs:anyAtomicType , $hour as xs:anyAtomicType , $minute as xs:anyAtomicType , $second as xs:anyAtomicType ) as xs:dateTime { xs:dateTime( concat(functx:date($year,$month,$day),'T', functx:time($hour,$minute,$second))) } ;\n                    (:~ : Construct a date from a year, month and day : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_date.html : @param $year the year : @param $month the month : @param $day the day :)\n         declare function functx:date ( $year as xs:anyAtomicType , $month as xs:anyAtomicType , $day as xs:anyAtomicType ) as xs:date { xs:date( concat( functx:pad-integer-to-length(xs:integer($year),4),'-', functx:pad-integer-to-length(xs:integer($month),2),'-', functx:pad-integer-to-length(xs:integer($day),2))) } ;\n                    (:~ : Pads an integer to a desired length by adding leading zeros : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_pad-integer-to-length.html : @param $integerToPad the integer to pad : @param $length the desired length :)\n         declare function functx:pad-integer-to-length ( $integerToPad as xs:anyAtomicType? , $length as xs:integer ) as xs:string { if ($length < string-length(string($integerToPad))) then error(xs:QName('functx:Integer_Longer_Than_Length')) else concat (functx:repeat-string( '0',$length - string-length(string($integerToPad))), string($integerToPad)) } ;\n                    (:~ : Repeats a string a given number of times : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_repeat-string.html : @param $stringToRepeat the string to repeat : @param $count the desired number of copies :)\n         declare function functx:repeat-string ( $stringToRepeat as xs:string? , $count as xs:integer ) as xs:string { string-join((for $i in 1 to $count return $stringToRepeat), '') } ;\n                    (:~ : Construct a time from an hour, minute and second : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_time.html : @param $hour the hour : @param $minute the minute : @param $second the second :)\n         declare function functx:time ( $hour as xs:anyAtomicType , $minute as xs:anyAtomicType , $second as xs:anyAtomicType ) as xs:time { xs:time( concat( functx:pad-integer-to-length(xs:integer($hour),2),':', functx:pad-integer-to-length(xs:integer($minute),2),':', functx:pad-integer-to-length(xs:integer($second),2))) } ;\n                    (functx:dateTime('2006','6','12','20','6','12'))'
functx-functx-dateTime-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Construct a date/time from individual components : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_datetime.html : @param $year the year : @param $month the month : @param $day the day : @param $hour the hour : @param $minute the minute : @param $second the second :)\n         declare function functx:dateTime ( $year as xs:anyAtomicType , $month as xs:anyAtomicType , $day as xs:anyAtomicType , $hour as xs:anyAtomicType , $minute as xs:anyAtomicType , $second as xs:anyAtomicType ) as xs:dateTime { xs:dateTime( concat(functx:date($year,$month,$day),'T', functx:time($hour,$minute,$second))) } ;\n                    (:~ : Construct a date from a year, month and day : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_date.html : @param $year the year : @param $month the month : @param $day the day :)\n         declare function functx:date ( $year as xs:anyAtomicType , $month as xs:anyAtomicType , $day as xs:anyAtomicType ) as xs:date { xs:date( concat( functx:pad-integer-to-length(xs:integer($year),4),'-', functx:pad-integer-to-length(xs:integer($month),2),'-', functx:pad-integer-to-length(xs:integer($day),2))) } ;\n                    (:~ : Pads an integer to a desired length by adding leading zeros : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_pad-integer-to-length.html : @param $integerToPad the integer to pad : @param $length the desired length :)\n         declare function functx:pad-integer-to-length ( $integerToPad as xs:anyAtomicType? , $length as xs:integer ) as xs:string { if ($length < string-length(string($integerToPad))) then error(xs:QName('functx:Integer_Longer_Than_Length')) else concat (functx:repeat-string( '0',$length - string-length(string($integerToPad))), string($integerToPad)) } ;\n                    (:~ : Repeats a string a given number of times : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_repeat-string.html : @param $stringToRepeat the string to repeat : @param $count the desired number of copies :)\n         declare function functx:repeat-string ( $stringToRepeat as xs:string? , $count as xs:integer ) as xs:string { string-join((for $i in 1 to $count return $stringToRepeat), '') } ;\n                    (:~ : Construct a time from an hour, minute and second : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_time.html : @param $hour the hour : @param $minute the minute : @param $second the second :)\n         declare function functx:time ( $hour as xs:anyAtomicType , $minute as xs:anyAtomicType , $second as xs:anyAtomicType ) as xs:time { xs:time( concat( functx:pad-integer-to-length(xs:integer($hour),2),':', functx:pad-integer-to-length(xs:integer($minute),2),':', functx:pad-integer-to-length(xs:integer($second),2))) } ;\n                    (functx:dateTime(2006,6,12,20,6,12), functx:dateTime('2006','6','12','20','6','12'))'
functx-functx-day-in-year-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Construct a date from a year, month and day : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_date.html : @param $year the year : @param $month the month : @param $day the day :)\n         declare function functx:date ( $year as xs:anyAtomicType , $month as xs:anyAtomicType , $day as xs:anyAtomicType ) as xs:date { xs:date( concat( functx:pad-integer-to-length(xs:integer($year),4),'-', functx:pad-integer-to-length(xs:integer($month),2),'-', functx:pad-integer-to-length(xs:integer($day),2))) } ;\n                    (:~ : The day of the year (a number between 1 and 366) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_day-in-year.html : @param $date the date :)\n         declare function functx:day-in-year ( $date as xs:anyAtomicType? ) as xs:integer? { days-from-duration( xs:date($date) - functx:first-day-of-year($date)) + 1 } ;\n                    (:~ : The first day of the year of a date : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_first-day-of-year.html : @param $date the date :)\n         declare function functx:first-day-of-year ( $date as xs:anyAtomicType? ) as xs:date? { functx:date(year-from-date(xs:date($date)), 1, 1) } ;\n                    (:~ : Pads an integer to a desired length by adding leading zeros : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_pad-integer-to-length.html : @param $integerToPad the integer to pad : @param $length the desired length :)\n         declare function functx:pad-integer-to-length ( $integerToPad as xs:anyAtomicType? , $length as xs:integer ) as xs:string { if ($length < string-length(string($integerToPad))) then error(xs:QName('functx:Integer_Longer_Than_Length')) else concat (functx:repeat-string( '0',$length - string-length(string($integerToPad))), string($integerToPad)) } ;\n                    (:~ : Repeats a string a given number of times : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_repeat-string.html : @param $stringToRepeat the string to repeat : @param $count the desired number of copies :)\n         declare function functx:repeat-string ( $stringToRepeat as xs:string? , $count as xs:integer ) as xs:string { string-join((for $i in 1 to $count return $stringToRepeat), '') } ;\n                    (functx:day-in-year(xs:date('2004-01-01'))) = 1'
functx-functx-day-in-year-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Construct a date from a year, month and day : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_date.html : @param $year the year : @param $month the month : @param $day the day :)\n         declare function functx:date ( $year as xs:anyAtomicType , $month as xs:anyAtomicType , $day as xs:anyAtomicType ) as xs:date { xs:date( concat( functx:pad-integer-to-length(xs:integer($year),4),'-', functx:pad-integer-to-length(xs:integer($month),2),'-', functx:pad-integer-to-length(xs:integer($day),2))) } ;\n                    (:~ : The day of the year (a number between 1 and 366) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_day-in-year.html : @param $date the date :)\n         declare function functx:day-in-year ( $date as xs:anyAtomicType? ) as xs:integer? { days-from-duration( xs:date($date) - functx:first-day-of-year($date)) + 1 } ;\n                    (:~ : The first day of the year of a date : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_first-day-of-year.html : @param $date the date :)\n         declare function functx:first-day-of-year ( $date as xs:anyAtomicType? ) as xs:date? { functx:date(year-from-date(xs:date($date)), 1, 1) } ;\n                    (:~ : Pads an integer to a desired length by adding leading zeros : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_pad-integer-to-length.html : @param $integerToPad the integer to pad : @param $length the desired length :)\n         declare function functx:pad-integer-to-length ( $integerToPad as xs:anyAtomicType? , $length as xs:integer ) as xs:string { if ($length < string-length(string($integerToPad))) then error(xs:QName('functx:Integer_Longer_Than_Length')) else concat (functx:repeat-string( '0',$length - string-length(string($integerToPad))), string($integerToPad)) } ;\n                    (:~ : Repeats a string a given number of times : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_repeat-string.html : @param $stringToRepeat the string to repeat : @param $count the desired number of copies :)\n         declare function functx:repeat-string ( $stringToRepeat as xs:string? , $count as xs:integer ) as xs:string { string-join((for $i in 1 to $count return $stringToRepeat), '') } ;\n                    (functx:day-in-year( xs:dateTime('2004-02-01T12:00:13'))) = 32'
functx-functx-day-in-year-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Construct a date from a year, month and day : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_date.html : @param $year the year : @param $month the month : @param $day the day :)\n         declare function functx:date ( $year as xs:anyAtomicType , $month as xs:anyAtomicType , $day as xs:anyAtomicType ) as xs:date { xs:date( concat( functx:pad-integer-to-length(xs:integer($year),4),'-', functx:pad-integer-to-length(xs:integer($month),2),'-', functx:pad-integer-to-length(xs:integer($day),2))) } ;\n                    (:~ : The day of the year (a number between 1 and 366) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_day-in-year.html : @param $date the date :)\n         declare function functx:day-in-year ( $date as xs:anyAtomicType? ) as xs:integer? { days-from-duration( xs:date($date) - functx:first-day-of-year($date)) + 1 } ;\n                    (:~ : The first day of the year of a date : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_first-day-of-year.html : @param $date the date :)\n         declare function functx:first-day-of-year ( $date as xs:anyAtomicType? ) as xs:date? { functx:date(year-from-date(xs:date($date)), 1, 1) } ;\n                    (:~ : Pads an integer to a desired length by adding leading zeros : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_pad-integer-to-length.html : @param $integerToPad the integer to pad : @param $length the desired length :)\n         declare function functx:pad-integer-to-length ( $integerToPad as xs:anyAtomicType? , $length as xs:integer ) as xs:string { if ($length < string-length(string($integerToPad))) then error(xs:QName('functx:Integer_Longer_Than_Length')) else concat (functx:repeat-string( '0',$length - string-length(string($integerToPad))), string($integerToPad)) } ;\n                    (:~ : Repeats a string a given number of times : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_repeat-string.html : @param $stringToRepeat the string to repeat : @param $count the desired number of copies :)\n         declare function functx:repeat-string ( $stringToRepeat as xs:string? , $count as xs:integer ) as xs:string { string-join((for $i in 1 to $count return $stringToRepeat), '') } ;\n                    (functx:day-in-year('2004-02-05')) = 36'
functx-functx-day-in-year-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Construct a date from a year, month and day : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_date.html : @param $year the year : @param $month the month : @param $day the day :)\n         declare function functx:date ( $year as xs:anyAtomicType , $month as xs:anyAtomicType , $day as xs:anyAtomicType ) as xs:date { xs:date( concat( functx:pad-integer-to-length(xs:integer($year),4),'-', functx:pad-integer-to-length(xs:integer($month),2),'-', functx:pad-integer-to-length(xs:integer($day),2))) } ;\n                    (:~ : The day of the year (a number between 1 and 366) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_day-in-year.html : @param $date the date :)\n         declare function functx:day-in-year ( $date as xs:anyAtomicType? ) as xs:integer? { days-from-duration( xs:date($date) - functx:first-day-of-year($date)) + 1 } ;\n                    (:~ : The first day of the year of a date : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_first-day-of-year.html : @param $date the date :)\n         declare function functx:first-day-of-year ( $date as xs:anyAtomicType? ) as xs:date? { functx:date(year-from-date(xs:date($date)), 1, 1) } ;\n                    (:~ : Pads an integer to a desired length by adding leading zeros : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_pad-integer-to-length.html : @param $integerToPad the integer to pad : @param $length the desired length :)\n         declare function functx:pad-integer-to-length ( $integerToPad as xs:anyAtomicType? , $length as xs:integer ) as xs:string { if ($length < string-length(string($integerToPad))) then error(xs:QName('functx:Integer_Longer_Than_Length')) else concat (functx:repeat-string( '0',$length - string-length(string($integerToPad))), string($integerToPad)) } ;\n                    (:~ : Repeats a string a given number of times : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_repeat-string.html : @param $stringToRepeat the string to repeat : @param $count the desired number of copies :)\n         declare function functx:repeat-string ( $stringToRepeat as xs:string? , $count as xs:integer ) as xs:string { string-join((for $i in 1 to $count return $stringToRepeat), '') } ;\n                    (functx:day-in-year(xs:date('2004-01-01')), functx:day-in-year( xs:dateTime('2004-02-01T12:00:13')), functx:day-in-year('2004-02-05'))'
functx-functx-day-of-week-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The day of the week, from a date : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_day-of-week.html : @param $date the date :)\n         declare function functx:day-of-week ( $date as xs:anyAtomicType? ) as xs:integer? { if (empty($date)) then () else xs:integer((xs:date($date) - xs:date('1901-01-06')) div xs:dayTimeDuration('P1D')) mod 7 } ;\n                    (functx:day-of-week( xs:date('2004-11-04'))) = 4'
functx-functx-day-of-week-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The day of the week, from a date : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_day-of-week.html : @param $date the date :)\n         declare function functx:day-of-week ( $date as xs:anyAtomicType? ) as xs:integer? { if (empty($date)) then () else xs:integer((xs:date($date) - xs:date('1901-01-06')) div xs:dayTimeDuration('P1D')) mod 7 } ;\n                    (functx:day-of-week( xs:dateTime('2004-11-04T12:00:13'))) = 4'
functx-functx-day-of-week-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The day of the week, from a date : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_day-of-week.html : @param $date the date :)\n         declare function functx:day-of-week ( $date as xs:anyAtomicType? ) as xs:integer? { if (empty($date)) then () else xs:integer((xs:date($date) - xs:date('1901-01-06')) div xs:dayTimeDuration('P1D')) mod 7 } ;\n                    (functx:day-of-week('2004-11-04')) = 4'
functx-functx-day-of-week-abbrev-en-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The abbreviated day of the week, from a date, in English : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_day-of-week-abbrev-en.html : @param $date the date :)\n         declare function functx:day-of-week-abbrev-en ( $date as xs:anyAtomicType? ) as xs:string? { ('Sun', 'Mon', 'Tues', 'Wed', 'Thurs', 'Fri', 'Sat') [functx:day-of-week($date) + 1] } ;\n                    (:~ : The day of the week, from a date : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_day-of-week.html : @param $date the date :)\n         declare function functx:day-of-week ( $date as xs:anyAtomicType? ) as xs:integer? { if (empty($date)) then () else xs:integer((xs:date($date) - xs:date('1901-01-06')) div xs:dayTimeDuration('P1D')) mod 7 } ;\n                    (functx:day-of-week-abbrev-en( xs:date('2004-11-04')))'
functx-functx-day-of-week-abbrev-en-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The abbreviated day of the week, from a date, in English : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_day-of-week-abbrev-en.html : @param $date the date :)\n         declare function functx:day-of-week-abbrev-en ( $date as xs:anyAtomicType? ) as xs:string? { ('Sun', 'Mon', 'Tues', 'Wed', 'Thurs', 'Fri', 'Sat') [functx:day-of-week($date) + 1] } ;\n                    (:~ : The day of the week, from a date : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_day-of-week.html : @param $date the date :)\n         declare function functx:day-of-week ( $date as xs:anyAtomicType? ) as xs:integer? { if (empty($date)) then () else xs:integer((xs:date($date) - xs:date('1901-01-06')) div xs:dayTimeDuration('P1D')) mod 7 } ;\n                    (functx:day-of-week-abbrev-en('2004-11-04'))'
functx-functx-day-of-week-abbrev-en-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The abbreviated day of the week, from a date, in English : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_day-of-week-abbrev-en.html : @param $date the date :)\n         declare function functx:day-of-week-abbrev-en ( $date as xs:anyAtomicType? ) as xs:string? { ('Sun', 'Mon', 'Tues', 'Wed', 'Thurs', 'Fri', 'Sat') [functx:day-of-week($date) + 1] } ;\n                    (:~ : The day of the week, from a date : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_day-of-week.html : @param $date the date :)\n         declare function functx:day-of-week ( $date as xs:anyAtomicType? ) as xs:integer? { if (empty($date)) then () else xs:integer((xs:date($date) - xs:date('1901-01-06')) div xs:dayTimeDuration('P1D')) mod 7 } ;\n                    (functx:day-of-week-abbrev-en( xs:date('2004-11-04')), functx:day-of-week-abbrev-en('2004-11-04'))'
functx-functx-day-of-week-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The day of the week, from a date : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_day-of-week.html : @param $date the date :)\n         declare function functx:day-of-week ( $date as xs:anyAtomicType? ) as xs:integer? { if (empty($date)) then () else xs:integer((xs:date($date) - xs:date('1901-01-06')) div xs:dayTimeDuration('P1D')) mod 7 } ;\n                    (functx:day-of-week( xs:date('2004-11-04')), functx:day-of-week( xs:dateTime('2004-11-04T12:00:13')), functx:day-of-week('2004-11-04'))'
functx-functx-day-of-week-name-en-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The name of the day of the week, from a date, in English : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_day-of-week-name-en.html : @param $date the date :)\n         declare function functx:day-of-week-name-en ( $date as xs:anyAtomicType? ) as xs:string? { ('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday') [functx:day-of-week($date) + 1] } ;\n                    (:~ : The day of the week, from a date : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_day-of-week.html : @param $date the date :)\n         declare function functx:day-of-week ( $date as xs:anyAtomicType? ) as xs:integer? { if (empty($date)) then () else xs:integer((xs:date($date) - xs:date('1901-01-06')) div xs:dayTimeDuration('P1D')) mod 7 } ;\n                    (functx:day-of-week-name-en( xs:date('2004-11-04')))'
functx-functx-day-of-week-name-en-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The name of the day of the week, from a date, in English : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_day-of-week-name-en.html : @param $date the date :)\n         declare function functx:day-of-week-name-en ( $date as xs:anyAtomicType? ) as xs:string? { ('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday') [functx:day-of-week($date) + 1] } ;\n                    (:~ : The day of the week, from a date : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_day-of-week.html : @param $date the date :)\n         declare function functx:day-of-week ( $date as xs:anyAtomicType? ) as xs:integer? { if (empty($date)) then () else xs:integer((xs:date($date) - xs:date('1901-01-06')) div xs:dayTimeDuration('P1D')) mod 7 } ;\n                    (functx:day-of-week-name-en('2004-11-04'))'
functx-functx-day-of-week-name-en-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The name of the day of the week, from a date, in English : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_day-of-week-name-en.html : @param $date the date :)\n         declare function functx:day-of-week-name-en ( $date as xs:anyAtomicType? ) as xs:string? { ('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday') [functx:day-of-week($date) + 1] } ;\n                    (:~ : The day of the week, from a date : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_day-of-week.html : @param $date the date :)\n         declare function functx:day-of-week ( $date as xs:anyAtomicType? ) as xs:integer? { if (empty($date)) then () else xs:integer((xs:date($date) - xs:date('1901-01-06')) div xs:dayTimeDuration('P1D')) mod 7 } ;\n                    (functx:day-of-week-name-en( xs:date('2004-11-04')), functx:day-of-week-name-en('2004-11-04'))'
functx-functx-days-in-month-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Number of days in the month : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_days-in-month.html : @param $date the date :)\n         declare function functx:days-in-month ( $date as xs:anyAtomicType? ) as xs:integer? { if (month-from-date(xs:date($date)) = 2 and functx:is-leap-year($date)) then 29 else (31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31) [month-from-date(xs:date($date))] } ;\n                    (:~ : Whether a date falls in a leap year : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-leap-year.html : @param $date the date or year :)\n         declare function functx:is-leap-year ( $date as xs:anyAtomicType? ) as xs:boolean { for $year in xs:integer(substring(string($date),1,4)) return ($year mod 4 = 0 and $year mod 100 != 0) or $year mod 400 = 0 } ;\n                    (functx:days-in-month(xs:date('2004-01-23'))) = 31'
functx-functx-days-in-month-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Number of days in the month : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_days-in-month.html : @param $date the date :)\n         declare function functx:days-in-month ( $date as xs:anyAtomicType? ) as xs:integer? { if (month-from-date(xs:date($date)) = 2 and functx:is-leap-year($date)) then 29 else (31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31) [month-from-date(xs:date($date))] } ;\n                    (:~ : Whether a date falls in a leap year : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-leap-year.html : @param $date the date or year :)\n         declare function functx:is-leap-year ( $date as xs:anyAtomicType? ) as xs:boolean { for $year in xs:integer(substring(string($date),1,4)) return ($year mod 4 = 0 and $year mod 100 != 0) or $year mod 400 = 0 } ;\n                    (functx:days-in-month( xs:dateTime('2004-02-15T12:00:13'))) = 29'
functx-functx-days-in-month-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Number of days in the month : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_days-in-month.html : @param $date the date :)\n         declare function functx:days-in-month ( $date as xs:anyAtomicType? ) as xs:integer? { if (month-from-date(xs:date($date)) = 2 and functx:is-leap-year($date)) then 29 else (31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31) [month-from-date(xs:date($date))] } ;\n                    (:~ : Whether a date falls in a leap year : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-leap-year.html : @param $date the date or year :)\n         declare function functx:is-leap-year ( $date as xs:anyAtomicType? ) as xs:boolean { for $year in xs:integer(substring(string($date),1,4)) return ($year mod 4 = 0 and $year mod 100 != 0) or $year mod 400 = 0 } ;\n                    (functx:days-in-month('2005-02-15')) = 28'
functx-functx-days-in-month-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Number of days in the month : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_days-in-month.html : @param $date the date :)\n         declare function functx:days-in-month ( $date as xs:anyAtomicType? ) as xs:integer? { if (month-from-date(xs:date($date)) = 2 and functx:is-leap-year($date)) then 29 else (31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31) [month-from-date(xs:date($date))] } ;\n                    (:~ : Whether a date falls in a leap year : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-leap-year.html : @param $date the date or year :)\n         declare function functx:is-leap-year ( $date as xs:anyAtomicType? ) as xs:boolean { for $year in xs:integer(substring(string($date),1,4)) return ($year mod 4 = 0 and $year mod 100 != 0) or $year mod 400 = 0 } ;\n                    (functx:days-in-month(xs:date('2004-01-23')), functx:days-in-month( xs:dateTime('2004-02-15T12:00:13')), functx:days-in-month('2005-02-15'))'
functx-functx-dayTimeDuration-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Construct a dayTimeDuration from a number of days, hours, etc. : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_daytimeduration.html : @param $days the number of days : @param $hours the number of hours : @param $minutes the number of minutes : @param $seconds the number of seconds :)\n         declare function functx:dayTimeDuration ( $days as xs:decimal? , $hours as xs:decimal? , $minutes as xs:decimal? , $seconds as xs:decimal? ) as xs:dayTimeDuration { (xs:dayTimeDuration('P1D') * functx:if-empty($days,0)) + (xs:dayTimeDuration('PT1H') * functx:if-empty($hours,0)) + (xs:dayTimeDuration('PT1M') * functx:if-empty($minutes,0)) + (xs:dayTimeDuration('PT1S') * functx:if-empty($seconds,0)) } ;\n                    (:~ : The first argument if it is not blank, otherwise the second argument : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_if-empty.html : @param $arg the node that may be empty : @param $value the item(s) to use if the node is empty :)\n         declare function functx:if-empty ( $arg as item()? , $value as item()* ) as item()* { if (string($arg) != '') then data($arg) else $value } ;\n                    (functx:dayTimeDuration(1,6,0,0))'
functx-functx-dayTimeDuration-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Construct a dayTimeDuration from a number of days, hours, etc. : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_daytimeduration.html : @param $days the number of days : @param $hours the number of hours : @param $minutes the number of minutes : @param $seconds the number of seconds :)\n         declare function functx:dayTimeDuration ( $days as xs:decimal? , $hours as xs:decimal? , $minutes as xs:decimal? , $seconds as xs:decimal? ) as xs:dayTimeDuration { \n             (xs:dayTimeDuration('P1D') * functx:if-empty($days, 0)) \n             + (xs:dayTimeDuration('PT1H') * functx:if-empty($hours, 0)) \n             + (xs:dayTimeDuration('PT1M') * functx:if-empty($minutes, 0)) \n             + (xs:dayTimeDuration('PT1S') * functx:if-empty($seconds, 0)) \n         };\n                    (:~ : The first argument if it is not blank, otherwise the second argument : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_if-empty.html : @param $arg the node that may be empty : @param $value the item(s) to use if the node is empty :)\n         declare function functx:if-empty ( $arg as item()? , $value as item()* ) as item()* { \n             if (string($arg) != '') then data($arg) else $value \n         };\n         (functx:dayTimeDuration(2.5, 0, 0, 0))'
functx-functx-dayTimeDuration-3;PRSC Error: Failed to parse query '\n         declare namespace functx = "http://www.example.com/";\n                    (:~ : Construct a dayTimeDuration from a number of days, hours, etc. : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_daytimeduration.html : @param $days the number of days : @param $hours the number of hours : @param $minutes the number of minutes : @param $seconds the number of seconds :)\n         declare function functx:dayTimeDuration ( $days as xs:decimal? , \n                                                   $hours as xs:decimal? , \n                                                   $minutes as xs:decimal? , \n                                                   $seconds as xs:decimal? ) \n                                                 as xs:dayTimeDuration { \n            (xs:dayTimeDuration('P1D') * functx:if-empty($days, 0)) \n            + (xs:dayTimeDuration('PT1H') * functx:if-empty($hours, 0)) \n            + (xs:dayTimeDuration('PT1M') * functx:if-empty($minutes, 0)) \n            + (xs:dayTimeDuration('PT1S') * functx:if-empty($seconds, 0)) \n         };\n                    (:~ : The first argument if it is not blank, otherwise the second argument : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_if-empty.html : @param $arg the node that may be empty : @param $value the item(s) to use if the node is empty :)\n         declare function functx:if-empty ( $arg as item()? , \n                                            $value as item()* ) \n                                          as item()* { \n            if (string($arg) != '') then data($arg) else $value \n         };\n         (functx:dayTimeDuration(1, (), 3, 5.6))'
functx-functx-dayTimeDuration-4;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Construct a dayTimeDuration from a number of days, hours, etc. : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_daytimeduration.html : @param $days the number of days : @param $hours the number of hours : @param $minutes the number of minutes : @param $seconds the number of seconds :)\n         declare function functx:dayTimeDuration ( $days as xs:decimal? , $hours as xs:decimal? , $minutes as xs:decimal? , $seconds as xs:decimal? ) as xs:dayTimeDuration { (xs:dayTimeDuration('P1D') * functx:if-empty($days,0)) + (xs:dayTimeDuration('PT1H') * functx:if-empty($hours,0)) + (xs:dayTimeDuration('PT1M') * functx:if-empty($minutes,0)) + (xs:dayTimeDuration('PT1S') * functx:if-empty($seconds,0)) } ;\n                    (:~ : The first argument if it is not blank, otherwise the second argument : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_if-empty.html : @param $arg the node that may be empty : @param $value the item(s) to use if the node is empty :)\n         declare function functx:if-empty ( $arg as item()? , $value as item()* ) as item()* { if (string($arg) != '') then data($arg) else $value } ;\n                    (functx:dayTimeDuration(0,0,5,0))'
functx-functx-dayTimeDuration-5;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Construct a dayTimeDuration from a number of days, hours, etc. : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_daytimeduration.html : @param $days the number of days : @param $hours the number of hours : @param $minutes the number of minutes : @param $seconds the number of seconds :)\n         declare function functx:dayTimeDuration ( $days as xs:decimal? , $hours as xs:decimal? , $minutes as xs:decimal? , $seconds as xs:decimal? ) as xs:dayTimeDuration { (xs:dayTimeDuration('P1D') * functx:if-empty($days,0)) + (xs:dayTimeDuration('PT1H') * functx:if-empty($hours,0)) + (xs:dayTimeDuration('PT1M') * functx:if-empty($minutes,0)) + (xs:dayTimeDuration('PT1S') * functx:if-empty($seconds,0)) } ;\n                    (:~ : The first argument if it is not blank, otherwise the second argument : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_if-empty.html : @param $arg the node that may be empty : @param $value the item(s) to use if the node is empty :)\n         declare function functx:if-empty ( $arg as item()? , $value as item()* ) as item()* { if (string($arg) != '') then data($arg) else $value } ;\n                    (functx:dayTimeDuration(0,0,0,0))'
functx-functx-dayTimeDuration-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Construct a dayTimeDuration from a number of days, hours, etc. : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_daytimeduration.html : @param $days the number of days : @param $hours the number of hours : @param $minutes the number of minutes : @param $seconds the number of seconds :)\n         declare function functx:dayTimeDuration ( $days as xs:decimal? , $hours as xs:decimal? , $minutes as xs:decimal? , $seconds as xs:decimal? ) as xs:dayTimeDuration { (xs:dayTimeDuration('P1D') * functx:if-empty($days,0)) + (xs:dayTimeDuration('PT1H') * functx:if-empty($hours,0)) + (xs:dayTimeDuration('PT1M') * functx:if-empty($minutes,0)) + (xs:dayTimeDuration('PT1S') * functx:if-empty($seconds,0)) } ;\n                    (:~ : The first argument if it is not blank, otherwise the second argument : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_if-empty.html : @param $arg the node that may be empty : @param $value the item(s) to use if the node is empty :)\n         declare function functx:if-empty ( $arg as item()? , $value as item()* ) as item()* { if (string($arg) != '') then data($arg) else $value } ;\n                    (functx:dayTimeDuration(1,6,0,0), functx:dayTimeDuration(2.5,0,0,0), functx:dayTimeDuration(1,(),3,5.6), functx:dayTimeDuration(0,0,5,0), functx:dayTimeDuration(0,0,0,0))'
functx-functx-ddmmyyyy-to-date-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Converts a string with format DDMMYYYY (with any delimiters) to a date : : @author Priscilla Walmsley, Datypic : @version 1.1 : @see http://www.xqueryfunctions.com/xq/functx_ddmmyyyy-to-date.html : @param $dateString the DDMMYYYY string :)\n         declare function functx:ddmmyyyy-to-date ( $dateString as xs:string? ) as xs:date? { if (empty($dateString)) then () else if (not(matches($dateString, '^\D*(\d{2})\D*(\d{2})\D*(\d{4})\D*$'))) then error(xs:QName('functx:Invalid_Date_Format')) else xs:date(replace($dateString, '^\D*(\d{2})\D*(\d{2})\D*(\d{4})\D*$', '$3-$2-$1')) } ;\n                    (functx:ddmmyyyy-to-date('15-12-2004'))'
functx-functx-ddmmyyyy-to-date-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Converts a string with format DDMMYYYY (with any delimiters) to a date : : @author Priscilla Walmsley, Datypic : @version 1.1 : @see http://www.xqueryfunctions.com/xq/functx_ddmmyyyy-to-date.html : @param $dateString the DDMMYYYY string :)\n         declare function functx:ddmmyyyy-to-date ( $dateString as xs:string? ) as xs:date? { if (empty($dateString)) then () else if (not(matches($dateString, '^\D*(\d{2})\D*(\d{2})\D*(\d{4})\D*$'))) then error(xs:QName('functx:Invalid_Date_Format')) else xs:date(replace($dateString, '^\D*(\d{2})\D*(\d{2})\D*(\d{4})\D*$', '$3-$2-$1')) } ;\n                    (functx:ddmmyyyy-to-date('15122004'))'
functx-functx-ddmmyyyy-to-date-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Converts a string with format DDMMYYYY (with any delimiters) to a date : : @author Priscilla Walmsley, Datypic : @version 1.1 : @see http://www.xqueryfunctions.com/xq/functx_ddmmyyyy-to-date.html : @param $dateString the DDMMYYYY string :)\n         declare function functx:ddmmyyyy-to-date ( $dateString as xs:string? ) as xs:date? { if (empty($dateString)) then () else if (not(matches($dateString, '^\D*(\d{2})\D*(\d{2})\D*(\d{4})\D*$'))) then error(xs:QName('functx:Invalid_Date_Format')) else xs:date(replace($dateString, '^\D*(\d{2})\D*(\d{2})\D*(\d{4})\D*$', '$3-$2-$1')) } ;\n                    (functx:ddmmyyyy-to-date('15/12/2004'))'
functx-functx-ddmmyyyy-to-date-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Converts a string with format DDMMYYYY (with any delimiters) to a date : : @author Priscilla Walmsley, Datypic : @version 1.1 : @see http://www.xqueryfunctions.com/xq/functx_ddmmyyyy-to-date.html : @param $dateString the DDMMYYYY string :)\n         declare function functx:ddmmyyyy-to-date ( $dateString as xs:string? ) as xs:date? { if (empty($dateString)) then () else if (not(matches($dateString, '^\D*(\d{2})\D*(\d{2})\D*(\d{4})\D*$'))) then error(xs:QName('functx:Invalid_Date_Format')) else xs:date(replace($dateString, '^\D*(\d{2})\D*(\d{2})\D*(\d{4})\D*$', '$3-$2-$1')) } ;\n                    (functx:ddmmyyyy-to-date('15-12-2004'), functx:ddmmyyyy-to-date('15122004'), functx:ddmmyyyy-to-date('15/12/2004'))'
functx-functx-depth-of-node-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The depth (level) of a node in an XML tree : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_depth-of-node.html : @param $node the node to check :)\n         declare function functx:depth-of-node ( $node as node()? ) as xs:integer { count($node/ancestor-or-self::node()) } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:depth-of-node($in-xml)) = 1'
functx-functx-depth-of-node-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The depth (level) of a node in an XML tree : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_depth-of-node.html : @param $node the node to check :)\n         declare function functx:depth-of-node ( $node as node()? ) as xs:integer { count($node/ancestor-or-self::node()) } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:depth-of-node($in-xml/author[1])) = 2'
functx-functx-depth-of-node-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The depth (level) of a node in an XML tree : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_depth-of-node.html : @param $node the node to check :)\n         declare function functx:depth-of-node ( $node as node()? ) as xs:integer { count($node/ancestor-or-self::node()) } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:depth-of-node( $in-xml/author[1]/fName/text())) = 4'
functx-functx-depth-of-node-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The depth (level) of a node in an XML tree : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_depth-of-node.html : @param $node the node to check :)\n         declare function functx:depth-of-node ( $node as node()? ) as xs:integer { count($node/ancestor-or-self::node()) } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:depth-of-node($in-xml), functx:depth-of-node($in-xml/author[1]), functx:depth-of-node( $in-xml/author[1]/fName/text()))'
functx-functx-distinct-attribute-names-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The distinct names of all attributes in an XML fragment : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_distinct-attribute-names.html : @param $nodes the root to start from :)\n         declare function functx:distinct-attribute-names ( $nodes as node()* ) as xs:string* { distinct-values($nodes//@*/name(.)) } ;\n                    let $in-xml := <authors a1="xyz"> <author a2="abc"> <fName a3="def">Kate</fName> <lName>Jones</lName> </author> <author> <fName a3="def">John</fName> <lName>Doe</lName> </author> </authors> return (functx:distinct-attribute-names($in-xml))'
functx-functx-distinct-deep-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The XML nodes with distinct values, taking into account attributes and descendants : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_distinct-deep.html : @param $nodes the sequence of nodes to test :)\n         declare function functx:distinct-deep ( $nodes as node()* ) as node()* { for $seq in (1 to count($nodes)) return $nodes[$seq][not(functx:is-node-in-sequence-deep-equal( .,$nodes[position() < $seq]))] } ;\n                    (:~ : Whether an XML node is in a sequence, based on contents and attributes : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-node-in-sequence-deep-equal.html : @param $node the node to test : @param $seq the sequence of nodes to search :)\n         declare function functx:is-node-in-sequence-deep-equal ( $node as node()? , $seq as node()* ) as xs:boolean { some $nodeInSeq in $seq satisfies deep-equal($nodeInSeq,$node) } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>Kate</fName> <lName>Doe</lName> </author> </authors> return (functx:distinct-deep($in-xml//author))'
functx-functx-distinct-deep-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The XML nodes with distinct values, taking into account attributes and descendants : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_distinct-deep.html : @param $nodes the sequence of nodes to test :)\n         declare function functx:distinct-deep ( $nodes as node()* ) as node()* { for $seq in (1 to count($nodes)) return $nodes[$seq][not(functx:is-node-in-sequence-deep-equal( .,$nodes[position() < $seq]))] } ;\n                    (:~ : Whether an XML node is in a sequence, based on contents and attributes : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-node-in-sequence-deep-equal.html : @param $node the node to test : @param $seq the sequence of nodes to search :)\n         declare function functx:is-node-in-sequence-deep-equal ( $node as node()? , $seq as node()* ) as xs:boolean { some $nodeInSeq in $seq satisfies deep-equal($nodeInSeq,$node) } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>Kate</fName> <lName>Doe</lName> </author> </authors> return (functx:distinct-deep($in-xml//lName))'
functx-functx-distinct-deep-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The XML nodes with distinct values, taking into account attributes and descendants : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_distinct-deep.html : @param $nodes the sequence of nodes to test :)\n         declare function functx:distinct-deep ( $nodes as node()* ) as node()* { for $seq in (1 to count($nodes)) return $nodes[$seq][not(functx:is-node-in-sequence-deep-equal( .,$nodes[position() < $seq]))] } ;\n                    (:~ : Whether an XML node is in a sequence, based on contents and attributes : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-node-in-sequence-deep-equal.html : @param $node the node to test : @param $seq the sequence of nodes to search :)\n         declare function functx:is-node-in-sequence-deep-equal ( $node as node()? , $seq as node()* ) as xs:boolean { some $nodeInSeq in $seq satisfies deep-equal($nodeInSeq,$node) } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>Kate</fName> <lName>Doe</lName> </author> </authors> return (functx:distinct-deep($in-xml//fName))'
functx-functx-distinct-deep-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The XML nodes with distinct values, taking into account attributes and descendants : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_distinct-deep.html : @param $nodes the sequence of nodes to test :)\n         declare function functx:distinct-deep ( $nodes as node()* ) as node()* { for $seq in (1 to count($nodes)) return $nodes[$seq][not(functx:is-node-in-sequence-deep-equal( .,$nodes[position() < $seq]))] } ;\n                    (:~ : Whether an XML node is in a sequence, based on contents and attributes : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-node-in-sequence-deep-equal.html : @param $node the node to test : @param $seq the sequence of nodes to search :)\n         declare function functx:is-node-in-sequence-deep-equal ( $node as node()? , $seq as node()* ) as xs:boolean { some $nodeInSeq in $seq satisfies deep-equal($nodeInSeq,$node) } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>Kate</fName> <lName>Doe</lName> </author> </authors> return (functx:distinct-deep($in-xml//author), functx:distinct-deep($in-xml//lName), functx:distinct-deep($in-xml//fName))'
functx-functx-distinct-element-names-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The distinct names of all elements in an XML fragment : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_distinct-element-names.html : @param $nodes the root(s) to start from :)\n         declare function functx:distinct-element-names ( $nodes as node()* ) as xs:string* { distinct-values($nodes/descendant-or-self::*/name(.)) } ;\n                    (:~ : A path to an XML node (or sequence of nodes) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_path-to-node.html : @param $nodes the node sequence :)\n         declare function functx:path-to-node ( $nodes as node()* ) as xs:string* { $nodes/string-join(ancestor-or-self::*/name(.), '/') } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:distinct-element-names($in-xml))'
functx-functx-distinct-element-names-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The distinct names of all elements in an XML fragment : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_distinct-element-names.html : @param $nodes the root(s) to start from :)\n         declare function functx:distinct-element-names ( $nodes as node()* ) as xs:string* { distinct-values($nodes/descendant-or-self::*/name(.)) } ;\n                    (:~ : A path to an XML node (or sequence of nodes) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_path-to-node.html : @param $nodes the node sequence :)\n         declare function functx:path-to-node ( $nodes as node()* ) as xs:string* { $nodes/string-join(ancestor-or-self::*/name(.), '/') } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:distinct-element-names( $in-xml/author[1]))'
functx-functx-distinct-element-names-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The distinct names of all elements in an XML fragment : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_distinct-element-names.html : @param $nodes the root(s) to start from :)\n         declare function functx:distinct-element-names ( $nodes as node()* ) as xs:string* { distinct-values($nodes/descendant-or-self::*/name(.)) } ;\n                    (:~ : A path to an XML node (or sequence of nodes) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_path-to-node.html : @param $nodes the node sequence :)\n         declare function functx:path-to-node ( $nodes as node()* ) as xs:string* { $nodes/string-join(ancestor-or-self::*/name(.), '/') } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:distinct-element-names($in-xml), functx:distinct-element-names( $in-xml/author[1]))'
functx-functx-distinct-element-paths-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The distinct paths of all descendant elements in an XML fragment : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_distinct-element-paths.html : @param $nodes the root(s) to start from :)\n         declare function functx:distinct-element-paths ( $nodes as node()* ) as xs:string* { distinct-values(functx:path-to-node($nodes/descendant-or-self::*)) } ;\n                    (:~ : A path to an XML node (or sequence of nodes) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_path-to-node.html : @param $nodes the node sequence :)\n         declare function functx:path-to-node ( $nodes as node()* ) as xs:string* { $nodes/string-join(ancestor-or-self::*/name(.), '/') } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:distinct-element-paths( $in-xml))'
functx-functx-distinct-element-paths-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The distinct paths of all descendant elements in an XML fragment : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_distinct-element-paths.html : @param $nodes the root(s) to start from :)\n         declare function functx:distinct-element-paths ( $nodes as node()* ) as xs:string* { distinct-values(functx:path-to-node($nodes/descendant-or-self::*)) } ;\n                    (:~ : A path to an XML node (or sequence of nodes) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_path-to-node.html : @param $nodes the node sequence :)\n         declare function functx:path-to-node ( $nodes as node()* ) as xs:string* { $nodes/string-join(ancestor-or-self::*/name(.), '/') } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:distinct-element-paths( $in-xml/author[1]))'
functx-functx-distinct-element-paths-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The distinct paths of all descendant elements in an XML fragment : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_distinct-element-paths.html : @param $nodes the root(s) to start from :)\n         declare function functx:distinct-element-paths ( $nodes as node()* ) as xs:string* { distinct-values(functx:path-to-node($nodes/descendant-or-self::*)) } ;\n                    (:~ : A path to an XML node (or sequence of nodes) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_path-to-node.html : @param $nodes the node sequence :)\n         declare function functx:path-to-node ( $nodes as node()* ) as xs:string* { $nodes/string-join(ancestor-or-self::*/name(.), '/') } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:distinct-element-paths( $in-xml), functx:distinct-element-paths( $in-xml/author[1]))'
functx-functx-distinct-nodes-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The distinct XML nodes in a sequence (by node identity) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_distinct-nodes.html : @param $nodes the node sequence :)\n         declare function functx:distinct-nodes ( $nodes as node()* ) as node()* { for $seq in (1 to count($nodes)) return $nodes[$seq][not(functx:is-node-in-sequence( .,$nodes[position() < $seq]))] } ;\n                    (:~ : Whether an XML node is in a sequence, based on node identity : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-node-in-sequence.html : @param $node the node to test : @param $seq the sequence of nodes to search :)\n         declare function functx:is-node-in-sequence ( $node as node()? , $seq as node()* ) as xs:boolean { some $nodeInSeq in $seq satisfies $nodeInSeq is $node } ;\n                    let $in-xml :=  <test> <child>1</child> <child>2</child> <child>3</child> <child>3</child> </test> return (functx:distinct-nodes( ($in-xml/child, $in-xml/*) ))'
functx-functx-distinct-nodes-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The distinct XML nodes in a sequence (by node identity) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_distinct-nodes.html : @param $nodes the node sequence :)\n         declare function functx:distinct-nodes ( $nodes as node()* ) as node()* { for $seq in (1 to count($nodes)) return $nodes[$seq][not(functx:is-node-in-sequence( .,$nodes[position() < $seq]))] } ;\n                    (:~ : Whether an XML node is in a sequence, based on node identity : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-node-in-sequence.html : @param $node the node to test : @param $seq the sequence of nodes to search :)\n         declare function functx:is-node-in-sequence ( $node as node()? , $seq as node()* ) as xs:boolean { some $nodeInSeq in $seq satisfies $nodeInSeq is $node } ;\n                    let $in-xml :=  <test> <child>1</child> <child>2</child> <child>3</child> <child>3</child> </test> return (functx:distinct-nodes( ($in-xml/child[3], $in-xml/*) ))'
functx-functx-distinct-nodes-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The distinct XML nodes in a sequence (by node identity) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_distinct-nodes.html : @param $nodes the node sequence :)\n         declare function functx:distinct-nodes ( $nodes as node()* ) as node()* { for $seq in (1 to count($nodes)) return $nodes[$seq][not(functx:is-node-in-sequence( .,$nodes[position() < $seq]))] } ;\n                    (:~ : Whether an XML node is in a sequence, based on node identity : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-node-in-sequence.html : @param $node the node to test : @param $seq the sequence of nodes to search :)\n         declare function functx:is-node-in-sequence ( $node as node()? , $seq as node()* ) as xs:boolean { some $nodeInSeq in $seq satisfies $nodeInSeq is $node } ;\n                    let $in-xml :=  <test> <child>1</child> <child>2</child> <child>3</child> <child>3</child> </test> return (functx:distinct-nodes( ($in-xml/child, $in-xml/*) ), functx:distinct-nodes( ($in-xml/child[3], $in-xml/*) ))'
functx-functx-duration-from-timezone-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Converts a timezone like "-05:00" or "Z" into xs:dayTimeDuration : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_duration-from-timezone.html : @param $timezone the time zone, in (+|-)HH:MM format :)\n         declare function functx:duration-from-timezone ( $timezone as xs:string ) as xs:dayTimeDuration { xs:dayTimeDuration( if (not(matches($timezone,'Z|[\+\-]\d{2}:\d{2}'))) then error(xs:QName('functx:Invalid_Timezone_Value')) else if ($timezone = 'Z') then 'PT0S' else replace($timezone,'\+?(\d{2}):\d{2}','PT$1H') ) } ;\n                    (functx:duration-from-timezone('Z'))'
functx-functx-duration-from-timezone-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Converts a timezone like "-05:00" or "Z" into xs:dayTimeDuration : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_duration-from-timezone.html : @param $timezone the time zone, in (+|-)HH:MM format :)\n         declare function functx:duration-from-timezone ( $timezone as xs:string ) as xs:dayTimeDuration { xs:dayTimeDuration( if (not(matches($timezone,'Z|[\+\-]\d{2}:\d{2}'))) then error(xs:QName('functx:Invalid_Timezone_Value')) else if ($timezone = 'Z') then 'PT0S' else replace($timezone,'\+?(\d{2}):\d{2}','PT$1H') ) } ;\n                    (functx:duration-from-timezone('-05:00'))'
functx-functx-duration-from-timezone-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Converts a timezone like "-05:00" or "Z" into xs:dayTimeDuration : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_duration-from-timezone.html : @param $timezone the time zone, in (+|-)HH:MM format :)\n         declare function functx:duration-from-timezone ( $timezone as xs:string ) as xs:dayTimeDuration { xs:dayTimeDuration( if (not(matches($timezone,'Z|[\+\-]\d{2}:\d{2}'))) then error(xs:QName('functx:Invalid_Timezone_Value')) else if ($timezone = 'Z') then 'PT0S' else replace($timezone,'\+?(\d{2}):\d{2}','PT$1H') ) } ;\n                    (functx:duration-from-timezone('+09:00'))'
functx-functx-duration-from-timezone-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Converts a timezone like "-05:00" or "Z" into xs:dayTimeDuration : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_duration-from-timezone.html : @param $timezone the time zone, in (+|-)HH:MM format :)\n         declare function functx:duration-from-timezone ( $timezone as xs:string ) as xs:dayTimeDuration { xs:dayTimeDuration( if (not(matches($timezone,'Z|[\+\-]\d{2}:\d{2}'))) then error(xs:QName('functx:Invalid_Timezone_Value')) else if ($timezone = 'Z') then 'PT0S' else replace($timezone,'\+?(\d{2}):\d{2}','PT$1H') ) } ;\n                    (functx:duration-from-timezone('Z'), functx:duration-from-timezone('-05:00'), functx:duration-from-timezone('+09:00'))'
functx-functx-dynamic-path-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Dynamically evaluates a simple XPath path : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_dynamic-path.html : @param $parent the root to start from : @param $path the path expression :)\n         declare function functx:dynamic-path ( $parent as node() , $path as xs:string ) as item()* { \n            let $nextStep := functx:substring-before-if-contains($path,'/') \n            let $restOfSteps := substring-after($path,'/') \n            for $child in ($parent/*[functx:name-test(name(),$nextStep)], $parent/@*[functx:name-test(name(), substring-after($nextStep,'@'))]) \n            return if ($restOfSteps) then functx:dynamic-path($child, $restOfSteps) else $child \n         } ;\n                    (:~ : Whether a name matches a list of names or name wildcards : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_name-test.html : @param $testname the name to test : @param $names the list of names or name wildcards :)\n         declare function functx:name-test ( $testname as xs:string? , $names as xs:string* ) as xs:boolean { \n            $testname = $names or $names = '*' \n            or functx:substring-after-if-contains($testname,':') = (\n               for $name in $names \n               return substring-after($name,'*:')) \n            or substring-before($testname,':') = (\n               for $name in $names[contains(.,':*')] \n               return substring-before($name,':*')) \n         } ;\n                    (:~ : Performs substring-after, returning the entire string if it does not contain the delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-if-contains.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-after-if-contains ( $arg as xs:string? , $delim as xs:string ) as xs:string? { \n            if (contains($arg,$delim)) then substring-after($arg,$delim) else $arg \n         } ;\n                    (:~ : Performs substring-before, returning the entire string if it does not contain the delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-before-if-contains.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-before-if-contains ( $arg as xs:string? , $delim as xs:string ) as xs:string? { \n            if (contains($arg,$delim)) then substring-before($arg,$delim) else $arg \n         } ;\n         let $in-xml := <authors> <author test="abc"> <first>Kate</first> <last>Jones</last> </author> <author> <first>John</first> <a:last xmlns:a="http://a">Doe</a:last> </author> </authors> \n         return (functx:dynamic-path( $in-xml,'author/first'))\n      '
functx-functx-dynamic-path-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Dynamically evaluates a simple XPath path : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_dynamic-path.html : @param $parent the root to start from : @param $path the path expression :)\n         declare function functx:dynamic-path ( $parent as node() , $path as xs:string ) as item()* { let $nextStep := functx:substring-before-if-contains($path,'/') let $restOfSteps := substring-after($path,'/') for $child in ($parent/*[functx:name-test(name(),$nextStep)], $parent/@*[functx:name-test(name(), substring-after($nextStep,'@'))]) return if ($restOfSteps) then functx:dynamic-path($child, $restOfSteps) else $child } ;\n                    (:~ : Whether a name matches a list of names or name wildcards : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_name-test.html : @param $testname the name to test : @param $names the list of names or name wildcards :)\n         declare function functx:name-test ( $testname as xs:string? , $names as xs:string* ) as xs:boolean { $testname = $names or $names = '*' or functx:substring-after-if-contains($testname,':') = (for $name in $names return substring-after($name,'*:')) or substring-before($testname,':') = (for $name in $names[contains(.,':*')] return substring-before($name,':*')) } ;\n                    (:~ : Performs substring-after, returning the entire string if it does not contain the delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-if-contains.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-after-if-contains ( $arg as xs:string? , $delim as xs:string ) as xs:string? { if (contains($arg,$delim)) then substring-after($arg,$delim) else $arg } ;\n                    (:~ : Performs substring-before, returning the entire string if it does not contain the delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-before-if-contains.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-before-if-contains ( $arg as xs:string? , $delim as xs:string ) as xs:string? { if (contains($arg,$delim)) then substring-before($arg,$delim) else $arg } ;\n                    let $in-xml := <authors> <author test="abc"> <first>Kate</first> <last>Jones</last> </author> <author> <first>John</first> <a:last xmlns:a="http://a">Doe</a:last> </author> </authors> return (name(functx:dynamic-path( $in-xml,'author/@test')))'
functx-functx-dynamic-path-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Dynamically evaluates a simple XPath path : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_dynamic-path.html : @param $parent the root to start from : @param $path the path expression :)\n         declare function functx:dynamic-path ( $parent as node() , $path as xs:string ) as item()* { let $nextStep := functx:substring-before-if-contains($path,'/') let $restOfSteps := substring-after($path,'/') for $child in ($parent/*[functx:name-test(name(),$nextStep)], $parent/@*[functx:name-test(name(), substring-after($nextStep,'@'))]) return if ($restOfSteps) then functx:dynamic-path($child, $restOfSteps) else $child } ;\n                    (:~ : Whether a name matches a list of names or name wildcards : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_name-test.html : @param $testname the name to test : @param $names the list of names or name wildcards :)\n         declare function functx:name-test ( $testname as xs:string? , $names as xs:string* ) as xs:boolean { $testname = $names or $names = '*' or functx:substring-after-if-contains($testname,':') = (for $name in $names return substring-after($name,'*:')) or substring-before($testname,':') = (for $name in $names[contains(.,':*')] return substring-before($name,':*')) } ;\n                    (:~ : Performs substring-after, returning the entire string if it does not contain the delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-if-contains.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-after-if-contains ( $arg as xs:string? , $delim as xs:string ) as xs:string? { if (contains($arg,$delim)) then substring-after($arg,$delim) else $arg } ;\n                    (:~ : Performs substring-before, returning the entire string if it does not contain the delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-before-if-contains.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-before-if-contains ( $arg as xs:string? , $delim as xs:string ) as xs:string? { if (contains($arg,$delim)) then substring-before($arg,$delim) else $arg } ;\n                    let $in-xml := <authors> <author test="abc"> <first>Kate</first> <last>Jones</last> </author> <author> <first>John</first> <a:last xmlns:a="http://a">Doe</a:last> </author> </authors> return (functx:dynamic-path( $in-xml,'author'))'
functx-functx-dynamic-path-4;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Dynamically evaluates a simple XPath path : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_dynamic-path.html : @param $parent the root to start from : @param $path the path expression :)\n         declare function functx:dynamic-path ( $parent as node() , $path as xs:string ) as item()* { let $nextStep := functx:substring-before-if-contains($path,'/') let $restOfSteps := substring-after($path,'/') for $child in ($parent/*[functx:name-test(name(),$nextStep)], $parent/@*[functx:name-test(name(), substring-after($nextStep,'@'))]) return if ($restOfSteps) then functx:dynamic-path($child, $restOfSteps) else $child } ;\n                    (:~ : Whether a name matches a list of names or name wildcards : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_name-test.html : @param $testname the name to test : @param $names the list of names or name wildcards :)\n         declare function functx:name-test ( $testname as xs:string? , $names as xs:string* ) as xs:boolean { $testname = $names or $names = '*' or functx:substring-after-if-contains($testname,':') = (for $name in $names return substring-after($name,'*:')) or substring-before($testname,':') = (for $name in $names[contains(.,':*')] return substring-before($name,':*')) } ;\n                    (:~ : Performs substring-after, returning the entire string if it does not contain the delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-if-contains.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-after-if-contains ( $arg as xs:string? , $delim as xs:string ) as xs:string? { if (contains($arg,$delim)) then substring-after($arg,$delim) else $arg } ;\n                    (:~ : Performs substring-before, returning the entire string if it does not contain the delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-before-if-contains.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-before-if-contains ( $arg as xs:string? , $delim as xs:string ) as xs:string? { if (contains($arg,$delim)) then substring-before($arg,$delim) else $arg } ;\n                    let $in-xml := <authors> <author test="abc"> <first>Kate</first> <last>Jones</last> </author> <author> <first>John</first> <a:last xmlns:a="http://a">Doe</a:last> </author> </authors> return (functx:dynamic-path( $in-xml,'author/a:last'))'
functx-functx-dynamic-path-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Dynamically evaluates a simple XPath path : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_dynamic-path.html : @param $parent the root to start from : @param $path the path expression :)\n         declare function functx:dynamic-path ( $parent as node() , $path as xs:string ) as item()* { \n            let $nextStep := functx:substring-before-if-contains($path,'/') \n            let $restOfSteps := substring-after($path,'/') \n            for $child in ($parent/*[functx:name-test(name(),$nextStep)], $parent/@*[functx:name-test(name(), substring-after($nextStep,'@'))]) \n            return if ($restOfSteps) then functx:dynamic-path($child, $restOfSteps) else $child \n         } ;\n                    (:~ : Whether a name matches a list of names or name wildcards : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_name-test.html : @param $testname the name to test : @param $names the list of names or name wildcards :)\n         declare function functx:name-test ( $testname as xs:string? , $names as xs:string* ) as xs:boolean { \n            $testname = $names or $names = '*' or functx:substring-after-if-contains($testname,':') = (\n               for $name in $names return substring-after($name,'*:')) or substring-before($testname,':') = (for $name in $names[contains(.,':*')] \n               return substring-before($name,':*')) \n         } ;\n                    (:~ : Performs substring-after, returning the entire string if it does not contain the delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-if-contains.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-after-if-contains ( $arg as xs:string? , $delim as xs:string ) as xs:string? { \n            if (contains($arg,$delim)) then substring-after($arg,$delim) else $arg \n         } ;\n                    (:~ : Performs substring-before, returning the entire string if it does not contain the delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-before-if-contains.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-before-if-contains ( $arg as xs:string? , $delim as xs:string ) as xs:string? { \n            if (contains($arg,$delim)) then substring-before($arg,$delim) else $arg \n         } ;\n         let $in-xml := <authors> <author test="abc"> <first>Kate</first> <last>Jones</last> </author> <author> <first>John</first> <a:last xmlns:a="http://a">Doe</a:last> </author> </authors> \n         return document{(functx:dynamic-path( $in-xml,'author/first'), \n                 name(functx:dynamic-path( $in-xml,'author/@test')), \n                 functx:dynamic-path( $in-xml,'author'), \n                 functx:dynamic-path( $in-xml,'author/a:last'))}\n      '
functx-functx-escape-for-regex-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Escapes regex special characters : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_escape-for-regex.html : @param $arg the string to escape :)\n         declare function functx:escape-for-regex ( $arg as xs:string? ) as xs:string { replace($arg, '(\.|\[|\]|\\|\||\-|\^|\$|\?|\*|\+|\{|\}|\(|\))','\\$1') } ;\n                    (functx:escape-for-regex('5.55'))'
functx-functx-escape-for-regex-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Escapes regex special characters : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_escape-for-regex.html : @param $arg the string to escape :)\n         declare function functx:escape-for-regex ( $arg as xs:string? ) as xs:string { replace($arg, '(\.|\[|\]|\\|\||\-|\^|\$|\?|\*|\+|\{|\}|\(|\))','\\$1') } ;\n                    (functx:escape-for-regex('[abc]'))'
functx-functx-escape-for-regex-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Escapes regex special characters : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_escape-for-regex.html : @param $arg the string to escape :)\n         declare function functx:escape-for-regex ( $arg as xs:string? ) as xs:string { replace($arg, '(\.|\[|\]|\\|\||\-|\^|\$|\?|\*|\+|\{|\}|\(|\))','\\$1') } ;\n                    (functx:escape-for-regex('5.55'), functx:escape-for-regex('[abc]'))'
functx-functx-exclusive-or-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether one (and only one) of two boolean values is true : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_exclusive-or.html : @param $arg1 the first boolean value : @param $arg2 the second boolean value :)\n         declare function functx:exclusive-or ( $arg1 as xs:boolean? , $arg2 as xs:boolean? ) as xs:boolean? { $arg1 != $arg2 } ;\n                    (functx:exclusive-or(true(),false()))'
functx-functx-exclusive-or-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether one (and only one) of two boolean values is true : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_exclusive-or.html : @param $arg1 the first boolean value : @param $arg2 the second boolean value :)\n         declare function functx:exclusive-or ( $arg1 as xs:boolean? , $arg2 as xs:boolean? ) as xs:boolean? { $arg1 != $arg2 } ;\n                    (functx:exclusive-or(true(),true()))'
functx-functx-exclusive-or-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether one (and only one) of two boolean values is true : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_exclusive-or.html : @param $arg1 the first boolean value : @param $arg2 the second boolean value :)\n         declare function functx:exclusive-or ( $arg1 as xs:boolean? , $arg2 as xs:boolean? ) as xs:boolean? { $arg1 != $arg2 } ;\n                    (functx:exclusive-or(4 >\n                    3,1 >\n                    2))'
functx-functx-exclusive-or-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether one (and only one) of two boolean values is true : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_exclusive-or.html : @param $arg1 the first boolean value : @param $arg2 the second boolean value :)\n         declare function functx:exclusive-or ( $arg1 as xs:boolean? , $arg2 as xs:boolean? ) as xs:boolean? { $arg1 != $arg2 } ;\n                    (functx:exclusive-or(true(),false()), functx:exclusive-or(true(),true()), functx:exclusive-or(4 >\n                    3,1 >\n                    2))'
functx-functx-first-day-of-month-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Construct a date from a year, month and day : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_date.html : @param $year the year : @param $month the month : @param $day the day :)\n         declare function functx:date ( $year as xs:anyAtomicType , $month as xs:anyAtomicType , $day as xs:anyAtomicType ) as xs:date { xs:date( concat( functx:pad-integer-to-length(xs:integer($year),4),'-', functx:pad-integer-to-length(xs:integer($month),2),'-', functx:pad-integer-to-length(xs:integer($day),2))) } ;\n                    (:~ : The first day of the month of a date : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_first-day-of-month.html : @param $date the date :)\n         declare function functx:first-day-of-month ( $date as xs:anyAtomicType? ) as xs:date? { functx:date(year-from-date(xs:date($date)), month-from-date(xs:date($date)), 1) } ;\n                    (:~ : Pads an integer to a desired length by adding leading zeros : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_pad-integer-to-length.html : @param $integerToPad the integer to pad : @param $length the desired length :)\n         declare function functx:pad-integer-to-length ( $integerToPad as xs:anyAtomicType? , $length as xs:integer ) as xs:string { if ($length < string-length(string($integerToPad))) then error(xs:QName('functx:Integer_Longer_Than_Length')) else concat (functx:repeat-string( '0',$length - string-length(string($integerToPad))), string($integerToPad)) } ;\n                    (:~ : Repeats a string a given number of times : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_repeat-string.html : @param $stringToRepeat the string to repeat : @param $count the desired number of copies :)\n         declare function functx:repeat-string ( $stringToRepeat as xs:string? , $count as xs:integer ) as xs:string { string-join((for $i in 1 to $count return $stringToRepeat), '') } ;\n                    (functx:first-day-of-month( xs:date('2004-01-23')))'
functx-functx-first-day-of-month-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Construct a date from a year, month and day : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_date.html : @param $year the year : @param $month the month : @param $day the day :)\n         declare function functx:date ( $year as xs:anyAtomicType , $month as xs:anyAtomicType , $day as xs:anyAtomicType ) as xs:date { xs:date( concat( functx:pad-integer-to-length(xs:integer($year),4),'-', functx:pad-integer-to-length(xs:integer($month),2),'-', functx:pad-integer-to-length(xs:integer($day),2))) } ;\n                    (:~ : The first day of the month of a date : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_first-day-of-month.html : @param $date the date :)\n         declare function functx:first-day-of-month ( $date as xs:anyAtomicType? ) as xs:date? { functx:date(year-from-date(xs:date($date)), month-from-date(xs:date($date)), 1) } ;\n                    (:~ : Pads an integer to a desired length by adding leading zeros : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_pad-integer-to-length.html : @param $integerToPad the integer to pad : @param $length the desired length :)\n         declare function functx:pad-integer-to-length ( $integerToPad as xs:anyAtomicType? , $length as xs:integer ) as xs:string { if ($length < string-length(string($integerToPad))) then error(xs:QName('functx:Integer_Longer_Than_Length')) else concat (functx:repeat-string( '0',$length - string-length(string($integerToPad))), string($integerToPad)) } ;\n                    (:~ : Repeats a string a given number of times : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_repeat-string.html : @param $stringToRepeat the string to repeat : @param $count the desired number of copies :)\n         declare function functx:repeat-string ( $stringToRepeat as xs:string? , $count as xs:integer ) as xs:string { string-join((for $i in 1 to $count return $stringToRepeat), '') } ;\n                    (functx:first-day-of-month( xs:dateTime('2004-01-23T12:00:13')))'
functx-functx-first-day-of-month-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Construct a date from a year, month and day : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_date.html : @param $year the year : @param $month the month : @param $day the day :)\n         declare function functx:date ( $year as xs:anyAtomicType , $month as xs:anyAtomicType , $day as xs:anyAtomicType ) as xs:date { xs:date( concat( functx:pad-integer-to-length(xs:integer($year),4),'-', functx:pad-integer-to-length(xs:integer($month),2),'-', functx:pad-integer-to-length(xs:integer($day),2))) } ;\n                    (:~ : The first day of the month of a date : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_first-day-of-month.html : @param $date the date :)\n         declare function functx:first-day-of-month ( $date as xs:anyAtomicType? ) as xs:date? { functx:date(year-from-date(xs:date($date)), month-from-date(xs:date($date)), 1) } ;\n                    (:~ : Pads an integer to a desired length by adding leading zeros : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_pad-integer-to-length.html : @param $integerToPad the integer to pad : @param $length the desired length :)\n         declare function functx:pad-integer-to-length ( $integerToPad as xs:anyAtomicType? , $length as xs:integer ) as xs:string { if ($length < string-length(string($integerToPad))) then error(xs:QName('functx:Integer_Longer_Than_Length')) else concat (functx:repeat-string( '0',$length - string-length(string($integerToPad))), string($integerToPad)) } ;\n                    (:~ : Repeats a string a given number of times : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_repeat-string.html : @param $stringToRepeat the string to repeat : @param $count the desired number of copies :)\n         declare function functx:repeat-string ( $stringToRepeat as xs:string? , $count as xs:integer ) as xs:string { string-join((for $i in 1 to $count return $stringToRepeat), '') } ;\n                    (functx:first-day-of-month('2004-03-23'))'
functx-functx-first-day-of-month-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Construct a date from a year, month and day : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_date.html : @param $year the year : @param $month the month : @param $day the day :)\n         declare function functx:date ( $year as xs:anyAtomicType , $month as xs:anyAtomicType , $day as xs:anyAtomicType ) as xs:date { xs:date( concat( functx:pad-integer-to-length(xs:integer($year),4),'-', functx:pad-integer-to-length(xs:integer($month),2),'-', functx:pad-integer-to-length(xs:integer($day),2))) } ;\n                    (:~ : The first day of the month of a date : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_first-day-of-month.html : @param $date the date :)\n         declare function functx:first-day-of-month ( $date as xs:anyAtomicType? ) as xs:date? { functx:date(year-from-date(xs:date($date)), month-from-date(xs:date($date)), 1) } ;\n                    (:~ : Pads an integer to a desired length by adding leading zeros : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_pad-integer-to-length.html : @param $integerToPad the integer to pad : @param $length the desired length :)\n         declare function functx:pad-integer-to-length ( $integerToPad as xs:anyAtomicType? , $length as xs:integer ) as xs:string { if ($length < string-length(string($integerToPad))) then error(xs:QName('functx:Integer_Longer_Than_Length')) else concat (functx:repeat-string( '0',$length - string-length(string($integerToPad))), string($integerToPad)) } ;\n                    (:~ : Repeats a string a given number of times : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_repeat-string.html : @param $stringToRepeat the string to repeat : @param $count the desired number of copies :)\n         declare function functx:repeat-string ( $stringToRepeat as xs:string? , $count as xs:integer ) as xs:string { string-join((for $i in 1 to $count return $stringToRepeat), '') } ;\n                    (functx:first-day-of-month( xs:date('2004-01-23')), functx:first-day-of-month( xs:dateTime('2004-01-23T12:00:13')), functx:first-day-of-month('2004-03-23'))'
functx-functx-first-day-of-year-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Construct a date from a year, month and day : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_date.html : @param $year the year : @param $month the month : @param $day the day :)\n         declare function functx:date ( $year as xs:anyAtomicType , $month as xs:anyAtomicType , $day as xs:anyAtomicType ) as xs:date { xs:date( concat( functx:pad-integer-to-length(xs:integer($year),4),'-', functx:pad-integer-to-length(xs:integer($month),2),'-', functx:pad-integer-to-length(xs:integer($day),2))) } ;\n                    (:~ : The first day of the year of a date : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_first-day-of-year.html : @param $date the date :)\n         declare function functx:first-day-of-year ( $date as xs:anyAtomicType? ) as xs:date? { functx:date(year-from-date(xs:date($date)), 1, 1) } ;\n                    (:~ : Pads an integer to a desired length by adding leading zeros : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_pad-integer-to-length.html : @param $integerToPad the integer to pad : @param $length the desired length :)\n         declare function functx:pad-integer-to-length ( $integerToPad as xs:anyAtomicType? , $length as xs:integer ) as xs:string { if ($length < string-length(string($integerToPad))) then error(xs:QName('functx:Integer_Longer_Than_Length')) else concat (functx:repeat-string( '0',$length - string-length(string($integerToPad))), string($integerToPad)) } ;\n                    (:~ : Repeats a string a given number of times : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_repeat-string.html : @param $stringToRepeat the string to repeat : @param $count the desired number of copies :)\n         declare function functx:repeat-string ( $stringToRepeat as xs:string? , $count as xs:integer ) as xs:string { string-join((for $i in 1 to $count return $stringToRepeat), '') } ;\n                    (functx:first-day-of-year(xs:date('2004-01-23')))'
functx-functx-first-day-of-year-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Construct a date from a year, month and day : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_date.html : @param $year the year : @param $month the month : @param $day the day :)\n         declare function functx:date ( $year as xs:anyAtomicType , $month as xs:anyAtomicType , $day as xs:anyAtomicType ) as xs:date { xs:date( concat( functx:pad-integer-to-length(xs:integer($year),4),'-', functx:pad-integer-to-length(xs:integer($month),2),'-', functx:pad-integer-to-length(xs:integer($day),2))) } ;\n                    (:~ : The first day of the year of a date : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_first-day-of-year.html : @param $date the date :)\n         declare function functx:first-day-of-year ( $date as xs:anyAtomicType? ) as xs:date? { functx:date(year-from-date(xs:date($date)), 1, 1) } ;\n                    (:~ : Pads an integer to a desired length by adding leading zeros : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_pad-integer-to-length.html : @param $integerToPad the integer to pad : @param $length the desired length :)\n         declare function functx:pad-integer-to-length ( $integerToPad as xs:anyAtomicType? , $length as xs:integer ) as xs:string { if ($length < string-length(string($integerToPad))) then error(xs:QName('functx:Integer_Longer_Than_Length')) else concat (functx:repeat-string( '0',$length - string-length(string($integerToPad))), string($integerToPad)) } ;\n                    (:~ : Repeats a string a given number of times : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_repeat-string.html : @param $stringToRepeat the string to repeat : @param $count the desired number of copies :)\n         declare function functx:repeat-string ( $stringToRepeat as xs:string? , $count as xs:integer ) as xs:string { string-join((for $i in 1 to $count return $stringToRepeat), '') } ;\n                    (functx:first-day-of-year( xs:dateTime('2004-01-23T12:00:13')))'
functx-functx-first-day-of-year-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Construct a date from a year, month and day : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_date.html : @param $year the year : @param $month the month : @param $day the day :)\n         declare function functx:date ( $year as xs:anyAtomicType , $month as xs:anyAtomicType , $day as xs:anyAtomicType ) as xs:date { xs:date( concat( functx:pad-integer-to-length(xs:integer($year),4),'-', functx:pad-integer-to-length(xs:integer($month),2),'-', functx:pad-integer-to-length(xs:integer($day),2))) } ;\n                    (:~ : The first day of the year of a date : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_first-day-of-year.html : @param $date the date :)\n         declare function functx:first-day-of-year ( $date as xs:anyAtomicType? ) as xs:date? { functx:date(year-from-date(xs:date($date)), 1, 1) } ;\n                    (:~ : Pads an integer to a desired length by adding leading zeros : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_pad-integer-to-length.html : @param $integerToPad the integer to pad : @param $length the desired length :)\n         declare function functx:pad-integer-to-length ( $integerToPad as xs:anyAtomicType? , $length as xs:integer ) as xs:string { if ($length < string-length(string($integerToPad))) then error(xs:QName('functx:Integer_Longer_Than_Length')) else concat (functx:repeat-string( '0',$length - string-length(string($integerToPad))), string($integerToPad)) } ;\n                    (:~ : Repeats a string a given number of times : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_repeat-string.html : @param $stringToRepeat the string to repeat : @param $count the desired number of copies :)\n         declare function functx:repeat-string ( $stringToRepeat as xs:string? , $count as xs:integer ) as xs:string { string-join((for $i in 1 to $count return $stringToRepeat), '') } ;\n                    (functx:first-day-of-year('2004-03-23'))'
functx-functx-first-day-of-year-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Construct a date from a year, month and day : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_date.html : @param $year the year : @param $month the month : @param $day the day :)\n         declare function functx:date ( $year as xs:anyAtomicType , $month as xs:anyAtomicType , $day as xs:anyAtomicType ) as xs:date { xs:date( concat( functx:pad-integer-to-length(xs:integer($year),4),'-', functx:pad-integer-to-length(xs:integer($month),2),'-', functx:pad-integer-to-length(xs:integer($day),2))) } ;\n                    (:~ : The first day of the year of a date : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_first-day-of-year.html : @param $date the date :)\n         declare function functx:first-day-of-year ( $date as xs:anyAtomicType? ) as xs:date? { functx:date(year-from-date(xs:date($date)), 1, 1) } ;\n                    (:~ : Pads an integer to a desired length by adding leading zeros : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_pad-integer-to-length.html : @param $integerToPad the integer to pad : @param $length the desired length :)\n         declare function functx:pad-integer-to-length ( $integerToPad as xs:anyAtomicType? , $length as xs:integer ) as xs:string { if ($length < string-length(string($integerToPad))) then error(xs:QName('functx:Integer_Longer_Than_Length')) else concat (functx:repeat-string( '0',$length - string-length(string($integerToPad))), string($integerToPad)) } ;\n                    (:~ : Repeats a string a given number of times : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_repeat-string.html : @param $stringToRepeat the string to repeat : @param $count the desired number of copies :)\n         declare function functx:repeat-string ( $stringToRepeat as xs:string? , $count as xs:integer ) as xs:string { string-join((for $i in 1 to $count return $stringToRepeat), '') } ;\n                    (functx:first-day-of-year(xs:date('2004-01-23')), functx:first-day-of-year( xs:dateTime('2004-01-23T12:00:13')), functx:first-day-of-year('2004-03-23'))'
functx-functx-first-node-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The XML node in a sequence that appears first in document order : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_first-node.html : @param $nodes the sequence of nodes :)\n         declare function functx:first-node ( $nodes as node()* ) as node()? { ($nodes/.)[1] } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:first-node($in-xml//fName))'
functx-functx-first-node-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The XML node in a sequence that appears first in document order : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_first-node.html : @param $nodes the sequence of nodes :)\n         declare function functx:first-node ( $nodes as node()* ) as node()? { ($nodes/.)[1] } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:first-node( ($in-xml//lName, $in-xml//fName) ))'
functx-functx-first-node-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The XML node in a sequence that appears first in document order : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_first-node.html : @param $nodes the sequence of nodes :)\n         declare function functx:first-node ( $nodes as node()* ) as node()? { ($nodes/.)[1] } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:first-node($in-xml//fName), functx:first-node( ($in-xml//lName, $in-xml//fName) ))'
functx-functx-follows-not-descendant-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an XML node follows another without being its descendant : : @author W3C XML Query Working Group : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_follows-not-descendant.html : @param $a the first node : @param $b the second node :)\n         declare function functx:follows-not-descendant ( $a as node()? , $b as node()? ) as xs:boolean { $a >> $b and empty($b intersect $a/ancestor::node()) } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:follows-not-descendant( $in-xml//author[2],$in-xml//author[1]))'
functx-functx-follows-not-descendant-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an XML node follows another without being its descendant : : @author W3C XML Query Working Group : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_follows-not-descendant.html : @param $a the first node : @param $b the second node :)\n         declare function functx:follows-not-descendant ( $a as node()? , $b as node()? ) as xs:boolean { $a >> $b and empty($b intersect $a/ancestor::node()) } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:follows-not-descendant( $in-xml//author[1]/fName, $in-xml//author[1]))'
functx-functx-follows-not-descendant-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an XML node follows another without being its descendant : : @author W3C XML Query Working Group : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_follows-not-descendant.html : @param $a the first node : @param $b the second node :)\n         declare function functx:follows-not-descendant ( $a as node()? , $b as node()? ) as xs:boolean { $a >> $b and empty($b intersect $a/ancestor::node()) } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:follows-not-descendant( $in-xml//author[1],$in-xml//author[2]))'
functx-functx-follows-not-descendant-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an XML node follows another without being its descendant : : @author W3C XML Query Working Group : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_follows-not-descendant.html : @param $a the first node : @param $b the second node :)\n         declare function functx:follows-not-descendant ( $a as node()? , $b as node()? ) as xs:boolean { $a >> $b and empty($b intersect $a/ancestor::node()) } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:follows-not-descendant( $in-xml//author[2],$in-xml//author[1]), functx:follows-not-descendant( $in-xml//author[1]/fName, $in-xml//author[1]), functx:follows-not-descendant( $in-xml//author[1],$in-xml//author[2]))'
functx-functx-format-as-title-en-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Moves title words like "the" and "a" to the end of strings : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_format-as-title-en.html : @param $titles the titles to format :)\n         declare function functx:format-as-title-en ( $titles as xs:string* ) as xs:string* { let $wordsToMoveToEnd := ('A', 'An', 'The') for $title in $titles let $firstWord := functx:substring-before-match($title,'\W') return if ($firstWord = $wordsToMoveToEnd) then replace($title,'(.*?)\W(.*)', '$2, $1') else $title } ;\n                    (:~ : The substring before the first text that matches a regex : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-before-match.html : @param $arg the string to substring : @param $regex the regular expression :)\n         declare function functx:substring-before-match ( $arg as xs:string? , $regex as xs:string ) as xs:string? { tokenize($arg,$regex)[1] } ;\n                    (functx:format-as-title-en( ('A Midsummer Night''s Dream', 'The Merchant of Venice', 'Hamlet')))'
functx-functx-fragment-from-uri-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Returns the fragment from a URI : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_fragment-from-uri.html : @param $uri the URI :)\n         declare function functx:fragment-from-uri ( $uri as xs:string? ) as xs:string? { substring-after($uri,'#') } ;\n                    (functx:fragment-from-uri( 'http://datypic.com/index.htm#abc'))'
functx-functx-fragment-from-uri-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Returns the fragment from a URI : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_fragment-from-uri.html : @param $uri the URI :)\n         declare function functx:fragment-from-uri ( $uri as xs:string? ) as xs:string? { substring-after($uri,'#') } ;\n                    (functx:fragment-from-uri( 'http://datypic.com/index.htm'))'
functx-functx-fragment-from-uri-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Returns the fragment from a URI : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_fragment-from-uri.html : @param $uri the URI :)\n         declare function functx:fragment-from-uri ( $uri as xs:string? ) as xs:string? { substring-after($uri,'#') } ;\n                    (functx:fragment-from-uri( 'http://datypic.com/index.htm#abc'), functx:fragment-from-uri( 'http://datypic.com/index.htm'))'
functx-functx-get-matches-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Splits a string into matching and non-matching regions : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_get-matches-and-non-matches.html : @param $string the string to split : @param $regex the pattern :)\n         declare function functx:get-matches-and-non-matches ( $string as xs:string? , $regex as xs:string ) as element()* { let $iomf := functx:index-of-match-first($string, $regex) return if (empty($iomf)) then <non-match>{$string}</non-match> else if ($iomf > 1) then (<non-match>{substring($string,1,$iomf - 1)}</non-match>, functx:get-matches-and-non-matches( substring($string,$iomf),$regex)) else let $length := string-length($string) - string-length(functx:replace-first($string, $regex,'')) return (<match>{substring($string,1,$length)}</match>, if (string-length($string) > $length) then functx:get-matches-and-non-matches( substring($string,$length + 1),$regex) else ()) } ;\n                    (:~ : Return the matching regions of a string : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_get-matches.html : @param $string the string to split : @param $regex the pattern :)\n         declare function functx:get-matches ( $string as xs:string? , $regex as xs:string ) as xs:string* { functx:get-matches-and-non-matches($string,$regex)/ string(self::match) } ;\n                    (:~ : The first position of a matching substring : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_index-of-match-first.html : @param $arg the string : @param $pattern the pattern to match :)\n         declare function functx:index-of-match-first ( $arg as xs:string? , $pattern as xs:string ) as xs:integer? { if (matches($arg,$pattern)) then string-length(tokenize($arg, $pattern)[1]) + 1 else () } ;\n                    (:~ : Replaces the first match of a pattern : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_replace-first.html : @param $arg the entire string to change : @param $pattern the pattern of characters to replace : @param $replacement the replacement string :)\n         declare function functx:replace-first ( $arg as xs:string? , $pattern as xs:string , $replacement as xs:string ) as xs:string { replace($arg, concat('(^.*?)', $pattern), concat('$1',$replacement)) } ;\n                    (functx:get-matches( 'abc123def', '\d+'))'
functx-functx-get-matches-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Splits a string into matching and non-matching regions : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_get-matches-and-non-matches.html : @param $string the string to split : @param $regex the pattern :)\n         declare function functx:get-matches-and-non-matches ( $string as xs:string? , $regex as xs:string ) as element()* { let $iomf := functx:index-of-match-first($string, $regex) return if (empty($iomf)) then <non-match>{$string}</non-match> else if ($iomf > 1) then (<non-match>{substring($string,1,$iomf - 1)}</non-match>, functx:get-matches-and-non-matches( substring($string,$iomf),$regex)) else let $length := string-length($string) - string-length(functx:replace-first($string, $regex,'')) return (<match>{substring($string,1,$length)}</match>, if (string-length($string) > $length) then functx:get-matches-and-non-matches( substring($string,$length + 1),$regex) else ()) } ;\n                    (:~ : Return the matching regions of a string : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_get-matches.html : @param $string the string to split : @param $regex the pattern :)\n         declare function functx:get-matches ( $string as xs:string? , $regex as xs:string ) as xs:string* { functx:get-matches-and-non-matches($string,$regex)/ string(self::match) } ;\n                    (:~ : The first position of a matching substring : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_index-of-match-first.html : @param $arg the string : @param $pattern the pattern to match :)\n         declare function functx:index-of-match-first ( $arg as xs:string? , $pattern as xs:string ) as xs:integer? { if (matches($arg,$pattern)) then string-length(tokenize($arg, $pattern)[1]) + 1 else () } ;\n                    (:~ : Replaces the first match of a pattern : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_replace-first.html : @param $arg the entire string to change : @param $pattern the pattern of characters to replace : @param $replacement the replacement string :)\n         declare function functx:replace-first ( $arg as xs:string? , $pattern as xs:string , $replacement as xs:string ) as xs:string { replace($arg, concat('(^.*?)', $pattern), concat('$1',$replacement)) } ;\n                    (functx:get-matches( 'abc123def', '\d'))'
functx-functx-get-matches-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Splits a string into matching and non-matching regions : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_get-matches-and-non-matches.html : @param $string the string to split : @param $regex the pattern :)\n         declare function functx:get-matches-and-non-matches ( $string as xs:string? , $regex as xs:string ) as element()* { let $iomf := functx:index-of-match-first($string, $regex) return if (empty($iomf)) then <non-match>{$string}</non-match> else if ($iomf > 1) then (<non-match>{substring($string,1,$iomf - 1)}</non-match>, functx:get-matches-and-non-matches( substring($string,$iomf),$regex)) else let $length := string-length($string) - string-length(functx:replace-first($string, $regex,'')) return (<match>{substring($string,1,$length)}</match>, if (string-length($string) > $length) then functx:get-matches-and-non-matches( substring($string,$length + 1),$regex) else ()) } ;\n                    (:~ : Return the matching regions of a string : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_get-matches.html : @param $string the string to split : @param $regex the pattern :)\n         declare function functx:get-matches ( $string as xs:string? , $regex as xs:string ) as xs:string* { functx:get-matches-and-non-matches($string,$regex)/ string(self::match) } ;\n                    (:~ : The first position of a matching substring : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_index-of-match-first.html : @param $arg the string : @param $pattern the pattern to match :)\n         declare function functx:index-of-match-first ( $arg as xs:string? , $pattern as xs:string ) as xs:integer? { if (matches($arg,$pattern)) then string-length(tokenize($arg, $pattern)[1]) + 1 else () } ;\n                    (:~ : Replaces the first match of a pattern : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_replace-first.html : @param $arg the entire string to change : @param $pattern the pattern of characters to replace : @param $replacement the replacement string :)\n         declare function functx:replace-first ( $arg as xs:string? , $pattern as xs:string , $replacement as xs:string ) as xs:string { replace($arg, concat('(^.*?)', $pattern), concat('$1',$replacement)) } ;\n                    (functx:get-matches( 'abc123def', '[a-z]{2}'))'
functx-functx-get-matches-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Splits a string into matching and non-matching regions : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_get-matches-and-non-matches.html : @param $string the string to split : @param $regex the pattern :)\n         declare function functx:get-matches-and-non-matches ( $string as xs:string? , $regex as xs:string ) as element()* { let $iomf := functx:index-of-match-first($string, $regex) return if (empty($iomf)) then <non-match>{$string}</non-match> else if ($iomf > 1) then (<non-match>{substring($string,1,$iomf - 1)}</non-match>, functx:get-matches-and-non-matches( substring($string,$iomf),$regex)) else let $length := string-length($string) - string-length(functx:replace-first($string, $regex,'')) return (<match>{substring($string,1,$length)}</match>, if (string-length($string) > $length) then functx:get-matches-and-non-matches( substring($string,$length + 1),$regex) else ()) } ;\n                    (:~ : Return the matching regions of a string : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_get-matches.html : @param $string the string to split : @param $regex the pattern :)\n         declare function functx:get-matches ( $string as xs:string? , $regex as xs:string ) as xs:string* { functx:get-matches-and-non-matches($string,$regex)/ string(self::match) } ;\n                    (:~ : The first position of a matching substring : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_index-of-match-first.html : @param $arg the string : @param $pattern the pattern to match :)\n         declare function functx:index-of-match-first ( $arg as xs:string? , $pattern as xs:string ) as xs:integer? { if (matches($arg,$pattern)) then string-length(tokenize($arg, $pattern)[1]) + 1 else () } ;\n                    (:~ : Replaces the first match of a pattern : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_replace-first.html : @param $arg the entire string to change : @param $pattern the pattern of characters to replace : @param $replacement the replacement string :)\n         declare function functx:replace-first ( $arg as xs:string? , $pattern as xs:string , $replacement as xs:string ) as xs:string { replace($arg, concat('(^.*?)', $pattern), concat('$1',$replacement)) } ;\n                    (functx:get-matches( 'abc123def', '\d+'), functx:get-matches( 'abc123def', '\d'), functx:get-matches( 'abc123def', '[a-z]{2}'))'
functx-functx-get-matches-and-non-matches-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Splits a string into matching and non-matching regions : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_get-matches-and-non-matches.html : @param $string the string to split : @param $regex the pattern :)\n         declare function functx:get-matches-and-non-matches ( $string as xs:string? , $regex as xs:string ) as element()* { let $iomf := functx:index-of-match-first($string, $regex) return if (empty($iomf)) then <non-match>{$string}</non-match> else if ($iomf > 1) then (<non-match>{substring($string,1,$iomf - 1)}</non-match>, functx:get-matches-and-non-matches( substring($string,$iomf),$regex)) else let $length := string-length($string) - string-length(functx:replace-first($string, $regex,'')) return (<match>{substring($string,1,$length)}</match>, if (string-length($string) > $length) then functx:get-matches-and-non-matches( substring($string,$length + 1),$regex) else ()) } ;\n                    (:~ : The first position of a matching substring : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_index-of-match-first.html : @param $arg the string : @param $pattern the pattern to match :)\n         declare function functx:index-of-match-first ( $arg as xs:string? , $pattern as xs:string ) as xs:integer? { if (matches($arg,$pattern)) then string-length(tokenize($arg, $pattern)[1]) + 1 else () } ;\n                    (:~ : Replaces the first match of a pattern : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_replace-first.html : @param $arg the entire string to change : @param $pattern the pattern of characters to replace : @param $replacement the replacement string :)\n         declare function functx:replace-first ( $arg as xs:string? , $pattern as xs:string , $replacement as xs:string ) as xs:string { replace($arg, concat('(^.*?)', $pattern), concat('$1',$replacement)) } ;\n                    (functx:get-matches-and-non-matches( 'abc123def', '\d+'))'
functx-functx-get-matches-and-non-matches-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Splits a string into matching and non-matching regions : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_get-matches-and-non-matches.html : @param $string the string to split : @param $regex the pattern :)\n         declare function functx:get-matches-and-non-matches ( $string as xs:string? , $regex as xs:string ) as element()* { let $iomf := functx:index-of-match-first($string, $regex) return if (empty($iomf)) then <non-match>{$string}</non-match> else if ($iomf > 1) then (<non-match>{substring($string,1,$iomf - 1)}</non-match>, functx:get-matches-and-non-matches( substring($string,$iomf),$regex)) else let $length := string-length($string) - string-length(functx:replace-first($string, $regex,'')) return (<match>{substring($string,1,$length)}</match>, if (string-length($string) > $length) then functx:get-matches-and-non-matches( substring($string,$length + 1),$regex) else ()) } ;\n                    (:~ : The first position of a matching substring : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_index-of-match-first.html : @param $arg the string : @param $pattern the pattern to match :)\n         declare function functx:index-of-match-first ( $arg as xs:string? , $pattern as xs:string ) as xs:integer? { if (matches($arg,$pattern)) then string-length(tokenize($arg, $pattern)[1]) + 1 else () } ;\n                    (:~ : Replaces the first match of a pattern : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_replace-first.html : @param $arg the entire string to change : @param $pattern the pattern of characters to replace : @param $replacement the replacement string :)\n         declare function functx:replace-first ( $arg as xs:string? , $pattern as xs:string , $replacement as xs:string ) as xs:string { replace($arg, concat('(^.*?)', $pattern), concat('$1',$replacement)) } ;\n                    (functx:get-matches-and-non-matches( 'abc123def', '\d'))'
functx-functx-get-matches-and-non-matches-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n         (:~ : Splits a string into matching and non-matching regions : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_get-matches-and-non-matches.html : @param $string the string to split : @param $regex the pattern :)\n         declare function functx:get-matches-and-non-matches ( $string as xs:string? , $regex as xs:string ) as element()* { \n            let $iomf := functx:index-of-match-first($string, $regex) \n            return if (empty($iomf)) then <non-match>{$string}</non-match> \n                   else if ($iomf > 1) \n                        then (<non-match>{substring($string,1,$iomf - 1)}</non-match>, \n                              functx:get-matches-and-non-matches( substring($string,$iomf),$regex)) \n                        else let $length := string-length($string) - string-length(functx:replace-first($string, $regex,'')) \n                             return (<match>{substring($string,1,$length)}</match>, \n                                     if (string-length($string) > $length) \n                                     then functx:get-matches-and-non-matches( substring($string,$length + 1),$regex) else ()) \n         } ;\n         (:~ : The first position of a matching substring : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_index-of-match-first.html : @param $arg the string : @param $pattern the pattern to match :)\n         declare function functx:index-of-match-first ( $arg as xs:string? , $pattern as xs:string ) as xs:integer? { \n            if (matches($arg,$pattern)) \n            then string-length(tokenize($arg, $pattern)[1]) + 1 \n            else () \n         } ;\n         (:~ : Replaces the first match of a pattern : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_replace-first.html : @param $arg the entire string to change : @param $pattern the pattern of characters to replace : @param $replacement the replacement string :)\n         declare function functx:replace-first ( $arg as xs:string? , $pattern as xs:string , $replacement as xs:string ) as xs:string { \n            replace($arg, concat('(^.*?)', $pattern), concat('$1',$replacement)) \n         } ;\n         (functx:get-matches-and-non-matches( 'abc123def', '[a-z]{2}'))'
functx-functx-get-matches-and-non-matches-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Splits a string into matching and non-matching regions : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_get-matches-and-non-matches.html : @param $string the string to split : @param $regex the pattern :)\n         declare function functx:get-matches-and-non-matches ( $string as xs:string? , $regex as xs:string ) as element()* { let $iomf := functx:index-of-match-first($string, $regex) return if (empty($iomf)) then <non-match>{$string}</non-match> else if ($iomf > 1) then (<non-match>{substring($string,1,$iomf - 1)}</non-match>, functx:get-matches-and-non-matches( substring($string,$iomf),$regex)) else let $length := string-length($string) - string-length(functx:replace-first($string, $regex,'')) return (<match>{substring($string,1,$length)}</match>, if (string-length($string) > $length) then functx:get-matches-and-non-matches( substring($string,$length + 1),$regex) else ()) } ;\n                    (:~ : The first position of a matching substring : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_index-of-match-first.html : @param $arg the string : @param $pattern the pattern to match :)\n         declare function functx:index-of-match-first ( $arg as xs:string? , $pattern as xs:string ) as xs:integer? { if (matches($arg,$pattern)) then string-length(tokenize($arg, $pattern)[1]) + 1 else () } ;\n                    (:~ : Replaces the first match of a pattern : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_replace-first.html : @param $arg the entire string to change : @param $pattern the pattern of characters to replace : @param $replacement the replacement string :)\n         declare function functx:replace-first ( $arg as xs:string? , $pattern as xs:string , $replacement as xs:string ) as xs:string { replace($arg, concat('(^.*?)', $pattern), concat('$1',$replacement)) } ;\n                    (functx:get-matches-and-non-matches( 'abc123def', '\d+'), functx:get-matches-and-non-matches( 'abc123def', '\d'), functx:get-matches-and-non-matches( 'abc123def', '[a-z]{2}'))'
functx-functx-has-element-only-content-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an element has element-only content : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_has-element-only-content.html : @param $element the XML element to test :)\n         declare function functx:has-element-only-content ( $element as element() ) as xs:boolean { not($element/text()[normalize-space(.) != '']) and $element/* } ;\n                    let $in-xml := <in-xml> <a></a> <b/> <c> </c> <d>xml</d> <e><x>xml</x></e> <f>mixed <x>xml</x></f> <g> <x>xml</x> </g> <h><x>xml</x><y>xml</y></h> <i> <x>xml</x> <y>xml</y> </i> </in-xml> return (functx:has-element-only-content($in-xml/a))'
functx-functx-has-element-only-content-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an element has element-only content : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_has-element-only-content.html : @param $element the XML element to test :)\n         declare function functx:has-element-only-content ( $element as element() ) as xs:boolean { not($element/text()[normalize-space(.) != '']) and $element/* } ;\n                    let $in-xml := <in-xml> <a></a> <b/> <c> </c> <d>xml</d> <e><x>xml</x></e> <f>mixed <x>xml</x></f> <g> <x>xml</x> </g> <h><x>xml</x><y>xml</y></h> <i> <x>xml</x> <y>xml</y> </i> </in-xml> return (functx:has-element-only-content($in-xml/b))'
functx-functx-has-element-only-content-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an element has element-only content : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_has-element-only-content.html : @param $element the XML element to test :)\n         declare function functx:has-element-only-content ( $element as element() ) as xs:boolean { not($element/text()[normalize-space(.) != '']) and $element/* } ;\n                    let $in-xml := <in-xml> <a></a> <b/> <c> </c> <d>xml</d> <e><x>xml</x></e> <f>mixed <x>xml</x></f> <g> <x>xml</x> </g> <h><x>xml</x><y>xml</y></h> <i> <x>xml</x> <y>xml</y> </i> </in-xml> return (functx:has-element-only-content($in-xml/c))'
functx-functx-has-element-only-content-4;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an element has element-only content : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_has-element-only-content.html : @param $element the XML element to test :)\n         declare function functx:has-element-only-content ( $element as element() ) as xs:boolean { not($element/text()[normalize-space(.) != '']) and $element/* } ;\n                    let $in-xml := <in-xml> <a></a> <b/> <c> </c> <d>xml</d> <e><x>xml</x></e> <f>mixed <x>xml</x></f> <g> <x>xml</x> </g> <h><x>xml</x><y>xml</y></h> <i> <x>xml</x> <y>xml</y> </i> </in-xml> return (functx:has-element-only-content($in-xml/d))'
functx-functx-has-element-only-content-5;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an element has element-only content : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_has-element-only-content.html : @param $element the XML element to test :)\n         declare function functx:has-element-only-content ( $element as element() ) as xs:boolean { not($element/text()[normalize-space(.) != '']) and $element/* } ;\n                    let $in-xml := <in-xml> <a></a> <b/> <c> </c> <d>xml</d> <e><x>xml</x></e> <f>mixed <x>xml</x></f> <g> <x>xml</x> </g> <h><x>xml</x><y>xml</y></h> <i> <x>xml</x> <y>xml</y> </i> </in-xml> return (functx:has-element-only-content($in-xml/e))'
functx-functx-has-element-only-content-6;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an element has element-only content : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_has-element-only-content.html : @param $element the XML element to test :)\n         declare function functx:has-element-only-content ( $element as element() ) as xs:boolean { not($element/text()[normalize-space(.) != '']) and $element/* } ;\n                    let $in-xml := <in-xml> <a></a> <b/> <c> </c> <d>xml</d> <e><x>xml</x></e> <f>mixed <x>xml</x></f> <g> <x>xml</x> </g> <h><x>xml</x><y>xml</y></h> <i> <x>xml</x> <y>xml</y> </i> </in-xml> return (functx:has-element-only-content($in-xml/f))'
functx-functx-has-element-only-content-7;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an element has element-only content : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_has-element-only-content.html : @param $element the XML element to test :)\n         declare function functx:has-element-only-content ( $element as element() ) as xs:boolean { not($element/text()[normalize-space(.) != '']) and $element/* } ;\n                    let $in-xml := <in-xml> <a></a> <b/> <c> </c> <d>xml</d> <e><x>xml</x></e> <f>mixed <x>xml</x></f> <g> <x>xml</x> </g> <h><x>xml</x><y>xml</y></h> <i> <x>xml</x> <y>xml</y> </i> </in-xml> return (functx:has-element-only-content($in-xml/g))'
functx-functx-has-element-only-content-8;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an element has element-only content : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_has-element-only-content.html : @param $element the XML element to test :)\n         declare function functx:has-element-only-content ( $element as element() ) as xs:boolean { not($element/text()[normalize-space(.) != '']) and $element/* } ;\n                    let $in-xml := <in-xml> <a></a> <b/> <c> </c> <d>xml</d> <e><x>xml</x></e> <f>mixed <x>xml</x></f> <g> <x>xml</x> </g> <h><x>xml</x><y>xml</y></h> <i> <x>xml</x> <y>xml</y> </i> </in-xml> return (functx:has-element-only-content($in-xml/h))'
functx-functx-has-element-only-content-9;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an element has element-only content : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_has-element-only-content.html : @param $element the XML element to test :)\n         declare function functx:has-element-only-content ( $element as element() ) as xs:boolean { not($element/text()[normalize-space(.) != '']) and $element/* } ;\n                    let $in-xml := <in-xml> <a></a> <b/> <c> </c> <d>xml</d> <e><x>xml</x></e> <f>mixed <x>xml</x></f> <g> <x>xml</x> </g> <h><x>xml</x><y>xml</y></h> <i> <x>xml</x> <y>xml</y> </i> </in-xml> return (functx:has-element-only-content($in-xml/i))'
functx-functx-has-element-only-content-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an element has element-only content : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_has-element-only-content.html : @param $element the XML element to test :)\n         declare function functx:has-element-only-content ( $element as element() ) as xs:boolean { not($element/text()[normalize-space(.) != '']) and $element/* } ;\n                    let $in-xml := <in-xml> <a></a> <b/> <c> </c> <d>xml</d> <e><x>xml</x></e> <f>mixed <x>xml</x></f> <g> <x>xml</x> </g> <h><x>xml</x><y>xml</y></h> <i> <x>xml</x> <y>xml</y> </i> </in-xml> return (functx:has-element-only-content($in-xml/a), functx:has-element-only-content($in-xml/b), functx:has-element-only-content($in-xml/c), functx:has-element-only-content($in-xml/d), functx:has-element-only-content($in-xml/e), functx:has-element-only-content($in-xml/f), functx:has-element-only-content($in-xml/g), functx:has-element-only-content($in-xml/h), functx:has-element-only-content($in-xml/i))'
functx-functx-has-empty-content-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an element has empty content : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_has-empty-content.html : @param $element the XML element to test :)\n         declare function functx:has-empty-content ( $element as element() ) as xs:boolean { not($element/node()) } ;\n                    let $in-xml := <in-xml> <a></a> <b/> <c> </c> <d>xml</d> <e><x>xml</x></e> <f>mixed <x>xml</x></f> <g> <x>xml</x> </g> </in-xml> return (functx:has-empty-content($in-xml/a))'
functx-functx-has-empty-content-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an element has empty content : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_has-empty-content.html : @param $element the XML element to test :)\n         declare function functx:has-empty-content ( $element as element() ) as xs:boolean { not($element/node()) } ;\n                    let $in-xml := <in-xml> <a></a> <b/> <c> </c> <d>xml</d> <e><x>xml</x></e> <f>mixed <x>xml</x></f> <g> <x>xml</x> </g> </in-xml> return (functx:has-empty-content($in-xml/b))'
functx-functx-has-empty-content-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an element has empty content : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_has-empty-content.html : @param $element the XML element to test :)\n         declare function functx:has-empty-content ( $element as element() ) as xs:boolean { not($element/node()) } ;\n                    let $in-xml := <in-xml> <a></a> <b/> <c> </c> <d>xml</d> <e><x>xml</x></e> <f>mixed <x>xml</x></f> <g> <x>xml</x> </g> </in-xml> return (functx:has-empty-content($in-xml/c))'
functx-functx-has-empty-content-4;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an element has empty content : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_has-empty-content.html : @param $element the XML element to test :)\n         declare function functx:has-empty-content ( $element as element() ) as xs:boolean { not($element/node()) } ;\n                    let $in-xml := <in-xml> <a></a> <b/> <c> </c> <d>xml</d> <e><x>xml</x></e> <f>mixed <x>xml</x></f> <g> <x>xml</x> </g> </in-xml> return (functx:has-empty-content($in-xml/d))'
functx-functx-has-empty-content-5;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an element has empty content : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_has-empty-content.html : @param $element the XML element to test :)\n         declare function functx:has-empty-content ( $element as element() ) as xs:boolean { not($element/node()) } ;\n                    let $in-xml := <in-xml> <a></a> <b/> <c> </c> <d>xml</d> <e><x>xml</x></e> <f>mixed <x>xml</x></f> <g> <x>xml</x> </g> </in-xml> return (functx:has-empty-content($in-xml/e))'
functx-functx-has-empty-content-6;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an element has empty content : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_has-empty-content.html : @param $element the XML element to test :)\n         declare function functx:has-empty-content ( $element as element() ) as xs:boolean { not($element/node()) } ;\n                    let $in-xml := <in-xml> <a></a> <b/> <c> </c> <d>xml</d> <e><x>xml</x></e> <f>mixed <x>xml</x></f> <g> <x>xml</x> </g> </in-xml> return (functx:has-empty-content($in-xml/f))'
functx-functx-has-empty-content-7;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an element has empty content : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_has-empty-content.html : @param $element the XML element to test :)\n         declare function functx:has-empty-content ( $element as element() ) as xs:boolean { not($element/node()) } ;\n                    let $in-xml := <in-xml> <a></a> <b/> <c> </c> <d>xml</d> <e><x>xml</x></e> <f>mixed <x>xml</x></f> <g> <x>xml</x> </g> </in-xml> return (functx:has-empty-content($in-xml/g))'
functx-functx-has-empty-content-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an element has empty content : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_has-empty-content.html : @param $element the XML element to test :)\n         declare function functx:has-empty-content ( $element as element() ) as xs:boolean { not($element/node()) } ;\n                    let $in-xml := <in-xml> <a></a> <b/> <c> </c> <d>xml</d> <e><x>xml</x></e> <f>mixed <x>xml</x></f> <g> <x>xml</x> </g> </in-xml> return (functx:has-empty-content($in-xml/a), functx:has-empty-content($in-xml/b), functx:has-empty-content($in-xml/c), functx:has-empty-content($in-xml/d), functx:has-empty-content($in-xml/e), functx:has-empty-content($in-xml/f), functx:has-empty-content($in-xml/g))'
functx-functx-has-mixed-content-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an element has mixed content : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_has-mixed-content.html : @param $element the XML element to test :)\n         declare function functx:has-mixed-content ( $element as element() ) as xs:boolean { $element/text()[normalize-space(.) != ''] and $element/* } ;\n                    let $in-xml := <in-xml> <a></a> <b/> <c> </c> <d>xml</d> <e><x>xml</x></e> <f>mixed <x>xml</x></f> <g> <x>xml</x> </g> </in-xml> return (functx:has-mixed-content($in-xml/a))'
functx-functx-has-mixed-content-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an element has mixed content : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_has-mixed-content.html : @param $element the XML element to test :)\n         declare function functx:has-mixed-content ( $element as element() ) as xs:boolean { $element/text()[normalize-space(.) != ''] and $element/* } ;\n                    let $in-xml := <in-xml> <a></a> <b/> <c> </c> <d>xml</d> <e><x>xml</x></e> <f>mixed <x>xml</x></f> <g> <x>xml</x> </g> </in-xml> return (functx:has-mixed-content($in-xml/b))'
functx-functx-has-mixed-content-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an element has mixed content : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_has-mixed-content.html : @param $element the XML element to test :)\n         declare function functx:has-mixed-content ( $element as element() ) as xs:boolean { $element/text()[normalize-space(.) != ''] and $element/* } ;\n                    let $in-xml := <in-xml> <a></a> <b/> <c> </c> <d>xml</d> <e><x>xml</x></e> <f>mixed <x>xml</x></f> <g> <x>xml</x> </g> </in-xml> return (functx:has-mixed-content($in-xml/c))'
functx-functx-has-mixed-content-4;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an element has mixed content : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_has-mixed-content.html : @param $element the XML element to test :)\n         declare function functx:has-mixed-content ( $element as element() ) as xs:boolean { $element/text()[normalize-space(.) != ''] and $element/* } ;\n                    let $in-xml := <in-xml> <a></a> <b/> <c> </c> <d>xml</d> <e><x>xml</x></e> <f>mixed <x>xml</x></f> <g> <x>xml</x> </g> </in-xml> return (functx:has-mixed-content($in-xml/d))'
functx-functx-has-mixed-content-5;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an element has mixed content : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_has-mixed-content.html : @param $element the XML element to test :)\n         declare function functx:has-mixed-content ( $element as element() ) as xs:boolean { $element/text()[normalize-space(.) != ''] and $element/* } ;\n                    let $in-xml := <in-xml> <a></a> <b/> <c> </c> <d>xml</d> <e><x>xml</x></e> <f>mixed <x>xml</x></f> <g> <x>xml</x> </g> </in-xml> return (functx:has-mixed-content($in-xml/e))'
functx-functx-has-mixed-content-6;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an element has mixed content : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_has-mixed-content.html : @param $element the XML element to test :)\n         declare function functx:has-mixed-content ( $element as element() ) as xs:boolean { $element/text()[normalize-space(.) != ''] and $element/* } ;\n                    let $in-xml := <in-xml> <a></a> <b/> <c> </c> <d>xml</d> <e><x>xml</x></e> <f>mixed <x>xml</x></f> <g> <x>xml</x> </g> </in-xml> return (functx:has-mixed-content($in-xml/f))'
functx-functx-has-mixed-content-7;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an element has mixed content : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_has-mixed-content.html : @param $element the XML element to test :)\n         declare function functx:has-mixed-content ( $element as element() ) as xs:boolean { $element/text()[normalize-space(.) != ''] and $element/* } ;\n                    let $in-xml := <in-xml> <a></a> <b/> <c> </c> <d>xml</d> <e><x>xml</x></e> <f>mixed <x>xml</x></f> <g> <x>xml</x> </g> </in-xml> return (functx:has-mixed-content($in-xml/g))'
functx-functx-has-mixed-content-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an element has mixed content : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_has-mixed-content.html : @param $element the XML element to test :)\n         declare function functx:has-mixed-content ( $element as element() ) as xs:boolean { $element/text()[normalize-space(.) != ''] and $element/* } ;\n                    let $in-xml := <in-xml> <a></a> <b/> <c> </c> <d>xml</d> <e><x>xml</x></e> <f>mixed <x>xml</x></f> <g> <x>xml</x> </g> </in-xml> return (functx:has-mixed-content($in-xml/a), functx:has-mixed-content($in-xml/b), functx:has-mixed-content($in-xml/c), functx:has-mixed-content($in-xml/d), functx:has-mixed-content($in-xml/e), functx:has-mixed-content($in-xml/f), functx:has-mixed-content($in-xml/g))'
functx-functx-has-simple-content-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an element has simple content : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_has-simple-content.html : @param $element the XML element to test :)\n         declare function functx:has-simple-content ( $element as element() ) as xs:boolean { $element/text() and not($element/*) } ;\n                    let $in-xml := <in-xml> <a></a> <b/> <c> </c> <d>xml</d> <e><x>xml</x></e> <f>mixed <x>xml</x></f> </in-xml> return (functx:has-simple-content($in-xml/a))'
functx-functx-has-simple-content-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an element has simple content : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_has-simple-content.html : @param $element the XML element to test :)\n         declare function functx:has-simple-content ( $element as element() ) as xs:boolean { $element/text() and not($element/*) } ;\n                    let $in-xml := <in-xml> <a></a> <b/> <c> </c> <d>xml</d> <e><x>xml</x></e> <f>mixed <x>xml</x></f> </in-xml> return (functx:has-simple-content($in-xml/b))'
functx-functx-has-simple-content-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an element has simple content : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_has-simple-content.html : @param $element the XML element to test :)\n         declare function functx:has-simple-content ( $element as element() ) as xs:boolean { $element/text() and not($element/*) } ;\n                    let $in-xml := <in-xml> <a></a> <b/> <c> </c> <d>xml</d> <e><x>xml</x></e> <f>mixed <x>xml</x></f> </in-xml> return (functx:has-simple-content($in-xml/c))'
functx-functx-has-simple-content-4;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an element has simple content : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_has-simple-content.html : @param $element the XML element to test :)\n         declare function functx:has-simple-content ( $element as element() ) as xs:boolean { $element/text() and not($element/*) } ;\n                    let $in-xml := <in-xml> <a></a> <b/> <c> </c> <d>xml</d> <e><x>xml</x></e> <f>mixed <x>xml</x></f> </in-xml> return (functx:has-simple-content($in-xml/d))'
functx-functx-has-simple-content-5;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an element has simple content : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_has-simple-content.html : @param $element the XML element to test :)\n         declare function functx:has-simple-content ( $element as element() ) as xs:boolean { $element/text() and not($element/*) } ;\n                    let $in-xml := <in-xml> <a></a> <b/> <c> </c> <d>xml</d> <e><x>xml</x></e> <f>mixed <x>xml</x></f> </in-xml> return (functx:has-simple-content($in-xml/e))'
functx-functx-has-simple-content-6;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an element has simple content : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_has-simple-content.html : @param $element the XML element to test :)\n         declare function functx:has-simple-content ( $element as element() ) as xs:boolean { $element/text() and not($element/*) } ;\n                    let $in-xml := <in-xml> <a></a> <b/> <c> </c> <d>xml</d> <e><x>xml</x></e> <f>mixed <x>xml</x></f> </in-xml> return (functx:has-simple-content($in-xml/f))'
functx-functx-has-simple-content-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an element has simple content : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_has-simple-content.html : @param $element the XML element to test :)\n         declare function functx:has-simple-content ( $element as element() ) as xs:boolean { $element/text() and not($element/*) } ;\n                    let $in-xml := <in-xml> <a></a> <b/> <c> </c> <d>xml</d> <e><x>xml</x></e> <f>mixed <x>xml</x></f> </in-xml> return (functx:has-simple-content($in-xml/a), functx:has-simple-content($in-xml/b), functx:has-simple-content($in-xml/c), functx:has-simple-content($in-xml/d), functx:has-simple-content($in-xml/e), functx:has-simple-content($in-xml/f))'
functx-functx-id-from-element-1;PRSC Error: Failed to parse query '\n         declare namespace functx = "http://www.example.com/";\n         declare function functx:id-from-element ( $element as element()? ) as xs:string? { data(($element/@*[id(.) is ..])[1]) } ;\n         let $book := (/) return (functx:id-from-element($book/book/section[1]))'
functx-functx-id-untyped-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Gets XML element(s) that have an attribute with a particular value : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_id-untyped.html : @param $node the root node(s) to start from : @param $id the "id" to find :)\n         declare function functx:id-untyped ( $node as node()* , $id as xs:anyAtomicType ) as element()* { $node//*[@* = $id] } ;\n                    let $in-xml := <in-xml> <a id="A001">abc</a> <b foo="A001">def</b> <c id="B001">ghi</c> </in-xml> return (functx:id-untyped($in-xml,'B001'))'
functx-functx-id-untyped-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Gets XML element(s) that have an attribute with a particular value : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_id-untyped.html : @param $node the root node(s) to start from : @param $id the "id" to find :)\n         declare function functx:id-untyped ( $node as node()* , $id as xs:anyAtomicType ) as element()* { $node//*[@* = $id] } ;\n                    let $in-xml := <in-xml> <a id="A001">abc</a> <b foo="A001">def</b> <c id="B001">ghi</c> </in-xml> return (functx:id-untyped($in-xml,'A001'))'
functx-functx-id-untyped-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Gets XML element(s) that have an attribute with a particular value : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_id-untyped.html : @param $node the root node(s) to start from : @param $id the "id" to find :)\n         declare function functx:id-untyped ( $node as node()* , $id as xs:anyAtomicType ) as element()* { $node//*[@* = $id] } ;\n                    let $in-xml := <in-xml> <a id="A001">abc</a> <b foo="A001">def</b> <c id="B001">ghi</c> </in-xml> return (functx:id-untyped($in-xml,'C001'))'
functx-functx-id-untyped-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Gets XML element(s) that have an attribute with a particular value : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_id-untyped.html : @param $node the root node(s) to start from : @param $id the "id" to find :)\n         declare function functx:id-untyped ( $node as node()* , $id as xs:anyAtomicType ) as element()* { $node//*[@* = $id] } ;\n                    let $in-xml := <in-xml> <a id="A001">abc</a> <b foo="A001">def</b> <c id="B001">ghi</c> </in-xml> return (functx:id-untyped($in-xml,'B001'), functx:id-untyped($in-xml,'A001'), functx:id-untyped($in-xml,'C001'))'
functx-functx-if-absent-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The first argument if it is not empty, otherwise the second argument : : @author W3C XML Query WG : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_if-absent.html : @param $arg the item(s) that may be absent : @param $value the item(s) to use if the item is absent :)\n         declare function functx:if-absent ( $arg as item()* , $value as item()* ) as item()* { if (exists($arg)) then $arg else $value } ;\n                    let $in-xml := <prices> <price value="29.99" discount="10.00"/> <price value="39.99" discount="6.00"/> <price value="69.99"/> <price value="49.99" discount=""/> </prices> return (data(functx:if-absent( $in-xml//price[1]/@discount, 0)))'
functx-functx-if-absent-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The first argument if it is not empty, otherwise the second argument : : @author W3C XML Query WG : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_if-absent.html : @param $arg the item(s) that may be absent : @param $value the item(s) to use if the item is absent :)\n         declare function functx:if-absent ( $arg as item()* , $value as item()* ) as item()* { if (exists($arg)) then $arg else $value } ;\n                    let $in-xml := <prices> <price value="29.99" discount="10.00"/> <price value="39.99" discount="6.00"/> <price value="69.99"/> <price value="49.99" discount=""/> </prices> return (data(functx:if-absent( $in-xml//price[3]/@discount, 0))) = 0'
functx-functx-if-absent-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The first argument if it is not empty, otherwise the second argument : : @author W3C XML Query WG : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_if-absent.html : @param $arg the item(s) that may be absent : @param $value the item(s) to use if the item is absent :)\n         declare function functx:if-absent ( $arg as item()* , $value as item()* ) as item()* { if (exists($arg)) then $arg else $value } ;\n                    let $in-xml := <prices> <price value="29.99" discount="10.00"/> <price value="39.99" discount="6.00"/> <price value="69.99"/> <price value="49.99" discount=""/> </prices> return (data(functx:if-absent( $in-xml//price[4]/@discount, 0)))'
functx-functx-if-absent-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The first argument if it is not empty, otherwise the second argument : : @author W3C XML Query WG : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_if-absent.html : @param $arg the item(s) that may be absent : @param $value the item(s) to use if the item is absent :)\n         declare function functx:if-absent ( $arg as item()* , $value as item()* ) as item()* { if (exists($arg)) then $arg else $value } ;\n                    let $in-xml := <prices> <price value="29.99" discount="10.00"/> <price value="39.99" discount="6.00"/> <price value="69.99"/> <price value="49.99" discount=""/> </prices> return (data(functx:if-absent( $in-xml//price[1]/@discount, 0)), data(functx:if-absent( $in-xml//price[3]/@discount, 0)), data(functx:if-absent( $in-xml//price[4]/@discount, 0)))'
functx-functx-if-empty-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The first argument if it is not blank, otherwise the second argument : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_if-empty.html : @param $arg the node that may be empty : @param $value the item(s) to use if the node is empty :)\n         declare function functx:if-empty ( $arg as item()? , $value as item()* ) as item()* { if (string($arg) != '') then data($arg) else $value } ;\n                    let $in-xml := <prices> <price discount="10.00">29.99</price> <price discount="6.00">39.99</price> <price></price> <price discount="">49.99</price> </prices> return (functx:if-empty($in-xml//price[1], 0))'
functx-functx-if-empty-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The first argument if it is not blank, otherwise the second argument : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_if-empty.html : @param $arg the node that may be empty : @param $value the item(s) to use if the node is empty :)\n         declare function functx:if-empty ( $arg as item()? , $value as item()* ) as item()* { if (string($arg) != '') then data($arg) else $value } ;\n                    let $in-xml := <prices> <price discount="10.00">29.99</price> <price discount="6.00">39.99</price> <price></price> <price discount="">49.99</price> </prices> return (functx:if-empty($in-xml//price[3], 0)) = 0'
functx-functx-if-empty-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The first argument if it is not blank, otherwise the second argument : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_if-empty.html : @param $arg the node that may be empty : @param $value the item(s) to use if the node is empty :)\n         declare function functx:if-empty ( $arg as item()? , $value as item()* ) as item()* { if (string($arg) != '') then data($arg) else $value } ;\n                    let $in-xml := <prices> <price discount="10.00">29.99</price> <price discount="6.00">39.99</price> <price></price> <price discount="">49.99</price> </prices> return (functx:if-empty($in-xml//price[99], 0)) = 0'
functx-functx-if-empty-4;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The first argument if it is not blank, otherwise the second argument : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_if-empty.html : @param $arg the node that may be empty : @param $value the item(s) to use if the node is empty :)\n         declare function functx:if-empty ( $arg as item()? , $value as item()* ) as item()* { if (string($arg) != '') then data($arg) else $value } ;\n                    let $in-xml := <prices> <price discount="10.00">29.99</price> <price discount="6.00">39.99</price> <price></price> <price discount="">49.99</price> </prices> return (functx:if-empty($in-xml//price[1]/@discount, 0))'
functx-functx-if-empty-5;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The first argument if it is not blank, otherwise the second argument : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_if-empty.html : @param $arg the node that may be empty : @param $value the item(s) to use if the node is empty :)\n         declare function functx:if-empty ( $arg as item()? , $value as item()* ) as item()* { if (string($arg) != '') then data($arg) else $value } ;\n                    let $in-xml := <prices> <price discount="10.00">29.99</price> <price discount="6.00">39.99</price> <price></price> <price discount="">49.99</price> </prices> return (functx:if-empty($in-xml//price[3]/@discount, 0)) = 0'
functx-functx-if-empty-6;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The first argument if it is not blank, otherwise the second argument : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_if-empty.html : @param $arg the node that may be empty : @param $value the item(s) to use if the node is empty :)\n         declare function functx:if-empty ( $arg as item()? , $value as item()* ) as item()* { if (string($arg) != '') then data($arg) else $value } ;\n                    let $in-xml := <prices> <price discount="10.00">29.99</price> <price discount="6.00">39.99</price> <price></price> <price discount="">49.99</price> </prices> return (functx:if-empty($in-xml//price[4]/@discount, 0)) = 0'
functx-functx-if-empty-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The first argument if it is not blank, otherwise the second argument : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_if-empty.html : @param $arg the node that may be empty : @param $value the item(s) to use if the node is empty :)\n         declare function functx:if-empty ( $arg as item()? , $value as item()* ) as item()* { if (string($arg) != '') then data($arg) else $value } ;\n                    let $in-xml := <prices> <price discount="10.00">29.99</price> <price discount="6.00">39.99</price> <price></price> <price discount="">49.99</price> </prices> return (functx:if-empty($in-xml//price[1], 0), functx:if-empty($in-xml//price[3], 0), functx:if-empty($in-xml//price[99], 0), functx:if-empty($in-xml//price[1]/@discount, 0), functx:if-empty($in-xml//price[3]/@discount, 0), functx:if-empty($in-xml//price[4]/@discount, 0))'
functx-functx-index-of-deep-equal-node-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The position of a node in a sequence, based on contents and attributes : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_index-of-deep-equal-node.html : @param $nodes the node sequence : @param $nodeToFind the node to find in the sequence :)\n         declare function functx:index-of-deep-equal-node ( $nodes as node()* , $nodeToFind as node() ) as xs:integer* { for $seq in (1 to count($nodes)) return $seq[deep-equal($nodes[$seq],$nodeToFind)] } ;\n                    let $in-xml := <authors> <author> <fName/> <lName>Smith</lName> </author> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return let $anAuthor := <author> <fName>Kate</fName> <lName>Jones</lName> </author> return let $anotherAuthor := <author> <fName>John</fName> <lName>Smith</lName> </author> return (functx:index-of-deep-equal-node( $in-xml/author,$anAuthor)) = 2'
functx-functx-index-of-deep-equal-node-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The position of a node in a sequence, based on contents and attributes : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_index-of-deep-equal-node.html : @param $nodes the node sequence : @param $nodeToFind the node to find in the sequence :)\n         declare function functx:index-of-deep-equal-node ( $nodes as node()* , $nodeToFind as node() ) as xs:integer* { for $seq in (1 to count($nodes)) return $seq[deep-equal($nodes[$seq],$nodeToFind)] } ;\n                    let $in-xml := <authors> <author> <fName/> <lName>Smith</lName> </author> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return let $anAuthor := <author> <fName>Kate</fName> <lName>Jones</lName> </author> return let $anotherAuthor := <author> <fName>John</fName> <lName>Smith</lName> </author> return (functx:index-of-deep-equal-node( $in-xml/author,$anotherAuthor))'
functx-functx-index-of-deep-equal-node-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The position of a node in a sequence, based on contents and attributes : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_index-of-deep-equal-node.html : @param $nodes the node sequence : @param $nodeToFind the node to find in the sequence :)\n         declare function functx:index-of-deep-equal-node ( $nodes as node()* , $nodeToFind as node() ) as xs:integer* { for $seq in (1 to count($nodes)) return $seq[deep-equal($nodes[$seq],$nodeToFind)] } ;\n                    let $in-xml := <authors> <author> <fName/> <lName>Smith</lName> </author> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return let $anAuthor := <author> <fName>Kate</fName> <lName>Jones</lName> </author> return let $anotherAuthor := <author> <fName>John</fName> <lName>Smith</lName> </author> return (functx:index-of-deep-equal-node( $in-xml/author/lName,$anAuthor/lName)) = 2'
functx-functx-index-of-deep-equal-node-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The position of a node in a sequence, based on contents and attributes :\n                        : @author Priscilla Walmsley, Datypic\n                        : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_index-of-deep-equal-node.html\n                        : @param $nodes the node sequence : @param $nodeToFind the node to find in the sequence :)\n                        \n         declare function functx:index-of-deep-equal-node ( $nodes as node()* , $nodeToFind as node() ) as xs:integer* { \n            for $seq in (1 to count($nodes)) \n            return $seq[deep-equal($nodes[$seq],$nodeToFind)] \n         } ;\n         let $in-xml := <authors> <author> <fName/> <lName>Smith</lName> </author> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> \n         return \n             let $anAuthor := <author> <fName>Kate</fName> <lName>Jones</lName> </author> \n             return \n                 let $anotherAuthor := <author> <fName>John</fName> <lName>Smith</lName> </author> \n                 return (functx:index-of-deep-equal-node( $in-xml/author,$anAuthor), \n                         functx:index-of-deep-equal-node( $in-xml/author,$anotherAuthor), \n                         functx:index-of-deep-equal-node( $in-xml/author/lName,$anAuthor/lName))\n      '
functx-functx-index-of-match-first-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The first position of a matching substring : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_index-of-match-first.html : @param $arg the string : @param $pattern the pattern to match :)\n         declare function functx:index-of-match-first ( $arg as xs:string? , $pattern as xs:string ) as xs:integer? { if (matches($arg,$pattern)) then string-length(tokenize($arg, $pattern)[1]) + 1 else () } ;\n                    (functx:index-of-match-first( 'abcdabcdabcd','abc')) = 1'
functx-functx-index-of-match-first-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The first position of a matching substring : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_index-of-match-first.html : @param $arg the string : @param $pattern the pattern to match :)\n         declare function functx:index-of-match-first ( $arg as xs:string? , $pattern as xs:string ) as xs:integer? { if (matches($arg,$pattern)) then string-length(tokenize($arg, $pattern)[1]) + 1 else () } ;\n                    (functx:index-of-match-first( 'abcdabcdabcd','bcd')) = 2'
functx-functx-index-of-match-first-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The first position of a matching substring : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_index-of-match-first.html : @param $arg the string : @param $pattern the pattern to match :)\n         declare function functx:index-of-match-first ( $arg as xs:string? , $pattern as xs:string ) as xs:integer? { if (matches($arg,$pattern)) then string-length(tokenize($arg, $pattern)[1]) + 1 else () } ;\n                    (functx:index-of-match-first('a1234','\d')) = 2'
functx-functx-index-of-match-first-4;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The first position of a matching substring : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_index-of-match-first.html : @param $arg the string : @param $pattern the pattern to match :)\n         declare function functx:index-of-match-first ( $arg as xs:string? , $pattern as xs:string ) as xs:integer? { if (matches($arg,$pattern)) then string-length(tokenize($arg, $pattern)[1]) + 1 else () } ;\n                    (functx:index-of-match-first('abc abc','\s')) = 4'
functx-functx-index-of-match-first-5;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The first position of a matching substring : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_index-of-match-first.html : @param $arg the string : @param $pattern the pattern to match :)\n         declare function functx:index-of-match-first ( $arg as xs:string? , $pattern as xs:string ) as xs:integer? { if (matches($arg,$pattern)) then string-length(tokenize($arg, $pattern)[1]) + 1 else () } ;\n                    (functx:index-of-match-first('abc abc','z'))'
functx-functx-index-of-match-first-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The first position of a matching substring : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_index-of-match-first.html : @param $arg the string : @param $pattern the pattern to match :)\n         declare function functx:index-of-match-first ( $arg as xs:string? , $pattern as xs:string ) as xs:integer? { if (matches($arg,$pattern)) then string-length(tokenize($arg, $pattern)[1]) + 1 else () } ;\n                    (functx:index-of-match-first( 'abcdabcdabcd','abc'), functx:index-of-match-first( 'abcdabcdabcd','bcd'), functx:index-of-match-first('a1234','\d'), functx:index-of-match-first('abc abc','\s'), functx:index-of-match-first('abc abc','z'))'
functx-functx-index-of-node-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The position of a node in a sequence, based on node identity : : @author W3C XML Query Working Group : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_index-of-node.html : @param $nodes the node sequence : @param $nodeToFind the node to find in the sequence :)\n         declare function functx:index-of-node ( $nodes as node()* , $nodeToFind as node() ) as xs:integer* { for $seq in (1 to count($nodes)) return $seq[$nodes[$seq] is $nodeToFind] } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:index-of-node( $in-xml/author,$in-xml/author[1])) = 1'
functx-functx-index-of-node-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The position of a node in a sequence, based on node identity : : @author W3C XML Query Working Group : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_index-of-node.html : @param $nodes the node sequence : @param $nodeToFind the node to find in the sequence :)\n         declare function functx:index-of-node ( $nodes as node()* , $nodeToFind as node() ) as xs:integer* { for $seq in (1 to count($nodes)) return $seq[$nodes[$seq] is $nodeToFind] } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:index-of-node( $in-xml/author,$in-xml/author[2])) = 2'
functx-functx-index-of-node-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The position of a node in a sequence, based on node identity : : @author W3C XML Query Working Group : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_index-of-node.html : @param $nodes the node sequence : @param $nodeToFind the node to find in the sequence :)\n         declare function functx:index-of-node ( $nodes as node()* , $nodeToFind as node() ) as xs:integer* { for $seq in (1 to count($nodes)) return $seq[$nodes[$seq] is $nodeToFind] } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:index-of-node( $in-xml/author, $in-xml/author[lName='Doe'])) = 2'
functx-functx-index-of-node-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The position of a node in a sequence, based on node identity : : @author W3C XML Query Working Group : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_index-of-node.html : @param $nodes the node sequence : @param $nodeToFind the node to find in the sequence :)\n         declare function functx:index-of-node ( $nodes as node()* , $nodeToFind as node() ) as xs:integer* { for $seq in (1 to count($nodes)) return $seq[$nodes[$seq] is $nodeToFind] } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:index-of-node( $in-xml/author,$in-xml/author[1]), functx:index-of-node( $in-xml/author,$in-xml/author[2]), functx:index-of-node( $in-xml/author, $in-xml/author[lName='Doe']))'
functx-functx-index-of-string-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The position(s) of a substring : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_index-of-string.html : @param $arg the string : @param $substring the substring to find :)\n         declare function functx:index-of-string ( $arg as xs:string? , $substring as xs:string ) as xs:integer* { if (contains($arg, $substring)) then (string-length(substring-before($arg, $substring))+1, for $other in functx:index-of-string(substring-after($arg, $substring), $substring) return $other + string-length(substring-before($arg, $substring)) + string-length($substring)) else () } ;\n                    (functx:index-of-string('abcdabcdabcd','abc'))'
functx-functx-index-of-string-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The position(s) of a substring : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_index-of-string.html : @param $arg the string : @param $substring the substring to find :)\n         declare function functx:index-of-string ( $arg as xs:string? , $substring as xs:string ) as xs:integer* { if (contains($arg, $substring)) then (string-length(substring-before($arg, $substring))+1, for $other in functx:index-of-string(substring-after($arg, $substring), $substring) return $other + string-length(substring-before($arg, $substring)) + string-length($substring)) else () } ;\n                    (functx:index-of-string('abcd','abc')) = 1'
functx-functx-index-of-string-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The position(s) of a substring : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_index-of-string.html : @param $arg the string : @param $substring the substring to find :)\n         declare function functx:index-of-string ( $arg as xs:string? , $substring as xs:string ) as xs:integer* { if (contains($arg, $substring)) then (string-length(substring-before($arg, $substring))+1, for $other in functx:index-of-string(substring-after($arg, $substring), $substring) return $other + string-length(substring-before($arg, $substring)) + string-length($substring)) else () } ;\n                    (functx:index-of-string('xxx','abc'))'
functx-functx-index-of-string-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The position(s) of a substring : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_index-of-string.html : @param $arg the string : @param $substring the substring to find :)\n         declare function functx:index-of-string ( $arg as xs:string? , $substring as xs:string ) as xs:integer* { if (contains($arg, $substring)) then (string-length(substring-before($arg, $substring))+1, for $other in functx:index-of-string(substring-after($arg, $substring), $substring) return $other + string-length(substring-before($arg, $substring)) + string-length($substring)) else () } ;\n                    (functx:index-of-string('abcdabcdabcd','abc'), functx:index-of-string('abcd','abc'), functx:index-of-string('xxx','abc'))'
functx-functx-index-of-string-first-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The first position of a substring : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_index-of-string-first.html : @param $arg the string : @param $substring the substring to find :)\n         declare function functx:index-of-string-first ( $arg as xs:string? , $substring as xs:string ) as xs:integer? { if (contains($arg, $substring)) then string-length(substring-before($arg, $substring))+1 else () } ;\n                    (functx:index-of-string-first( 'abcdabcdabcd','abc')) = 1'
functx-functx-index-of-string-first-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The first position of a substring : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_index-of-string-first.html : @param $arg the string : @param $substring the substring to find :)\n         declare function functx:index-of-string-first ( $arg as xs:string? , $substring as xs:string ) as xs:integer? { if (contains($arg, $substring)) then string-length(substring-before($arg, $substring))+1 else () } ;\n                    (functx:index-of-string-first( 'abcd','abc')) = 1'
functx-functx-index-of-string-first-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The first position of a substring : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_index-of-string-first.html : @param $arg the string : @param $substring the substring to find :)\n         declare function functx:index-of-string-first ( $arg as xs:string? , $substring as xs:string ) as xs:integer? { if (contains($arg, $substring)) then string-length(substring-before($arg, $substring))+1 else () } ;\n                    (functx:index-of-string-first( 'xxx','abc'))'
functx-functx-index-of-string-first-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The first position of a substring : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_index-of-string-first.html : @param $arg the string : @param $substring the substring to find :)\n         declare function functx:index-of-string-first ( $arg as xs:string? , $substring as xs:string ) as xs:integer? { if (contains($arg, $substring)) then string-length(substring-before($arg, $substring))+1 else () } ;\n                    (functx:index-of-string-first( 'abcdabcdabcd','abc'), functx:index-of-string-first( 'abcd','abc'), functx:index-of-string-first( 'xxx','abc'))'
functx-functx-index-of-string-last-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The last position of a substring : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_index-of-string-last.html : @param $arg the string : @param $substring the substring to find :)\n         declare function functx:index-of-string-last ( $arg as xs:string? , $substring as xs:string ) as xs:integer? { functx:index-of-string($arg, $substring)[last()] } ;\n                    (:~ : The position(s) of a substring : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_index-of-string.html : @param $arg the string : @param $substring the substring to find :)\n         declare function functx:index-of-string ( $arg as xs:string? , $substring as xs:string ) as xs:integer* { if (contains($arg, $substring)) then (string-length(substring-before($arg, $substring))+1, for $other in functx:index-of-string(substring-after($arg, $substring), $substring) return $other + string-length(substring-before($arg, $substring)) + string-length($substring)) else () } ;\n                    (functx:index-of-string-last( 'abcdabcdabcd','abc')) = 9'
functx-functx-index-of-string-last-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The last position of a substring : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_index-of-string-last.html : @param $arg the string : @param $substring the substring to find :)\n         declare function functx:index-of-string-last ( $arg as xs:string? , $substring as xs:string ) as xs:integer? { functx:index-of-string($arg, $substring)[last()] } ;\n                    (:~ : The position(s) of a substring : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_index-of-string.html : @param $arg the string : @param $substring the substring to find :)\n         declare function functx:index-of-string ( $arg as xs:string? , $substring as xs:string ) as xs:integer* { if (contains($arg, $substring)) then (string-length(substring-before($arg, $substring))+1, for $other in functx:index-of-string(substring-after($arg, $substring), $substring) return $other + string-length(substring-before($arg, $substring)) + string-length($substring)) else () } ;\n                    (functx:index-of-string-last( 'abcd','abc')) = 1'
functx-functx-index-of-string-last-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The last position of a substring : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_index-of-string-last.html : @param $arg the string : @param $substring the substring to find :)\n         declare function functx:index-of-string-last ( $arg as xs:string? , $substring as xs:string ) as xs:integer? { functx:index-of-string($arg, $substring)[last()] } ;\n                    (:~ : The position(s) of a substring : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_index-of-string.html : @param $arg the string : @param $substring the substring to find :)\n         declare function functx:index-of-string ( $arg as xs:string? , $substring as xs:string ) as xs:integer* { if (contains($arg, $substring)) then (string-length(substring-before($arg, $substring))+1, for $other in functx:index-of-string(substring-after($arg, $substring), $substring) return $other + string-length(substring-before($arg, $substring)) + string-length($substring)) else () } ;\n                    (functx:index-of-string-last( 'xxx','abc'))'
functx-functx-index-of-string-last-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The last position of a substring : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_index-of-string-last.html : @param $arg the string : @param $substring the substring to find :)\n         declare function functx:index-of-string-last ( $arg as xs:string? , $substring as xs:string ) as xs:integer? { functx:index-of-string($arg, $substring)[last()] } ;\n                    (:~ : The position(s) of a substring : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_index-of-string.html : @param $arg the string : @param $substring the substring to find :)\n         declare function functx:index-of-string ( $arg as xs:string? , $substring as xs:string ) as xs:integer* { if (contains($arg, $substring)) then (string-length(substring-before($arg, $substring))+1, for $other in functx:index-of-string(substring-after($arg, $substring), $substring) return $other + string-length(substring-before($arg, $substring)) + string-length($substring)) else () } ;\n                    (functx:index-of-string-last( 'abcdabcdabcd','abc'), functx:index-of-string-last( 'abcd','abc'), functx:index-of-string-last( 'xxx','abc'))'
functx-functx-insert-string-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Inserts a string at a specified position : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_insert-string.html : @param $originalString the original string to insert into : @param $stringToInsert the string to insert : @param $pos the position :)\n         declare function functx:insert-string ( $originalString as xs:string? , $stringToInsert as xs:string? , $pos as xs:integer ) as xs:string { concat(substring($originalString,1,$pos - 1), $stringToInsert, substring($originalString,$pos)) } ;\n                    (functx:insert-string('xyz','def',2))'
functx-functx-insert-string-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Inserts a string at a specified position : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_insert-string.html : @param $originalString the original string to insert into : @param $stringToInsert the string to insert : @param $pos the position :)\n         declare function functx:insert-string ( $originalString as xs:string? , $stringToInsert as xs:string? , $pos as xs:integer ) as xs:string { concat(substring($originalString,1,$pos - 1), $stringToInsert, substring($originalString,$pos)) } ;\n                    (functx:insert-string('xyz','def',5))'
functx-functx-insert-string-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Inserts a string at a specified position : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_insert-string.html : @param $originalString the original string to insert into : @param $stringToInsert the string to insert : @param $pos the position :)\n         declare function functx:insert-string ( $originalString as xs:string? , $stringToInsert as xs:string? , $pos as xs:integer ) as xs:string { concat(substring($originalString,1,$pos - 1), $stringToInsert, substring($originalString,$pos)) } ;\n                    (functx:insert-string('xyz','',2))'
functx-functx-insert-string-4;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Inserts a string at a specified position : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_insert-string.html : @param $originalString the original string to insert into : @param $stringToInsert the string to insert : @param $pos the position :)\n         declare function functx:insert-string ( $originalString as xs:string? , $stringToInsert as xs:string? , $pos as xs:integer ) as xs:string { concat(substring($originalString,1,$pos - 1), $stringToInsert, substring($originalString,$pos)) } ;\n                    (functx:insert-string('','def',2))'
functx-functx-insert-string-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Inserts a string at a specified position : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_insert-string.html : @param $originalString the original string to insert into : @param $stringToInsert the string to insert : @param $pos the position :)\n         declare function functx:insert-string ( $originalString as xs:string? , $stringToInsert as xs:string? , $pos as xs:integer ) as xs:string { concat(substring($originalString,1,$pos - 1), $stringToInsert, substring($originalString,$pos)) } ;\n                    (functx:insert-string('xyz','def',2), functx:insert-string('xyz','def',5), functx:insert-string('xyz','',2), functx:insert-string('','def',2))'
functx-functx-is-a-number-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a value is numeric : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-a-number.html : @param $value the value to test :)\n         declare function functx:is-a-number ( $value as xs:anyAtomicType? ) as xs:boolean { string(number($value)) != 'NaN' } ;\n                    let $in-xml := <in-xml> <a>123</a> <b>abc</b> </in-xml> return (functx:is-a-number('123'))'
functx-functx-is-a-number-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a value is numeric : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-a-number.html : @param $value the value to test :)\n         declare function functx:is-a-number ( $value as xs:anyAtomicType? ) as xs:boolean { string(number($value)) != 'NaN' } ;\n                    let $in-xml := <in-xml> <a>123</a> <b>abc</b> </in-xml> return (functx:is-a-number(123))'
functx-functx-is-a-number-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a value is numeric : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-a-number.html : @param $value the value to test :)\n         declare function functx:is-a-number ( $value as xs:anyAtomicType? ) as xs:boolean { string(number($value)) != 'NaN' } ;\n                    let $in-xml := <in-xml> <a>123</a> <b>abc</b> </in-xml> return (functx:is-a-number(' 123 '))'
functx-functx-is-a-number-4;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a value is numeric : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-a-number.html : @param $value the value to test :)\n         declare function functx:is-a-number ( $value as xs:anyAtomicType? ) as xs:boolean { string(number($value)) != 'NaN' } ;\n                    let $in-xml := <in-xml> <a>123</a> <b>abc</b> </in-xml> return (functx:is-a-number(''))'
functx-functx-is-a-number-5;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a value is numeric : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-a-number.html : @param $value the value to test :)\n         declare function functx:is-a-number ( $value as xs:anyAtomicType? ) as xs:boolean { string(number($value)) != 'NaN' } ;\n                    let $in-xml := <in-xml> <a>123</a> <b>abc</b> </in-xml> return (functx:is-a-number('123abc'))'
functx-functx-is-a-number-6;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a value is numeric : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-a-number.html : @param $value the value to test :)\n         declare function functx:is-a-number ( $value as xs:anyAtomicType? ) as xs:boolean { string(number($value)) != 'NaN' } ;\n                    let $in-xml := <in-xml> <a>123</a> <b>abc</b> </in-xml> return (functx:is-a-number('NaN'))'
functx-functx-is-a-number-7;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a value is numeric : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-a-number.html : @param $value the value to test :)\n         declare function functx:is-a-number ( $value as xs:anyAtomicType? ) as xs:boolean { string(number($value)) != 'NaN' } ;\n                    let $in-xml := <in-xml> <a>123</a> <b>abc</b> </in-xml> return (functx:is-a-number($in-xml/a))'
functx-functx-is-a-number-8;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a value is numeric : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-a-number.html : @param $value the value to test :)\n         declare function functx:is-a-number ( $value as xs:anyAtomicType? ) as xs:boolean { string(number($value)) != 'NaN' } ;\n                    let $in-xml := <in-xml> <a>123</a> <b>abc</b> </in-xml> return (functx:is-a-number($in-xml/b))'
functx-functx-is-a-number-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a value is numeric : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-a-number.html : @param $value the value to test :)\n         declare function functx:is-a-number ( $value as xs:anyAtomicType? ) as xs:boolean { string(number($value)) != 'NaN' } ;\n                    let $in-xml := <in-xml> <a>123</a> <b>abc</b> </in-xml> return (functx:is-a-number('123'), functx:is-a-number(123), functx:is-a-number(' 123 '), functx:is-a-number(''), functx:is-a-number('123abc'), functx:is-a-number('NaN'), functx:is-a-number($in-xml/a), functx:is-a-number($in-xml/b))'
functx-functx-is-absolute-uri-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a URI is absolute : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-absolute-uri.html : @param $uri the URI to test :)\n         declare function functx:is-absolute-uri ( $uri as xs:string? ) as xs:boolean { matches($uri,'^[a-z]+:') } ;\n                    (functx:is-absolute-uri( 'http://www.datypic.com'))'
functx-functx-is-absolute-uri-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a URI is absolute : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-absolute-uri.html : @param $uri the URI to test :)\n         declare function functx:is-absolute-uri ( $uri as xs:string? ) as xs:boolean { matches($uri,'^[a-z]+:') } ;\n                    (functx:is-absolute-uri( 'ftp://ftp.datypic.com'))'
functx-functx-is-absolute-uri-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a URI is absolute : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-absolute-uri.html : @param $uri the URI to test :)\n         declare function functx:is-absolute-uri ( $uri as xs:string? ) as xs:boolean { matches($uri,'^[a-z]+:') } ;\n                    (functx:is-absolute-uri('ftp.datypic.com'))'
functx-functx-is-absolute-uri-4;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a URI is absolute : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-absolute-uri.html : @param $uri the URI to test :)\n         declare function functx:is-absolute-uri ( $uri as xs:string? ) as xs:boolean { matches($uri,'^[a-z]+:') } ;\n                    (functx:is-absolute-uri('www.datypic.com'))'
functx-functx-is-absolute-uri-5;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a URI is absolute : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-absolute-uri.html : @param $uri the URI to test :)\n         declare function functx:is-absolute-uri ( $uri as xs:string? ) as xs:boolean { matches($uri,'^[a-z]+:') } ;\n                    (functx:is-absolute-uri('prod.html'))'
functx-functx-is-absolute-uri-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a URI is absolute : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-absolute-uri.html : @param $uri the URI to test :)\n         declare function functx:is-absolute-uri ( $uri as xs:string? ) as xs:boolean { matches($uri,'^[a-z]+:') } ;\n                    (functx:is-absolute-uri( 'http://www.datypic.com'), functx:is-absolute-uri( 'ftp://ftp.datypic.com'), functx:is-absolute-uri('ftp.datypic.com'), functx:is-absolute-uri('www.datypic.com'), functx:is-absolute-uri('prod.html'))'
functx-functx-is-ancestor-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an XML node is an ancestor of another node : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-ancestor.html : @param $node1 the first node : @param $node2 the second node :)\n         declare function functx:is-ancestor ( $node1 as node() , $node2 as node() ) as xs:boolean { exists($node1 intersect $node2/ancestor::node()) } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:is-ancestor( $in-xml//author[1], $in-xml//author[1]/fName))'
functx-functx-is-ancestor-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an XML node is an ancestor of another node : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-ancestor.html : @param $node1 the first node : @param $node2 the second node :)\n         declare function functx:is-ancestor ( $node1 as node() , $node2 as node() ) as xs:boolean { exists($node1 intersect $node2/ancestor::node()) } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:is-ancestor( $in-xml//author[1]/fName, $in-xml//author[1]))'
functx-functx-is-ancestor-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an XML node is an ancestor of another node : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-ancestor.html : @param $node1 the first node : @param $node2 the second node :)\n         declare function functx:is-ancestor ( $node1 as node() , $node2 as node() ) as xs:boolean { exists($node1 intersect $node2/ancestor::node()) } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:is-ancestor( $in-xml//author[1]/fName, $in-xml//author[1]/fName/text()))'
functx-functx-is-ancestor-4;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an XML node is an ancestor of another node : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-ancestor.html : @param $node1 the first node : @param $node2 the second node :)\n         declare function functx:is-ancestor ( $node1 as node() , $node2 as node() ) as xs:boolean { exists($node1 intersect $node2/ancestor::node()) } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:is-ancestor( $in-xml//author[1], $in-xml//author[2]))'
functx-functx-is-ancestor-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an XML node is an ancestor of another node : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-ancestor.html : @param $node1 the first node : @param $node2 the second node :)\n         declare function functx:is-ancestor ( $node1 as node() , $node2 as node() ) as xs:boolean { exists($node1 intersect $node2/ancestor::node()) } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:is-ancestor( $in-xml//author[1], $in-xml//author[1]/fName), functx:is-ancestor( $in-xml//author[1]/fName, $in-xml//author[1]), functx:is-ancestor( $in-xml//author[1]/fName, $in-xml//author[1]/fName/text()), functx:is-ancestor( $in-xml//author[1], $in-xml//author[2]))'
functx-functx-is-descendant-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an XML node is a descendant of another node : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-descendant.html : @param $node1 the first node : @param $node2 the second node :)\n         declare function functx:is-descendant ( $node1 as node() , $node2 as node() ) as xs:boolean { boolean($node2 intersect $node1/ancestor::node()) } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:is-descendant( $in-xml//author[1]/fName, $in-xml//author[1]))'
functx-functx-is-descendant-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an XML node is a descendant of another node : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-descendant.html : @param $node1 the first node : @param $node2 the second node :)\n         declare function functx:is-descendant ( $node1 as node() , $node2 as node() ) as xs:boolean { boolean($node2 intersect $node1/ancestor::node()) } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:is-descendant( $in-xml//author[1], $in-xml//author[1]/fName))'
functx-functx-is-descendant-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an XML node is a descendant of another node : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-descendant.html : @param $node1 the first node : @param $node2 the second node :)\n         declare function functx:is-descendant ( $node1 as node() , $node2 as node() ) as xs:boolean { boolean($node2 intersect $node1/ancestor::node()) } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:is-descendant( $in-xml//author[1]/fName/text(), $in-xml//author[1]/fName))'
functx-functx-is-descendant-4;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an XML node is a descendant of another node : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-descendant.html : @param $node1 the first node : @param $node2 the second node :)\n         declare function functx:is-descendant ( $node1 as node() , $node2 as node() ) as xs:boolean { boolean($node2 intersect $node1/ancestor::node()) } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:is-descendant( $in-xml//author[1], $in-xml//author[2]))'
functx-functx-is-descendant-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an XML node is a descendant of another node : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-descendant.html : @param $node1 the first node : @param $node2 the second node :)\n         declare function functx:is-descendant ( $node1 as node() , $node2 as node() ) as xs:boolean { boolean($node2 intersect $node1/ancestor::node()) } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:is-descendant( $in-xml//author[1]/fName, $in-xml//author[1]), functx:is-descendant( $in-xml//author[1], $in-xml//author[1]/fName), functx:is-descendant( $in-xml//author[1]/fName/text(), $in-xml//author[1]/fName), functx:is-descendant( $in-xml//author[1], $in-xml//author[2]))'
functx-functx-is-leap-year-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a date falls in a leap year : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-leap-year.html : @param $date the date or year :)\n         declare function functx:is-leap-year ( $date as xs:anyAtomicType? ) as xs:boolean { for $year in xs:integer(substring(string($date),1,4)) return ($year mod 4 = 0 and $year mod 100 != 0) or $year mod 400 = 0 } ;\n                    (functx:is-leap-year(xs:date('2004-01-23')))'
functx-functx-is-leap-year-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a date falls in a leap year : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-leap-year.html : @param $date the date or year :)\n         declare function functx:is-leap-year ( $date as xs:anyAtomicType? ) as xs:boolean { for $year in xs:integer(substring(string($date),1,4)) return ($year mod 4 = 0 and $year mod 100 != 0) or $year mod 400 = 0 } ;\n                    (functx:is-leap-year(2004))'
functx-functx-is-leap-year-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a date falls in a leap year : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-leap-year.html : @param $date the date or year :)\n         declare function functx:is-leap-year ( $date as xs:anyAtomicType? ) as xs:boolean { for $year in xs:integer(substring(string($date),1,4)) return ($year mod 4 = 0 and $year mod 100 != 0) or $year mod 400 = 0 } ;\n                    (functx:is-leap-year('2005-02-15'))'
functx-functx-is-leap-year-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a date falls in a leap year : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-leap-year.html : @param $date the date or year :)\n         declare function functx:is-leap-year ( $date as xs:anyAtomicType? ) as xs:boolean { for $year in xs:integer(substring(string($date),1,4)) return ($year mod 4 = 0 and $year mod 100 != 0) or $year mod 400 = 0 } ;\n                    (functx:is-leap-year(xs:date('2004-01-23')), functx:is-leap-year(2004), functx:is-leap-year('2005-02-15'))'
functx-functx-is-node-among-descendants-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an XML node is among the descendants of a sequence, based on node identity : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-node-among-descendants.html : @param $node the node to test : @param $seq the sequence of nodes to search :)\n         declare function functx:is-node-among-descendants ( $node as node()? , $seq as node()* ) as xs:boolean { some $nodeInSeq in $seq/descendant-or-self::*/(.|@*) satisfies $nodeInSeq is $node } ;\n                    let $in-xml := <prices> <price value="29.99" discount="10.00"/> <price value="39.99" discount="6.00"/> <price value="49.99" discount=""/> </prices> return let $aPrice := <price value="49.99" discount=""/> return (functx:is-node-among-descendants( $in-xml/price[1],$in-xml))'
functx-functx-is-node-among-descendants-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an XML node is among the descendants of a sequence, based on node identity : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-node-among-descendants.html : @param $node the node to test : @param $seq the sequence of nodes to search :)\n         declare function functx:is-node-among-descendants ( $node as node()? , $seq as node()* ) as xs:boolean { some $nodeInSeq in $seq/descendant-or-self::*/(.|@*) satisfies $nodeInSeq is $node } ;\n                    let $in-xml := <prices> <price value="29.99" discount="10.00"/> <price value="39.99" discount="6.00"/> <price value="49.99" discount=""/> </prices> return let $aPrice := <price value="49.99" discount=""/> return (functx:is-node-among-descendants( $in-xml,$in-xml/price[1]))'
functx-functx-is-node-among-descendants-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an XML node is among the descendants of a sequence, based on node identity : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-node-among-descendants.html : @param $node the node to test : @param $seq the sequence of nodes to search :)\n         declare function functx:is-node-among-descendants ( $node as node()? , $seq as node()* ) as xs:boolean { some $nodeInSeq in $seq/descendant-or-self::*/(.|@*) satisfies $nodeInSeq is $node } ;\n                    let $in-xml := <prices> <price value="29.99" discount="10.00"/> <price value="39.99" discount="6.00"/> <price value="49.99" discount=""/> </prices> return let $aPrice := <price value="49.99" discount=""/> return (functx:is-node-among-descendants( $in-xml,$in-xml))'
functx-functx-is-node-among-descendants-4;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an XML node is among the descendants of a sequence, based on node identity : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-node-among-descendants.html : @param $node the node to test : @param $seq the sequence of nodes to search :)\n         declare function functx:is-node-among-descendants ( $node as node()? , $seq as node()* ) as xs:boolean { some $nodeInSeq in $seq/descendant-or-self::*/(.|@*) satisfies $nodeInSeq is $node } ;\n                    let $in-xml := <prices> <price value="29.99" discount="10.00"/> <price value="39.99" discount="6.00"/> <price value="49.99" discount=""/> </prices> return let $aPrice := <price value="49.99" discount=""/> return (functx:is-node-among-descendants( $aPrice,$in-xml))'
functx-functx-is-node-among-descendants-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an XML node is among the descendants of a sequence, based on node identity : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-node-among-descendants.html : @param $node the node to test : @param $seq the sequence of nodes to search :)\n         declare function functx:is-node-among-descendants ( $node as node()? , $seq as node()* ) as xs:boolean { some $nodeInSeq in $seq/descendant-or-self::*/(.|@*) satisfies $nodeInSeq is $node } ;\n                    let $in-xml := <prices> <price value="29.99" discount="10.00"/> <price value="39.99" discount="6.00"/> <price value="49.99" discount=""/> </prices> return let $aPrice := <price value="49.99" discount=""/> return (functx:is-node-among-descendants( $in-xml/price[1],$in-xml), functx:is-node-among-descendants( $in-xml,$in-xml/price[1]), functx:is-node-among-descendants( $in-xml,$in-xml), functx:is-node-among-descendants( $aPrice,$in-xml))'
functx-functx-is-node-among-descendants-deep-equal-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an XML node is among the descendants of a sequence, based on contents and attributes : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-node-among-descendants-deep-equal.html : @param $node the node to test : @param $seq the sequence of nodes to search :)\n         declare function functx:is-node-among-descendants-deep-equal ( $node as node()? , $seq as node()* ) as xs:boolean { some $nodeInSeq in $seq/descendant-or-self::*/(.|@*) satisfies deep-equal($nodeInSeq,$node) } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return let $anAuthor := <author> <fName>John</fName> <lName>Doe</lName> </author> return let $anotherAuthor := <author> <lName>Doe</lName> <fName>John</fName> </author> return (functx:is-node-among-descendants-deep-equal( $in-xml/author[1],$in-xml))'
functx-functx-is-node-among-descendants-deep-equal-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an XML node is among the descendants of a sequence, based on contents and attributes : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-node-among-descendants-deep-equal.html : @param $node the node to test : @param $seq the sequence of nodes to search :)\n         declare function functx:is-node-among-descendants-deep-equal ( $node as node()? , $seq as node()* ) as xs:boolean { some $nodeInSeq in $seq/descendant-or-self::*/(.|@*) satisfies deep-equal($nodeInSeq,$node) } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return let $anAuthor := <author> <fName>John</fName> <lName>Doe</lName> </author> return let $anotherAuthor := <author> <lName>Doe</lName> <fName>John</fName> </author> return (functx:is-node-among-descendants-deep-equal( $anAuthor,$in-xml))'
functx-functx-is-node-among-descendants-deep-equal-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an XML node is among the descendants of a sequence, based on contents and attributes : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-node-among-descendants-deep-equal.html : @param $node the node to test : @param $seq the sequence of nodes to search :)\n         declare function functx:is-node-among-descendants-deep-equal ( $node as node()? , $seq as node()* ) as xs:boolean { some $nodeInSeq in $seq/descendant-or-self::*/(.|@*) satisfies deep-equal($nodeInSeq,$node) } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return let $anAuthor := <author> <fName>John</fName> <lName>Doe</lName> </author> return let $anotherAuthor := <author> <lName>Doe</lName> <fName>John</fName> </author> return (functx:is-node-among-descendants-deep-equal( $anotherAuthor,$in-xml))'
functx-functx-is-node-among-descendants-deep-equal-4;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an XML node is among the descendants of a sequence, based on contents and attributes : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-node-among-descendants-deep-equal.html : @param $node the node to test : @param $seq the sequence of nodes to search :)\n         declare function functx:is-node-among-descendants-deep-equal ( $node as node()? , $seq as node()* ) as xs:boolean { some $nodeInSeq in $seq/descendant-or-self::*/(.|@*) satisfies deep-equal($nodeInSeq,$node) } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return let $anAuthor := <author> <fName>John</fName> <lName>Doe</lName> </author> return let $anotherAuthor := <author> <lName>Doe</lName> <fName>John</fName> </author> return (functx:is-node-among-descendants-deep-equal( $anAuthor,$in-xml/author))'
functx-functx-is-node-among-descendants-deep-equal-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an XML node is among the descendants of a sequence, based on contents and attributes : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-node-among-descendants-deep-equal.html : @param $node the node to test : @param $seq the sequence of nodes to search :)\n         declare function functx:is-node-among-descendants-deep-equal ( $node as node()? , $seq as node()* ) as xs:boolean { some $nodeInSeq in $seq/descendant-or-self::*/(.|@*) satisfies deep-equal($nodeInSeq,$node) } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return let $anAuthor := <author> <fName>John</fName> <lName>Doe</lName> </author> return let $anotherAuthor := <author> <lName>Doe</lName> <fName>John</fName> </author> return (functx:is-node-among-descendants-deep-equal( $in-xml/author[1],$in-xml), functx:is-node-among-descendants-deep-equal( $anAuthor,$in-xml), functx:is-node-among-descendants-deep-equal( $anotherAuthor,$in-xml), functx:is-node-among-descendants-deep-equal( $anAuthor,$in-xml/author))'
functx-functx-is-node-in-sequence-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an XML node is in a sequence, based on node identity : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-node-in-sequence.html : @param $node the node to test : @param $seq the sequence of nodes to search :)\n         declare function functx:is-node-in-sequence ( $node as node()? , $seq as node()* ) as xs:boolean { some $nodeInSeq in $seq satisfies $nodeInSeq is $node } ;\n                    let $in-xml := <prices> <price value="29.99" discount="10.00"/> <price value="39.99" discount="6.00"/> <price value="49.99" discount=""/> </prices> return let $aPrice := <price value="49.99" discount=""/> return (functx:is-node-in-sequence( $in-xml/price[1],$in-xml/price))'
functx-functx-is-node-in-sequence-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an XML node is in a sequence, based on node identity : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-node-in-sequence.html : @param $node the node to test : @param $seq the sequence of nodes to search :)\n         declare function functx:is-node-in-sequence ( $node as node()? , $seq as node()* ) as xs:boolean { some $nodeInSeq in $seq satisfies $nodeInSeq is $node } ;\n                    let $in-xml := <prices> <price value="29.99" discount="10.00"/> <price value="39.99" discount="6.00"/> <price value="49.99" discount=""/> </prices> return let $aPrice := <price value="49.99" discount=""/> return (functx:is-node-in-sequence( $in-xml/price[1],$in-xml))'
functx-functx-is-node-in-sequence-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an XML node is in a sequence, based on node identity : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-node-in-sequence.html : @param $node the node to test : @param $seq the sequence of nodes to search :)\n         declare function functx:is-node-in-sequence ( $node as node()? , $seq as node()* ) as xs:boolean { some $nodeInSeq in $seq satisfies $nodeInSeq is $node } ;\n                    let $in-xml := <prices> <price value="29.99" discount="10.00"/> <price value="39.99" discount="6.00"/> <price value="49.99" discount=""/> </prices> return let $aPrice := <price value="49.99" discount=""/> return (functx:is-node-in-sequence( $aPrice,$in-xml/price))'
functx-functx-is-node-in-sequence-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an XML node is in a sequence, based on node identity : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-node-in-sequence.html : @param $node the node to test : @param $seq the sequence of nodes to search :)\n         declare function functx:is-node-in-sequence ( $node as node()? , $seq as node()* ) as xs:boolean { some $nodeInSeq in $seq satisfies $nodeInSeq is $node } ;\n                    let $in-xml := <prices> <price value="29.99" discount="10.00"/> <price value="39.99" discount="6.00"/> <price value="49.99" discount=""/> </prices> return let $aPrice := <price value="49.99" discount=""/> return (functx:is-node-in-sequence( $in-xml/price[1],$in-xml/price), functx:is-node-in-sequence( $in-xml/price[1],$in-xml), functx:is-node-in-sequence( $aPrice,$in-xml/price))'
functx-functx-is-node-in-sequence-deep-equal-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an XML node is in a sequence, based on contents and attributes : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-node-in-sequence-deep-equal.html : @param $node the node to test : @param $seq the sequence of nodes to search :)\n         declare function functx:is-node-in-sequence-deep-equal ( $node as node()? , $seq as node()* ) as xs:boolean { some $nodeInSeq in $seq satisfies deep-equal($nodeInSeq,$node) } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return let $anAuthor := <author> <fName>John</fName> <lName>Doe</lName> </author> return (functx:is-node-in-sequence-deep-equal( $in-xml/author[1],$in-xml/author))'
functx-functx-is-node-in-sequence-deep-equal-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an XML node is in a sequence, based on contents and attributes : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-node-in-sequence-deep-equal.html : @param $node the node to test : @param $seq the sequence of nodes to search :)\n         declare function functx:is-node-in-sequence-deep-equal ( $node as node()? , $seq as node()* ) as xs:boolean { some $nodeInSeq in $seq satisfies deep-equal($nodeInSeq,$node) } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return let $anAuthor := <author> <fName>John</fName> <lName>Doe</lName> </author> return (functx:is-node-in-sequence-deep-equal( $anAuthor,$in-xml/author))'
functx-functx-is-node-in-sequence-deep-equal-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an XML node is in a sequence, based on contents and attributes : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-node-in-sequence-deep-equal.html : @param $node the node to test : @param $seq the sequence of nodes to search :)\n         declare function functx:is-node-in-sequence-deep-equal ( $node as node()? , $seq as node()* ) as xs:boolean { some $nodeInSeq in $seq satisfies deep-equal($nodeInSeq,$node) } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return let $anAuthor := <author> <fName>John</fName> <lName>Doe</lName> </author> return (functx:is-node-in-sequence-deep-equal( $in-xml/author[1],$in-xml))'
functx-functx-is-node-in-sequence-deep-equal-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an XML node is in a sequence, based on contents and attributes : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-node-in-sequence-deep-equal.html : @param $node the node to test : @param $seq the sequence of nodes to search :)\n         declare function functx:is-node-in-sequence-deep-equal ( $node as node()? , $seq as node()* ) as xs:boolean { some $nodeInSeq in $seq satisfies deep-equal($nodeInSeq,$node) } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return let $anAuthor := <author> <fName>John</fName> <lName>Doe</lName> </author> return (functx:is-node-in-sequence-deep-equal( $in-xml/author[1],$in-xml/author), functx:is-node-in-sequence-deep-equal( $anAuthor,$in-xml/author), functx:is-node-in-sequence-deep-equal( $in-xml/author[1],$in-xml))'
functx-functx-is-value-in-sequence-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an atomic value appears in a sequence : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-value-in-sequence.html : @param $value the atomic value to test : @param $seq the sequence of values to search :)\n         declare function functx:is-value-in-sequence ( $value as xs:anyAtomicType? , $seq as xs:anyAtomicType* ) as xs:boolean { $value = $seq } ;\n                    (functx:is-value-in-sequence(1,(1,2,3)))'
functx-functx-is-value-in-sequence-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an atomic value appears in a sequence : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-value-in-sequence.html : @param $value the atomic value to test : @param $seq the sequence of values to search :)\n         declare function functx:is-value-in-sequence ( $value as xs:anyAtomicType? , $seq as xs:anyAtomicType* ) as xs:boolean { $value = $seq } ;\n                    (functx:is-value-in-sequence(5,(1,2,3)))'
functx-functx-is-value-in-sequence-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an atomic value appears in a sequence : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-value-in-sequence.html : @param $value the atomic value to test : @param $seq the sequence of values to search :)\n         declare function functx:is-value-in-sequence ( $value as xs:anyAtomicType? , $seq as xs:anyAtomicType* ) as xs:boolean { $value = $seq } ;\n                    (functx:is-value-in-sequence(1.0,(1,2,3)))'
functx-functx-is-value-in-sequence-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an atomic value appears in a sequence : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-value-in-sequence.html : @param $value the atomic value to test : @param $seq the sequence of values to search :)\n         declare function functx:is-value-in-sequence ( $value as xs:anyAtomicType? , $seq as xs:anyAtomicType* ) as xs:boolean { $value = $seq } ;\n                    (functx:is-value-in-sequence(1,(1,2,3)), functx:is-value-in-sequence(5,(1,2,3)), functx:is-value-in-sequence(1.0,(1,2,3)))'
functx-functx-last-day-of-month-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Construct a date from a year, month and day : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_date.html : @param $year the year : @param $month the month : @param $day the day :)\n         declare function functx:date ( $year as xs:anyAtomicType , $month as xs:anyAtomicType , $day as xs:anyAtomicType ) as xs:date { xs:date( concat( functx:pad-integer-to-length(xs:integer($year),4),'-', functx:pad-integer-to-length(xs:integer($month),2),'-', functx:pad-integer-to-length(xs:integer($day),2))) } ;\n                    (:~ : Number of days in the month : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_days-in-month.html : @param $date the date :)\n         declare function functx:days-in-month ( $date as xs:anyAtomicType? ) as xs:integer? { if (month-from-date(xs:date($date)) = 2 and functx:is-leap-year($date)) then 29 else (31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31) [month-from-date(xs:date($date))] } ;\n                    (:~ : Whether a date falls in a leap year : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-leap-year.html : @param $date the date or year :)\n         declare function functx:is-leap-year ( $date as xs:anyAtomicType? ) as xs:boolean { for $year in xs:integer(substring(string($date),1,4)) return ($year mod 4 = 0 and $year mod 100 != 0) or $year mod 400 = 0 } ;\n                    (:~ : The last day of the month of a date : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_last-day-of-month.html : @param $date the date :)\n         declare function functx:last-day-of-month ( $date as xs:anyAtomicType? ) as xs:date? { functx:date(year-from-date(xs:date($date)), month-from-date(xs:date($date)), functx:days-in-month($date)) } ;\n                    (:~ : Pads an integer to a desired length by adding leading zeros : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_pad-integer-to-length.html : @param $integerToPad the integer to pad : @param $length the desired length :)\n         declare function functx:pad-integer-to-length ( $integerToPad as xs:anyAtomicType? , $length as xs:integer ) as xs:string { if ($length < string-length(string($integerToPad))) then error(xs:QName('functx:Integer_Longer_Than_Length')) else concat (functx:repeat-string( '0',$length - string-length(string($integerToPad))), string($integerToPad)) } ;\n                    (:~ : Repeats a string a given number of times : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_repeat-string.html : @param $stringToRepeat the string to repeat : @param $count the desired number of copies :)\n         declare function functx:repeat-string ( $stringToRepeat as xs:string? , $count as xs:integer ) as xs:string { string-join((for $i in 1 to $count return $stringToRepeat), '') } ;\n                    (functx:last-day-of-month(xs:date('2004-01-23')))'
functx-functx-last-day-of-month-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Construct a date from a year, month and day : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_date.html : @param $year the year : @param $month the month : @param $day the day :)\n         declare function functx:date ( $year as xs:anyAtomicType , $month as xs:anyAtomicType , $day as xs:anyAtomicType ) as xs:date { xs:date( concat( functx:pad-integer-to-length(xs:integer($year),4),'-', functx:pad-integer-to-length(xs:integer($month),2),'-', functx:pad-integer-to-length(xs:integer($day),2))) } ;\n                    (:~ : Number of days in the month : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_days-in-month.html : @param $date the date :)\n         declare function functx:days-in-month ( $date as xs:anyAtomicType? ) as xs:integer? { if (month-from-date(xs:date($date)) = 2 and functx:is-leap-year($date)) then 29 else (31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31) [month-from-date(xs:date($date))] } ;\n                    (:~ : Whether a date falls in a leap year : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-leap-year.html : @param $date the date or year :)\n         declare function functx:is-leap-year ( $date as xs:anyAtomicType? ) as xs:boolean { for $year in xs:integer(substring(string($date),1,4)) return ($year mod 4 = 0 and $year mod 100 != 0) or $year mod 400 = 0 } ;\n                    (:~ : The last day of the month of a date : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_last-day-of-month.html : @param $date the date :)\n         declare function functx:last-day-of-month ( $date as xs:anyAtomicType? ) as xs:date? { functx:date(year-from-date(xs:date($date)), month-from-date(xs:date($date)), functx:days-in-month($date)) } ;\n                    (:~ : Pads an integer to a desired length by adding leading zeros : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_pad-integer-to-length.html : @param $integerToPad the integer to pad : @param $length the desired length :)\n         declare function functx:pad-integer-to-length ( $integerToPad as xs:anyAtomicType? , $length as xs:integer ) as xs:string { if ($length < string-length(string($integerToPad))) then error(xs:QName('functx:Integer_Longer_Than_Length')) else concat (functx:repeat-string( '0',$length - string-length(string($integerToPad))), string($integerToPad)) } ;\n                    (:~ : Repeats a string a given number of times : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_repeat-string.html : @param $stringToRepeat the string to repeat : @param $count the desired number of copies :)\n         declare function functx:repeat-string ( $stringToRepeat as xs:string? , $count as xs:integer ) as xs:string { string-join((for $i in 1 to $count return $stringToRepeat), '') } ;\n                    (functx:last-day-of-month( xs:dateTime('2004-09-23T12:00:13')))'
functx-functx-last-day-of-month-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Construct a date from a year, month and day : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_date.html : @param $year the year : @param $month the month : @param $day the day :)\n         declare function functx:date ( $year as xs:anyAtomicType , $month as xs:anyAtomicType , $day as xs:anyAtomicType ) as xs:date { xs:date( concat( functx:pad-integer-to-length(xs:integer($year),4),'-', functx:pad-integer-to-length(xs:integer($month),2),'-', functx:pad-integer-to-length(xs:integer($day),2))) } ;\n                    (:~ : Number of days in the month : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_days-in-month.html : @param $date the date :)\n         declare function functx:days-in-month ( $date as xs:anyAtomicType? ) as xs:integer? { if (month-from-date(xs:date($date)) = 2 and functx:is-leap-year($date)) then 29 else (31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31) [month-from-date(xs:date($date))] } ;\n                    (:~ : Whether a date falls in a leap year : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-leap-year.html : @param $date the date or year :)\n         declare function functx:is-leap-year ( $date as xs:anyAtomicType? ) as xs:boolean { for $year in xs:integer(substring(string($date),1,4)) return ($year mod 4 = 0 and $year mod 100 != 0) or $year mod 400 = 0 } ;\n                    (:~ : The last day of the month of a date : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_last-day-of-month.html : @param $date the date :)\n         declare function functx:last-day-of-month ( $date as xs:anyAtomicType? ) as xs:date? { functx:date(year-from-date(xs:date($date)), month-from-date(xs:date($date)), functx:days-in-month($date)) } ;\n                    (:~ : Pads an integer to a desired length by adding leading zeros : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_pad-integer-to-length.html : @param $integerToPad the integer to pad : @param $length the desired length :)\n         declare function functx:pad-integer-to-length ( $integerToPad as xs:anyAtomicType? , $length as xs:integer ) as xs:string { if ($length < string-length(string($integerToPad))) then error(xs:QName('functx:Integer_Longer_Than_Length')) else concat (functx:repeat-string( '0',$length - string-length(string($integerToPad))), string($integerToPad)) } ;\n                    (:~ : Repeats a string a given number of times : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_repeat-string.html : @param $stringToRepeat the string to repeat : @param $count the desired number of copies :)\n         declare function functx:repeat-string ( $stringToRepeat as xs:string? , $count as xs:integer ) as xs:string { string-join((for $i in 1 to $count return $stringToRepeat), '') } ;\n                    (functx:last-day-of-month('2004-03-23'))'
functx-functx-last-day-of-month-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Construct a date from a year, month and day : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_date.html : @param $year the year : @param $month the month : @param $day the day :)\n         declare function functx:date ( $year as xs:anyAtomicType , $month as xs:anyAtomicType , $day as xs:anyAtomicType ) as xs:date { xs:date( concat( functx:pad-integer-to-length(xs:integer($year),4),'-', functx:pad-integer-to-length(xs:integer($month),2),'-', functx:pad-integer-to-length(xs:integer($day),2))) } ;\n                    (:~ : Number of days in the month : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_days-in-month.html : @param $date the date :)\n         declare function functx:days-in-month ( $date as xs:anyAtomicType? ) as xs:integer? { if (month-from-date(xs:date($date)) = 2 and functx:is-leap-year($date)) then 29 else (31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31) [month-from-date(xs:date($date))] } ;\n                    (:~ : Whether a date falls in a leap year : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-leap-year.html : @param $date the date or year :)\n         declare function functx:is-leap-year ( $date as xs:anyAtomicType? ) as xs:boolean { for $year in xs:integer(substring(string($date),1,4)) return ($year mod 4 = 0 and $year mod 100 != 0) or $year mod 400 = 0 } ;\n                    (:~ : The last day of the month of a date : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_last-day-of-month.html : @param $date the date :)\n         declare function functx:last-day-of-month ( $date as xs:anyAtomicType? ) as xs:date? { functx:date(year-from-date(xs:date($date)), month-from-date(xs:date($date)), functx:days-in-month($date)) } ;\n                    (:~ : Pads an integer to a desired length by adding leading zeros : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_pad-integer-to-length.html : @param $integerToPad the integer to pad : @param $length the desired length :)\n         declare function functx:pad-integer-to-length ( $integerToPad as xs:anyAtomicType? , $length as xs:integer ) as xs:string { if ($length < string-length(string($integerToPad))) then error(xs:QName('functx:Integer_Longer_Than_Length')) else concat (functx:repeat-string( '0',$length - string-length(string($integerToPad))), string($integerToPad)) } ;\n                    (:~ : Repeats a string a given number of times : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_repeat-string.html : @param $stringToRepeat the string to repeat : @param $count the desired number of copies :)\n         declare function functx:repeat-string ( $stringToRepeat as xs:string? , $count as xs:integer ) as xs:string { string-join((for $i in 1 to $count return $stringToRepeat), '') } ;\n                    (functx:last-day-of-month(xs:date('2004-01-23')), functx:last-day-of-month( xs:dateTime('2004-09-23T12:00:13')), functx:last-day-of-month('2004-03-23'))'
functx-functx-last-day-of-year-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Construct a date from a year, month and day : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_date.html : @param $year the year : @param $month the month : @param $day the day :)\n         declare function functx:date ( $year as xs:anyAtomicType , $month as xs:anyAtomicType , $day as xs:anyAtomicType ) as xs:date { xs:date( concat( functx:pad-integer-to-length(xs:integer($year),4),'-', functx:pad-integer-to-length(xs:integer($month),2),'-', functx:pad-integer-to-length(xs:integer($day),2))) } ;\n                    (:~ : Number of days in the month : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_days-in-month.html : @param $date the date :)\n         declare function functx:days-in-month ( $date as xs:anyAtomicType? ) as xs:integer? { if (month-from-date(xs:date($date)) = 2 and functx:is-leap-year($date)) then 29 else (31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31) [month-from-date(xs:date($date))] } ;\n                    (:~ : Whether a date falls in a leap year : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-leap-year.html : @param $date the date or year :)\n         declare function functx:is-leap-year ( $date as xs:anyAtomicType? ) as xs:boolean { for $year in xs:integer(substring(string($date),1,4)) return ($year mod 4 = 0 and $year mod 100 != 0) or $year mod 400 = 0 } ;\n                    (:~ : The last day of the month of a date : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_last-day-of-year.html : @param $date the date :)\n         declare function functx:last-day-of-year ( $date as xs:anyAtomicType? ) as xs:date? { functx:date(year-from-date(xs:date($date)), 12, 31) } ;\n                    (:~ : Pads an integer to a desired length by adding leading zeros : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_pad-integer-to-length.html : @param $integerToPad the integer to pad : @param $length the desired length :)\n         declare function functx:pad-integer-to-length ( $integerToPad as xs:anyAtomicType? , $length as xs:integer ) as xs:string { if ($length < string-length(string($integerToPad))) then error(xs:QName('functx:Integer_Longer_Than_Length')) else concat (functx:repeat-string( '0',$length - string-length(string($integerToPad))), string($integerToPad)) } ;\n                    (:~ : Repeats a string a given number of times : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_repeat-string.html : @param $stringToRepeat the string to repeat : @param $count the desired number of copies :)\n         declare function functx:repeat-string ( $stringToRepeat as xs:string? , $count as xs:integer ) as xs:string { string-join((for $i in 1 to $count return $stringToRepeat), '') } ;\n                    (functx:last-day-of-year(xs:date('2004-01-23')))'
functx-functx-last-day-of-year-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Construct a date from a year, month and day : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_date.html : @param $year the year : @param $month the month : @param $day the day :)\n         declare function functx:date ( $year as xs:anyAtomicType , $month as xs:anyAtomicType , $day as xs:anyAtomicType ) as xs:date { xs:date( concat( functx:pad-integer-to-length(xs:integer($year),4),'-', functx:pad-integer-to-length(xs:integer($month),2),'-', functx:pad-integer-to-length(xs:integer($day),2))) } ;\n                    (:~ : Number of days in the month : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_days-in-month.html : @param $date the date :)\n         declare function functx:days-in-month ( $date as xs:anyAtomicType? ) as xs:integer? { if (month-from-date(xs:date($date)) = 2 and functx:is-leap-year($date)) then 29 else (31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31) [month-from-date(xs:date($date))] } ;\n                    (:~ : Whether a date falls in a leap year : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-leap-year.html : @param $date the date or year :)\n         declare function functx:is-leap-year ( $date as xs:anyAtomicType? ) as xs:boolean { for $year in xs:integer(substring(string($date),1,4)) return ($year mod 4 = 0 and $year mod 100 != 0) or $year mod 400 = 0 } ;\n                    (:~ : The last day of the month of a date : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_last-day-of-year.html : @param $date the date :)\n         declare function functx:last-day-of-year ( $date as xs:anyAtomicType? ) as xs:date? { functx:date(year-from-date(xs:date($date)), 12, 31) } ;\n                    (:~ : Pads an integer to a desired length by adding leading zeros : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_pad-integer-to-length.html : @param $integerToPad the integer to pad : @param $length the desired length :)\n         declare function functx:pad-integer-to-length ( $integerToPad as xs:anyAtomicType? , $length as xs:integer ) as xs:string { if ($length < string-length(string($integerToPad))) then error(xs:QName('functx:Integer_Longer_Than_Length')) else concat (functx:repeat-string( '0',$length - string-length(string($integerToPad))), string($integerToPad)) } ;\n                    (:~ : Repeats a string a given number of times : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_repeat-string.html : @param $stringToRepeat the string to repeat : @param $count the desired number of copies :)\n         declare function functx:repeat-string ( $stringToRepeat as xs:string? , $count as xs:integer ) as xs:string { string-join((for $i in 1 to $count return $stringToRepeat), '') } ;\n                    (functx:last-day-of-year( xs:dateTime('2004-12-23T12:00:13')))'
functx-functx-last-day-of-year-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Construct a date from a year, month and day : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_date.html : @param $year the year : @param $month the month : @param $day the day :)\n         declare function functx:date ( $year as xs:anyAtomicType , $month as xs:anyAtomicType , $day as xs:anyAtomicType ) as xs:date { xs:date( concat( functx:pad-integer-to-length(xs:integer($year),4),'-', functx:pad-integer-to-length(xs:integer($month),2),'-', functx:pad-integer-to-length(xs:integer($day),2))) } ;\n                    (:~ : Number of days in the month : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_days-in-month.html : @param $date the date :)\n         declare function functx:days-in-month ( $date as xs:anyAtomicType? ) as xs:integer? { if (month-from-date(xs:date($date)) = 2 and functx:is-leap-year($date)) then 29 else (31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31) [month-from-date(xs:date($date))] } ;\n                    (:~ : Whether a date falls in a leap year : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-leap-year.html : @param $date the date or year :)\n         declare function functx:is-leap-year ( $date as xs:anyAtomicType? ) as xs:boolean { for $year in xs:integer(substring(string($date),1,4)) return ($year mod 4 = 0 and $year mod 100 != 0) or $year mod 400 = 0 } ;\n                    (:~ : The last day of the month of a date : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_last-day-of-year.html : @param $date the date :)\n         declare function functx:last-day-of-year ( $date as xs:anyAtomicType? ) as xs:date? { functx:date(year-from-date(xs:date($date)), 12, 31) } ;\n                    (:~ : Pads an integer to a desired length by adding leading zeros : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_pad-integer-to-length.html : @param $integerToPad the integer to pad : @param $length the desired length :)\n         declare function functx:pad-integer-to-length ( $integerToPad as xs:anyAtomicType? , $length as xs:integer ) as xs:string { if ($length < string-length(string($integerToPad))) then error(xs:QName('functx:Integer_Longer_Than_Length')) else concat (functx:repeat-string( '0',$length - string-length(string($integerToPad))), string($integerToPad)) } ;\n                    (:~ : Repeats a string a given number of times : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_repeat-string.html : @param $stringToRepeat the string to repeat : @param $count the desired number of copies :)\n         declare function functx:repeat-string ( $stringToRepeat as xs:string? , $count as xs:integer ) as xs:string { string-join((for $i in 1 to $count return $stringToRepeat), '') } ;\n                    (functx:last-day-of-year('2004-03-23'))'
functx-functx-last-day-of-year-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Construct a date from a year, month and day : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_date.html : @param $year the year : @param $month the month : @param $day the day :)\n         declare function functx:date ( $year as xs:anyAtomicType , $month as xs:anyAtomicType , $day as xs:anyAtomicType ) as xs:date { xs:date( concat( functx:pad-integer-to-length(xs:integer($year),4),'-', functx:pad-integer-to-length(xs:integer($month),2),'-', functx:pad-integer-to-length(xs:integer($day),2))) } ;\n                    (:~ : Number of days in the month : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_days-in-month.html : @param $date the date :)\n         declare function functx:days-in-month ( $date as xs:anyAtomicType? ) as xs:integer? { if (month-from-date(xs:date($date)) = 2 and functx:is-leap-year($date)) then 29 else (31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31) [month-from-date(xs:date($date))] } ;\n                    (:~ : Whether a date falls in a leap year : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_is-leap-year.html : @param $date the date or year :)\n         declare function functx:is-leap-year ( $date as xs:anyAtomicType? ) as xs:boolean { for $year in xs:integer(substring(string($date),1,4)) return ($year mod 4 = 0 and $year mod 100 != 0) or $year mod 400 = 0 } ;\n                    (:~ : The last day of the month of a date : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_last-day-of-year.html : @param $date the date :)\n         declare function functx:last-day-of-year ( $date as xs:anyAtomicType? ) as xs:date? { functx:date(year-from-date(xs:date($date)), 12, 31) } ;\n                    (:~ : Pads an integer to a desired length by adding leading zeros : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_pad-integer-to-length.html : @param $integerToPad the integer to pad : @param $length the desired length :)\n         declare function functx:pad-integer-to-length ( $integerToPad as xs:anyAtomicType? , $length as xs:integer ) as xs:string { if ($length < string-length(string($integerToPad))) then error(xs:QName('functx:Integer_Longer_Than_Length')) else concat (functx:repeat-string( '0',$length - string-length(string($integerToPad))), string($integerToPad)) } ;\n                    (:~ : Repeats a string a given number of times : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_repeat-string.html : @param $stringToRepeat the string to repeat : @param $count the desired number of copies :)\n         declare function functx:repeat-string ( $stringToRepeat as xs:string? , $count as xs:integer ) as xs:string { string-join((for $i in 1 to $count return $stringToRepeat), '') } ;\n                    (functx:last-day-of-year(xs:date('2004-01-23')), functx:last-day-of-year( xs:dateTime('2004-12-23T12:00:13')), functx:last-day-of-year('2004-03-23'))'
functx-functx-last-node-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The XML node in a sequence that is last in document order : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_last-node.html : @param $nodes the sequence of nodes :)\n         declare function functx:last-node ( $nodes as node()* ) as node()? { ($nodes/.)[last()] } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:last-node($in-xml//fName))'
functx-functx-last-node-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The XML node in a sequence that is last in document order : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_last-node.html : @param $nodes the sequence of nodes :)\n         declare function functx:last-node ( $nodes as node()* ) as node()? { ($nodes/.)[last()] } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:last-node( ($in-xml//lName, $in-xml//fName) ))'
functx-functx-last-node-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The XML node in a sequence that is last in document order : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_last-node.html : @param $nodes the sequence of nodes :)\n         declare function functx:last-node ( $nodes as node()* ) as node()? { ($nodes/.)[last()] } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:last-node($in-xml//fName), functx:last-node( ($in-xml//lName, $in-xml//fName) ))'
functx-functx-leaf-elements-1;PRSC Error: Failed to parse query '\n      	declare namespace functx = "http://www.example.com/";\n      	declare function functx:leaf-elements ( $root as node()? ) as element()* { $root/descendant-or-self::*[not(*)] } ;\n        let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> \n                                 <author> <fName>John</fName> <lName>Doe</lName> </author> \n                       </authors> \n        return (functx:leaf-elements($in-xml))\n      '
functx-functx-leaf-elements-2;PRSC Error: Failed to parse query '\n      	declare namespace functx = "http://www.example.com/";\n        declare function functx:leaf-elements ( $root as node()? ) as element()* { $root/descendant-or-self::*[not(*)] } ;\n        let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> \n                                 <author> <fName>John</fName> <lName>Doe</lName> </author> \n                       </authors> \n        return (functx:leaf-elements($in-xml/author[1]))\n      '
functx-functx-leaf-elements-all;PRSC Error: Failed to parse query '\n      	declare namespace functx = "http://www.example.com/";\n        declare function functx:leaf-elements ( $root as node()? ) as element()* { $root/descendant-or-self::*[not(*)] } ;\n        let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> \n                                 <author> <fName>John</fName> <lName>Doe</lName> </author> \n                       </authors> \n        return (functx:leaf-elements($in-xml), functx:leaf-elements($in-xml/author[1]))\n      '
functx-functx-left-trim-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Trims leading whitespace : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_left-trim.html : @param $arg the string to trim :)\n         declare function functx:left-trim ( $arg as xs:string? ) as xs:string { replace($arg,'^\s+','') } ;\n                    (functx:left-trim(' xyz'))'
functx-functx-left-trim-2;PRSC Error: Failed to parse query '\n         declare namespace functx = "http://www.example.com/";\n         declare function functx:left-trim ( $arg as xs:string? ) as xs:string { replace($arg,'^\s+','') } ;\n         (functx:left-trim(' xyz    x'))\n      '
functx-functx-left-trim-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Trims leading whitespace : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_left-trim.html : @param $arg the string to trim :)\n         declare function functx:left-trim ( $arg as xs:string? ) as xs:string { replace($arg,'^\s+','') } ;\n                    (functx:left-trim('xyz'))'
functx-functx-left-trim-all;PRSC Error: Failed to parse query '\n         declare namespace functx = "http://www.example.com/";\n         declare function functx:left-trim ( $arg as xs:string? ) as xs:string { replace($arg,'^\s+','') } ;\n                    (functx:left-trim(' xyz'), functx:left-trim(' xyz    x'), functx:left-trim('xyz'))'
functx-functx-line-count-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The number of lines : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_line-count.html : @param $arg the string to test :)\n         declare function functx:line-count ( $arg as xs:string? ) as xs:integer { count(functx:lines($arg)) } ;\n                    (:~ : Split a string into separate lines : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_lines.html : @param $arg the string to split :)\n         declare function functx:lines ( $arg as xs:string? ) as xs:string* { tokenize($arg, '(\r\n?|\n\r?)') } ;\n                    let $lines := 'a value on many lines' return (functx:line-count('a value')) = 1'
functx-functx-line-count-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The number of lines : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_line-count.html : @param $arg the string to test :)\n         declare function functx:line-count ( $arg as xs:string? ) as xs:integer { count(functx:lines($arg)) } ;\n                    (:~ : Split a string into separate lines : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_lines.html : @param $arg the string to split :)\n         declare function functx:lines ( $arg as xs:string? ) as xs:string* { tokenize($arg, '(\r\n?|\n\r?)') } ;\n         let $lines := 'a \n            value \n            on \n            many \n            lines' return (functx:line-count($lines))\n       = 5'
functx-functx-line-count-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The number of lines : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_line-count.html : @param $arg the string to test :)\n         declare function functx:line-count ( $arg as xs:string? ) as xs:integer { count(functx:lines($arg)) } ;\n                    (:~ : Split a string into separate lines : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_lines.html : @param $arg the string to split :)\n         declare function functx:lines ( $arg as xs:string? ) as xs:string* { tokenize($arg, '(\r\n?|\n\r?)') } ;\n         let $lines := 'a \n                    value \n                    on \n                    many \n                    lines' \n         return (functx:line-count('a value'), functx:line-count($lines))'
functx-functx-lines-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Split a string into separate lines : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_lines.html : @param $arg the string to split :)\n         declare function functx:lines ( $arg as xs:string? ) as xs:string* { tokenize($arg, '(\r\n?|\n\r?)') } ;\n                    let $in-xml := <in-xml>a value on many lines</in-xml> return (functx:lines('a value'))'
functx-functx-lines-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Split a string into separate lines : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_lines.html : @param $arg the string to split :)\n         declare function functx:lines ( $arg as xs:string? ) as xs:string* { tokenize($arg, '(\r\n?|\n\r?)') } ;\n                    let $in-xml := <in-xml>a value on many lines</in-xml> return (functx:lines($in-xml))'
functx-functx-lines-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Split a string into separate lines : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_lines.html : @param $arg the string to split :)\n         declare function functx:lines ( $arg as xs:string? ) as xs:string* { tokenize($arg, '(\r\n?|\n\r?)') } ;\n                    let $in-xml := <in-xml>a value on many lines</in-xml> return (functx:lines('a value'), functx:lines($in-xml))'
functx-functx-max-depth-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The maximum depth of elements in an XML tree : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_max-depth.html : @param $root the root to start from :)\n         declare function functx:max-depth ( $root as node()? ) as xs:integer? { if ($root/*) then max($root/*/functx:max-depth(.)) + 1 else 1 } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:max-depth($in-xml)) = 3'
functx-functx-max-depth-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The maximum depth of elements in an XML tree : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_max-depth.html : @param $root the root to start from :)\n         declare function functx:max-depth ( $root as node()? ) as xs:integer? { if ($root/*) then max($root/*/functx:max-depth(.)) + 1 else 1 } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:max-depth($in-xml/author[1])) = 2'
functx-functx-max-depth-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The maximum depth of elements in an XML tree : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_max-depth.html : @param $root the root to start from :)\n         declare function functx:max-depth ( $root as node()? ) as xs:integer? { if ($root/*) then max($root/*/functx:max-depth(.)) + 1 else 1 } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:max-depth($in-xml), functx:max-depth($in-xml/author[1]))'
functx-functx-max-determine-type-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The maximum value in a sequence, figuring out its type (numeric or string) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_max-determine-type.html : @param $seq the sequence of values to test :)\n         declare function functx:max-determine-type ( $seq as xs:anyAtomicType* ) as xs:anyAtomicType? { if (every $value in $seq satisfies ($value castable as xs:double)) then max(for $value in $seq return xs:double($value)) else max(for $value in $seq return xs:string($value)) } ;\n                    let $in-xml := <values> <nums> <num>12</num> <num>23</num> <num>115</num> <num>12.5</num> </nums> <strings> <string>def</string> <string>abc</string> </strings> </values> return (functx:max-determine-type($in-xml//num)) = 115'
functx-functx-max-determine-type-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The maximum value in a sequence, figuring out its type (numeric or string) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_max-determine-type.html : @param $seq the sequence of values to test :)\n         declare function functx:max-determine-type ( $seq as xs:anyAtomicType* ) as xs:anyAtomicType? { if (every $value in $seq satisfies ($value castable as xs:double)) then max(for $value in $seq return xs:double($value)) else max(for $value in $seq return xs:string($value)) } ;\n                    let $in-xml := <values> <nums> <num>12</num> <num>23</num> <num>115</num> <num>12.5</num> </nums> <strings> <string>def</string> <string>abc</string> </strings> </values> return (functx:max-determine-type($in-xml//string))'
functx-functx-max-determine-type-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The maximum value in a sequence, figuring out its type (numeric or string) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_max-determine-type.html : @param $seq the sequence of values to test :)\n         declare function functx:max-determine-type ( $seq as xs:anyAtomicType* ) as xs:anyAtomicType? { if (every $value in $seq satisfies ($value castable as xs:double)) then max(for $value in $seq return xs:double($value)) else max(for $value in $seq return xs:string($value)) } ;\n                    let $in-xml := <values> <nums> <num>12</num> <num>23</num> <num>115</num> <num>12.5</num> </nums> <strings> <string>def</string> <string>abc</string> </strings> </values> return (functx:max-determine-type( $in-xml//(num|string)))'
functx-functx-max-determine-type-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The maximum value in a sequence, figuring out its type (numeric or string) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_max-determine-type.html : @param $seq the sequence of values to test :)\n         declare function functx:max-determine-type ( $seq as xs:anyAtomicType* ) as xs:anyAtomicType? { if (every $value in $seq satisfies ($value castable as xs:double)) then max(for $value in $seq return xs:double($value)) else max(for $value in $seq return xs:string($value)) } ;\n                    let $in-xml := <values> <nums> <num>12</num> <num>23</num> <num>115</num> <num>12.5</num> </nums> <strings> <string>def</string> <string>abc</string> </strings> </values> return (functx:max-determine-type($in-xml//num), functx:max-determine-type($in-xml//string), functx:max-determine-type( $in-xml//(num|string)))'
functx-functx-max-line-length-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Split a string into separate lines : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_lines.html : @param $arg the string to split :)\n         declare function functx:lines ( $arg as xs:string? ) as xs:string* { tokenize($arg, '(\r\n?|\n\r?)') } ;\n                    (:~ : The maximum line length : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_max-line-length.html : @param $arg the string to test :)\n         declare function functx:max-line-length ( $arg as xs:string? ) as xs:integer? { max( for $line in functx:lines($arg) return string-length($line)) } ;\n                    let $lines := 'a value on several lines' return (functx:max-line-length('a value')) = 7'
functx-functx-max-line-length-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Split a string into separate lines : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_lines.html : @param $arg the string to split :)\n         declare function functx:lines ( $arg as xs:string? ) as xs:string* { tokenize($arg, '(\r\n?|\n\r?)') } ;\n                    (:~ : The maximum line length : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_max-line-length.html : @param $arg the string to test :)\n         declare function functx:max-line-length ( $arg as xs:string? ) as xs:integer? { max( for $line in functx:lines($arg) return string-length($line)) } ;\n let $lines := 'a \n     value \n     on \n     several\n     lines' \n         return (functx:max-line-length($lines)) = 12'
functx-functx-max-line-length-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Split a string into separate lines : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_lines.html : @param $arg the string to split :)\n         declare function functx:lines ( $arg as xs:string? ) as xs:string* { tokenize($arg, '(\r\n?|\n\r?)') } ;\n                    (:~ : The maximum line length : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_max-line-length.html : @param $arg the string to test :)\n         declare function functx:max-line-length ( $arg as xs:string? ) as xs:integer? { max( for $line in functx:lines($arg) return string-length($line)) } ;\nlet $lines := 'a \n     value \n     on \n     several\n     lines' \n         return (functx:max-line-length('a value'), functx:max-line-length($lines))'
functx-functx-max-node-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The XML node whose typed value is the maximum : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_max-node.html : @param $nodes the sequence of nodes to test :)\n         declare function functx:max-node ( $nodes as node()* ) as node()* { $nodes[. = max($nodes)] } ;\n                    let $in-xml := <values> <int>1</int> <int>23</int> <int>115</int> </values> return (functx:max-node($in-xml//int))'
functx-functx-max-string-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The maximum of a sequence of values, treating them like strings : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_max-string.html : @param $strings the sequence of values :)\n         declare function functx:max-string ( $strings as xs:anyAtomicType* ) as xs:string? { max(for $string in $strings return string($string)) } ;\n                    let $in-xml := <in-xml> <x>a</x> <y>c</y> <z>b</z> </in-xml> return (functx:max-string( $in-xml/* ))'
functx-functx-max-string-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The maximum of a sequence of values, treating them like strings : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_max-string.html : @param $strings the sequence of values :)\n         declare function functx:max-string ( $strings as xs:anyAtomicType* ) as xs:string? { max(for $string in $strings return string($string)) } ;\n                    let $in-xml := <in-xml> <x>a</x> <y>c</y> <z>b</z> </in-xml> return (functx:max-string( (100,25,3) ))'
functx-functx-max-string-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The maximum of a sequence of values, treating them like strings : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_max-string.html : @param $strings the sequence of values :)\n         declare function functx:max-string ( $strings as xs:anyAtomicType* ) as xs:string? { max(for $string in $strings return string($string)) } ;\n                    let $in-xml := <in-xml> <x>a</x> <y>c</y> <z>b</z> </in-xml> return (functx:max-string( $in-xml/* ), functx:max-string( (100,25,3) ))'
functx-functx-min-determine-type-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The minimum value in a sequence, figuring out its type (numeric or string) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_min-determine-type.html : @param $seq the sequence of values to test :)\n         declare function functx:min-determine-type ( $seq as xs:anyAtomicType* ) as xs:anyAtomicType? { if (every $value in $seq satisfies ($value castable as xs:double)) then min(for $value in $seq return xs:double($value)) else min(for $value in $seq return xs:string($value)) } ;\n                    let $in-xml := <values> <nums> <num>12</num> <num>23</num> <num>115</num> <num>12.5</num> </nums> <strings> <str>def</str> <str>abc</str> </strings> </values> return (functx:min-determine-type($in-xml//num)) = 12'
functx-functx-min-determine-type-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The minimum value in a sequence, figuring out its type (numeric or string) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_min-determine-type.html : @param $seq the sequence of values to test :)\n         declare function functx:min-determine-type ( $seq as xs:anyAtomicType* ) as xs:anyAtomicType? { if (every $value in $seq satisfies ($value castable as xs:double)) then min(for $value in $seq return xs:double($value)) else min(for $value in $seq return xs:string($value)) } ;\n                    let $in-xml := <values> <nums> <num>12</num> <num>23</num> <num>115</num> <num>12.5</num> </nums> <strings> <str>def</str> <str>abc</str> </strings> </values> return (functx:min-determine-type($in-xml//str))'
functx-functx-min-determine-type-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The minimum value in a sequence, figuring out its type (numeric or string) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_min-determine-type.html : @param $seq the sequence of values to test :)\n         declare function functx:min-determine-type ( $seq as xs:anyAtomicType* ) as xs:anyAtomicType? { if (every $value in $seq satisfies ($value castable as xs:double)) then min(for $value in $seq return xs:double($value)) else min(for $value in $seq return xs:string($value)) } ;\n                    let $in-xml := <values> <nums> <num>12</num> <num>23</num> <num>115</num> <num>12.5</num> </nums> <strings> <str>def</str> <str>abc</str> </strings> </values> return (functx:min-determine-type($in-xml//(num|str)))'
functx-functx-min-determine-type-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The minimum value in a sequence, figuring out its type (numeric or string) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_min-determine-type.html : @param $seq the sequence of values to test :)\n         declare function functx:min-determine-type ( $seq as xs:anyAtomicType* ) as xs:anyAtomicType? { if (every $value in $seq satisfies ($value castable as xs:double)) then min(for $value in $seq return xs:double($value)) else min(for $value in $seq return xs:string($value)) } ;\n                    let $in-xml := <values> <nums> <num>12</num> <num>23</num> <num>115</num> <num>12.5</num> </nums> <strings> <str>def</str> <str>abc</str> </strings> </values> return (functx:min-determine-type($in-xml//num), functx:min-determine-type($in-xml//str), functx:min-determine-type($in-xml//(num|str)))'
functx-functx-min-node-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The XML node whose typed value is the minimum : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_min-node.html : @param $nodes the sequence of nodes to test :)\n         declare function functx:min-node ( $nodes as node()* ) as node()* { $nodes[. = min($nodes)] } ;\n                    let $in-xml := <values> <int>1</int> <int>23</int> <int>115</int> </values> return (functx:min-node($in-xml//int))'
functx-functx-min-non-empty-string-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The minimum of a sequence of strings, ignoring "empty" values : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_min-non-empty-string.html : @param $strings the sequence of strings to search :)\n         declare function functx:min-non-empty-string ( $strings as xs:string* ) as xs:string? { min($strings[. != '']) } ;\n                    let $in-xml := <authors> <author> <fName/> <lName>Smith</lName> </author> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:min-non-empty-string( $in-xml//fName ))'
functx-functx-min-string-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The minimum of a sequence of values, treating them like strings : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_min-string.html : @param $strings the sequence of strings :)\n         declare function functx:min-string ( $strings as xs:anyAtomicType* ) as xs:string? { min(for $string in $strings return string($string)) } ;\n                    let $in-xml := <in-xml> <x>a</x> <y>c</y> <z>b</z> </in-xml> return (functx:min-string( $in-xml/* ))'
functx-functx-min-string-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The minimum of a sequence of values, treating them like strings : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_min-string.html : @param $strings the sequence of strings :)\n         declare function functx:min-string ( $strings as xs:anyAtomicType* ) as xs:string? { min(for $string in $strings return string($string)) } ;\n                    let $in-xml := <in-xml> <x>a</x> <y>c</y> <z>b</z> </in-xml> return (functx:min-string( (100,25,3) ))'
functx-functx-min-string-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The minimum of a sequence of values, treating them like strings : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_min-string.html : @param $strings the sequence of strings :)\n         declare function functx:min-string ( $strings as xs:anyAtomicType* ) as xs:string? { min(for $string in $strings return string($string)) } ;\n                    let $in-xml := <in-xml> <x>a</x> <y>c</y> <z>b</z> </in-xml> return (functx:min-string( $in-xml/* ), functx:min-string( (100,25,3) ))'
functx-functx-mmddyyyy-to-date-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Converts a string with format MMDDYYYY (with any delimiters) to a date : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_mmddyyyy-to-date.html : @param $dateString the MMDDYYYY string :)\n         declare function functx:mmddyyyy-to-date ( $dateString as xs:string? ) as xs:date? { if (empty($dateString)) then () else if (not(matches($dateString, '^\D*(\d{2})\D*(\d{2})\D*(\d{4})\D*$'))) then error(xs:QName('functx:Invalid_Date_Format')) else xs:date(replace($dateString, '^\D*(\d{2})\D*(\d{2})\D*(\d{4})\D*$', '$3-$1-$2')) } ;\n                    (functx:mmddyyyy-to-date('12-15-2004'))'
functx-functx-mmddyyyy-to-date-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Converts a string with format MMDDYYYY (with any delimiters) to a date : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_mmddyyyy-to-date.html : @param $dateString the MMDDYYYY string :)\n         declare function functx:mmddyyyy-to-date ( $dateString as xs:string? ) as xs:date? { if (empty($dateString)) then () else if (not(matches($dateString, '^\D*(\d{2})\D*(\d{2})\D*(\d{4})\D*$'))) then error(xs:QName('functx:Invalid_Date_Format')) else xs:date(replace($dateString, '^\D*(\d{2})\D*(\d{2})\D*(\d{4})\D*$', '$3-$1-$2')) } ;\n                    (functx:mmddyyyy-to-date('12152004'))'
functx-functx-mmddyyyy-to-date-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Converts a string with format MMDDYYYY (with any delimiters) to a date : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_mmddyyyy-to-date.html : @param $dateString the MMDDYYYY string :)\n         declare function functx:mmddyyyy-to-date ( $dateString as xs:string? ) as xs:date? { if (empty($dateString)) then () else if (not(matches($dateString, '^\D*(\d{2})\D*(\d{2})\D*(\d{4})\D*$'))) then error(xs:QName('functx:Invalid_Date_Format')) else xs:date(replace($dateString, '^\D*(\d{2})\D*(\d{2})\D*(\d{4})\D*$', '$3-$1-$2')) } ;\n                    (functx:mmddyyyy-to-date('12/15/2004'))'
functx-functx-mmddyyyy-to-date-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Converts a string with format MMDDYYYY (with any delimiters) to a date : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_mmddyyyy-to-date.html : @param $dateString the MMDDYYYY string :)\n         declare function functx:mmddyyyy-to-date ( $dateString as xs:string? ) as xs:date? { if (empty($dateString)) then () else if (not(matches($dateString, '^\D*(\d{2})\D*(\d{2})\D*(\d{4})\D*$'))) then error(xs:QName('functx:Invalid_Date_Format')) else xs:date(replace($dateString, '^\D*(\d{2})\D*(\d{2})\D*(\d{4})\D*$', '$3-$1-$2')) } ;\n                    (functx:mmddyyyy-to-date('12-15-2004'), functx:mmddyyyy-to-date('12152004'), functx:mmddyyyy-to-date('12/15/2004'))'
functx-functx-month-abbrev-en-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The month of a date as an abbreviated word (Jan, Feb, etc.) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_month-abbrev-en.html : @param $date the date :)\n         declare function functx:month-abbrev-en ( $date as xs:anyAtomicType? ) as xs:string? { ('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec') [month-from-date(xs:date($date))] } ;\n                    (functx:month-abbrev-en(xs:date('2004-01-23')))'
functx-functx-month-abbrev-en-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The month of a date as an abbreviated word (Jan, Feb, etc.) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_month-abbrev-en.html : @param $date the date :)\n         declare function functx:month-abbrev-en ( $date as xs:anyAtomicType? ) as xs:string? { ('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec') [month-from-date(xs:date($date))] } ;\n                    (functx:month-abbrev-en( xs:dateTime('2004-01-23T12:00:13')))'
functx-functx-month-abbrev-en-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The month of a date as an abbreviated word (Jan, Feb, etc.) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_month-abbrev-en.html : @param $date the date :)\n         declare function functx:month-abbrev-en ( $date as xs:anyAtomicType? ) as xs:string? { ('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec') [month-from-date(xs:date($date))] } ;\n                    (functx:month-abbrev-en('2004-01-23'))'
functx-functx-month-abbrev-en-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The month of a date as an abbreviated word (Jan, Feb, etc.) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_month-abbrev-en.html : @param $date the date :)\n         declare function functx:month-abbrev-en ( $date as xs:anyAtomicType? ) as xs:string? { ('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec') [month-from-date(xs:date($date))] } ;\n                    (functx:month-abbrev-en(xs:date('2004-01-23')), functx:month-abbrev-en( xs:dateTime('2004-01-23T12:00:13')), functx:month-abbrev-en('2004-01-23'))'
functx-functx-month-name-en-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The month of a date as a word (January, February, etc.) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_month-name-en.html : @param $date the date :)\n         declare function functx:month-name-en ( $date as xs:anyAtomicType? ) as xs:string? { ('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December') [month-from-date(xs:date($date))] } ;\n                    (functx:month-name-en(xs:date('2004-01-23')))'
functx-functx-month-name-en-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The month of a date as a word (January, February, etc.) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_month-name-en.html : @param $date the date :)\n         declare function functx:month-name-en ( $date as xs:anyAtomicType? ) as xs:string? { ('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December') [month-from-date(xs:date($date))] } ;\n                    (functx:month-name-en( xs:dateTime('2004-01-23T12:00:13')))'
functx-functx-month-name-en-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The month of a date as a word (January, February, etc.) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_month-name-en.html : @param $date the date :)\n         declare function functx:month-name-en ( $date as xs:anyAtomicType? ) as xs:string? { ('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December') [month-from-date(xs:date($date))] } ;\n                    (functx:month-name-en('2004-01-23'))'
functx-functx-month-name-en-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The month of a date as a word (January, February, etc.) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_month-name-en.html : @param $date the date :)\n         declare function functx:month-name-en ( $date as xs:anyAtomicType? ) as xs:string? { ('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December') [month-from-date(xs:date($date))] } ;\n                    (functx:month-name-en(xs:date('2004-01-23')), functx:month-name-en( xs:dateTime('2004-01-23T12:00:13')), functx:month-name-en('2004-01-23'))'
functx-functx-name-test-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a name matches a list of names or name wildcards : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_name-test.html : @param $testname the name to test : @param $names the list of names or name wildcards :)\n         declare function functx:name-test ( $testname as xs:string? , $names as xs:string* ) as xs:boolean { $testname = $names or $names = '*' or functx:substring-after-if-contains($testname,':') = (for $name in $names return substring-after($name,'*:')) or substring-before($testname,':') = (for $name in $names[contains(.,':*')] return substring-before($name,':*')) } ;\n                    (:~ : Performs substring-after, returning the entire string if it does not contain the delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-if-contains.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-after-if-contains ( $arg as xs:string? , $delim as xs:string ) as xs:string? { if (contains($arg,$delim)) then substring-after($arg,$delim) else $arg } ;\n                    let $in-xml := <pre:a xmlns:pre="http://ns.example.com/ns1">abc</pre:a> return (functx:name-test(name($in-xml),('*')))'
functx-functx-name-test-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a name matches a list of names or name wildcards : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_name-test.html : @param $testname the name to test : @param $names the list of names or name wildcards :)\n         declare function functx:name-test ( $testname as xs:string? , $names as xs:string* ) as xs:boolean { $testname = $names or $names = '*' or functx:substring-after-if-contains($testname,':') = (for $name in $names return substring-after($name,'*:')) or substring-before($testname,':') = (for $name in $names[contains(.,':*')] return substring-before($name,':*')) } ;\n                    (:~ : Performs substring-after, returning the entire string if it does not contain the delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-if-contains.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-after-if-contains ( $arg as xs:string? , $delim as xs:string ) as xs:string? { if (contains($arg,$delim)) then substring-after($arg,$delim) else $arg } ;\n                    let $in-xml := <pre:a xmlns:pre="http://ns.example.com/ns1">abc</pre:a> return (functx:name-test(name($in-xml),('pre:*')))'
functx-functx-name-test-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a name matches a list of names or name wildcards : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_name-test.html : @param $testname the name to test : @param $names the list of names or name wildcards :)\n         declare function functx:name-test ( $testname as xs:string? , $names as xs:string* ) as xs:boolean { $testname = $names or $names = '*' or functx:substring-after-if-contains($testname,':') = (for $name in $names return substring-after($name,'*:')) or substring-before($testname,':') = (for $name in $names[contains(.,':*')] return substring-before($name,':*')) } ;\n                    (:~ : Performs substring-after, returning the entire string if it does not contain the delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-if-contains.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-after-if-contains ( $arg as xs:string? , $delim as xs:string ) as xs:string? { if (contains($arg,$delim)) then substring-after($arg,$delim) else $arg } ;\n                    let $in-xml := <pre:a xmlns:pre="http://ns.example.com/ns1">abc</pre:a> return (functx:name-test(name($in-xml),('*:a')))'
functx-functx-name-test-4;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a name matches a list of names or name wildcards : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_name-test.html : @param $testname the name to test : @param $names the list of names or name wildcards :)\n         declare function functx:name-test ( $testname as xs:string? , $names as xs:string* ) as xs:boolean { $testname = $names or $names = '*' or functx:substring-after-if-contains($testname,':') = (for $name in $names return substring-after($name,'*:')) or substring-before($testname,':') = (for $name in $names[contains(.,':*')] return substring-before($name,':*')) } ;\n                    (:~ : Performs substring-after, returning the entire string if it does not contain the delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-if-contains.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-after-if-contains ( $arg as xs:string? , $delim as xs:string ) as xs:string? { if (contains($arg,$delim)) then substring-after($arg,$delim) else $arg } ;\n                    let $in-xml := <pre:a xmlns:pre="http://ns.example.com/ns1">abc</pre:a> return (functx:name-test( name($in-xml),('pre:a','pre:b')))'
functx-functx-name-test-5;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a name matches a list of names or name wildcards : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_name-test.html : @param $testname the name to test : @param $names the list of names or name wildcards :)\n         declare function functx:name-test ( $testname as xs:string? , $names as xs:string* ) as xs:boolean { $testname = $names or $names = '*' or functx:substring-after-if-contains($testname,':') = (for $name in $names return substring-after($name,'*:')) or substring-before($testname,':') = (for $name in $names[contains(.,':*')] return substring-before($name,':*')) } ;\n                    (:~ : Performs substring-after, returning the entire string if it does not contain the delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-if-contains.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-after-if-contains ( $arg as xs:string? , $delim as xs:string ) as xs:string? { if (contains($arg,$delim)) then substring-after($arg,$delim) else $arg } ;\n                    let $in-xml := <pre:a xmlns:pre="http://ns.example.com/ns1">abc</pre:a> return (functx:name-test( name($in-xml),('a','b','c')))'
functx-functx-name-test-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a name matches a list of names or name wildcards : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_name-test.html : @param $testname the name to test : @param $names the list of names or name wildcards :)\n         declare function functx:name-test ( $testname as xs:string? , $names as xs:string* ) as xs:boolean { $testname = $names or $names = '*' or functx:substring-after-if-contains($testname,':') = (for $name in $names return substring-after($name,'*:')) or substring-before($testname,':') = (for $name in $names[contains(.,':*')] return substring-before($name,':*')) } ;\n                    (:~ : Performs substring-after, returning the entire string if it does not contain the delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-if-contains.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-after-if-contains ( $arg as xs:string? , $delim as xs:string ) as xs:string? { if (contains($arg,$delim)) then substring-after($arg,$delim) else $arg } ;\n                    let $in-xml := <pre:a xmlns:pre="http://ns/example.com/ns1">abc</pre:a> return (functx:name-test(name($in-xml),('*')), functx:name-test(name($in-xml),('pre:*')), functx:name-test(name($in-xml),('*:a')), functx:name-test( name($in-xml),('pre:a','pre:b')), functx:name-test( name($in-xml),('a','b','c')))'
functx-functx-namespaces-in-use-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : A list of namespaces used in element/attribute names in an XML fragment : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_namespaces-in-use.html : @param $root the root node to start from :)\n         declare function functx:namespaces-in-use ( $root as node()? ) as xs:anyURI* { distinct-values( $root/descendant-or-self::*/(.|@*)/namespace-uri(.)) } ;\n                    let $in-xml := <authors xmlns="http://ns.example.com/abc" xmlns:d="http://ns.example.com/def"> <author xmlns="http://ns.example.com/ghi"> <fName xmlns:x="http://ns.example.com/xyz" x:attr="123">Kate</fName> <lName>Jones</lName> </author> </authors> return (functx:namespaces-in-use($in-xml))'
functx-functx-next-day-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The next day : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_next-day.html : @param $date the date :)\n         declare function functx:next-day ( $date as xs:anyAtomicType? ) as xs:date? { xs:date($date) + xs:dayTimeDuration('P1D') } ;\n                    (functx:next-day(xs:date('2004-01-23')))'
functx-functx-next-day-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The next day : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_next-day.html : @param $date the date :)\n         declare function functx:next-day ( $date as xs:anyAtomicType? ) as xs:date? { xs:date($date) + xs:dayTimeDuration('P1D') } ;\n                    (functx:next-day( xs:dateTime('2005-12-31T12:00:13')))'
functx-functx-next-day-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The next day : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_next-day.html : @param $date the date :)\n         declare function functx:next-day ( $date as xs:anyAtomicType? ) as xs:date? { xs:date($date) + xs:dayTimeDuration('P1D') } ;\n                    (functx:next-day(xs:date('2004-01-23')), functx:next-day( xs:dateTime('2005-12-31T12:00:13')))'
functx-functx-node-kind-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The XML node kind (element, attribute, text, etc.) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_node-kind.html : @param $nodes the node(s) whose kind you want to determine :)\n         declare function functx:node-kind ( $nodes as node()* ) as xs:string* { for $node in $nodes return if ($node instance of element()) then 'element' else if ($node instance of attribute()) then 'attribute' else if ($node instance of text()) then 'text' else if ($node instance of document-node()) then 'document-node' else if ($node instance of comment()) then 'comment' else if ($node instance of processing-instruction()) then 'processing-instruction' else 'unknown' } ;\n                    let $in-xml := <in-xml> <!-- this is in-xml --> <?test see?> <a z="2">xyz</a> </in-xml> return (functx:node-kind($in-xml/a))'
functx-functx-node-kind-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The XML node kind (element, attribute, text, etc.) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_node-kind.html : @param $nodes the node(s) whose kind you want to determine :)\n         declare function functx:node-kind ( $nodes as node()* ) as xs:string* { for $node in $nodes return if ($node instance of element()) then 'element' else if ($node instance of attribute()) then 'attribute' else if ($node instance of text()) then 'text' else if ($node instance of document-node()) then 'document-node' else if ($node instance of comment()) then 'comment' else if ($node instance of processing-instruction()) then 'processing-instruction' else 'unknown' } ;\n                    let $in-xml := <in-xml> <!-- this is in-xml --> <?test see?> <a z="2">xyz</a> </in-xml> return (functx:node-kind($in-xml/a/@z))'
functx-functx-node-kind-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The XML node kind (element, attribute, text, etc.) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_node-kind.html : @param $nodes the node(s) whose kind you want to determine :)\n         declare function functx:node-kind ( $nodes as node()* ) as xs:string* { for $node in $nodes return if ($node instance of element()) then 'element' else if ($node instance of attribute()) then 'attribute' else if ($node instance of text()) then 'text' else if ($node instance of document-node()) then 'document-node' else if ($node instance of comment()) then 'comment' else if ($node instance of processing-instruction()) then 'processing-instruction' else 'unknown' } ;\n                    let $in-xml := <in-xml> <!-- this is in-xml --> <?test see?> <a z="2">xyz</a> </in-xml> return (functx:node-kind($in-xml/comment()))'
functx-functx-node-kind-4;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The XML node kind (element, attribute, text, etc.) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_node-kind.html : @param $nodes the node(s) whose kind you want to determine :)\n         declare function functx:node-kind ( $nodes as node()* ) as xs:string* { for $node in $nodes return if ($node instance of element()) then 'element' else if ($node instance of attribute()) then 'attribute' else if ($node instance of text()) then 'text' else if ($node instance of document-node()) then 'document-node' else if ($node instance of comment()) then 'comment' else if ($node instance of processing-instruction()) then 'processing-instruction' else 'unknown' } ;\n                    let $in-xml := <in-xml> <!-- this is in-xml --> <?test see?> <a z="2">xyz</a> </in-xml> return (functx:node-kind( $in-xml/processing-instruction()))'
functx-functx-node-kind-5;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The XML node kind (element, attribute, text, etc.) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_node-kind.html : @param $nodes the node(s) whose kind you want to determine :)\n         declare function functx:node-kind ( $nodes as node()* ) as xs:string* { for $node in $nodes return if ($node instance of element()) then 'element' else if ($node instance of attribute()) then 'attribute' else if ($node instance of text()) then 'text' else if ($node instance of document-node()) then 'document-node' else if ($node instance of comment()) then 'comment' else if ($node instance of processing-instruction()) then 'processing-instruction' else 'unknown' } ;\n                    let $in-xml := <in-xml> <!-- this is in-xml --> <?test see?> <a z="2">xyz</a> </in-xml> return (functx:node-kind($in-xml/a/text()))'
functx-functx-node-kind-6;PRSC Error: Failed to parse query '\n         declare namespace functx = "http://www.example.com/";\n                    (:~ : The XML node kind (element, attribute, text, etc.) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_node-kind.html : @param $nodes the node(s) whose kind you want to determine :)\n         declare function functx:node-kind ( $nodes as node()* ) as xs:string* { for $node in $nodes return if ($node instance of element()) then 'element' else if ($node instance of attribute()) then 'attribute' else if ($node instance of text()) then 'text' else if ($node instance of document-node()) then 'document-node' else if ($node instance of comment()) then 'comment' else if ($node instance of processing-instruction()) then 'processing-instruction' else 'unknown' } ;\n         let $in-xml := <in-xml> <!-- this is in-xml --> <?test see?> <a z="2">xyz</a> </in-xml> \n         return (functx:node-kind(/))\n      '
functx-functx-node-kind-all;PRSC Error: Failed to parse query '\n      	declare namespace functx = "http://www.example.com/";                    \n                    (:~ : The XML node kind (element, attribute, text, etc.) : \n                        : @author Priscilla Walmsley, Datypic : @version 1.0\n                        : @see http://www.xqueryfunctions.com/xq/functx_node-kind.html\n                        : @param $nodes the node(s) whose kind you want to determine :)\n         declare function functx:node-kind ( $nodes as node()* ) as xs:string* { \n         	for $node in $nodes return \n         		if ($node instance of element()) then 'element' \n         		else if ($node instance of attribute()) then 'attribute' \n         		else if ($node instance of text()) then 'text' \n         		else if ($node instance of document-node()) then 'document-node' \n         		else if ($node instance of comment()) then 'comment' \n         		else if ($node instance of processing-instruction()) then 'processing-instruction' \n         		else 'unknown' } ;\n         let $in-xml := <in-xml> <!-- this is in-xml --> <?test see?> <a z="2">xyz</a> </in-xml> \n         return (functx:node-kind($in-xml/a), \n                    functx:node-kind($in-xml/a/@z), \n                    functx:node-kind($in-xml/comment()), \n                    functx:node-kind( $in-xml/processing-instruction()), \n                    functx:node-kind($in-xml/a/text()), \n                    functx:node-kind(/))'
functx-functx-non-distinct-values-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Returns any values that appear more than once in a sequence : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_non-distinct-values.html : @param $seq the sequence of values :)\n         declare function functx:non-distinct-values ( $seq as xs:anyAtomicType* ) as xs:anyAtomicType* { for $val in distinct-values($seq) return $val[count($seq[. = $val]) >\n                    1] } ;\n                    (functx:non-distinct-values( (1,2,1,3))) = 1'
functx-functx-non-distinct-values-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Returns any values that appear more than once in a sequence : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_non-distinct-values.html : @param $seq the sequence of values :)\n         declare function functx:non-distinct-values ( $seq as xs:anyAtomicType* ) as xs:anyAtomicType* { for $val in distinct-values($seq) return $val[count($seq[. = $val]) >\n                    1] } ;\n                    (functx:non-distinct-values( (1,2,1,3,2.0)))'
functx-functx-non-distinct-values-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Returns any values that appear more than once in a sequence : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_non-distinct-values.html : @param $seq the sequence of values :)\n         declare function functx:non-distinct-values ( $seq as xs:anyAtomicType* ) as xs:anyAtomicType* { for $val in distinct-values($seq) return $val[count($seq[. = $val]) >\n                    1] } ;\n                    (functx:non-distinct-values( (1,2,3) ))'
functx-functx-non-distinct-values-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Returns any values that appear more than once in a sequence : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_non-distinct-values.html : @param $seq the sequence of values :)\n         declare function functx:non-distinct-values ( $seq as xs:anyAtomicType* ) as xs:anyAtomicType* { for $val in distinct-values($seq) return $val[count($seq[. = $val]) >\n                    1] } ;\n                    (functx:non-distinct-values( (1,2,1,3)), functx:non-distinct-values( (1,2,1,3,2.0)), functx:non-distinct-values( (1,2,3) ))'
functx-functx-number-of-matches-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The number of regions that match a pattern : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_number-of-matches.html : @param $arg the string to test : @param $pattern the regular expression :)\n         declare function functx:number-of-matches ( $arg as xs:string? , $pattern as xs:string ) as xs:integer { count(tokenize($arg,$pattern)) - 1 } ;\n                    (functx:number-of-matches('abcabc','ab')) = 2'
functx-functx-number-of-matches-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The number of regions that match a pattern : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_number-of-matches.html : @param $arg the string to test : @param $pattern the regular expression :)\n         declare function functx:number-of-matches ( $arg as xs:string? , $pattern as xs:string ) as xs:integer { count(tokenize($arg,$pattern)) - 1 } ;\n                    (functx:number-of-matches('12345','\d')) = 5'
functx-functx-number-of-matches-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The number of regions that match a pattern : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_number-of-matches.html : @param $arg the string to test : @param $pattern the regular expression :)\n         declare function functx:number-of-matches ( $arg as xs:string? , $pattern as xs:string ) as xs:integer { count(tokenize($arg,$pattern)) - 1 } ;\n                    (functx:number-of-matches('aaaaaa','aaa')) = 2'
functx-functx-number-of-matches-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The number of regions that match a pattern : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_number-of-matches.html : @param $arg the string to test : @param $pattern the regular expression :)\n         declare function functx:number-of-matches ( $arg as xs:string? , $pattern as xs:string ) as xs:integer { count(tokenize($arg,$pattern)) - 1 } ;\n                    (functx:number-of-matches('abcabc','ab'), functx:number-of-matches('12345','\d'), functx:number-of-matches('aaaaaa','aaa'))'
functx-functx-ordinal-number-en-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Reformats a number as an ordinal number, e.g. 1st, 2nd, 3rd. : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_ordinal-number-en.html : @param $num the number :)\n         declare function functx:ordinal-number-en ( $num as xs:integer? ) as xs:string { concat(xs:string($num), if (matches(xs:string($num),'[04-9]$|1[1-3]$')) then 'th' else if (ends-with(xs:string($num),'1')) then 'st' else if (ends-with(xs:string($num),'2')) then 'nd' else if (ends-with(xs:string($num),'3')) then 'rd' else '') } ;\n                    (functx:ordinal-number-en(1))'
functx-functx-ordinal-number-en-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Reformats a number as an ordinal number, e.g. 1st, 2nd, 3rd. : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_ordinal-number-en.html : @param $num the number :)\n         declare function functx:ordinal-number-en ( $num as xs:integer? ) as xs:string { concat(xs:string($num), if (matches(xs:string($num),'[04-9]$|1[1-3]$')) then 'th' else if (ends-with(xs:string($num),'1')) then 'st' else if (ends-with(xs:string($num),'2')) then 'nd' else if (ends-with(xs:string($num),'3')) then 'rd' else '') } ;\n                    (functx:ordinal-number-en(12))'
functx-functx-ordinal-number-en-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Reformats a number as an ordinal number, e.g. 1st, 2nd, 3rd. : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_ordinal-number-en.html : @param $num the number :)\n         declare function functx:ordinal-number-en ( $num as xs:integer? ) as xs:string { concat(xs:string($num), if (matches(xs:string($num),'[04-9]$|1[1-3]$')) then 'th' else if (ends-with(xs:string($num),'1')) then 'st' else if (ends-with(xs:string($num),'2')) then 'nd' else if (ends-with(xs:string($num),'3')) then 'rd' else '') } ;\n                    (functx:ordinal-number-en(1), functx:ordinal-number-en(12))'
functx-functx-pad-integer-to-length-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Pads an integer to a desired length by adding leading zeros : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_pad-integer-to-length.html : @param $integerToPad the integer to pad : @param $length the desired length :)\n         declare function functx:pad-integer-to-length ( $integerToPad as xs:anyAtomicType? , $length as xs:integer ) as xs:string { if ($length < string-length(string($integerToPad))) then error(xs:QName('functx:Integer_Longer_Than_Length')) else concat (functx:repeat-string( '0',$length - string-length(string($integerToPad))), string($integerToPad)) } ;\n                    (:~ : Repeats a string a given number of times : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_repeat-string.html : @param $stringToRepeat the string to repeat : @param $count the desired number of copies :)\n         declare function functx:repeat-string ( $stringToRepeat as xs:string? , $count as xs:integer ) as xs:string { string-join((for $i in 1 to $count return $stringToRepeat), '') } ;\n                    (functx:pad-integer-to-length(12, 6))'
functx-functx-pad-integer-to-length-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Pads an integer to a desired length by adding leading zeros : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_pad-integer-to-length.html : @param $integerToPad the integer to pad : @param $length the desired length :)\n         declare function functx:pad-integer-to-length ( $integerToPad as xs:anyAtomicType? , $length as xs:integer ) as xs:string { if ($length < string-length(string($integerToPad))) then error(xs:QName('functx:Integer_Longer_Than_Length')) else concat (functx:repeat-string( '0',$length - string-length(string($integerToPad))), string($integerToPad)) } ;\n                    (:~ : Repeats a string a given number of times : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_repeat-string.html : @param $stringToRepeat the string to repeat : @param $count the desired number of copies :)\n         declare function functx:repeat-string ( $stringToRepeat as xs:string? , $count as xs:integer ) as xs:string { string-join((for $i in 1 to $count return $stringToRepeat), '') } ;\n                    (functx:pad-integer-to-length(1, 6))'
functx-functx-pad-integer-to-length-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Pads an integer to a desired length by adding leading zeros : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_pad-integer-to-length.html : @param $integerToPad the integer to pad : @param $length the desired length :)\n         declare function functx:pad-integer-to-length ( $integerToPad as xs:anyAtomicType? , $length as xs:integer ) as xs:string { if ($length < string-length(string($integerToPad))) then error(xs:QName('functx:Integer_Longer_Than_Length')) else concat (functx:repeat-string( '0',$length - string-length(string($integerToPad))), string($integerToPad)) } ;\n                    (:~ : Repeats a string a given number of times : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_repeat-string.html : @param $stringToRepeat the string to repeat : @param $count the desired number of copies :)\n         declare function functx:repeat-string ( $stringToRepeat as xs:string? , $count as xs:integer ) as xs:string { string-join((for $i in 1 to $count return $stringToRepeat), '') } ;\n                    (functx:pad-integer-to-length(12, 2))'
functx-functx-pad-integer-to-length-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Pads an integer to a desired length by adding leading zeros : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_pad-integer-to-length.html : @param $integerToPad the integer to pad : @param $length the desired length :)\n         declare function functx:pad-integer-to-length ( $integerToPad as xs:anyAtomicType? , $length as xs:integer ) as xs:string { if ($length < string-length(string($integerToPad))) then error(xs:QName('functx:Integer_Longer_Than_Length')) else concat (functx:repeat-string( '0',$length - string-length(string($integerToPad))), string($integerToPad)) } ;\n                    (:~ : Repeats a string a given number of times : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_repeat-string.html : @param $stringToRepeat the string to repeat : @param $count the desired number of copies :)\n         declare function functx:repeat-string ( $stringToRepeat as xs:string? , $count as xs:integer ) as xs:string { string-join((for $i in 1 to $count return $stringToRepeat), '') } ;\n                    (functx:pad-integer-to-length(12, 6), functx:pad-integer-to-length(1, 6), functx:pad-integer-to-length(12, 2))'
functx-functx-pad-string-to-length-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Pads a string to a desired length : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_pad-string-to-length.html : @param $stringToPad the string to pad : @param $padChar the character(s) to use as padding : @param $length the desired length :)\n         declare function functx:pad-string-to-length ( $stringToPad as xs:string? , $padChar as xs:string , $length as xs:integer ) as xs:string { substring( string-join ( ($stringToPad, for $i in (1 to $length) return $padChar) ,'') ,1,$length) } ;\n                    (functx:pad-string-to-length('abc', '*', 6))'
functx-functx-pad-string-to-length-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Pads a string to a desired length : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_pad-string-to-length.html : @param $stringToPad the string to pad : @param $padChar the character(s) to use as padding : @param $length the desired length :)\n         declare function functx:pad-string-to-length ( $stringToPad as xs:string? , $padChar as xs:string , $length as xs:integer ) as xs:string { substring( string-join ( ($stringToPad, for $i in (1 to $length) return $padChar) ,'') ,1,$length) } ;\n                    (functx:pad-string-to-length('abcdef', '*', 4))'
functx-functx-pad-string-to-length-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Pads a string to a desired length : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_pad-string-to-length.html : @param $stringToPad the string to pad : @param $padChar the character(s) to use as padding : @param $length the desired length :)\n         declare function functx:pad-string-to-length ( $stringToPad as xs:string? , $padChar as xs:string , $length as xs:integer ) as xs:string { substring( string-join ( ($stringToPad, for $i in (1 to $length) return $padChar) ,'') ,1,$length) } ;\n                    (functx:pad-string-to-length('', '*', 4))'
functx-functx-pad-string-to-length-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Pads a string to a desired length : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_pad-string-to-length.html : @param $stringToPad the string to pad : @param $padChar the character(s) to use as padding : @param $length the desired length :)\n         declare function functx:pad-string-to-length ( $stringToPad as xs:string? , $padChar as xs:string , $length as xs:integer ) as xs:string { substring( string-join ( ($stringToPad, for $i in (1 to $length) return $padChar) ,'') ,1,$length) } ;\n                    (functx:pad-string-to-length('abc', '*', 6), functx:pad-string-to-length('abcdef', '*', 4), functx:pad-string-to-length('', '*', 4))'
functx-functx-path-to-node-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : A path to an XML node (or sequence of nodes) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_path-to-node.html : @param $nodes the node sequence :)\n         declare function functx:path-to-node ( $nodes as node()* ) as xs:string* { $nodes/string-join(ancestor-or-self::*/name(.), '/') } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:path-to-node($in-xml//lName[. = 'Doe']))'
functx-functx-path-to-node-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : A path to an XML node (or sequence of nodes) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_path-to-node.html : @param $nodes the node sequence :)\n         declare function functx:path-to-node ( $nodes as node()* ) as xs:string* { $nodes/string-join(ancestor-or-self::*/name(.), '/') } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:path-to-node($in-xml/*[1]))'
functx-functx-path-to-node-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : A path to an XML node (or sequence of nodes) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_path-to-node.html : @param $nodes the node sequence :)\n         declare function functx:path-to-node ( $nodes as node()* ) as xs:string* { $nodes/string-join(ancestor-or-self::*/name(.), '/') } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:path-to-node($in-xml//lName[. = 'Doe']), functx:path-to-node($in-xml/*[1]))'
functx-functx-path-to-node-with-pos-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The position of a node in a sequence, based on node identity : : @author W3C XML Query Working Group : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_index-of-node.html : @param $nodes the node sequence : @param $nodeToFind the node to find in the sequence :)\n         declare function functx:index-of-node ( $nodes as node()* , $nodeToFind as node() ) as xs:integer* { for $seq in (1 to count($nodes)) return $seq[$nodes[$seq] is $nodeToFind] } ;\n                    (:~ : A unique path to an XML node (or sequence of nodes) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_path-to-node-with-pos.html : @param $node the node sequence :)\n         declare function functx:path-to-node-with-pos ( $node as node()? ) as xs:string { string-join( for $ancestor in $node/ancestor-or-self::* let $sibsOfSameName := $ancestor/../*[name() = name($ancestor)] return concat(name($ancestor), if (count($sibsOfSameName) <= 1) then '' else concat( '[',functx:index-of-node($sibsOfSameName,$ancestor),']')) , '/') } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:path-to-node-with-pos( $in-xml//lName[. = 'Doe']))'
functx-functx-path-to-node-with-pos-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The position of a node in a sequence, based on node identity : : @author W3C XML Query Working Group : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_index-of-node.html : @param $nodes the node sequence : @param $nodeToFind the node to find in the sequence :)\n         declare function functx:index-of-node ( $nodes as node()* , $nodeToFind as node() ) as xs:integer* { for $seq in (1 to count($nodes)) return $seq[$nodes[$seq] is $nodeToFind] } ;\n                    (:~ : A unique path to an XML node (or sequence of nodes) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_path-to-node-with-pos.html : @param $node the node sequence :)\n         declare function functx:path-to-node-with-pos ( $node as node()? ) as xs:string { string-join( for $ancestor in $node/ancestor-or-self::* let $sibsOfSameName := $ancestor/../*[name() = name($ancestor)] return concat(name($ancestor), if (count($sibsOfSameName) <= 1) then '' else concat( '[',functx:index-of-node($sibsOfSameName,$ancestor),']')) , '/') } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:path-to-node-with-pos($in-xml/*[1]))'
functx-functx-path-to-node-with-pos-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The position of a node in a sequence, based on node identity : : @author W3C XML Query Working Group : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_index-of-node.html : @param $nodes the node sequence : @param $nodeToFind the node to find in the sequence :)\n         declare function functx:index-of-node ( $nodes as node()* , $nodeToFind as node() ) as xs:integer* { for $seq in (1 to count($nodes)) return $seq[$nodes[$seq] is $nodeToFind] } ;\n                    (:~ : A unique path to an XML node (or sequence of nodes) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_path-to-node-with-pos.html : @param $node the node sequence :)\n         declare function functx:path-to-node-with-pos ( $node as node()? ) as xs:string { string-join( for $ancestor in $node/ancestor-or-self::* let $sibsOfSameName := $ancestor/../*[name() = name($ancestor)] return concat(name($ancestor), if (count($sibsOfSameName) <= 1) then '' else concat( '[',functx:index-of-node($sibsOfSameName,$ancestor),']')) , '/') } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:path-to-node-with-pos( $in-xml//lName[. = 'Doe']), functx:path-to-node-with-pos($in-xml/*[1]))'
functx-functx-precedes-not-ancestor-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an XML node precedes another without being its ancestor : : @author W3C XML Query Working Group : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_precedes-not-ancestor.html : @param $a the first node : @param $b the second node :)\n         declare function functx:precedes-not-ancestor ( $a as node()? , $b as node()? ) as xs:boolean { $a << $b and empty($a intersect $b/ancestor::node()) } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:precedes-not-ancestor( $in-xml//author[1],$in-xml//author[2]))'
functx-functx-precedes-not-ancestor-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an XML node precedes another without being its ancestor : : @author W3C XML Query Working Group : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_precedes-not-ancestor.html : @param $a the first node : @param $b the second node :)\n         declare function functx:precedes-not-ancestor ( $a as node()? , $b as node()? ) as xs:boolean { $a << $b and empty($a intersect $b/ancestor::node()) } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:precedes-not-ancestor( $in-xml//author[1], $in-xml//author[1]/fName))'
functx-functx-precedes-not-ancestor-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an XML node precedes another without being its ancestor : : @author W3C XML Query Working Group : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_precedes-not-ancestor.html : @param $a the first node : @param $b the second node :)\n         declare function functx:precedes-not-ancestor ( $a as node()? , $b as node()? ) as xs:boolean { $a << $b and empty($a intersect $b/ancestor::node()) } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:precedes-not-ancestor( $in-xml//author[2],$in-xml//author[1]))'
functx-functx-precedes-not-ancestor-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether an XML node precedes another without being its ancestor : : @author W3C XML Query Working Group : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_precedes-not-ancestor.html : @param $a the first node : @param $b the second node :)\n         declare function functx:precedes-not-ancestor ( $a as node()? , $b as node()? ) as xs:boolean { $a << $b and empty($a intersect $b/ancestor::node()) } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:precedes-not-ancestor( $in-xml//author[1],$in-xml//author[2]), functx:precedes-not-ancestor( $in-xml//author[1], $in-xml//author[1]/fName), functx:precedes-not-ancestor( $in-xml//author[2],$in-xml//author[1]))'
functx-functx-previous-day-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The previous day : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_previous-day.html : @param $date the date :)\n         declare function functx:previous-day ( $date as xs:anyAtomicType? ) as xs:date? { xs:date($date) - xs:dayTimeDuration('P1D') } ;\n                    (functx:previous-day(xs:date('2004-01-23')))'
functx-functx-previous-day-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The previous day : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_previous-day.html : @param $date the date :)\n         declare function functx:previous-day ( $date as xs:anyAtomicType? ) as xs:date? { xs:date($date) - xs:dayTimeDuration('P1D') } ;\n                    (functx:previous-day( xs:dateTime('2005-01-01T12:00:13')))'
functx-functx-previous-day-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The previous day : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_previous-day.html : @param $date the date :)\n         declare function functx:previous-day ( $date as xs:anyAtomicType? ) as xs:date? { xs:date($date) - xs:dayTimeDuration('P1D') } ;\n                    (functx:previous-day(xs:date('2004-01-23')), functx:previous-day( xs:dateTime('2005-01-01T12:00:13')))'
functx-functx-remove-attributes-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a name matches a list of names or name wildcards : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_name-test.html : @param $testname the name to test : @param $names the list of names or name wildcards :)\n         declare function functx:name-test ( $testname as xs:string? , $names as xs:string* ) as xs:boolean { $testname = $names or $names = '*' or functx:substring-after-if-contains($testname,':') = (for $name in $names return substring-after($name,'*:')) or substring-before($testname,':') = (for $name in $names[contains(.,':*')] return substring-before($name,':*')) } ;\n                    (:~ : Removes attributes from an XML element, based on name : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_remove-attributes.html : @param $elements the element(s) from which to remove the attributes : @param $names the names of the attributes to remove, or * for all attributes :)\n         declare function functx:remove-attributes ( $elements as element()* , $names as xs:string* ) as element() { for $element in $elements return element {node-name($element)} {$element/@*[not(functx:name-test(name(),$names))], $element/node() } } ;\n                    (:~ : Performs substring-after, returning the entire string if it does not contain the delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-if-contains.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-after-if-contains ( $arg as xs:string? , $delim as xs:string ) as xs:string? { if (contains($arg,$delim)) then substring-after($arg,$delim) else $arg } ;\n                    let $in-xml-1 := <a attr1="123" attr2="456">abc</a> return let $in-xml-2 := <a xmlns:a="http://a" a:attr1="123" attr1="456">abc</a> return (functx:remove-attributes( $in-xml-1, ('attr1','attr2')))'
functx-functx-remove-attributes-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a name matches a list of names or name wildcards : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_name-test.html : @param $testname the name to test : @param $names the list of names or name wildcards :)\n         declare function functx:name-test ( $testname as xs:string? , $names as xs:string* ) as xs:boolean { $testname = $names or $names = '*' or functx:substring-after-if-contains($testname,':') = (for $name in $names return substring-after($name,'*:')) or substring-before($testname,':') = (for $name in $names[contains(.,':*')] return substring-before($name,':*')) } ;\n                    (:~ : Removes attributes from an XML element, based on name : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_remove-attributes.html : @param $elements the element(s) from which to remove the attributes : @param $names the names of the attributes to remove, or * for all attributes :)\n         declare function functx:remove-attributes ( $elements as element()* , $names as xs:string* ) as element() { for $element in $elements return element {node-name($element)} {$element/@*[not(functx:name-test(name(),$names))], $element/node() } } ;\n                    (:~ : Performs substring-after, returning the entire string if it does not contain the delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-if-contains.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-after-if-contains ( $arg as xs:string? , $delim as xs:string ) as xs:string? { if (contains($arg,$delim)) then substring-after($arg,$delim) else $arg } ;\n                    let $in-xml-1 := <a attr1="123" attr2="456">abc</a> return let $in-xml-2 := <a xmlns:a="http://a" a:attr1="123" attr1="456">abc</a> return (functx:remove-attributes( $in-xml-1, ('attr1','attr3')))'
functx-functx-remove-attributes-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a name matches a list of names or name wildcards : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_name-test.html : @param $testname the name to test : @param $names the list of names or name wildcards :)\n         declare function functx:name-test ( $testname as xs:string? , $names as xs:string* ) as xs:boolean { $testname = $names or $names = '*' or functx:substring-after-if-contains($testname,':') = (for $name in $names return substring-after($name,'*:')) or substring-before($testname,':') = (for $name in $names[contains(.,':*')] return substring-before($name,':*')) } ;\n                    (:~ : Removes attributes from an XML element, based on name : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_remove-attributes.html : @param $elements the element(s) from which to remove the attributes : @param $names the names of the attributes to remove, or * for all attributes :)\n         declare function functx:remove-attributes ( $elements as element()* , $names as xs:string* ) as element() { for $element in $elements return element {node-name($element)} {$element/@*[not(functx:name-test(name(),$names))], $element/node() } } ;\n                    (:~ : Performs substring-after, returning the entire string if it does not contain the delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-if-contains.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-after-if-contains ( $arg as xs:string? , $delim as xs:string ) as xs:string? { if (contains($arg,$delim)) then substring-after($arg,$delim) else $arg } ;\n                    let $in-xml-1 := <a attr1="123" attr2="456">abc</a> return let $in-xml-2 := <a xmlns:a="http://a" a:attr1="123" attr1="456">abc</a> return (functx:remove-attributes($in-xml-1, '*'))'
functx-functx-remove-attributes-4;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a name matches a list of names or name wildcards : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_name-test.html : @param $testname the name to test : @param $names the list of names or name wildcards :)\n         declare function functx:name-test ( $testname as xs:string? , $names as xs:string* ) as xs:boolean { $testname = $names or $names = '*' or functx:substring-after-if-contains($testname,':') = (for $name in $names return substring-after($name,'*:')) or substring-before($testname,':') = (for $name in $names[contains(.,':*')] return substring-before($name,':*')) } ;\n                    (:~ : Removes attributes from an XML element, based on name : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_remove-attributes.html : @param $elements the element(s) from which to remove the attributes : @param $names the names of the attributes to remove, or * for all attributes :)\n         declare function functx:remove-attributes ( $elements as element()* , $names as xs:string* ) as element() { for $element in $elements return element {node-name($element)} {$element/@*[not(functx:name-test(name(),$names))], $element/node() } } ;\n                    (:~ : Performs substring-after, returning the entire string if it does not contain the delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-if-contains.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-after-if-contains ( $arg as xs:string? , $delim as xs:string ) as xs:string? { if (contains($arg,$delim)) then substring-after($arg,$delim) else $arg } ;\n                    let $in-xml-1 := <a attr1="123" attr2="456">abc</a> return let $in-xml-2 := <a xmlns:a="http://a" a:attr1="123" attr1="456">abc</a> return (functx:remove-attributes( $in-xml-2, ('a:attr1')))'
functx-functx-remove-attributes-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a name matches a list of names or name wildcards : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_name-test.html : @param $testname the name to test : @param $names the list of names or name wildcards :)\n         declare function functx:name-test ( $testname as xs:string? , $names as xs:string* ) as xs:boolean { $testname = $names or $names = '*' or functx:substring-after-if-contains($testname,':') = (for $name in $names return substring-after($name,'*:')) or substring-before($testname,':') = (for $name in $names[contains(.,':*')] return substring-before($name,':*')) } ;\n                    (:~ : Removes attributes from an XML element, based on name : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_remove-attributes.html : @param $elements the element(s) from which to remove the attributes : @param $names the names of the attributes to remove, or * for all attributes :)\n         declare function functx:remove-attributes ( $elements as element()* , $names as xs:string* ) as element() { for $element in $elements return element {node-name($element)} {$element/@*[not(functx:name-test(name(),$names))], $element/node() } } ;\n                    (:~ : Performs substring-after, returning the entire string if it does not contain the delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-if-contains.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-after-if-contains ( $arg as xs:string? , $delim as xs:string ) as xs:string? { if (contains($arg,$delim)) then substring-after($arg,$delim) else $arg } ;\n                    let $in-xml-1 := <a attr1="123" attr2="456">abc</a> return let $in-xml-2 := <a xmlns:a="http://a" a:attr1="123" attr1="456">abc</a> return (functx:remove-attributes( $in-xml-1, ('attr1','attr2')), functx:remove-attributes( $in-xml-1, ('attr1','attr3')), functx:remove-attributes($in-xml-1, '*'), functx:remove-attributes( $in-xml-2, ('a:attr1')))'
functx-functx-remove-attributes-deep-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a name matches a list of names or name wildcards : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_name-test.html : @param $testname the name to test : @param $names the list of names or name wildcards :)\n         declare function functx:name-test ( $testname as xs:string? , $names as xs:string* ) as xs:boolean { $testname = $names or $names = '*' or functx:substring-after-if-contains($testname,':') = (for $name in $names return substring-after($name,'*:')) or substring-before($testname,':') = (for $name in $names[contains(.,':*')] return substring-before($name,':*')) } ;\n                    (:~ : Removes attributes from an XML fragment, based on name : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_remove-attributes-deep.html : @param $nodes the root(s) to start from : @param $names the names of the attributes to remove, or * for all attributes :)\n         declare function functx:remove-attributes-deep ( $nodes as node()* , $names as xs:string* ) as node()* { for $node in $nodes return if ($node instance of element()) then element { node-name($node)} { $node/@*[not(functx:name-test(name(),$names))], functx:remove-attributes-deep($node/node(), $names)} else if ($node instance of document-node()) then functx:remove-attributes-deep($node/node(), $names) else $node } ;\n                    (:~ : Performs substring-after, returning the entire string if it does not contain the delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-if-contains.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-after-if-contains ( $arg as xs:string? , $delim as xs:string ) as xs:string? { if (contains($arg,$delim)) then substring-after($arg,$delim) else $arg } ;\n                    let $in-xml-1 := <a attr1="123" attr2="456"> <b attr1="xzy">abc</b> </a> return let $in-xml-2 := <a xmlns:a="http://a" a:attr1="123" attr1="456"> <b a:attr1="ghi" attr1="xzy">abc</b> </a> return (functx:remove-attributes-deep( $in-xml-1, ('attr1','attr2')))'
functx-functx-remove-attributes-deep-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a name matches a list of names or name wildcards : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_name-test.html : @param $testname the name to test : @param $names the list of names or name wildcards :)\n         declare function functx:name-test ( $testname as xs:string? , $names as xs:string* ) as xs:boolean { $testname = $names or $names = '*' or functx:substring-after-if-contains($testname,':') = (for $name in $names return substring-after($name,'*:')) or substring-before($testname,':') = (for $name in $names[contains(.,':*')] return substring-before($name,':*')) } ;\n                    (:~ : Removes attributes from an XML fragment, based on name : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_remove-attributes-deep.html : @param $nodes the root(s) to start from : @param $names the names of the attributes to remove, or * for all attributes :)\n         declare function functx:remove-attributes-deep ( $nodes as node()* , $names as xs:string* ) as node()* { for $node in $nodes return if ($node instance of element()) then element { node-name($node)} { $node/@*[not(functx:name-test(name(),$names))], functx:remove-attributes-deep($node/node(), $names)} else if ($node instance of document-node()) then functx:remove-attributes-deep($node/node(), $names) else $node } ;\n                    (:~ : Performs substring-after, returning the entire string if it does not contain the delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-if-contains.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-after-if-contains ( $arg as xs:string? , $delim as xs:string ) as xs:string? { if (contains($arg,$delim)) then substring-after($arg,$delim) else $arg } ;\n                    let $in-xml-1 := <a attr1="123" attr2="456"> <b attr1="xzy">abc</b> </a> return let $in-xml-2 := <a xmlns:a="http://a" a:attr1="123" attr1="456"> <b a:attr1="ghi" attr1="xzy">abc</b> </a> return (functx:remove-attributes-deep( $in-xml-1, ('attr1','attr3')))'
functx-functx-remove-attributes-deep-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a name matches a list of names or name wildcards : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_name-test.html : @param $testname the name to test : @param $names the list of names or name wildcards :)\n         declare function functx:name-test ( $testname as xs:string? , $names as xs:string* ) as xs:boolean { $testname = $names or $names = '*' or functx:substring-after-if-contains($testname,':') = (for $name in $names return substring-after($name,'*:')) or substring-before($testname,':') = (for $name in $names[contains(.,':*')] return substring-before($name,':*')) } ;\n                    (:~ : Removes attributes from an XML fragment, based on name : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_remove-attributes-deep.html : @param $nodes the root(s) to start from : @param $names the names of the attributes to remove, or * for all attributes :)\n         declare function functx:remove-attributes-deep ( $nodes as node()* , $names as xs:string* ) as node()* { for $node in $nodes return if ($node instance of element()) then element { node-name($node)} { $node/@*[not(functx:name-test(name(),$names))], functx:remove-attributes-deep($node/node(), $names)} else if ($node instance of document-node()) then functx:remove-attributes-deep($node/node(), $names) else $node } ;\n                    (:~ : Performs substring-after, returning the entire string if it does not contain the delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-if-contains.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-after-if-contains ( $arg as xs:string? , $delim as xs:string ) as xs:string? { if (contains($arg,$delim)) then substring-after($arg,$delim) else $arg } ;\n                    let $in-xml-1 := <a attr1="123" attr2="456"> <b attr1="xzy">abc</b> </a> return let $in-xml-2 := <a xmlns:a="http://a" a:attr1="123" attr1="456"> <b a:attr1="ghi" attr1="xzy">abc</b> </a> return (functx:remove-attributes-deep( $in-xml-2, 'a:attr1'))'
functx-functx-remove-attributes-deep-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a name matches a list of names or name wildcards : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_name-test.html : @param $testname the name to test : @param $names the list of names or name wildcards :)\n         declare function functx:name-test ( $testname as xs:string? , $names as xs:string* ) as xs:boolean { $testname = $names or $names = '*' or functx:substring-after-if-contains($testname,':') = (for $name in $names return substring-after($name,'*:')) or substring-before($testname,':') = (for $name in $names[contains(.,':*')] return substring-before($name,':*')) } ;\n                    (:~ : Removes attributes from an XML fragment, based on name : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_remove-attributes-deep.html : @param $nodes the root(s) to start from : @param $names the names of the attributes to remove, or * for all attributes :)\n         declare function functx:remove-attributes-deep ( $nodes as node()* , $names as xs:string* ) as node()* { for $node in $nodes return if ($node instance of element()) then element { node-name($node)} { $node/@*[not(functx:name-test(name(),$names))], functx:remove-attributes-deep($node/node(), $names)} else if ($node instance of document-node()) then functx:remove-attributes-deep($node/node(), $names) else $node } ;\n                    (:~ : Performs substring-after, returning the entire string if it does not contain the delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-if-contains.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-after-if-contains ( $arg as xs:string? , $delim as xs:string ) as xs:string? { if (contains($arg,$delim)) then substring-after($arg,$delim) else $arg } ;\n                    let $in-xml-1 := <a attr1="123" attr2="456"> <b attr1="xzy">abc</b> </a> return let $in-xml-2 := <a xmlns:a="http://a" a:attr1="123" attr1="456"> <b a:attr1="ghi" attr1="xzy">abc</b> </a> return (functx:remove-attributes-deep( $in-xml-1, ('attr1','attr2')), functx:remove-attributes-deep( $in-xml-1, ('attr1','attr3')), functx:remove-attributes-deep( $in-xml-2, 'a:attr1'))'
functx-functx-remove-elements-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a name matches a list of names or name wildcards : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_name-test.html : @param $testname the name to test : @param $names the list of names or name wildcards :)\n         declare function functx:name-test ( $testname as xs:string? , $names as xs:string* ) as xs:boolean { $testname = $names or $names = '*' or functx:substring-after-if-contains($testname,':') = (for $name in $names return substring-after($name,'*:')) or substring-before($testname,':') = (for $name in $names[contains(.,':*')] return substring-before($name,':*')) } ;\n                    (:~ : Removes child elements from an XML node, based on name : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_remove-elements.html : @param $elements the element(s) from which you wish to remove the children : @param $names the names of the child elements to remove :)\n         declare function functx:remove-elements ( $elements as element()* , $names as xs:string* ) as element()* { for $element in $elements return element {node-name($element)} {$element/@*, $element/node()[not(functx:name-test(name(),$names))] } } ;\n                    (:~ : Performs substring-after, returning the entire string if it does not contain the delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-if-contains.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-after-if-contains ( $arg as xs:string? , $delim as xs:string ) as xs:string? { if (contains($arg,$delim)) then substring-after($arg,$delim) else $arg } ;\n                    let $in-xml-1 := <in-xml> <a>123</a> <a>456</a> <c>Mixed <b>content</b></c> </in-xml> return let $in-xml-2 := <in-xml xmlns:x="http://x"> <a>123</a> <x:a>456</x:a> <c>Mixed <x:a>content</x:a></c> </in-xml> return (functx:remove-elements( $in-xml-1, 'c'))'
functx-functx-remove-elements-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a name matches a list of names or name wildcards : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_name-test.html : @param $testname the name to test : @param $names the list of names or name wildcards :)\n         declare function functx:name-test ( $testname as xs:string? , $names as xs:string* ) as xs:boolean { $testname = $names or $names = '*' or functx:substring-after-if-contains($testname,':') = (for $name in $names return substring-after($name,'*:')) or substring-before($testname,':') = (for $name in $names[contains(.,':*')] return substring-before($name,':*')) } ;\n                    (:~ : Removes child elements from an XML node, based on name : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_remove-elements.html : @param $elements the element(s) from which you wish to remove the children : @param $names the names of the child elements to remove :)\n         declare function functx:remove-elements ( $elements as element()* , $names as xs:string* ) as element()* { for $element in $elements return element {node-name($element)} {$element/@*, $element/node()[not(functx:name-test(name(),$names))] } } ;\n                    (:~ : Performs substring-after, returning the entire string if it does not contain the delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-if-contains.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-after-if-contains ( $arg as xs:string? , $delim as xs:string ) as xs:string? { if (contains($arg,$delim)) then substring-after($arg,$delim) else $arg } ;\n                    let $in-xml-1 := <in-xml> <a>123</a> <a>456</a> <c>Mixed <b>content</b></c> </in-xml> return let $in-xml-2 := <in-xml xmlns:x="http://x"> <a>123</a> <x:a>456</x:a> <c>Mixed <x:a>content</x:a></c> </in-xml> return (functx:remove-elements( $in-xml-1, ('a','b')))'
functx-functx-remove-elements-3;PRSC Error: Failed to parse query '\n         \n         declare namespace functx = "http://www.example.com/";\n         \n         (:~ : Whether a name matches a list of names or name wildcards : \n             : @author Priscilla Walmsley, Datypic : @version 1.0 \n             : @see http://www.xqueryfunctions.com/xq/functx_name-test.html \n             : @param $testname the name to test \n             : @param $names the list of names or name wildcards :)\n         declare function functx:name-test ( $testname as xs:string? , $names as xs:string* ) as xs:boolean { \n            $testname = $names \n            or $names = '*' \n            or functx:substring-after-if-contains($testname,':') = (for $name in $names return substring-after($name,'*:')) \n            or substring-before($testname,':') = (for $name in $names[contains(.,':*')] return substring-before($name,':*')) \n         } ;\n         \n         (:~ : Removes child elements from an XML node, based on name : \n             : @author Priscilla Walmsley, Datypic : @version 1.0 \n             : @see http://www.xqueryfunctions.com/xq/functx_remove-elements.html \n             : @param $elements the element(s) from which you wish to remove the children \n             : @param $names the names of the child elements to remove :)\n         declare function functx:remove-elements ( $elements as element()* , $names as xs:string* ) as element()* { \n            for $element in $elements \n            return element {node-name($element)} {$element/@*, $element/node()[not(functx:name-test(name(),$names))] } \n         } ;\n         \n         (:~ : Performs substring-after, returning the entire string if it does not contain the delimiter : \n             : @author Priscilla Walmsley, Datypic : @version 1.0 \n             : @see http://www.xqueryfunctions.com/xq/functx_substring-after-if-contains.html \n             : @param $arg the string to substring \n             : @param $delim the delimiter :)\n         declare function functx:substring-after-if-contains ( $arg as xs:string? , $delim as xs:string ) as xs:string? { \n            if (contains($arg, $delim)) \n            then substring-after($arg, $delim) \n            else $arg \n         } ;\n                    \n         let $in-xml-1 := <in-xml> <a>123</a> <a>456</a> <c>Mixed <b>content</b></c> </in-xml> \n         return let $in-xml-2 := <in-xml xmlns:x="http://x"> <a>123</a> <x:a>456</x:a> <c>Mixed <x:a>content</x:a></c> </in-xml> \n         return (functx:remove-elements( $in-xml-2, 'x:a'))\n         \n      '
functx-functx-remove-elements-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a name matches a list of names or name wildcards : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_name-test.html : @param $testname the name to test : @param $names the list of names or name wildcards :)\n         declare function functx:name-test ( $testname as xs:string? , $names as xs:string* ) as xs:boolean { $testname = $names or $names = '*' or functx:substring-after-if-contains($testname,':') = (for $name in $names return substring-after($name,'*:')) or substring-before($testname,':') = (for $name in $names[contains(.,':*')] return substring-before($name,':*')) } ;\n                    (:~ : Removes child elements from an XML node, based on name : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_remove-elements.html : @param $elements the element(s) from which you wish to remove the children : @param $names the names of the child elements to remove :)\n         declare function functx:remove-elements ( $elements as element()* , $names as xs:string* ) as element()* { for $element in $elements return element {node-name($element)} {$element/@*, $element/node()[not(functx:name-test(name(),$names))] } } ;\n                    (:~ : Performs substring-after, returning the entire string if it does not contain the delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-if-contains.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-after-if-contains ( $arg as xs:string? , $delim as xs:string ) as xs:string? { if (contains($arg,$delim)) then substring-after($arg,$delim) else $arg } ;\n                    let $in-xml-1 := <in-xml> <a>123</a> <a>456</a> <c>Mixed <b>content</b></c> </in-xml> return let $in-xml-2 := <in-xml xmlns:x="http://x"> <a>123</a> <x:a>456</x:a> <c>Mixed <x:a>content</x:a></c> </in-xml> return (functx:remove-elements( $in-xml-1, 'c'), functx:remove-elements( $in-xml-1, ('a','b')), functx:remove-elements( $in-xml-2, 'x:a'))'
functx-functx-remove-elements-deep-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a name matches a list of names or name wildcards : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_name-test.html : @param $testname the name to test : @param $names the list of names or name wildcards :)\n         declare function functx:name-test ( $testname as xs:string? , $names as xs:string* ) as xs:boolean { $testname = $names or $names = '*' or functx:substring-after-if-contains($testname,':') = (for $name in $names return substring-after($name,'*:')) or substring-before($testname,':') = (for $name in $names[contains(.,':*')] return substring-before($name,':*')) } ;\n                    (:~ : Removes descendant elements from an XML node, based on name : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_remove-elements-deep.html : @param $nodes root(s) to start from : @param $names the names of the elements to remove :)\n         declare function functx:remove-elements-deep ( $nodes as node()* , $names as xs:string* ) as node()* { for $node in $nodes return if ($node instance of element()) then if (functx:name-test(name($node),$names)) then () else element { node-name($node)} { $node/@*, functx:remove-elements-deep($node/node(), $names)} else if ($node instance of document-node()) then functx:remove-elements-deep($node/node(), $names) else $node } ;\n                    (:~ : Performs substring-after, returning the entire string if it does not contain the delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-if-contains.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-after-if-contains ( $arg as xs:string? , $delim as xs:string ) as xs:string? { if (contains($arg,$delim)) then substring-after($arg,$delim) else $arg } ;\n                    let $in-xml-1 := <in-xml> <a> <b>b1</b> <c>c1</c> </a> <c>Mixed <b>content</b></c> </in-xml> return let $in-xml-2 := <in-xml xmlns:x="http://x"> <a> <x:b>b1</x:b> <c>c1</c> </a> <c>Mixed <b>content</b></c> </in-xml> return (functx:remove-elements-deep( $in-xml-1, 'b'))'
functx-functx-remove-elements-deep-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a name matches a list of names or name wildcards : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_name-test.html : @param $testname the name to test : @param $names the list of names or name wildcards :)\n         declare function functx:name-test ( $testname as xs:string? , $names as xs:string* ) as xs:boolean { $testname = $names or $names = '*' or functx:substring-after-if-contains($testname,':') = (for $name in $names return substring-after($name,'*:')) or substring-before($testname,':') = (for $name in $names[contains(.,':*')] return substring-before($name,':*')) } ;\n                    (:~ : Removes descendant elements from an XML node, based on name : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_remove-elements-deep.html : @param $nodes root(s) to start from : @param $names the names of the elements to remove :)\n         declare function functx:remove-elements-deep ( $nodes as node()* , $names as xs:string* ) as node()* { for $node in $nodes return if ($node instance of element()) then if (functx:name-test(name($node),$names)) then () else element { node-name($node)} { $node/@*, functx:remove-elements-deep($node/node(), $names)} else if ($node instance of document-node()) then functx:remove-elements-deep($node/node(), $names) else $node } ;\n                    (:~ : Performs substring-after, returning the entire string if it does not contain the delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-if-contains.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-after-if-contains ( $arg as xs:string? , $delim as xs:string ) as xs:string? { if (contains($arg,$delim)) then substring-after($arg,$delim) else $arg } ;\n                    let $in-xml-1 := <in-xml> <a> <b>b1</b> <c>c1</c> </a> <c>Mixed <b>content</b></c> </in-xml> return let $in-xml-2 := <in-xml xmlns:x="http://x"> <a> <x:b>b1</x:b> <c>c1</c> </a> <c>Mixed <b>content</b></c> </in-xml> return (functx:remove-elements-deep( $in-xml-1, 'a'))'
functx-functx-remove-elements-deep-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a name matches a list of names or name wildcards : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_name-test.html : @param $testname the name to test : @param $names the list of names or name wildcards :)\n         declare function functx:name-test ( $testname as xs:string? , $names as xs:string* ) as xs:boolean { $testname = $names or $names = '*' or functx:substring-after-if-contains($testname,':') = (for $name in $names return substring-after($name,'*:')) or substring-before($testname,':') = (for $name in $names[contains(.,':*')] return substring-before($name,':*')) } ;\n                    (:~ : Removes descendant elements from an XML node, based on name : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_remove-elements-deep.html : @param $nodes root(s) to start from : @param $names the names of the elements to remove :)\n         declare function functx:remove-elements-deep ( $nodes as node()* , $names as xs:string* ) as node()* { for $node in $nodes return if ($node instance of element()) then if (functx:name-test(name($node),$names)) then () else element { node-name($node)} { $node/@*, functx:remove-elements-deep($node/node(), $names)} else if ($node instance of document-node()) then functx:remove-elements-deep($node/node(), $names) else $node } ;\n                    (:~ : Performs substring-after, returning the entire string if it does not contain the delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-if-contains.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-after-if-contains ( $arg as xs:string? , $delim as xs:string ) as xs:string? { if (contains($arg,$delim)) then substring-after($arg,$delim) else $arg } ;\n                    let $in-xml-1 := <in-xml> <a> <b>b1</b> <c>c1</c> </a> <c>Mixed <b>content</b></c> </in-xml> return let $in-xml-2 := <in-xml xmlns:x="http://x"> <a> <x:b>b1</x:b> <c>c1</c> </a> <c>Mixed <b>content</b></c> </in-xml> return (functx:remove-elements-deep( $in-xml-1, ('b','c')))'
functx-functx-remove-elements-deep-4;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a name matches a list of names or name wildcards : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_name-test.html : @param $testname the name to test : @param $names the list of names or name wildcards :)\n         declare function functx:name-test ( $testname as xs:string? , $names as xs:string* ) as xs:boolean { $testname = $names or $names = '*' or functx:substring-after-if-contains($testname,':') = (for $name in $names return substring-after($name,'*:')) or substring-before($testname,':') = (for $name in $names[contains(.,':*')] return substring-before($name,':*')) } ;\n                    (:~ : Removes descendant elements from an XML node, based on name : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_remove-elements-deep.html : @param $nodes root(s) to start from : @param $names the names of the elements to remove :)\n         declare function functx:remove-elements-deep ( $nodes as node()* , $names as xs:string* ) as node()* { for $node in $nodes return if ($node instance of element()) then if (functx:name-test(name($node),$names)) then () else element { node-name($node)} { $node/@*, functx:remove-elements-deep($node/node(), $names)} else if ($node instance of document-node()) then functx:remove-elements-deep($node/node(), $names) else $node } ;\n                    (:~ : Performs substring-after, returning the entire string if it does not contain the delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-if-contains.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-after-if-contains ( $arg as xs:string? , $delim as xs:string ) as xs:string? { if (contains($arg,$delim)) then substring-after($arg,$delim) else $arg } ;\n                    let $in-xml-1 := <in-xml> <a> <b>b1</b> <c>c1</c> </a> <c>Mixed <b>content</b></c> </in-xml> return let $in-xml-2 := <in-xml xmlns:x="http://x"> <a> <x:b>b1</x:b> <c>c1</c> </a> <c>Mixed <b>content</b></c> </in-xml> return (functx:remove-elements-deep( $in-xml-2, 'x:b'))'
functx-functx-remove-elements-deep-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a name matches a list of names or name wildcards : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_name-test.html : @param $testname the name to test : @param $names the list of names or name wildcards :)\n         declare function functx:name-test ( $testname as xs:string? , $names as xs:string* ) as xs:boolean { $testname = $names or $names = '*' or functx:substring-after-if-contains($testname,':') = (for $name in $names return substring-after($name,'*:')) or substring-before($testname,':') = (for $name in $names[contains(.,':*')] return substring-before($name,':*')) } ;\n                    (:~ : Removes descendant elements from an XML node, based on name : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_remove-elements-deep.html : @param $nodes root(s) to start from : @param $names the names of the elements to remove :)\n         declare function functx:remove-elements-deep ( $nodes as node()* , $names as xs:string* ) as node()* { for $node in $nodes return if ($node instance of element()) then if (functx:name-test(name($node),$names)) then () else element { node-name($node)} { $node/@*, functx:remove-elements-deep($node/node(), $names)} else if ($node instance of document-node()) then functx:remove-elements-deep($node/node(), $names) else $node } ;\n                    (:~ : Performs substring-after, returning the entire string if it does not contain the delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-if-contains.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-after-if-contains ( $arg as xs:string? , $delim as xs:string ) as xs:string? { if (contains($arg,$delim)) then substring-after($arg,$delim) else $arg } ;\n                    let $in-xml-1 := <in-xml> <a> <b>b1</b> <c>c1</c> </a> <c>Mixed <b>content</b></c> </in-xml> return let $in-xml-2 := <in-xml xmlns:x="http://x"> <a> <x:b>b1</x:b> <c>c1</c> </a> <c>Mixed <b>content</b></c> </in-xml> return (functx:remove-elements-deep( $in-xml-1, 'b'), functx:remove-elements-deep( $in-xml-1, 'a'), functx:remove-elements-deep( $in-xml-1, ('b','c')), functx:remove-elements-deep( $in-xml-2, 'x:b'))'
functx-functx-remove-elements-not-contents-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a name matches a list of names or name wildcards : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_name-test.html : @param $testname the name to test : @param $names the list of names or name wildcards :)\n         declare function functx:name-test ( $testname as xs:string? , $names as xs:string* ) as xs:boolean { $testname = $names or $names = '*' or functx:substring-after-if-contains($testname,':') = (for $name in $names return substring-after($name,'*:')) or substring-before($testname,':') = (for $name in $names[contains(.,':*')] return substring-before($name,':*')) } ;\n                    (:~ : Removes descendant XML elements but keeps their content : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_remove-elements-not-contents.html : @param $nodes the root(s) to start from : @param $names the names of the elements to remove :)\n         declare function functx:remove-elements-not-contents ( $nodes as node()* , $names as xs:string* ) as node()* { for $node in $nodes return if ($node instance of element()) then if (functx:name-test(name($node),$names)) then functx:remove-elements-not-contents($node/node(), $names) else element {node-name($node)} {$node/@*, functx:remove-elements-not-contents($node/node(),$names)} else if ($node instance of document-node()) then functx:remove-elements-not-contents($node/node(), $names) else $node } ;\n                    (:~ : Performs substring-after, returning the entire string if it does not contain the delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-if-contains.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-after-if-contains ( $arg as xs:string? , $delim as xs:string ) as xs:string? { if (contains($arg,$delim)) then substring-after($arg,$delim) else $arg } ;\n                    let $in-xml-1 := <in-xml> <a> <b>b1</b> <c>c1</c> </a> <c>Mixed <b>content</b></c> </in-xml> return let $in-xml-2 := <in-xml xmlns:x="http://x"> <a> <b>b1</b> <c>c1</c> </a> <c>Mixed <x:b>content</x:b></c> </in-xml> return (functx:remove-elements-not-contents( $in-xml-1, 'b'))'
functx-functx-remove-elements-not-contents-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a name matches a list of names or name wildcards : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_name-test.html : @param $testname the name to test : @param $names the list of names or name wildcards :)\n         declare function functx:name-test ( $testname as xs:string? , $names as xs:string* ) as xs:boolean { $testname = $names or $names = '*' or functx:substring-after-if-contains($testname,':') = (for $name in $names return substring-after($name,'*:')) or substring-before($testname,':') = (for $name in $names[contains(.,':*')] return substring-before($name,':*')) } ;\n                    (:~ : Removes descendant XML elements but keeps their content : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_remove-elements-not-contents.html : @param $nodes the root(s) to start from : @param $names the names of the elements to remove :)\n         declare function functx:remove-elements-not-contents ( $nodes as node()* , $names as xs:string* ) as node()* { for $node in $nodes return if ($node instance of element()) then if (functx:name-test(name($node),$names)) then functx:remove-elements-not-contents($node/node(), $names) else element {node-name($node)} {$node/@*, functx:remove-elements-not-contents($node/node(),$names)} else if ($node instance of document-node()) then functx:remove-elements-not-contents($node/node(), $names) else $node } ;\n                    (:~ : Performs substring-after, returning the entire string if it does not contain the delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-if-contains.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-after-if-contains ( $arg as xs:string? , $delim as xs:string ) as xs:string? { if (contains($arg,$delim)) then substring-after($arg,$delim) else $arg } ;\n                    let $in-xml-1 := <in-xml> <a> <b>b1</b> <c>c1</c> </a> <c>Mixed <b>content</b></c> </in-xml> return let $in-xml-2 := <in-xml xmlns:x="http://x"> <a> <b>b1</b> <c>c1</c> </a> <c>Mixed <x:b>content</x:b></c> </in-xml> return (functx:remove-elements-not-contents( $in-xml-1, ('b','c')))'
functx-functx-remove-elements-not-contents-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a name matches a list of names or name wildcards : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_name-test.html : @param $testname the name to test : @param $names the list of names or name wildcards :)\n         declare function functx:name-test ( $testname as xs:string? , $names as xs:string* ) as xs:boolean { $testname = $names or $names = '*' or functx:substring-after-if-contains($testname,':') = (for $name in $names return substring-after($name,'*:')) or substring-before($testname,':') = (for $name in $names[contains(.,':*')] return substring-before($name,':*')) } ;\n                    (:~ : Removes descendant XML elements but keeps their content : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_remove-elements-not-contents.html : @param $nodes the root(s) to start from : @param $names the names of the elements to remove :)\n         declare function functx:remove-elements-not-contents ( $nodes as node()* , $names as xs:string* ) as node()* { for $node in $nodes return if ($node instance of element()) then if (functx:name-test(name($node),$names)) then functx:remove-elements-not-contents($node/node(), $names) else element {node-name($node)} {$node/@*, functx:remove-elements-not-contents($node/node(),$names)} else if ($node instance of document-node()) then functx:remove-elements-not-contents($node/node(), $names) else $node } ;\n                    (:~ : Performs substring-after, returning the entire string if it does not contain the delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-if-contains.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-after-if-contains ( $arg as xs:string? , $delim as xs:string ) as xs:string? { if (contains($arg,$delim)) then substring-after($arg,$delim) else $arg } ;\n                    let $in-xml-1 := <in-xml> <a> <b>b1</b> <c>c1</c> </a> <c>Mixed <b>content</b></c> </in-xml> return let $in-xml-2 := <in-xml xmlns:x="http://x"> <a> <b>b1</b> <c>c1</c> </a> <c>Mixed <x:b>content</x:b></c> </in-xml> return (functx:remove-elements-not-contents( $in-xml-1, 'a'))'
functx-functx-remove-elements-not-contents-4;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a name matches a list of names or name wildcards : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_name-test.html : @param $testname the name to test : @param $names the list of names or name wildcards :)\n         declare function functx:name-test ( $testname as xs:string? , $names as xs:string* ) as xs:boolean { $testname = $names or $names = '*' or functx:substring-after-if-contains($testname,':') = (for $name in $names return substring-after($name,'*:')) or substring-before($testname,':') = (for $name in $names[contains(.,':*')] return substring-before($name,':*')) } ;\n                    (:~ : Removes descendant XML elements but keeps their content : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_remove-elements-not-contents.html : @param $nodes the root(s) to start from : @param $names the names of the elements to remove :)\n         declare function functx:remove-elements-not-contents ( $nodes as node()* , $names as xs:string* ) as node()* { for $node in $nodes return if ($node instance of element()) then if (functx:name-test(name($node),$names)) then functx:remove-elements-not-contents($node/node(), $names) else element {node-name($node)} {$node/@*, functx:remove-elements-not-contents($node/node(),$names)} else if ($node instance of document-node()) then functx:remove-elements-not-contents($node/node(), $names) else $node } ;\n                    (:~ : Performs substring-after, returning the entire string if it does not contain the delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-if-contains.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-after-if-contains ( $arg as xs:string? , $delim as xs:string ) as xs:string? { if (contains($arg,$delim)) then substring-after($arg,$delim) else $arg } ;\n                    let $in-xml-1 := <in-xml> <a> <b>b1</b> <c>c1</c> </a> <c>Mixed <b>content</b></c> </in-xml> return let $in-xml-2 := <in-xml xmlns:x="http://x"> <a> <b>b1</b> <c>c1</c> </a> <c>Mixed <x:b>content</x:b></c> </in-xml> return (functx:remove-elements-not-contents( $in-xml-2, 'x:b'))'
functx-functx-remove-elements-not-contents-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether a name matches a list of names or name wildcards : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_name-test.html : @param $testname the name to test : @param $names the list of names or name wildcards :)\n         declare function functx:name-test ( $testname as xs:string? , $names as xs:string* ) as xs:boolean { $testname = $names or $names = '*' or functx:substring-after-if-contains($testname,':') = (for $name in $names return substring-after($name,'*:')) or substring-before($testname,':') = (for $name in $names[contains(.,':*')] return substring-before($name,':*')) } ;\n                    (:~ : Removes descendant XML elements but keeps their content : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_remove-elements-not-contents.html : @param $nodes the root(s) to start from : @param $names the names of the elements to remove :)\n         declare function functx:remove-elements-not-contents ( $nodes as node()* , $names as xs:string* ) as node()* { for $node in $nodes return if ($node instance of element()) then if (functx:name-test(name($node),$names)) then functx:remove-elements-not-contents($node/node(), $names) else element {node-name($node)} {$node/@*, functx:remove-elements-not-contents($node/node(),$names)} else if ($node instance of document-node()) then functx:remove-elements-not-contents($node/node(), $names) else $node } ;\n                    (:~ : Performs substring-after, returning the entire string if it does not contain the delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-if-contains.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-after-if-contains ( $arg as xs:string? , $delim as xs:string ) as xs:string? { if (contains($arg,$delim)) then substring-after($arg,$delim) else $arg } ;\n                    let $in-xml-1 := <in-xml> <a> <b>b1</b> <c>c1</c> </a> <c>Mixed <b>content</b></c> </in-xml> return let $in-xml-2 := <in-xml xmlns:x="http://x"> <a> <b>b1</b> <c>c1</c> </a> <c>Mixed <x:b>content</x:b></c> </in-xml> return (functx:remove-elements-not-contents( $in-xml-1, 'b'), functx:remove-elements-not-contents( $in-xml-1, ('b','c')), functx:remove-elements-not-contents( $in-xml-1, 'a'), functx:remove-elements-not-contents( $in-xml-2, 'x:b'))'
functx-functx-repeat-string-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Repeats a string a given number of times : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_repeat-string.html : @param $stringToRepeat the string to repeat : @param $count the desired number of copies :)\n         declare function functx:repeat-string ( $stringToRepeat as xs:string? , $count as xs:integer ) as xs:string { string-join((for $i in 1 to $count return $stringToRepeat), '') } ;\n                    (functx:repeat-string('*', 6))'
functx-functx-repeat-string-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Repeats a string a given number of times : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_repeat-string.html : @param $stringToRepeat the string to repeat : @param $count the desired number of copies :)\n         declare function functx:repeat-string ( $stringToRepeat as xs:string? , $count as xs:integer ) as xs:string { string-join((for $i in 1 to $count return $stringToRepeat), '') } ;\n                    (functx:repeat-string('abc', 3))'
functx-functx-repeat-string-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Repeats a string a given number of times : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_repeat-string.html : @param $stringToRepeat the string to repeat : @param $count the desired number of copies :)\n         declare function functx:repeat-string ( $stringToRepeat as xs:string? , $count as xs:integer ) as xs:string { string-join((for $i in 1 to $count return $stringToRepeat), '') } ;\n                    (functx:repeat-string('*', 6), functx:repeat-string('abc', 3))'
functx-functx-replace-beginning-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Replaces the beginning of a string, up to a matched pattern : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_replace-beginning.html : @param $arg the entire string to change : @param $pattern the pattern of characters to replace up to : @param $replacement the replacement string :)\n         declare function functx:replace-beginning ( $arg as xs:string? , $pattern as xs:string , $replacement as xs:string ) as xs:string { replace($arg, concat('^.*?', $pattern), $replacement) } ;\n                    (functx:replace-beginning('abc-def', '-', 'xxx'))'
functx-functx-replace-beginning-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Replaces the beginning of a string, up to a matched pattern : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_replace-beginning.html : @param $arg the entire string to change : @param $pattern the pattern of characters to replace up to : @param $replacement the replacement string :)\n         declare function functx:replace-beginning ( $arg as xs:string? , $pattern as xs:string , $replacement as xs:string ) as xs:string { replace($arg, concat('^.*?', $pattern), $replacement) } ;\n                    (functx:replace-beginning('abc-def', '-', ''))'
functx-functx-replace-beginning-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Replaces the beginning of a string, up to a matched pattern : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_replace-beginning.html : @param $arg the entire string to change : @param $pattern the pattern of characters to replace up to : @param $replacement the replacement string :)\n         declare function functx:replace-beginning ( $arg as xs:string? , $pattern as xs:string , $replacement as xs:string ) as xs:string { replace($arg, concat('^.*?', $pattern), $replacement) } ;\n                    (functx:replace-beginning( '---abc', '[a-z]', 'x'))'
functx-functx-replace-beginning-4;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Replaces the beginning of a string, up to a matched pattern : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_replace-beginning.html : @param $arg the entire string to change : @param $pattern the pattern of characters to replace up to : @param $replacement the replacement string :)\n         declare function functx:replace-beginning ( $arg as xs:string? , $pattern as xs:string , $replacement as xs:string ) as xs:string { replace($arg, concat('^.*?', $pattern), $replacement) } ;\n                    (functx:replace-beginning( '2004-12-05', '-', '2005-'))'
functx-functx-replace-beginning-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Replaces the beginning of a string, up to a matched pattern : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_replace-beginning.html : @param $arg the entire string to change : @param $pattern the pattern of characters to replace up to : @param $replacement the replacement string :)\n         declare function functx:replace-beginning ( $arg as xs:string? , $pattern as xs:string , $replacement as xs:string ) as xs:string { replace($arg, concat('^.*?', $pattern), $replacement) } ;\n                    (functx:replace-beginning('abc-def', '-', 'xxx'), functx:replace-beginning('abc-def', '-', ''), functx:replace-beginning( '---abc', '[a-z]', 'x'), functx:replace-beginning( '2004-12-05', '-', '2005-'))'
functx-functx-replace-element-values-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Updates the content of one or more elements : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_replace-element-values.html : @param $elements the elements whose content you wish to replace : @param $values the replacement values :)\n         declare function functx:replace-element-values ( $elements as element()* , $values as xs:anyAtomicType* ) as element()* { for $element at $seq in $elements return element { node-name($element)} { $element/@*, $values[$seq] } } ;\n                    let $in-xml := <in-xml> <price num="1">12</price> <price num="2">20</price> <price num="3">5</price> </in-xml> return (functx:replace-element-values( $in-xml/price, for $p in $in-xml/price return $p * 2))'
functx-functx-replace-element-values-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Updates the content of one or more elements : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_replace-element-values.html : @param $elements the elements whose content you wish to replace : @param $values the replacement values :)\n         declare function functx:replace-element-values ( $elements as element()* , $values as xs:anyAtomicType* ) as element()* { for $element at $seq in $elements return element { node-name($element)} { $element/@*, $values[$seq] } } ;\n                    let $in-xml := <in-xml> <price num="1">12</price> <price num="2">20</price> <price num="3">5</price> </in-xml> return (for $p in $in-xml/price return functx:replace-element-values( $p,concat($p,'.0')))'
functx-functx-replace-element-values-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Updates the content of one or more elements : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_replace-element-values.html : @param $elements the elements whose content you wish to replace : @param $values the replacement values :)\n         declare function functx:replace-element-values ( $elements as element()* , $values as xs:anyAtomicType* ) as element()* { for $element at $seq in $elements return element { node-name($element)} { $element/@*, $values[$seq] } } ;\n                    let $in-xml := <in-xml> <price num="1">12</price> <price num="2">20</price> <price num="3">5</price> </in-xml> return (functx:replace-element-values( $in-xml/price, for $p in $in-xml/price return $p * 2), for $p in $in-xml/price return functx:replace-element-values( $p,concat($p,'.0')))'
functx-functx-replace-first-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Replaces the first match of a pattern : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_replace-first.html : @param $arg the entire string to change : @param $pattern the pattern of characters to replace : @param $replacement the replacement string :)\n         declare function functx:replace-first ( $arg as xs:string? , $pattern as xs:string , $replacement as xs:string ) as xs:string { replace($arg, concat('(^.*?)', $pattern), concat('$1',$replacement)) } ;\n                    (functx:replace-first('abcabcabc', 'ab', 'x'))'
functx-functx-replace-first-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Replaces the first match of a pattern : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_replace-first.html : @param $arg the entire string to change : @param $pattern the pattern of characters to replace : @param $replacement the replacement string :)\n         declare function functx:replace-first ( $arg as xs:string? , $pattern as xs:string , $replacement as xs:string ) as xs:string { replace($arg, concat('(^.*?)', $pattern), concat('$1',$replacement)) } ;\n                    (functx:replace-first('elementary', 'e.*e', 'x'))'
functx-functx-replace-first-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Replaces the first match of a pattern : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_replace-first.html : @param $arg the entire string to change : @param $pattern the pattern of characters to replace : @param $replacement the replacement string :)\n         declare function functx:replace-first ( $arg as xs:string? , $pattern as xs:string , $replacement as xs:string ) as xs:string { replace($arg, concat('(^.*?)', $pattern), concat('$1',$replacement)) } ;\n                    (functx:replace-first( 'elementary', 'e.*?e', 'x'))'
functx-functx-replace-first-4;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Replaces the first match of a pattern : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_replace-first.html : @param $arg the entire string to change : @param $pattern the pattern of characters to replace : @param $replacement the replacement string :)\n         declare function functx:replace-first ( $arg as xs:string? , $pattern as xs:string , $replacement as xs:string ) as xs:string { replace($arg, concat('(^.*?)', $pattern), concat('$1',$replacement)) } ;\n                    (functx:replace-first('9999-9999', '\d+', 'X'))'
functx-functx-replace-first-5;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Replaces the first match of a pattern : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_replace-first.html : @param $arg the entire string to change : @param $pattern the pattern of characters to replace : @param $replacement the replacement string :)\n         declare function functx:replace-first ( $arg as xs:string? , $pattern as xs:string , $replacement as xs:string ) as xs:string { replace($arg, concat('(^.*?)', $pattern), concat('$1',$replacement)) } ;\n                    (functx:replace-first('9999-9999', '\d{3}', 'X'))'
functx-functx-replace-first-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Replaces the first match of a pattern : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_replace-first.html : @param $arg the entire string to change : @param $pattern the pattern of characters to replace : @param $replacement the replacement string :)\n         declare function functx:replace-first ( $arg as xs:string? , $pattern as xs:string , $replacement as xs:string ) as xs:string { replace($arg, concat('(^.*?)', $pattern), concat('$1',$replacement)) } ;\n                    (functx:replace-first('abcabcabc', 'ab', 'x'), functx:replace-first('elementary', 'e.*e', 'x'), functx:replace-first( 'elementary', 'e.*?e', 'x'), functx:replace-first('9999-9999', '\d+', 'X'), functx:replace-first('9999-9999', '\d{3}', 'X'))'
functx-functx-replace-multi-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The first argument if it is not empty, otherwise the second argument : : @author W3C XML Query WG : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_if-absent.html : @param $arg the item(s) that may be absent : @param $value the item(s) to use if the item is absent :)\n         declare function functx:if-absent\n           ( $arg as item()* , $value as item()* ) as item()* {\n           if (exists($arg)) then $arg else $value } ;\n                    (:~ : Performs multiple replacements, using pairs of replace parameters : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_replace-multi.html : @param $arg the string to manipulate : @param $changeFrom the sequence of strings or patterns to change from : @param $changeTo the sequence of strings to change to :)\n         declare function functx:replace-multi ( $arg as xs:string? , $changeFrom as xs:string* , $changeTo as xs:string* ) as xs:string? {\n           if (count($changeFrom) > 0)\n           then functx:replace-multi( replace($arg, $changeFrom[1], functx:if-absent($changeTo[1],'')), $changeFrom[position() > 1], $changeTo[position() > 1])\n           else $arg\n         } ;\n         let $fr := ('[a-c]', 'def', '\d+')\n         return let $to := ('x', 'y', '0')\n         return (functx:replace-multi('abcdef123',$fr,$to))'
functx-functx-reverse-string-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Reverses the order of characters : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_reverse-string.html : @param $arg the string to reverse :)\n         declare function functx:reverse-string ( $arg as xs:string? ) as xs:string { codepoints-to-string(reverse(string-to-codepoints($arg))) } ;\n                    (functx:reverse-string('abc'))'
functx-functx-reverse-string-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Reverses the order of characters : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_reverse-string.html : @param $arg the string to reverse :)\n         declare function functx:reverse-string ( $arg as xs:string? ) as xs:string { codepoints-to-string(reverse(string-to-codepoints($arg))) } ;\n                    (functx:reverse-string('a'))'
functx-functx-reverse-string-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Reverses the order of characters : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_reverse-string.html : @param $arg the string to reverse :)\n         declare function functx:reverse-string ( $arg as xs:string? ) as xs:string { codepoints-to-string(reverse(string-to-codepoints($arg))) } ;\n                    (functx:reverse-string('abc'), functx:reverse-string('a'))'
functx-functx-right-trim-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Trims trailing whitespace : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_right-trim.html : @param $arg the string to trim :)\n         declare function functx:right-trim ( $arg as xs:string? ) as xs:string { replace($arg,'\s+$','') } ;\n                    (functx:right-trim('xyz '))'
functx-functx-right-trim-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Trims trailing whitespace : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_right-trim.html : @param $arg the string to trim :)\n         declare function functx:right-trim ( $arg as xs:string? ) as xs:string { replace($arg,'\s+$','') } ;\n         (functx:right-trim(' x   xyz '))'
functx-functx-right-trim-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Trims trailing whitespace : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_right-trim.html : @param $arg the string to trim :)\n         declare function functx:right-trim ( $arg as xs:string? ) as xs:string { replace($arg,'\s+$','') } ;\n                    (functx:right-trim('xyz'))'
functx-functx-right-trim-all;PRSC Error: Failed to parse query 'deep-equal((declare namespace functx = "http://www.example.com/";\n                    (:~ : Trims trailing whitespace : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_right-trim.html : @param $arg the string to trim :)\n         declare function functx:right-trim ( $arg as xs:string? ) as xs:string { replace($arg,'\s+$','') } ;\n                    (functx:right-trim('xyz '), functx:right-trim(' x   xyz '), functx:right-trim('xyz'))), ("xyz", " x   xyz", "xyz"))'
functx-functx-scheme-from-uri-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Returns the scheme from a URI : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_scheme-from-uri.html : @param $uri the URI :)\n         declare function functx:scheme-from-uri ( $uri as xs:string? ) as xs:string? { substring-before($uri,':') } ;\n                    (functx:scheme-from-uri( 'http://www.datypic.com'))'
functx-functx-scheme-from-uri-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Returns the scheme from a URI : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_scheme-from-uri.html : @param $uri the URI :)\n         declare function functx:scheme-from-uri ( $uri as xs:string? ) as xs:string? { substring-before($uri,':') } ;\n                    (functx:scheme-from-uri( 'ftp://ftp.datypic.com'))'
functx-functx-scheme-from-uri-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Returns the scheme from a URI : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_scheme-from-uri.html : @param $uri the URI :)\n         declare function functx:scheme-from-uri ( $uri as xs:string? ) as xs:string? { substring-before($uri,':') } ;\n                    (functx:scheme-from-uri('ftp.datypic.com'))'
functx-functx-scheme-from-uri-4;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Returns the scheme from a URI : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_scheme-from-uri.html : @param $uri the URI :)\n         declare function functx:scheme-from-uri ( $uri as xs:string? ) as xs:string? { substring-before($uri,':') } ;\n                    (functx:scheme-from-uri('www.datypic.com'))'
functx-functx-scheme-from-uri-5;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Returns the scheme from a URI : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_scheme-from-uri.html : @param $uri the URI :)\n         declare function functx:scheme-from-uri ( $uri as xs:string? ) as xs:string? { substring-before($uri,':') } ;\n                    (functx:scheme-from-uri('prod.html'))'
functx-functx-scheme-from-uri-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Returns the scheme from a URI : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_scheme-from-uri.html : @param $uri the URI :)\n         declare function functx:scheme-from-uri ( $uri as xs:string? ) as xs:string? { substring-before($uri,':') } ;\n                    (functx:scheme-from-uri( 'http://www.datypic.com'), functx:scheme-from-uri( 'ftp://ftp.datypic.com'), functx:scheme-from-uri('ftp.datypic.com'), functx:scheme-from-uri('www.datypic.com'), functx:scheme-from-uri('prod.html'))'
functx-functx-sequence-deep-equal-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether two sequences have the same XML node content and/or values : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_sequence-deep-equal.html : @param $seq1 the first sequence : @param $seq2 the second sequence :)\n         declare function functx:sequence-deep-equal ( $seq1 as item()* , $seq2 as item()* ) as xs:boolean { every $i in 1 to max((count($seq1),count($seq2))) satisfies deep-equal($seq1[$i],$seq2[$i]) } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return let $anAuthor := <author> <fName>Kate</fName> <lName>Jones</lName> </author> return (functx:sequence-deep-equal( $in-xml/author/*, $in-xml/*/*))'
functx-functx-sequence-deep-equal-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether two sequences have the same XML node content and/or values : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_sequence-deep-equal.html : @param $seq1 the first sequence : @param $seq2 the second sequence :)\n         declare function functx:sequence-deep-equal ( $seq1 as item()* , $seq2 as item()* ) as xs:boolean { every $i in 1 to max((count($seq1),count($seq2))) satisfies deep-equal($seq1[$i],$seq2[$i]) } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return let $anAuthor := <author> <fName>Kate</fName> <lName>Jones</lName> </author> return (functx:sequence-deep-equal( $in-xml/author[1], $anAuthor))'
functx-functx-sequence-deep-equal-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether two sequences have the same XML node content and/or values : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_sequence-deep-equal.html : @param $seq1 the first sequence : @param $seq2 the second sequence :)\n         declare function functx:sequence-deep-equal ( $seq1 as item()* , $seq2 as item()* ) as xs:boolean { every $i in 1 to max((count($seq1),count($seq2))) satisfies deep-equal($seq1[$i],$seq2[$i]) } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return let $anAuthor := <author> <fName>Kate</fName> <lName>Jones</lName> </author> return (functx:sequence-deep-equal( (1,2,3), (1.0,2.0,3.0)))'
functx-functx-sequence-deep-equal-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether two sequences have the same XML node content and/or values : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_sequence-deep-equal.html : @param $seq1 the first sequence : @param $seq2 the second sequence :)\n         declare function functx:sequence-deep-equal ( $seq1 as item()* , $seq2 as item()* ) as xs:boolean { every $i in 1 to max((count($seq1),count($seq2))) satisfies deep-equal($seq1[$i],$seq2[$i]) } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return let $anAuthor := <author> <fName>Kate</fName> <lName>Jones</lName> </author> return (functx:sequence-deep-equal( $in-xml/author/*, $in-xml/*/*), functx:sequence-deep-equal( $in-xml/author[1], $anAuthor), functx:sequence-deep-equal( (1,2,3), (1.0,2.0,3.0)))'
functx-functx-sequence-node-equal-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether two sequences contain the same XML nodes, in the same order : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_sequence-node-equal.html : @param $seq1 the first sequence of nodes : @param $seq2 the second sequence of nodes :)\n         declare function functx:sequence-node-equal ( $seq1 as node()* , $seq2 as node()* ) as xs:boolean { every $i in 1 to max((count($seq1),count($seq2))) satisfies $seq1[$i] is $seq2[$i] } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return let $anAuthor := <author> <fName>Kate</fName> <lName>Jones</lName> </author> return (functx:sequence-node-equal( $in-xml/author/*, $in-xml/*/*))'
functx-functx-sequence-node-equal-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether two sequences contain the same XML nodes, in the same order : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_sequence-node-equal.html : @param $seq1 the first sequence of nodes : @param $seq2 the second sequence of nodes :)\n         declare function functx:sequence-node-equal ( $seq1 as node()* , $seq2 as node()* ) as xs:boolean { every $i in 1 to max((count($seq1),count($seq2))) satisfies $seq1[$i] is $seq2[$i] } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return let $anAuthor := <author> <fName>Kate</fName> <lName>Jones</lName> </author> return (functx:sequence-node-equal( $in-xml/author, ($in-xml/author[2],$in-xml/author[1])))'
functx-functx-sequence-node-equal-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether two sequences contain the same XML nodes, in the same order : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_sequence-node-equal.html : @param $seq1 the first sequence of nodes : @param $seq2 the second sequence of nodes :)\n         declare function functx:sequence-node-equal ( $seq1 as node()* , $seq2 as node()* ) as xs:boolean { every $i in 1 to max((count($seq1),count($seq2))) satisfies $seq1[$i] is $seq2[$i] } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return let $anAuthor := <author> <fName>Kate</fName> <lName>Jones</lName> </author> return (functx:sequence-node-equal( $in-xml/author[1],$anAuthor))'
functx-functx-sequence-node-equal-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether two sequences contain the same XML nodes, in the same order : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_sequence-node-equal.html : @param $seq1 the first sequence of nodes : @param $seq2 the second sequence of nodes :)\n         declare function functx:sequence-node-equal ( $seq1 as node()* , $seq2 as node()* ) as xs:boolean { every $i in 1 to max((count($seq1),count($seq2))) satisfies $seq1[$i] is $seq2[$i] } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return let $anAuthor := <author> <fName>Kate</fName> <lName>Jones</lName> </author> return (functx:sequence-node-equal( $in-xml/author/*, $in-xml/*/*), functx:sequence-node-equal( $in-xml/author, ($in-xml/author[2],$in-xml/author[1])), functx:sequence-node-equal( $in-xml/author[1],$anAuthor))'
functx-functx-sequence-node-equal-any-order-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether two sequences contain the same XML nodes, regardless of order : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_sequence-node-equal-any-order.html : @param $seq1 the first sequence of nodes : @param $seq2 the second sequence of nodes :)\n         declare function functx:sequence-node-equal-any-order ( $seq1 as node()* , $seq2 as node()* ) as xs:boolean { not( ($seq1 except $seq2, $seq2 except $seq1)) } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return let $anAuthor := <author> <fName>Kate</fName> <lName>Jones</lName> </author> return (functx:sequence-node-equal-any-order( $in-xml/author, $in-xml/*))'
functx-functx-sequence-node-equal-any-order-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether two sequences contain the same XML nodes, regardless of order : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_sequence-node-equal-any-order.html : @param $seq1 the first sequence of nodes : @param $seq2 the second sequence of nodes :)\n         declare function functx:sequence-node-equal-any-order ( $seq1 as node()* , $seq2 as node()* ) as xs:boolean { not( ($seq1 except $seq2, $seq2 except $seq1)) } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return let $anAuthor := <author> <fName>Kate</fName> <lName>Jones</lName> </author> return (functx:sequence-node-equal-any-order( $in-xml/author, ($in-xml/author[2],$in-xml/author[1])))'
functx-functx-sequence-node-equal-any-order-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether two sequences contain the same XML nodes, regardless of order : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_sequence-node-equal-any-order.html : @param $seq1 the first sequence of nodes : @param $seq2 the second sequence of nodes :)\n         declare function functx:sequence-node-equal-any-order ( $seq1 as node()* , $seq2 as node()* ) as xs:boolean { not( ($seq1 except $seq2, $seq2 except $seq1)) } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return let $anAuthor := <author> <fName>Kate</fName> <lName>Jones</lName> </author> return (functx:sequence-node-equal-any-order( $in-xml/author[1],$anAuthor))'
functx-functx-sequence-node-equal-any-order-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Whether two sequences contain the same XML nodes, regardless of order : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_sequence-node-equal-any-order.html : @param $seq1 the first sequence of nodes : @param $seq2 the second sequence of nodes :)\n         declare function functx:sequence-node-equal-any-order ( $seq1 as node()* , $seq2 as node()* ) as xs:boolean { not( ($seq1 except $seq2, $seq2 except $seq1)) } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return let $anAuthor := <author> <fName>Kate</fName> <lName>Jones</lName> </author> return (functx:sequence-node-equal-any-order( $in-xml/author, $in-xml/*), functx:sequence-node-equal-any-order( $in-xml/author, ($in-xml/author[2],$in-xml/author[1])), functx:sequence-node-equal-any-order( $in-xml/author[1],$anAuthor))'
functx-functx-sequence-type-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The built-in type of an atomic value : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_atomic-type.html : @param $values the value(s) whose type you want to determine :)\n         declare function functx:atomic-type ( $values as xs:anyAtomicType* ) as xs:string* { for $val in $values return (if ($val instance of xs:untypedAtomic) then 'xs:untypedAtomic' else if ($val instance of xs:anyURI) then 'xs:anyURI' else if ($val instance of xs:ENTITY) then 'xs:ENTITY' else if ($val instance of xs:ID) then 'xs:ID' else if ($val instance of xs:NMTOKEN) then 'xs:NMTOKEN' else if ($val instance of xs:language) then 'xs:language' else if ($val instance of xs:NCName) then 'xs:NCName' else if ($val instance of xs:Name) then 'xs:Name' else if ($val instance of xs:token) then 'xs:token' else if ($val instance of xs:normalizedString) then 'xs:normalizedString' else if ($val instance of xs:string) then 'xs:string' else if ($val instance of xs:QName) then 'xs:QName' else if ($val instance of xs:boolean) then 'xs:boolean' else if ($val instance of xs:base64Binary) then 'xs:base64Binary' else if ($val instance of xs:hexBinary) then 'xs:hexBinary' else if ($val instance of xs:byte) then 'xs:byte' else if ($val instance of xs:short) then 'xs:short' else if ($val instance of xs:int) then 'xs:int' else if ($val instance of xs:long) then 'xs:long' else if ($val instance of xs:unsignedByte) then 'xs:unsignedByte' else if ($val instance of xs:unsignedShort) then 'xs:unsignedShort' else if ($val instance of xs:unsignedInt) then 'xs:unsignedInt' else if ($val instance of xs:unsignedLong) then 'xs:unsignedLong' else if ($val instance of xs:positiveInteger) then 'xs:positiveInteger' else if ($val instance of xs:nonNegativeInteger) then 'xs:nonNegativeInteger' else if ($val instance of xs:negativeInteger) then 'xs:negativeInteger' else if ($val instance of xs:nonPositiveInteger) then 'xs:nonPositiveInteger' else if ($val instance of xs:integer) then 'xs:integer' else if ($val instance of xs:decimal) then 'xs:decimal' else if ($val instance of xs:float) then 'xs:float' else if ($val instance of xs:double) then 'xs:double' else if ($val instance of xs:date) then 'xs:date' else if ($val instance of xs:time) then 'xs:time' else if ($val instance of xs:dateTime) then 'xs:dateTime' else if ($val instance of xs:dayTimeDuration) then 'xs:dayTimeDuration' else if ($val instance of xs:yearMonthDuration) then 'xs:yearMonthDuration' else if ($val instance of xs:duration) then 'xs:duration' else if ($val instance of xs:gMonth) then 'xs:gMonth' else if ($val instance of xs:gYear) then 'xs:gYear' else if ($val instance of xs:gYearMonth) then 'xs:gYearMonth' else if ($val instance of xs:gDay) then 'xs:gDay' else if ($val instance of xs:gMonthDay) then 'xs:gMonthDay' else 'unknown') } ;\n                    (:~ : The XML node kind (element, attribute, text, etc.) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_node-kind.html : @param $nodes the node(s) whose kind you want to determine :)\n         declare function functx:node-kind ( $nodes as node()* ) as xs:string* { for $node in $nodes return if ($node instance of element()) then 'element' else if ($node instance of attribute()) then 'attribute' else if ($node instance of text()) then 'text' else if ($node instance of document-node()) then 'document-node' else if ($node instance of comment()) then 'comment' else if ($node instance of processing-instruction()) then 'processing-instruction' else 'unknown' } ;\n                    (:~ : The sequence type that represents a sequence of nodes or values : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_sequence-type.html : @param $items the items whose sequence type you want to determine :)\n         declare function functx:sequence-type ( $items as item()* ) as xs:string { concat( if (empty($items)) then 'empty-sequence()' else if (every $val in $items satisfies $val instance of xs:anyAtomicType) then if (count(distinct-values(functx:atomic-type($items))) > 1) then 'xs:anyAtomicType' else functx:atomic-type($items[1]) else if (some $val in $items satisfies $val instance of xs:anyAtomicType) then 'item()' else if (count(distinct-values(functx:node-kind($items))) > 1) then 'node()' else concat(functx:node-kind($items[1]),'()') , if (count($items) > 1) then '+' else '') } ;\n                    let $in-xml := <in-xml> <a att1="y">x</a> <b att1="x">x</b> <!-- comment --> </in-xml> return (functx:sequence-type(2))'
functx-functx-sequence-type-10;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The built-in type of an atomic value : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_atomic-type.html : @param $values the value(s) whose type you want to determine :)\n         declare function functx:atomic-type ( $values as xs:anyAtomicType* ) as xs:string* { for $val in $values return (if ($val instance of xs:untypedAtomic) then 'xs:untypedAtomic' else if ($val instance of xs:anyURI) then 'xs:anyURI' else if ($val instance of xs:ENTITY) then 'xs:ENTITY' else if ($val instance of xs:ID) then 'xs:ID' else if ($val instance of xs:NMTOKEN) then 'xs:NMTOKEN' else if ($val instance of xs:language) then 'xs:language' else if ($val instance of xs:NCName) then 'xs:NCName' else if ($val instance of xs:Name) then 'xs:Name' else if ($val instance of xs:token) then 'xs:token' else if ($val instance of xs:normalizedString) then 'xs:normalizedString' else if ($val instance of xs:string) then 'xs:string' else if ($val instance of xs:QName) then 'xs:QName' else if ($val instance of xs:boolean) then 'xs:boolean' else if ($val instance of xs:base64Binary) then 'xs:base64Binary' else if ($val instance of xs:hexBinary) then 'xs:hexBinary' else if ($val instance of xs:byte) then 'xs:byte' else if ($val instance of xs:short) then 'xs:short' else if ($val instance of xs:int) then 'xs:int' else if ($val instance of xs:long) then 'xs:long' else if ($val instance of xs:unsignedByte) then 'xs:unsignedByte' else if ($val instance of xs:unsignedShort) then 'xs:unsignedShort' else if ($val instance of xs:unsignedInt) then 'xs:unsignedInt' else if ($val instance of xs:unsignedLong) then 'xs:unsignedLong' else if ($val instance of xs:positiveInteger) then 'xs:positiveInteger' else if ($val instance of xs:nonNegativeInteger) then 'xs:nonNegativeInteger' else if ($val instance of xs:negativeInteger) then 'xs:negativeInteger' else if ($val instance of xs:nonPositiveInteger) then 'xs:nonPositiveInteger' else if ($val instance of xs:integer) then 'xs:integer' else if ($val instance of xs:decimal) then 'xs:decimal' else if ($val instance of xs:float) then 'xs:float' else if ($val instance of xs:double) then 'xs:double' else if ($val instance of xs:date) then 'xs:date' else if ($val instance of xs:time) then 'xs:time' else if ($val instance of xs:dateTime) then 'xs:dateTime' else if ($val instance of xs:dayTimeDuration) then 'xs:dayTimeDuration' else if ($val instance of xs:yearMonthDuration) then 'xs:yearMonthDuration' else if ($val instance of xs:duration) then 'xs:duration' else if ($val instance of xs:gMonth) then 'xs:gMonth' else if ($val instance of xs:gYear) then 'xs:gYear' else if ($val instance of xs:gYearMonth) then 'xs:gYearMonth' else if ($val instance of xs:gDay) then 'xs:gDay' else if ($val instance of xs:gMonthDay) then 'xs:gMonthDay' else 'unknown') } ;\n                    (:~ : The XML node kind (element, attribute, text, etc.) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_node-kind.html : @param $nodes the node(s) whose kind you want to determine :)\n         declare function functx:node-kind ( $nodes as node()* ) as xs:string* { for $node in $nodes return if ($node instance of element()) then 'element' else if ($node instance of attribute()) then 'attribute' else if ($node instance of text()) then 'text' else if ($node instance of document-node()) then 'document-node' else if ($node instance of comment()) then 'comment' else if ($node instance of processing-instruction()) then 'processing-instruction' else 'unknown' } ;\n                    (:~ : The sequence type that represents a sequence of nodes or values : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_sequence-type.html : @param $items the items whose sequence type you want to determine :)\n         declare function functx:sequence-type ( $items as item()* ) as xs:string { concat( if (empty($items)) then 'empty-sequence()' else if (every $val in $items satisfies $val instance of xs:anyAtomicType) then if (count(distinct-values(functx:atomic-type($items))) > 1) then 'xs:anyAtomicType' else functx:atomic-type($items[1]) else if (some $val in $items satisfies $val instance of xs:anyAtomicType) then 'item()' else if (count(distinct-values(functx:node-kind($items))) > 1) then 'node()' else concat(functx:node-kind($items[1]),'()') , if (count($items) > 1) then '+' else '') } ;\n                    let $in-xml := <in-xml> <a att1="y">x</a> <b att1="x">x</b> <!-- comment --> </in-xml> return (functx:sequence-type($in-xml/node()))'
functx-functx-sequence-type-11;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The built-in type of an atomic value : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_atomic-type.html : @param $values the value(s) whose type you want to determine :)\n         declare function functx:atomic-type ( $values as xs:anyAtomicType* ) as xs:string* { for $val in $values return (if ($val instance of xs:untypedAtomic) then 'xs:untypedAtomic' else if ($val instance of xs:anyURI) then 'xs:anyURI' else if ($val instance of xs:ENTITY) then 'xs:ENTITY' else if ($val instance of xs:ID) then 'xs:ID' else if ($val instance of xs:NMTOKEN) then 'xs:NMTOKEN' else if ($val instance of xs:language) then 'xs:language' else if ($val instance of xs:NCName) then 'xs:NCName' else if ($val instance of xs:Name) then 'xs:Name' else if ($val instance of xs:token) then 'xs:token' else if ($val instance of xs:normalizedString) then 'xs:normalizedString' else if ($val instance of xs:string) then 'xs:string' else if ($val instance of xs:QName) then 'xs:QName' else if ($val instance of xs:boolean) then 'xs:boolean' else if ($val instance of xs:base64Binary) then 'xs:base64Binary' else if ($val instance of xs:hexBinary) then 'xs:hexBinary' else if ($val instance of xs:byte) then 'xs:byte' else if ($val instance of xs:short) then 'xs:short' else if ($val instance of xs:int) then 'xs:int' else if ($val instance of xs:long) then 'xs:long' else if ($val instance of xs:unsignedByte) then 'xs:unsignedByte' else if ($val instance of xs:unsignedShort) then 'xs:unsignedShort' else if ($val instance of xs:unsignedInt) then 'xs:unsignedInt' else if ($val instance of xs:unsignedLong) then 'xs:unsignedLong' else if ($val instance of xs:positiveInteger) then 'xs:positiveInteger' else if ($val instance of xs:nonNegativeInteger) then 'xs:nonNegativeInteger' else if ($val instance of xs:negativeInteger) then 'xs:negativeInteger' else if ($val instance of xs:nonPositiveInteger) then 'xs:nonPositiveInteger' else if ($val instance of xs:integer) then 'xs:integer' else if ($val instance of xs:decimal) then 'xs:decimal' else if ($val instance of xs:float) then 'xs:float' else if ($val instance of xs:double) then 'xs:double' else if ($val instance of xs:date) then 'xs:date' else if ($val instance of xs:time) then 'xs:time' else if ($val instance of xs:dateTime) then 'xs:dateTime' else if ($val instance of xs:dayTimeDuration) then 'xs:dayTimeDuration' else if ($val instance of xs:yearMonthDuration) then 'xs:yearMonthDuration' else if ($val instance of xs:duration) then 'xs:duration' else if ($val instance of xs:gMonth) then 'xs:gMonth' else if ($val instance of xs:gYear) then 'xs:gYear' else if ($val instance of xs:gYearMonth) then 'xs:gYearMonth' else if ($val instance of xs:gDay) then 'xs:gDay' else if ($val instance of xs:gMonthDay) then 'xs:gMonthDay' else 'unknown') } ;\n                    (:~ : The XML node kind (element, attribute, text, etc.) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_node-kind.html : @param $nodes the node(s) whose kind you want to determine :)\n         declare function functx:node-kind ( $nodes as node()* ) as xs:string* { for $node in $nodes return if ($node instance of element()) then 'element' else if ($node instance of attribute()) then 'attribute' else if ($node instance of text()) then 'text' else if ($node instance of document-node()) then 'document-node' else if ($node instance of comment()) then 'comment' else if ($node instance of processing-instruction()) then 'processing-instruction' else 'unknown' } ;\n                    (:~ : The sequence type that represents a sequence of nodes or values : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_sequence-type.html : @param $items the items whose sequence type you want to determine :)\n         declare function functx:sequence-type ( $items as item()* ) as xs:string { concat( if (empty($items)) then 'empty-sequence()' else if (every $val in $items satisfies $val instance of xs:anyAtomicType) then if (count(distinct-values(functx:atomic-type($items))) > 1) then 'xs:anyAtomicType' else functx:atomic-type($items[1]) else if (some $val in $items satisfies $val instance of xs:anyAtomicType) then 'item()' else if (count(distinct-values(functx:node-kind($items))) > 1) then 'node()' else concat(functx:node-kind($items[1]),'()') , if (count($items) > 1) then '+' else '') } ;\n                    let $in-xml := <in-xml> <a att1="y">x</a> <b att1="x">x</b> <!-- comment --> </in-xml> return (functx:sequence-type(($in-xml/*,'2')))'
functx-functx-sequence-type-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The built-in type of an atomic value : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_atomic-type.html : @param $values the value(s) whose type you want to determine :)\n         declare function functx:atomic-type ( $values as xs:anyAtomicType* ) as xs:string* { for $val in $values return (if ($val instance of xs:untypedAtomic) then 'xs:untypedAtomic' else if ($val instance of xs:anyURI) then 'xs:anyURI' else if ($val instance of xs:ENTITY) then 'xs:ENTITY' else if ($val instance of xs:ID) then 'xs:ID' else if ($val instance of xs:NMTOKEN) then 'xs:NMTOKEN' else if ($val instance of xs:language) then 'xs:language' else if ($val instance of xs:NCName) then 'xs:NCName' else if ($val instance of xs:Name) then 'xs:Name' else if ($val instance of xs:token) then 'xs:token' else if ($val instance of xs:normalizedString) then 'xs:normalizedString' else if ($val instance of xs:string) then 'xs:string' else if ($val instance of xs:QName) then 'xs:QName' else if ($val instance of xs:boolean) then 'xs:boolean' else if ($val instance of xs:base64Binary) then 'xs:base64Binary' else if ($val instance of xs:hexBinary) then 'xs:hexBinary' else if ($val instance of xs:byte) then 'xs:byte' else if ($val instance of xs:short) then 'xs:short' else if ($val instance of xs:int) then 'xs:int' else if ($val instance of xs:long) then 'xs:long' else if ($val instance of xs:unsignedByte) then 'xs:unsignedByte' else if ($val instance of xs:unsignedShort) then 'xs:unsignedShort' else if ($val instance of xs:unsignedInt) then 'xs:unsignedInt' else if ($val instance of xs:unsignedLong) then 'xs:unsignedLong' else if ($val instance of xs:positiveInteger) then 'xs:positiveInteger' else if ($val instance of xs:nonNegativeInteger) then 'xs:nonNegativeInteger' else if ($val instance of xs:negativeInteger) then 'xs:negativeInteger' else if ($val instance of xs:nonPositiveInteger) then 'xs:nonPositiveInteger' else if ($val instance of xs:integer) then 'xs:integer' else if ($val instance of xs:decimal) then 'xs:decimal' else if ($val instance of xs:float) then 'xs:float' else if ($val instance of xs:double) then 'xs:double' else if ($val instance of xs:date) then 'xs:date' else if ($val instance of xs:time) then 'xs:time' else if ($val instance of xs:dateTime) then 'xs:dateTime' else if ($val instance of xs:dayTimeDuration) then 'xs:dayTimeDuration' else if ($val instance of xs:yearMonthDuration) then 'xs:yearMonthDuration' else if ($val instance of xs:duration) then 'xs:duration' else if ($val instance of xs:gMonth) then 'xs:gMonth' else if ($val instance of xs:gYear) then 'xs:gYear' else if ($val instance of xs:gYearMonth) then 'xs:gYearMonth' else if ($val instance of xs:gDay) then 'xs:gDay' else if ($val instance of xs:gMonthDay) then 'xs:gMonthDay' else 'unknown') } ;\n                    (:~ : The XML node kind (element, attribute, text, etc.) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_node-kind.html : @param $nodes the node(s) whose kind you want to determine :)\n         declare function functx:node-kind ( $nodes as node()* ) as xs:string* { for $node in $nodes return if ($node instance of element()) then 'element' else if ($node instance of attribute()) then 'attribute' else if ($node instance of text()) then 'text' else if ($node instance of document-node()) then 'document-node' else if ($node instance of comment()) then 'comment' else if ($node instance of processing-instruction()) then 'processing-instruction' else 'unknown' } ;\n                    (:~ : The sequence type that represents a sequence of nodes or values : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_sequence-type.html : @param $items the items whose sequence type you want to determine :)\n         declare function functx:sequence-type ( $items as item()* ) as xs:string { concat( if (empty($items)) then 'empty-sequence()' else if (every $val in $items satisfies $val instance of xs:anyAtomicType) then if (count(distinct-values(functx:atomic-type($items))) > 1) then 'xs:anyAtomicType' else functx:atomic-type($items[1]) else if (some $val in $items satisfies $val instance of xs:anyAtomicType) then 'item()' else if (count(distinct-values(functx:node-kind($items))) > 1) then 'node()' else concat(functx:node-kind($items[1]),'()') , if (count($items) > 1) then '+' else '') } ;\n                    let $in-xml := <in-xml> <a att1="y">x</a> <b att1="x">x</b> <!-- comment --> </in-xml> return (functx:sequence-type(('abc','def')))'
functx-functx-sequence-type-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The built-in type of an atomic value : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_atomic-type.html : @param $values the value(s) whose type you want to determine :)\n         declare function functx:atomic-type ( $values as xs:anyAtomicType* ) as xs:string* { for $val in $values return (if ($val instance of xs:untypedAtomic) then 'xs:untypedAtomic' else if ($val instance of xs:anyURI) then 'xs:anyURI' else if ($val instance of xs:ENTITY) then 'xs:ENTITY' else if ($val instance of xs:ID) then 'xs:ID' else if ($val instance of xs:NMTOKEN) then 'xs:NMTOKEN' else if ($val instance of xs:language) then 'xs:language' else if ($val instance of xs:NCName) then 'xs:NCName' else if ($val instance of xs:Name) then 'xs:Name' else if ($val instance of xs:token) then 'xs:token' else if ($val instance of xs:normalizedString) then 'xs:normalizedString' else if ($val instance of xs:string) then 'xs:string' else if ($val instance of xs:QName) then 'xs:QName' else if ($val instance of xs:boolean) then 'xs:boolean' else if ($val instance of xs:base64Binary) then 'xs:base64Binary' else if ($val instance of xs:hexBinary) then 'xs:hexBinary' else if ($val instance of xs:byte) then 'xs:byte' else if ($val instance of xs:short) then 'xs:short' else if ($val instance of xs:int) then 'xs:int' else if ($val instance of xs:long) then 'xs:long' else if ($val instance of xs:unsignedByte) then 'xs:unsignedByte' else if ($val instance of xs:unsignedShort) then 'xs:unsignedShort' else if ($val instance of xs:unsignedInt) then 'xs:unsignedInt' else if ($val instance of xs:unsignedLong) then 'xs:unsignedLong' else if ($val instance of xs:positiveInteger) then 'xs:positiveInteger' else if ($val instance of xs:nonNegativeInteger) then 'xs:nonNegativeInteger' else if ($val instance of xs:negativeInteger) then 'xs:negativeInteger' else if ($val instance of xs:nonPositiveInteger) then 'xs:nonPositiveInteger' else if ($val instance of xs:integer) then 'xs:integer' else if ($val instance of xs:decimal) then 'xs:decimal' else if ($val instance of xs:float) then 'xs:float' else if ($val instance of xs:double) then 'xs:double' else if ($val instance of xs:date) then 'xs:date' else if ($val instance of xs:time) then 'xs:time' else if ($val instance of xs:dateTime) then 'xs:dateTime' else if ($val instance of xs:dayTimeDuration) then 'xs:dayTimeDuration' else if ($val instance of xs:yearMonthDuration) then 'xs:yearMonthDuration' else if ($val instance of xs:duration) then 'xs:duration' else if ($val instance of xs:gMonth) then 'xs:gMonth' else if ($val instance of xs:gYear) then 'xs:gYear' else if ($val instance of xs:gYearMonth) then 'xs:gYearMonth' else if ($val instance of xs:gDay) then 'xs:gDay' else if ($val instance of xs:gMonthDay) then 'xs:gMonthDay' else 'unknown') } ;\n                    (:~ : The XML node kind (element, attribute, text, etc.) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_node-kind.html : @param $nodes the node(s) whose kind you want to determine :)\n         declare function functx:node-kind ( $nodes as node()* ) as xs:string* { for $node in $nodes return if ($node instance of element()) then 'element' else if ($node instance of attribute()) then 'attribute' else if ($node instance of text()) then 'text' else if ($node instance of document-node()) then 'document-node' else if ($node instance of comment()) then 'comment' else if ($node instance of processing-instruction()) then 'processing-instruction' else 'unknown' } ;\n                    (:~ : The sequence type that represents a sequence of nodes or values : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_sequence-type.html : @param $items the items whose sequence type you want to determine :)\n         declare function functx:sequence-type ( $items as item()* ) as xs:string { concat( if (empty($items)) then 'empty-sequence()' else if (every $val in $items satisfies $val instance of xs:anyAtomicType) then if (count(distinct-values(functx:atomic-type($items))) > 1) then 'xs:anyAtomicType' else functx:atomic-type($items[1]) else if (some $val in $items satisfies $val instance of xs:anyAtomicType) then 'item()' else if (count(distinct-values(functx:node-kind($items))) > 1) then 'node()' else concat(functx:node-kind($items[1]),'()') , if (count($items) > 1) then '+' else '') } ;\n                    let $in-xml := <in-xml> <a att1="y">x</a> <b att1="x">x</b> <!-- comment --> </in-xml> return (functx:sequence-type(('abc',2)))'
functx-functx-sequence-type-4;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The built-in type of an atomic value : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_atomic-type.html : @param $values the value(s) whose type you want to determine :)\n         declare function functx:atomic-type ( $values as xs:anyAtomicType* ) as xs:string* { for $val in $values return (if ($val instance of xs:untypedAtomic) then 'xs:untypedAtomic' else if ($val instance of xs:anyURI) then 'xs:anyURI' else if ($val instance of xs:ENTITY) then 'xs:ENTITY' else if ($val instance of xs:ID) then 'xs:ID' else if ($val instance of xs:NMTOKEN) then 'xs:NMTOKEN' else if ($val instance of xs:language) then 'xs:language' else if ($val instance of xs:NCName) then 'xs:NCName' else if ($val instance of xs:Name) then 'xs:Name' else if ($val instance of xs:token) then 'xs:token' else if ($val instance of xs:normalizedString) then 'xs:normalizedString' else if ($val instance of xs:string) then 'xs:string' else if ($val instance of xs:QName) then 'xs:QName' else if ($val instance of xs:boolean) then 'xs:boolean' else if ($val instance of xs:base64Binary) then 'xs:base64Binary' else if ($val instance of xs:hexBinary) then 'xs:hexBinary' else if ($val instance of xs:byte) then 'xs:byte' else if ($val instance of xs:short) then 'xs:short' else if ($val instance of xs:int) then 'xs:int' else if ($val instance of xs:long) then 'xs:long' else if ($val instance of xs:unsignedByte) then 'xs:unsignedByte' else if ($val instance of xs:unsignedShort) then 'xs:unsignedShort' else if ($val instance of xs:unsignedInt) then 'xs:unsignedInt' else if ($val instance of xs:unsignedLong) then 'xs:unsignedLong' else if ($val instance of xs:positiveInteger) then 'xs:positiveInteger' else if ($val instance of xs:nonNegativeInteger) then 'xs:nonNegativeInteger' else if ($val instance of xs:negativeInteger) then 'xs:negativeInteger' else if ($val instance of xs:nonPositiveInteger) then 'xs:nonPositiveInteger' else if ($val instance of xs:integer) then 'xs:integer' else if ($val instance of xs:decimal) then 'xs:decimal' else if ($val instance of xs:float) then 'xs:float' else if ($val instance of xs:double) then 'xs:double' else if ($val instance of xs:date) then 'xs:date' else if ($val instance of xs:time) then 'xs:time' else if ($val instance of xs:dateTime) then 'xs:dateTime' else if ($val instance of xs:dayTimeDuration) then 'xs:dayTimeDuration' else if ($val instance of xs:yearMonthDuration) then 'xs:yearMonthDuration' else if ($val instance of xs:duration) then 'xs:duration' else if ($val instance of xs:gMonth) then 'xs:gMonth' else if ($val instance of xs:gYear) then 'xs:gYear' else if ($val instance of xs:gYearMonth) then 'xs:gYearMonth' else if ($val instance of xs:gDay) then 'xs:gDay' else if ($val instance of xs:gMonthDay) then 'xs:gMonthDay' else 'unknown') } ;\n                    (:~ : The XML node kind (element, attribute, text, etc.) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_node-kind.html : @param $nodes the node(s) whose kind you want to determine :)\n         declare function functx:node-kind ( $nodes as node()* ) as xs:string* { for $node in $nodes return if ($node instance of element()) then 'element' else if ($node instance of attribute()) then 'attribute' else if ($node instance of text()) then 'text' else if ($node instance of document-node()) then 'document-node' else if ($node instance of comment()) then 'comment' else if ($node instance of processing-instruction()) then 'processing-instruction' else 'unknown' } ;\n                    (:~ : The sequence type that represents a sequence of nodes or values : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_sequence-type.html : @param $items the items whose sequence type you want to determine :)\n         declare function functx:sequence-type ( $items as item()* ) as xs:string { concat( if (empty($items)) then 'empty-sequence()' else if (every $val in $items satisfies $val instance of xs:anyAtomicType) then if (count(distinct-values(functx:atomic-type($items))) > 1) then 'xs:anyAtomicType' else functx:atomic-type($items[1]) else if (some $val in $items satisfies $val instance of xs:anyAtomicType) then 'item()' else if (count(distinct-values(functx:node-kind($items))) > 1) then 'node()' else concat(functx:node-kind($items[1]),'()') , if (count($items) > 1) then '+' else '') } ;\n                    let $in-xml := <in-xml> <a att1="y">x</a> <b att1="x">x</b> <!-- comment --> </in-xml> return (functx:sequence-type( () ))'
functx-functx-sequence-type-5;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The built-in type of an atomic value : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_atomic-type.html : @param $values the value(s) whose type you want to determine :)\n         declare function functx:atomic-type ( $values as xs:anyAtomicType* ) as xs:string* { for $val in $values return (if ($val instance of xs:untypedAtomic) then 'xs:untypedAtomic' else if ($val instance of xs:anyURI) then 'xs:anyURI' else if ($val instance of xs:ENTITY) then 'xs:ENTITY' else if ($val instance of xs:ID) then 'xs:ID' else if ($val instance of xs:NMTOKEN) then 'xs:NMTOKEN' else if ($val instance of xs:language) then 'xs:language' else if ($val instance of xs:NCName) then 'xs:NCName' else if ($val instance of xs:Name) then 'xs:Name' else if ($val instance of xs:token) then 'xs:token' else if ($val instance of xs:normalizedString) then 'xs:normalizedString' else if ($val instance of xs:string) then 'xs:string' else if ($val instance of xs:QName) then 'xs:QName' else if ($val instance of xs:boolean) then 'xs:boolean' else if ($val instance of xs:base64Binary) then 'xs:base64Binary' else if ($val instance of xs:hexBinary) then 'xs:hexBinary' else if ($val instance of xs:byte) then 'xs:byte' else if ($val instance of xs:short) then 'xs:short' else if ($val instance of xs:int) then 'xs:int' else if ($val instance of xs:long) then 'xs:long' else if ($val instance of xs:unsignedByte) then 'xs:unsignedByte' else if ($val instance of xs:unsignedShort) then 'xs:unsignedShort' else if ($val instance of xs:unsignedInt) then 'xs:unsignedInt' else if ($val instance of xs:unsignedLong) then 'xs:unsignedLong' else if ($val instance of xs:positiveInteger) then 'xs:positiveInteger' else if ($val instance of xs:nonNegativeInteger) then 'xs:nonNegativeInteger' else if ($val instance of xs:negativeInteger) then 'xs:negativeInteger' else if ($val instance of xs:nonPositiveInteger) then 'xs:nonPositiveInteger' else if ($val instance of xs:integer) then 'xs:integer' else if ($val instance of xs:decimal) then 'xs:decimal' else if ($val instance of xs:float) then 'xs:float' else if ($val instance of xs:double) then 'xs:double' else if ($val instance of xs:date) then 'xs:date' else if ($val instance of xs:time) then 'xs:time' else if ($val instance of xs:dateTime) then 'xs:dateTime' else if ($val instance of xs:dayTimeDuration) then 'xs:dayTimeDuration' else if ($val instance of xs:yearMonthDuration) then 'xs:yearMonthDuration' else if ($val instance of xs:duration) then 'xs:duration' else if ($val instance of xs:gMonth) then 'xs:gMonth' else if ($val instance of xs:gYear) then 'xs:gYear' else if ($val instance of xs:gYearMonth) then 'xs:gYearMonth' else if ($val instance of xs:gDay) then 'xs:gDay' else if ($val instance of xs:gMonthDay) then 'xs:gMonthDay' else 'unknown') } ;\n                    (:~ : The XML node kind (element, attribute, text, etc.) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_node-kind.html : @param $nodes the node(s) whose kind you want to determine :)\n         declare function functx:node-kind ( $nodes as node()* ) as xs:string* { for $node in $nodes return if ($node instance of element()) then 'element' else if ($node instance of attribute()) then 'attribute' else if ($node instance of text()) then 'text' else if ($node instance of document-node()) then 'document-node' else if ($node instance of comment()) then 'comment' else if ($node instance of processing-instruction()) then 'processing-instruction' else 'unknown' } ;\n                    (:~ : The sequence type that represents a sequence of nodes or values : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_sequence-type.html : @param $items the items whose sequence type you want to determine :)\n         declare function functx:sequence-type ( $items as item()* ) as xs:string { concat( if (empty($items)) then 'empty-sequence()' else if (every $val in $items satisfies $val instance of xs:anyAtomicType) then if (count(distinct-values(functx:atomic-type($items))) > 1) then 'xs:anyAtomicType' else functx:atomic-type($items[1]) else if (some $val in $items satisfies $val instance of xs:anyAtomicType) then 'item()' else if (count(distinct-values(functx:node-kind($items))) > 1) then 'node()' else concat(functx:node-kind($items[1]),'()') , if (count($items) > 1) then '+' else '') } ;\n                    let $in-xml := <in-xml> <a att1="y">x</a> <b att1="x">x</b> <!-- comment --> </in-xml> return (functx:sequence-type($in-xml/*[1]))'
functx-functx-sequence-type-6;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The built-in type of an atomic value : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_atomic-type.html : @param $values the value(s) whose type you want to determine :)\n         declare function functx:atomic-type ( $values as xs:anyAtomicType* ) as xs:string* { for $val in $values return (if ($val instance of xs:untypedAtomic) then 'xs:untypedAtomic' else if ($val instance of xs:anyURI) then 'xs:anyURI' else if ($val instance of xs:ENTITY) then 'xs:ENTITY' else if ($val instance of xs:ID) then 'xs:ID' else if ($val instance of xs:NMTOKEN) then 'xs:NMTOKEN' else if ($val instance of xs:language) then 'xs:language' else if ($val instance of xs:NCName) then 'xs:NCName' else if ($val instance of xs:Name) then 'xs:Name' else if ($val instance of xs:token) then 'xs:token' else if ($val instance of xs:normalizedString) then 'xs:normalizedString' else if ($val instance of xs:string) then 'xs:string' else if ($val instance of xs:QName) then 'xs:QName' else if ($val instance of xs:boolean) then 'xs:boolean' else if ($val instance of xs:base64Binary) then 'xs:base64Binary' else if ($val instance of xs:hexBinary) then 'xs:hexBinary' else if ($val instance of xs:byte) then 'xs:byte' else if ($val instance of xs:short) then 'xs:short' else if ($val instance of xs:int) then 'xs:int' else if ($val instance of xs:long) then 'xs:long' else if ($val instance of xs:unsignedByte) then 'xs:unsignedByte' else if ($val instance of xs:unsignedShort) then 'xs:unsignedShort' else if ($val instance of xs:unsignedInt) then 'xs:unsignedInt' else if ($val instance of xs:unsignedLong) then 'xs:unsignedLong' else if ($val instance of xs:positiveInteger) then 'xs:positiveInteger' else if ($val instance of xs:nonNegativeInteger) then 'xs:nonNegativeInteger' else if ($val instance of xs:negativeInteger) then 'xs:negativeInteger' else if ($val instance of xs:nonPositiveInteger) then 'xs:nonPositiveInteger' else if ($val instance of xs:integer) then 'xs:integer' else if ($val instance of xs:decimal) then 'xs:decimal' else if ($val instance of xs:float) then 'xs:float' else if ($val instance of xs:double) then 'xs:double' else if ($val instance of xs:date) then 'xs:date' else if ($val instance of xs:time) then 'xs:time' else if ($val instance of xs:dateTime) then 'xs:dateTime' else if ($val instance of xs:dayTimeDuration) then 'xs:dayTimeDuration' else if ($val instance of xs:yearMonthDuration) then 'xs:yearMonthDuration' else if ($val instance of xs:duration) then 'xs:duration' else if ($val instance of xs:gMonth) then 'xs:gMonth' else if ($val instance of xs:gYear) then 'xs:gYear' else if ($val instance of xs:gYearMonth) then 'xs:gYearMonth' else if ($val instance of xs:gDay) then 'xs:gDay' else if ($val instance of xs:gMonthDay) then 'xs:gMonthDay' else 'unknown') } ;\n                    (:~ : The XML node kind (element, attribute, text, etc.) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_node-kind.html : @param $nodes the node(s) whose kind you want to determine :)\n         declare function functx:node-kind ( $nodes as node()* ) as xs:string* { for $node in $nodes return if ($node instance of element()) then 'element' else if ($node instance of attribute()) then 'attribute' else if ($node instance of text()) then 'text' else if ($node instance of document-node()) then 'document-node' else if ($node instance of comment()) then 'comment' else if ($node instance of processing-instruction()) then 'processing-instruction' else 'unknown' } ;\n                    (:~ : The sequence type that represents a sequence of nodes or values : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_sequence-type.html : @param $items the items whose sequence type you want to determine :)\n         declare function functx:sequence-type ( $items as item()* ) as xs:string { concat( if (empty($items)) then 'empty-sequence()' else if (every $val in $items satisfies $val instance of xs:anyAtomicType) then if (count(distinct-values(functx:atomic-type($items))) > 1) then 'xs:anyAtomicType' else functx:atomic-type($items[1]) else if (some $val in $items satisfies $val instance of xs:anyAtomicType) then 'item()' else if (count(distinct-values(functx:node-kind($items))) > 1) then 'node()' else concat(functx:node-kind($items[1]),'()') , if (count($items) > 1) then '+' else '') } ;\n                    let $in-xml := <in-xml> <a att1="y">x</a> <b att1="x">x</b> <!-- comment --> </in-xml> return (functx:sequence-type($in-xml/*))'
functx-functx-sequence-type-7;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The built-in type of an atomic value : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_atomic-type.html : @param $values the value(s) whose type you want to determine :)\n         declare function functx:atomic-type ( $values as xs:anyAtomicType* ) as xs:string* { for $val in $values return (if ($val instance of xs:untypedAtomic) then 'xs:untypedAtomic' else if ($val instance of xs:anyURI) then 'xs:anyURI' else if ($val instance of xs:ENTITY) then 'xs:ENTITY' else if ($val instance of xs:ID) then 'xs:ID' else if ($val instance of xs:NMTOKEN) then 'xs:NMTOKEN' else if ($val instance of xs:language) then 'xs:language' else if ($val instance of xs:NCName) then 'xs:NCName' else if ($val instance of xs:Name) then 'xs:Name' else if ($val instance of xs:token) then 'xs:token' else if ($val instance of xs:normalizedString) then 'xs:normalizedString' else if ($val instance of xs:string) then 'xs:string' else if ($val instance of xs:QName) then 'xs:QName' else if ($val instance of xs:boolean) then 'xs:boolean' else if ($val instance of xs:base64Binary) then 'xs:base64Binary' else if ($val instance of xs:hexBinary) then 'xs:hexBinary' else if ($val instance of xs:byte) then 'xs:byte' else if ($val instance of xs:short) then 'xs:short' else if ($val instance of xs:int) then 'xs:int' else if ($val instance of xs:long) then 'xs:long' else if ($val instance of xs:unsignedByte) then 'xs:unsignedByte' else if ($val instance of xs:unsignedShort) then 'xs:unsignedShort' else if ($val instance of xs:unsignedInt) then 'xs:unsignedInt' else if ($val instance of xs:unsignedLong) then 'xs:unsignedLong' else if ($val instance of xs:positiveInteger) then 'xs:positiveInteger' else if ($val instance of xs:nonNegativeInteger) then 'xs:nonNegativeInteger' else if ($val instance of xs:negativeInteger) then 'xs:negativeInteger' else if ($val instance of xs:nonPositiveInteger) then 'xs:nonPositiveInteger' else if ($val instance of xs:integer) then 'xs:integer' else if ($val instance of xs:decimal) then 'xs:decimal' else if ($val instance of xs:float) then 'xs:float' else if ($val instance of xs:double) then 'xs:double' else if ($val instance of xs:date) then 'xs:date' else if ($val instance of xs:time) then 'xs:time' else if ($val instance of xs:dateTime) then 'xs:dateTime' else if ($val instance of xs:dayTimeDuration) then 'xs:dayTimeDuration' else if ($val instance of xs:yearMonthDuration) then 'xs:yearMonthDuration' else if ($val instance of xs:duration) then 'xs:duration' else if ($val instance of xs:gMonth) then 'xs:gMonth' else if ($val instance of xs:gYear) then 'xs:gYear' else if ($val instance of xs:gYearMonth) then 'xs:gYearMonth' else if ($val instance of xs:gDay) then 'xs:gDay' else if ($val instance of xs:gMonthDay) then 'xs:gMonthDay' else 'unknown') } ;\n                    (:~ : The XML node kind (element, attribute, text, etc.) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_node-kind.html : @param $nodes the node(s) whose kind you want to determine :)\n         declare function functx:node-kind ( $nodes as node()* ) as xs:string* { for $node in $nodes return if ($node instance of element()) then 'element' else if ($node instance of attribute()) then 'attribute' else if ($node instance of text()) then 'text' else if ($node instance of document-node()) then 'document-node' else if ($node instance of comment()) then 'comment' else if ($node instance of processing-instruction()) then 'processing-instruction' else 'unknown' } ;\n                    (:~ : The sequence type that represents a sequence of nodes or values : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_sequence-type.html : @param $items the items whose sequence type you want to determine :)\n         declare function functx:sequence-type ( $items as item()* ) as xs:string { concat( if (empty($items)) then 'empty-sequence()' else if (every $val in $items satisfies $val instance of xs:anyAtomicType) then if (count(distinct-values(functx:atomic-type($items))) > 1) then 'xs:anyAtomicType' else functx:atomic-type($items[1]) else if (some $val in $items satisfies $val instance of xs:anyAtomicType) then 'item()' else if (count(distinct-values(functx:node-kind($items))) > 1) then 'node()' else concat(functx:node-kind($items[1]),'()') , if (count($items) > 1) then '+' else '') } ;\n                    let $in-xml := <in-xml> <a att1="y">x</a> <b att1="x">x</b> <!-- comment --> </in-xml> return (functx:sequence-type($in-xml/*/@*))'
functx-functx-sequence-type-8;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The built-in type of an atomic value : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_atomic-type.html : @param $values the value(s) whose type you want to determine :)\n         declare function functx:atomic-type ( $values as xs:anyAtomicType* ) as xs:string* { for $val in $values return (if ($val instance of xs:untypedAtomic) then 'xs:untypedAtomic' else if ($val instance of xs:anyURI) then 'xs:anyURI' else if ($val instance of xs:ENTITY) then 'xs:ENTITY' else if ($val instance of xs:ID) then 'xs:ID' else if ($val instance of xs:NMTOKEN) then 'xs:NMTOKEN' else if ($val instance of xs:language) then 'xs:language' else if ($val instance of xs:NCName) then 'xs:NCName' else if ($val instance of xs:Name) then 'xs:Name' else if ($val instance of xs:token) then 'xs:token' else if ($val instance of xs:normalizedString) then 'xs:normalizedString' else if ($val instance of xs:string) then 'xs:string' else if ($val instance of xs:QName) then 'xs:QName' else if ($val instance of xs:boolean) then 'xs:boolean' else if ($val instance of xs:base64Binary) then 'xs:base64Binary' else if ($val instance of xs:hexBinary) then 'xs:hexBinary' else if ($val instance of xs:byte) then 'xs:byte' else if ($val instance of xs:short) then 'xs:short' else if ($val instance of xs:int) then 'xs:int' else if ($val instance of xs:long) then 'xs:long' else if ($val instance of xs:unsignedByte) then 'xs:unsignedByte' else if ($val instance of xs:unsignedShort) then 'xs:unsignedShort' else if ($val instance of xs:unsignedInt) then 'xs:unsignedInt' else if ($val instance of xs:unsignedLong) then 'xs:unsignedLong' else if ($val instance of xs:positiveInteger) then 'xs:positiveInteger' else if ($val instance of xs:nonNegativeInteger) then 'xs:nonNegativeInteger' else if ($val instance of xs:negativeInteger) then 'xs:negativeInteger' else if ($val instance of xs:nonPositiveInteger) then 'xs:nonPositiveInteger' else if ($val instance of xs:integer) then 'xs:integer' else if ($val instance of xs:decimal) then 'xs:decimal' else if ($val instance of xs:float) then 'xs:float' else if ($val instance of xs:double) then 'xs:double' else if ($val instance of xs:date) then 'xs:date' else if ($val instance of xs:time) then 'xs:time' else if ($val instance of xs:dateTime) then 'xs:dateTime' else if ($val instance of xs:dayTimeDuration) then 'xs:dayTimeDuration' else if ($val instance of xs:yearMonthDuration) then 'xs:yearMonthDuration' else if ($val instance of xs:duration) then 'xs:duration' else if ($val instance of xs:gMonth) then 'xs:gMonth' else if ($val instance of xs:gYear) then 'xs:gYear' else if ($val instance of xs:gYearMonth) then 'xs:gYearMonth' else if ($val instance of xs:gDay) then 'xs:gDay' else if ($val instance of xs:gMonthDay) then 'xs:gMonthDay' else 'unknown') } ;\n                    (:~ : The XML node kind (element, attribute, text, etc.) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_node-kind.html : @param $nodes the node(s) whose kind you want to determine :)\n         declare function functx:node-kind ( $nodes as node()* ) as xs:string* { for $node in $nodes return if ($node instance of element()) then 'element' else if ($node instance of attribute()) then 'attribute' else if ($node instance of text()) then 'text' else if ($node instance of document-node()) then 'document-node' else if ($node instance of comment()) then 'comment' else if ($node instance of processing-instruction()) then 'processing-instruction' else 'unknown' } ;\n                    (:~ : The sequence type that represents a sequence of nodes or values : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_sequence-type.html : @param $items the items whose sequence type you want to determine :)\n         declare function functx:sequence-type ( $items as item()* ) as xs:string { concat( if (empty($items)) then 'empty-sequence()' else if (every $val in $items satisfies $val instance of xs:anyAtomicType) then if (count(distinct-values(functx:atomic-type($items))) > 1) then 'xs:anyAtomicType' else functx:atomic-type($items[1]) else if (some $val in $items satisfies $val instance of xs:anyAtomicType) then 'item()' else if (count(distinct-values(functx:node-kind($items))) > 1) then 'node()' else concat(functx:node-kind($items[1]),'()') , if (count($items) > 1) then '+' else '') } ;\n                    let $in-xml := <in-xml> <a att1="y">x</a> <b att1="x">x</b> <!-- comment --> </in-xml> return (functx:sequence-type($in-xml/*/text()))'
functx-functx-sequence-type-9;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The built-in type of an atomic value : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_atomic-type.html : @param $values the value(s) whose type you want to determine :)\n         declare function functx:atomic-type ( $values as xs:anyAtomicType* ) as xs:string* { for $val in $values return (if ($val instance of xs:untypedAtomic) then 'xs:untypedAtomic' else if ($val instance of xs:anyURI) then 'xs:anyURI' else if ($val instance of xs:ENTITY) then 'xs:ENTITY' else if ($val instance of xs:ID) then 'xs:ID' else if ($val instance of xs:NMTOKEN) then 'xs:NMTOKEN' else if ($val instance of xs:language) then 'xs:language' else if ($val instance of xs:NCName) then 'xs:NCName' else if ($val instance of xs:Name) then 'xs:Name' else if ($val instance of xs:token) then 'xs:token' else if ($val instance of xs:normalizedString) then 'xs:normalizedString' else if ($val instance of xs:string) then 'xs:string' else if ($val instance of xs:QName) then 'xs:QName' else if ($val instance of xs:boolean) then 'xs:boolean' else if ($val instance of xs:base64Binary) then 'xs:base64Binary' else if ($val instance of xs:hexBinary) then 'xs:hexBinary' else if ($val instance of xs:byte) then 'xs:byte' else if ($val instance of xs:short) then 'xs:short' else if ($val instance of xs:int) then 'xs:int' else if ($val instance of xs:long) then 'xs:long' else if ($val instance of xs:unsignedByte) then 'xs:unsignedByte' else if ($val instance of xs:unsignedShort) then 'xs:unsignedShort' else if ($val instance of xs:unsignedInt) then 'xs:unsignedInt' else if ($val instance of xs:unsignedLong) then 'xs:unsignedLong' else if ($val instance of xs:positiveInteger) then 'xs:positiveInteger' else if ($val instance of xs:nonNegativeInteger) then 'xs:nonNegativeInteger' else if ($val instance of xs:negativeInteger) then 'xs:negativeInteger' else if ($val instance of xs:nonPositiveInteger) then 'xs:nonPositiveInteger' else if ($val instance of xs:integer) then 'xs:integer' else if ($val instance of xs:decimal) then 'xs:decimal' else if ($val instance of xs:float) then 'xs:float' else if ($val instance of xs:double) then 'xs:double' else if ($val instance of xs:date) then 'xs:date' else if ($val instance of xs:time) then 'xs:time' else if ($val instance of xs:dateTime) then 'xs:dateTime' else if ($val instance of xs:dayTimeDuration) then 'xs:dayTimeDuration' else if ($val instance of xs:yearMonthDuration) then 'xs:yearMonthDuration' else if ($val instance of xs:duration) then 'xs:duration' else if ($val instance of xs:gMonth) then 'xs:gMonth' else if ($val instance of xs:gYear) then 'xs:gYear' else if ($val instance of xs:gYearMonth) then 'xs:gYearMonth' else if ($val instance of xs:gDay) then 'xs:gDay' else if ($val instance of xs:gMonthDay) then 'xs:gMonthDay' else 'unknown') } ;\n                    (:~ : The XML node kind (element, attribute, text, etc.) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_node-kind.html : @param $nodes the node(s) whose kind you want to determine :)\n         declare function functx:node-kind ( $nodes as node()* ) as xs:string* { for $node in $nodes return if ($node instance of element()) then 'element' else if ($node instance of attribute()) then 'attribute' else if ($node instance of text()) then 'text' else if ($node instance of document-node()) then 'document-node' else if ($node instance of comment()) then 'comment' else if ($node instance of processing-instruction()) then 'processing-instruction' else 'unknown' } ;\n                    (:~ : The sequence type that represents a sequence of nodes or values : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_sequence-type.html : @param $items the items whose sequence type you want to determine :)\n         declare function functx:sequence-type ( $items as item()* ) as xs:string { concat( if (empty($items)) then 'empty-sequence()' else if (every $val in $items satisfies $val instance of xs:anyAtomicType) then if (count(distinct-values(functx:atomic-type($items))) > 1) then 'xs:anyAtomicType' else functx:atomic-type($items[1]) else if (some $val in $items satisfies $val instance of xs:anyAtomicType) then 'item()' else if (count(distinct-values(functx:node-kind($items))) > 1) then 'node()' else concat(functx:node-kind($items[1]),'()') , if (count($items) > 1) then '+' else '') } ;\n                    let $in-xml := <in-xml> <a att1="y">x</a> <b att1="x">x</b> <!-- comment --> </in-xml> return (functx:sequence-type($in-xml/comment()))'
functx-functx-sequence-type-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The built-in type of an atomic value : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_atomic-type.html : @param $values the value(s) whose type you want to determine :)\n         declare function functx:atomic-type ( $values as xs:anyAtomicType* ) as xs:string* { for $val in $values return (if ($val instance of xs:untypedAtomic) then 'xs:untypedAtomic' else if ($val instance of xs:anyURI) then 'xs:anyURI' else if ($val instance of xs:ENTITY) then 'xs:ENTITY' else if ($val instance of xs:ID) then 'xs:ID' else if ($val instance of xs:NMTOKEN) then 'xs:NMTOKEN' else if ($val instance of xs:language) then 'xs:language' else if ($val instance of xs:NCName) then 'xs:NCName' else if ($val instance of xs:Name) then 'xs:Name' else if ($val instance of xs:token) then 'xs:token' else if ($val instance of xs:normalizedString) then 'xs:normalizedString' else if ($val instance of xs:string) then 'xs:string' else if ($val instance of xs:QName) then 'xs:QName' else if ($val instance of xs:boolean) then 'xs:boolean' else if ($val instance of xs:base64Binary) then 'xs:base64Binary' else if ($val instance of xs:hexBinary) then 'xs:hexBinary' else if ($val instance of xs:byte) then 'xs:byte' else if ($val instance of xs:short) then 'xs:short' else if ($val instance of xs:int) then 'xs:int' else if ($val instance of xs:long) then 'xs:long' else if ($val instance of xs:unsignedByte) then 'xs:unsignedByte' else if ($val instance of xs:unsignedShort) then 'xs:unsignedShort' else if ($val instance of xs:unsignedInt) then 'xs:unsignedInt' else if ($val instance of xs:unsignedLong) then 'xs:unsignedLong' else if ($val instance of xs:positiveInteger) then 'xs:positiveInteger' else if ($val instance of xs:nonNegativeInteger) then 'xs:nonNegativeInteger' else if ($val instance of xs:negativeInteger) then 'xs:negativeInteger' else if ($val instance of xs:nonPositiveInteger) then 'xs:nonPositiveInteger' else if ($val instance of xs:integer) then 'xs:integer' else if ($val instance of xs:decimal) then 'xs:decimal' else if ($val instance of xs:float) then 'xs:float' else if ($val instance of xs:double) then 'xs:double' else if ($val instance of xs:date) then 'xs:date' else if ($val instance of xs:time) then 'xs:time' else if ($val instance of xs:dateTime) then 'xs:dateTime' else if ($val instance of xs:dayTimeDuration) then 'xs:dayTimeDuration' else if ($val instance of xs:yearMonthDuration) then 'xs:yearMonthDuration' else if ($val instance of xs:duration) then 'xs:duration' else if ($val instance of xs:gMonth) then 'xs:gMonth' else if ($val instance of xs:gYear) then 'xs:gYear' else if ($val instance of xs:gYearMonth) then 'xs:gYearMonth' else if ($val instance of xs:gDay) then 'xs:gDay' else if ($val instance of xs:gMonthDay) then 'xs:gMonthDay' else 'unknown') } ;\n                    (:~ : The XML node kind (element, attribute, text, etc.) : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_node-kind.html : @param $nodes the node(s) whose kind you want to determine :)\n         declare function functx:node-kind ( $nodes as node()* ) as xs:string* { for $node in $nodes return if ($node instance of element()) then 'element' else if ($node instance of attribute()) then 'attribute' else if ($node instance of text()) then 'text' else if ($node instance of document-node()) then 'document-node' else if ($node instance of comment()) then 'comment' else if ($node instance of processing-instruction()) then 'processing-instruction' else 'unknown' } ;\n                    (:~ : The sequence type that represents a sequence of nodes or values : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_sequence-type.html : @param $items the items whose sequence type you want to determine :)\n         declare function functx:sequence-type ( $items as item()* ) as xs:string { concat( if (empty($items)) then 'empty-sequence()' else if (every $val in $items satisfies $val instance of xs:anyAtomicType) then if (count(distinct-values(functx:atomic-type($items))) > 1) then 'xs:anyAtomicType' else functx:atomic-type($items[1]) else if (some $val in $items satisfies $val instance of xs:anyAtomicType) then 'item()' else if (count(distinct-values(functx:node-kind($items))) > 1) then 'node()' else concat(functx:node-kind($items[1]),'()') , if (count($items) > 1) then '+' else '') } ;\n                    let $in-xml := <in-xml> <a att1="y">x</a> <b att1="x">x</b> <!-- comment --> </in-xml> return (functx:sequence-type(2), functx:sequence-type(('abc','def')), functx:sequence-type(('abc',2)), functx:sequence-type( () ), functx:sequence-type($in-xml/*[1]), functx:sequence-type($in-xml/*), functx:sequence-type($in-xml/*/@*), functx:sequence-type($in-xml/*/text()), functx:sequence-type($in-xml/comment()), functx:sequence-type($in-xml/node()), functx:sequence-type(($in-xml/*,'2')))'
functx-functx-siblings-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The siblings of an XML node : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_siblings.html : @param $node the node :)\n         declare function functx:siblings ( $node as node()? ) as node()* { $node/../node() except $node } ;\n                    let $in-xml := <authors a1='xyz'> <author a2='abc'> <fName a3='def'>Kate</fName> <fName a3='def'>Jane</fName> <lName>Jones</lName> </author> <author> <fName a3='def'>John</fName> <lName>Doe</lName> </author> </authors> return (functx:siblings( $in-xml/author[1]))'
functx-functx-siblings-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The siblings of an XML node : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_siblings.html : @param $node the node :)\n         declare function functx:siblings ( $node as node()? ) as node()* { $node/../node() except $node } ;\n                    let $in-xml := <authors a1='xyz'> <author a2='abc'> <fName a3='def'>Kate</fName> <fName a3='def'>Jane</fName> <lName>Jones</lName> </author> <author> <fName a3='def'>John</fName> <lName>Doe</lName> </author> </authors> return (functx:siblings( $in-xml/author[1]/fName[2]))'
functx-functx-siblings-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The siblings of an XML node : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_siblings.html : @param $node the node :)\n         declare function functx:siblings ( $node as node()? ) as node()* { $node/../node() except $node } ;\n                    let $in-xml := <authors a1='xyz'> <author a2='abc'> <fName a3='def'>Kate</fName> <fName a3='def'>Jane</fName> <lName>Jones</lName> </author> <author> <fName a3='def'>John</fName> <lName>Doe</lName> </author> </authors> return (functx:siblings( $in-xml/author[1]), functx:siblings( $in-xml/author[1]/fName[2]))'
functx-functx-siblings-same-name-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The siblings of an XML element that have the same name : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_siblings-same-name.html : @param $element the node :)\n         declare function functx:siblings-same-name ( $element as element()? ) as element()* { $element/../*[node-name(.) = node-name($element)] except $element } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <fName>Jane</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:siblings-same-name( $in-xml/author[1]))'
functx-functx-siblings-same-name-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The siblings of an XML element that have the same name : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_siblings-same-name.html : @param $element the node :)\n         declare function functx:siblings-same-name ( $element as element()? ) as element()* { $element/../*[node-name(.) = node-name($element)] except $element } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <fName>Jane</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:siblings-same-name( $in-xml/author[1]/fName[2]))'
functx-functx-siblings-same-name-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The siblings of an XML element that have the same name : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_siblings-same-name.html : @param $element the node :)\n         declare function functx:siblings-same-name ( $element as element()? ) as element()* { $element/../*[node-name(.) = node-name($element)] except $element } ;\n                    let $in-xml := <authors> <author> <fName>Kate</fName> <fName>Jane</fName> <lName>Jones</lName> </author> <author> <fName>John</fName> <lName>Doe</lName> </author> </authors> return (functx:siblings-same-name( $in-xml/author[1]), functx:siblings-same-name( $in-xml/author[1]/fName[2]))'
functx-functx-sort-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Sorts a sequence of values or nodes : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_sort.html : @param $seq the sequence to sort :)\n         declare function functx:sort ( $seq as item()* ) as item()* { for $item in $seq order by $item return $item } ;\n                    let $in-xml := <in-xml> <f>c</f> <f>a</f> <e>b</e> </in-xml> return (functx:sort(('c','a','b')))'
functx-functx-sort-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Sorts a sequence of values or nodes : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_sort.html : @param $seq the sequence to sort :)\n         declare function functx:sort ( $seq as item()* ) as item()* { for $item in $seq order by $item return $item } ;\n                    let $in-xml := <in-xml> <f>c</f> <f>a</f> <e>b</e> </in-xml> return (functx:sort($in-xml/*))'
functx-functx-sort-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Sorts a sequence of values or nodes : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_sort.html : @param $seq the sequence to sort :)\n         declare function functx:sort ( $seq as item()* ) as item()* { \n            for $item in $seq order by $item return $item \n         };\n         let $in-xml := <in-xml> <f>c</f> <f>a</f> <e>b</e> </in-xml> \n         return document{(functx:sort(('c','a','b')), functx:sort($in-xml/*))}\n       '
functx-functx-sort-as-numeric-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Sorts a sequence of numeric values or nodes : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_sort-as-numeric.html : @param $seq the sequence to sort :)\n         declare function functx:sort-as-numeric ( $seq as item()* ) as item()* { for $item in $seq order by number($item) return $item } ;\n                    let $in-xml := <in-xml> <f>1</f> <f>35</f> <e>4</e> </in-xml> return (functx:sort-as-numeric(('1','100','99')))'
functx-functx-sort-as-numeric-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Sorts a sequence of numeric values or nodes : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_sort-as-numeric.html : @param $seq the sequence to sort :)\n         declare function functx:sort-as-numeric ( $seq as item()* ) as item()* { for $item in $seq order by number($item) return $item } ;\n                    let $in-xml := <in-xml> <f>1</f> <f>35</f> <e>4</e> </in-xml> return (functx:sort-as-numeric($in-xml/*))'
functx-functx-sort-as-numeric-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Sorts a sequence of numeric values or nodes : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_sort-as-numeric.html : @param $seq the sequence to sort :)\n         declare function functx:sort-as-numeric ( $seq as item()* ) as item()* { for $item in $seq order by number($item) return $item } ;\n         let $in-xml := <in-xml> <f>1</f> <f>35</f> <e>4</e> </in-xml> \n         return document{(functx:sort-as-numeric(('1','100','99')), functx:sort-as-numeric($in-xml/*))}\n      '
functx-functx-sort-case-insensitive-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Sorts a sequence of values or nodes regardless of capitalization : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_sort-case-insensitive.html : @param $seq the sequence to sort :)\n         declare function functx:sort-case-insensitive ( $seq as item()* ) as item()* { for $item in $seq order by upper-case(string($item)) return $item } ;\n                    let $in-xml := <in-xml> <f>a</f> <f>c</f> <e>B</e> </in-xml> return (functx:sort-case-insensitive(('a','c','B')))'
functx-functx-sort-case-insensitive-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Sorts a sequence of values or nodes regardless of capitalization : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_sort-case-insensitive.html : @param $seq the sequence to sort :)\n         declare function functx:sort-case-insensitive ( $seq as item()* ) as item()* { for $item in $seq order by upper-case(string($item)) return $item } ;\n                    let $in-xml := <in-xml> <f>a</f> <f>c</f> <e>B</e> </in-xml> return (functx:sort-case-insensitive($in-xml/*))'
functx-functx-sort-case-insensitive-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Sorts a sequence of values or nodes regardless of capitalization : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_sort-case-insensitive.html : @param $seq the sequence to sort :)\n         declare function functx:sort-case-insensitive ( $seq as item()* ) as item()* { \n            for $item in $seq order by upper-case(string($item)) return $item \n         } ;\n         let $in-xml := <in-xml> <f>a</f> <f>c</f> <e>B</e> </in-xml> \n         return document{(functx:sort-case-insensitive(('a','c','B')), functx:sort-case-insensitive($in-xml/*))}\n      '
functx-functx-sort-document-order-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Sorts a sequence of nodes in document order : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_sort-document-order.html : @param $seq the sequence to sort :)\n         declare function functx:sort-document-order ( $seq as node()* ) as node()* { $seq/. } ;\n                    let $in-xml := <in-xml> <a>123</a> <b>456</b> <c>789</c> </in-xml> return (functx:sort-document-order( ($in-xml/c,$in-xml/a)))'
functx-functx-substring-after-if-contains-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Performs substring-after, returning the entire string if it does not contain the delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-if-contains.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-after-if-contains ( $arg as xs:string? , $delim as xs:string ) as xs:string? { if (contains($arg,$delim)) then substring-after($arg,$delim) else $arg } ;\n                    (functx:substring-after-if-contains('abcd','b'))'
functx-functx-substring-after-if-contains-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Performs substring-after, returning the entire string if it does not contain the delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-if-contains.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-after-if-contains ( $arg as xs:string? , $delim as xs:string ) as xs:string? { if (contains($arg,$delim)) then substring-after($arg,$delim) else $arg } ;\n                    (functx:substring-after-if-contains('abcd','x'))'
functx-functx-substring-after-if-contains-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Performs substring-after, returning the entire string if it does not contain the delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-if-contains.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-after-if-contains ( $arg as xs:string? , $delim as xs:string ) as xs:string? { if (contains($arg,$delim)) then substring-after($arg,$delim) else $arg } ;\n                    (functx:substring-after-if-contains('abcd','b'), functx:substring-after-if-contains('abcd','x'))'
functx-functx-substring-after-last-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Escapes regex special characters : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_escape-for-regex.html : @param $arg the string to escape :)\n         declare function functx:escape-for-regex ( $arg as xs:string? ) as xs:string { replace($arg, '(\.|\[|\]|\\|\||\-|\^|\$|\?|\*|\+|\{|\}|\(|\))','\\$1') } ;\n                    (:~ : The substring after the last occurrence of a delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-last.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-after-last ( $arg as xs:string? , $delim as xs:string ) as xs:string { replace ($arg,concat('^.*',functx:escape-for-regex($delim)),'') } ;\n                    (functx:substring-after-last('abc-def-ghi', '-'))'
functx-functx-substring-after-last-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Escapes regex special characters : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_escape-for-regex.html : @param $arg the string to escape :)\n         declare function functx:escape-for-regex ( $arg as xs:string? ) as xs:string { replace($arg, '(\.|\[|\]|\\|\||\-|\^|\$|\?|\*|\+|\{|\}|\(|\))','\\$1') } ;\n                    (:~ : The substring after the last occurrence of a delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-last.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-after-last ( $arg as xs:string? , $delim as xs:string ) as xs:string { replace ($arg,concat('^.*',functx:escape-for-regex($delim)),'') } ;\n                    (functx:substring-after-last('abcd-abcd', 'ab'))'
functx-functx-substring-after-last-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Escapes regex special characters : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_escape-for-regex.html : @param $arg the string to escape :)\n         declare function functx:escape-for-regex ( $arg as xs:string? ) as xs:string { replace($arg, '(\.|\[|\]|\\|\||\-|\^|\$|\?|\*|\+|\{|\}|\(|\))','\\$1') } ;\n                    (:~ : The substring after the last occurrence of a delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-last.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-after-last ( $arg as xs:string? , $delim as xs:string ) as xs:string { replace ($arg,concat('^.*',functx:escape-for-regex($delim)),'') } ;\n                    (functx:substring-after-last('abcd-abcd', 'x'))'
functx-functx-substring-after-last-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Escapes regex special characters : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_escape-for-regex.html : @param $arg the string to escape :)\n         declare function functx:escape-for-regex ( $arg as xs:string? ) as xs:string { replace($arg, '(\.|\[|\]|\\|\||\-|\^|\$|\?|\*|\+|\{|\}|\(|\))','\\$1') } ;\n                    (:~ : The substring after the last occurrence of a delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-last.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-after-last ( $arg as xs:string? , $delim as xs:string ) as xs:string { replace ($arg,concat('^.*',functx:escape-for-regex($delim)),'') } ;\n                    (functx:substring-after-last('abc-def-ghi', '-'), functx:substring-after-last('abcd-abcd', 'ab'), functx:substring-after-last('abcd-abcd', 'x'))'
functx-functx-substring-after-last-match-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The substring after the last text that matches a regex : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-last-match.html : @param $arg the string to substring : @param $regex the regular expression :)\n         declare function functx:substring-after-last-match ( $arg as xs:string? , $regex as xs:string ) as xs:string { replace($arg,concat('^.*',$regex),'') } ;\n                    (functx:substring-after-last-match( 'abc-def-ghi', '[ad]'))'
functx-functx-substring-after-last-match-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The substring after the last text that matches a regex : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-last-match.html : @param $arg the string to substring : @param $regex the regular expression :)\n         declare function functx:substring-after-last-match ( $arg as xs:string? , $regex as xs:string ) as xs:string { replace($arg,concat('^.*',$regex),'') } ;\n                    (functx:substring-after-last-match( 'abcd-abcd', 'bc?'))'
functx-functx-substring-after-last-match-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The substring after the last text that matches a regex : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-last-match.html : @param $arg the string to substring : @param $regex the regular expression :)\n         declare function functx:substring-after-last-match ( $arg as xs:string? , $regex as xs:string ) as xs:string { replace($arg,concat('^.*',$regex),'') } ;\n                    (functx:substring-after-last-match( 'abcd-abcd', 'x'))'
functx-functx-substring-after-last-match-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The substring after the last text that matches a regex : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-last-match.html : @param $arg the string to substring : @param $regex the regular expression :)\n         declare function functx:substring-after-last-match ( $arg as xs:string? , $regex as xs:string ) as xs:string { replace($arg,concat('^.*',$regex),'') } ;\n                    (functx:substring-after-last-match( 'abc-def-ghi', '[ad]'), functx:substring-after-last-match( 'abcd-abcd', 'bc?'), functx:substring-after-last-match( 'abcd-abcd', 'x'))'
functx-functx-substring-after-match-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The substring after the first text that matches a regex : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-match.html : @param $arg the string to substring : @param $regex the regular expression :)\n         declare function functx:substring-after-match ( $arg as xs:string? , $regex as xs:string ) as xs:string? { replace($arg,concat('^.*?',$regex),'') } ;\n                    (functx:substring-after-match( 'abc-def-ghi', '[ce]'))'
functx-functx-substring-after-match-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The substring after the first text that matches a regex : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-match.html : @param $arg the string to substring : @param $regex the regular expression :)\n         declare function functx:substring-after-match ( $arg as xs:string? , $regex as xs:string ) as xs:string? { replace($arg,concat('^.*?',$regex),'') } ;\n                    (functx:substring-after-match( 'abcd-abcd', 'ab?'))'
functx-functx-substring-after-match-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The substring after the first text that matches a regex : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-match.html : @param $arg the string to substring : @param $regex the regular expression :)\n         declare function functx:substring-after-match ( $arg as xs:string? , $regex as xs:string ) as xs:string? { replace($arg,concat('^.*?',$regex),'') } ;\n                    (functx:substring-after-match( 'abcd-abcd', 'x'))'
functx-functx-substring-after-match-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The substring after the first text that matches a regex : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-after-match.html : @param $arg the string to substring : @param $regex the regular expression :)\n         declare function functx:substring-after-match ( $arg as xs:string? , $regex as xs:string ) as xs:string? { replace($arg,concat('^.*?',$regex),'') } ;\n                    (functx:substring-after-match( 'abc-def-ghi', '[ce]'), functx:substring-after-match( 'abcd-abcd', 'ab?'), functx:substring-after-match( 'abcd-abcd', 'x'))'
functx-functx-substring-before-if-contains-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Performs substring-before, returning the entire string if it does not contain the delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-before-if-contains.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-before-if-contains ( $arg as xs:string? , $delim as xs:string ) as xs:string? { if (contains($arg,$delim)) then substring-before($arg,$delim) else $arg } ;\n                    (functx:substring-before-if-contains('abcd','c'))'
functx-functx-substring-before-if-contains-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Performs substring-before, returning the entire string if it does not contain the delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-before-if-contains.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-before-if-contains ( $arg as xs:string? , $delim as xs:string ) as xs:string? { if (contains($arg,$delim)) then substring-before($arg,$delim) else $arg } ;\n                    (functx:substring-before-if-contains('abcd','x'))'
functx-functx-substring-before-if-contains-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Performs substring-before, returning the entire string if it does not contain the delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-before-if-contains.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-before-if-contains ( $arg as xs:string? , $delim as xs:string ) as xs:string? { if (contains($arg,$delim)) then substring-before($arg,$delim) else $arg } ;\n                    (functx:substring-before-if-contains('abcd','c'), functx:substring-before-if-contains('abcd','x'))'
functx-functx-substring-before-last-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Escapes regex special characters : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_escape-for-regex.html : @param $arg the string to escape :)\n         declare function functx:escape-for-regex ( $arg as xs:string? ) as xs:string { replace($arg, '(\.|\[|\]|\\|\||\-|\^|\$|\?|\*|\+|\{|\}|\(|\))','\\$1') } ;\n                    (:~ : The substring before the last occurrence of a delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-before-last.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-before-last ( $arg as xs:string? , $delim as xs:string ) as xs:string { if (matches($arg, functx:escape-for-regex($delim))) then replace($arg, concat('^(.*)', functx:escape-for-regex($delim),'.*'), '$1') else '' } ;\n                    (functx:substring-before-last( 'abc-def-ghi', '-'))'
functx-functx-substring-before-last-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Escapes regex special characters : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_escape-for-regex.html : @param $arg the string to escape :)\n         declare function functx:escape-for-regex ( $arg as xs:string? ) as xs:string { replace($arg, '(\.|\[|\]|\\|\||\-|\^|\$|\?|\*|\+|\{|\}|\(|\))','\\$1') } ;\n                    (:~ : The substring before the last occurrence of a delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-before-last.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-before-last ( $arg as xs:string? , $delim as xs:string ) as xs:string { if (matches($arg, functx:escape-for-regex($delim))) then replace($arg, concat('^(.*)', functx:escape-for-regex($delim),'.*'), '$1') else '' } ;\n                    (functx:substring-before-last('abcd-abcd', 'ab'))'
functx-functx-substring-before-last-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Escapes regex special characters : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_escape-for-regex.html : @param $arg the string to escape :)\n         declare function functx:escape-for-regex ( $arg as xs:string? ) as xs:string { replace($arg, '(\.|\[|\]|\\|\||\-|\^|\$|\?|\*|\+|\{|\}|\(|\))','\\$1') } ;\n                    (:~ : The substring before the last occurrence of a delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-before-last.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-before-last ( $arg as xs:string? , $delim as xs:string ) as xs:string { if (matches($arg, functx:escape-for-regex($delim))) then replace($arg, concat('^(.*)', functx:escape-for-regex($delim),'.*'), '$1') else '' } ;\n                    (functx:substring-before-last('abcd-abcd', 'x'))'
functx-functx-substring-before-last-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Escapes regex special characters : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_escape-for-regex.html : @param $arg the string to escape :)\n         declare function functx:escape-for-regex ( $arg as xs:string? ) as xs:string { replace($arg, '(\.|\[|\]|\\|\||\-|\^|\$|\?|\*|\+|\{|\}|\(|\))','\\$1') } ;\n                    (:~ : The substring before the last occurrence of a delimiter : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-before-last.html : @param $arg the string to substring : @param $delim the delimiter :)\n         declare function functx:substring-before-last ( $arg as xs:string? , $delim as xs:string ) as xs:string { if (matches($arg, functx:escape-for-regex($delim))) then replace($arg, concat('^(.*)', functx:escape-for-regex($delim),'.*'), '$1') else '' } ;\n                    (functx:substring-before-last( 'abc-def-ghi', '-'), functx:substring-before-last('abcd-abcd', 'ab'), functx:substring-before-last('abcd-abcd', 'x'))'
functx-functx-substring-before-last-match-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The substring before the last text that matches a regex : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-before-last-match.html : @param $arg the string to substring : @param $regex the regular expression :)\n         declare function functx:substring-before-last-match ( $arg as xs:string? , $regex as xs:string ) as xs:string? { replace($arg,concat('^(.*)',$regex,'.*'),'$1') } ;\n                    (functx:substring-before-last-match( 'abc-def-ghi', '[ce]'))'
functx-functx-substring-before-last-match-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The substring before the last text that matches a regex : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-before-last-match.html : @param $arg the string to substring : @param $regex the regular expression :)\n         declare function functx:substring-before-last-match ( $arg as xs:string? , $regex as xs:string ) as xs:string? { replace($arg,concat('^(.*)',$regex,'.*'),'$1') } ;\n                    (functx:substring-before-last-match( 'abcd-abcd', 'ab?'))'
functx-functx-substring-before-last-match-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The substring before the last text that matches a regex : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-before-last-match.html : @param $arg the string to substring : @param $regex the regular expression :)\n         declare function functx:substring-before-last-match ( $arg as xs:string? , $regex as xs:string ) as xs:string? { replace($arg,concat('^(.*)',$regex,'.*'),'$1') } ;\n                    (functx:substring-before-last-match( 'abcd-abcd', 'x'))'
functx-functx-substring-before-last-match-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The substring before the last text that matches a regex : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-before-last-match.html : @param $arg the string to substring : @param $regex the regular expression :)\n         declare function functx:substring-before-last-match ( $arg as xs:string? , $regex as xs:string ) as xs:string? { replace($arg,concat('^(.*)',$regex,'.*'),'$1') } ;\n                    (functx:substring-before-last-match( 'abc-def-ghi', '[ce]'), functx:substring-before-last-match( 'abcd-abcd', 'ab?'), functx:substring-before-last-match( 'abcd-abcd', 'x'))'
functx-functx-substring-before-match-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The substring before the first text that matches a regex : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-before-match.html : @param $arg the string to substring : @param $regex the regular expression :)\n         declare function functx:substring-before-match ( $arg as xs:string? , $regex as xs:string ) as xs:string? { tokenize($arg,$regex)[1] } ;\n                    (functx:substring-before-match( 'abc-def-ghi', '[dg]'))'
functx-functx-substring-before-match-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The substring before the first text that matches a regex : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-before-match.html : @param $arg the string to substring : @param $regex the regular expression :)\n         declare function functx:substring-before-match ( $arg as xs:string? , $regex as xs:string ) as xs:string? { tokenize($arg,$regex)[1] } ;\n                    (functx:substring-before-match( 'abcd-abcd', 'bc?'))'
functx-functx-substring-before-match-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The substring before the first text that matches a regex : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-before-match.html : @param $arg the string to substring : @param $regex the regular expression :)\n         declare function functx:substring-before-match ( $arg as xs:string? , $regex as xs:string ) as xs:string? { tokenize($arg,$regex)[1] } ;\n                    (functx:substring-before-match( 'abcd-abcd', 'x'))'
functx-functx-substring-before-match-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The substring before the first text that matches a regex : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_substring-before-match.html : @param $arg the string to substring : @param $regex the regular expression :)\n         declare function functx:substring-before-match ( $arg as xs:string? , $regex as xs:string ) as xs:string? { tokenize($arg,$regex)[1] } ;\n                    (functx:substring-before-match( 'abc-def-ghi', '[dg]'), functx:substring-before-match( 'abcd-abcd', 'bc?'), functx:substring-before-match( 'abcd-abcd', 'x'))'
functx-functx-time-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Pads an integer to a desired length by adding leading zeros : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_pad-integer-to-length.html : @param $integerToPad the integer to pad : @param $length the desired length :)\n         declare function functx:pad-integer-to-length ( $integerToPad as xs:anyAtomicType? , $length as xs:integer ) as xs:string { if ($length < string-length(string($integerToPad))) then error(xs:QName('functx:Integer_Longer_Than_Length')) else concat (functx:repeat-string( '0',$length - string-length(string($integerToPad))), string($integerToPad)) } ;\n                    (:~ : Repeats a string a given number of times : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_repeat-string.html : @param $stringToRepeat the string to repeat : @param $count the desired number of copies :)\n         declare function functx:repeat-string ( $stringToRepeat as xs:string? , $count as xs:integer ) as xs:string { string-join((for $i in 1 to $count return $stringToRepeat), '') } ;\n                    (:~ : Construct a time from an hour, minute and second : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_time.html : @param $hour the hour : @param $minute the minute : @param $second the second :)\n         declare function functx:time ( $hour as xs:anyAtomicType , $minute as xs:anyAtomicType , $second as xs:anyAtomicType ) as xs:time { xs:time( concat( functx:pad-integer-to-length(xs:integer($hour),2),':', functx:pad-integer-to-length(xs:integer($minute),2),':', functx:pad-integer-to-length(xs:integer($second),2))) } ;\n                    (functx:time(20,6,12))'
functx-functx-time-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Pads an integer to a desired length by adding leading zeros : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_pad-integer-to-length.html : @param $integerToPad the integer to pad : @param $length the desired length :)\n         declare function functx:pad-integer-to-length ( $integerToPad as xs:anyAtomicType? , $length as xs:integer ) as xs:string { if ($length < string-length(string($integerToPad))) then error(xs:QName('functx:Integer_Longer_Than_Length')) else concat (functx:repeat-string( '0',$length - string-length(string($integerToPad))), string($integerToPad)) } ;\n                    (:~ : Repeats a string a given number of times : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_repeat-string.html : @param $stringToRepeat the string to repeat : @param $count the desired number of copies :)\n         declare function functx:repeat-string ( $stringToRepeat as xs:string? , $count as xs:integer ) as xs:string { string-join((for $i in 1 to $count return $stringToRepeat), '') } ;\n                    (:~ : Construct a time from an hour, minute and second : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_time.html : @param $hour the hour : @param $minute the minute : @param $second the second :)\n         declare function functx:time ( $hour as xs:anyAtomicType , $minute as xs:anyAtomicType , $second as xs:anyAtomicType ) as xs:time { xs:time( concat( functx:pad-integer-to-length(xs:integer($hour),2),':', functx:pad-integer-to-length(xs:integer($minute),2),':', functx:pad-integer-to-length(xs:integer($second),2))) } ;\n                    (functx:time('20','6','12'))'
functx-functx-time-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Pads an integer to a desired length by adding leading zeros : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_pad-integer-to-length.html : @param $integerToPad the integer to pad : @param $length the desired length :)\n         declare function functx:pad-integer-to-length ( $integerToPad as xs:anyAtomicType? , $length as xs:integer ) as xs:string { if ($length < string-length(string($integerToPad))) then error(xs:QName('functx:Integer_Longer_Than_Length')) else concat (functx:repeat-string( '0',$length - string-length(string($integerToPad))), string($integerToPad)) } ;\n                    (:~ : Repeats a string a given number of times : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_repeat-string.html : @param $stringToRepeat the string to repeat : @param $count the desired number of copies :)\n         declare function functx:repeat-string ( $stringToRepeat as xs:string? , $count as xs:integer ) as xs:string { string-join((for $i in 1 to $count return $stringToRepeat), '') } ;\n                    (:~ : Construct a time from an hour, minute and second : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_time.html : @param $hour the hour : @param $minute the minute : @param $second the second :)\n         declare function functx:time ( $hour as xs:anyAtomicType , $minute as xs:anyAtomicType , $second as xs:anyAtomicType ) as xs:time { xs:time( concat( functx:pad-integer-to-length(xs:integer($hour),2),':', functx:pad-integer-to-length(xs:integer($minute),2),':', functx:pad-integer-to-length(xs:integer($second),2))) } ;\n                    (functx:time(20,6,12), functx:time('20','6','12'))'
functx-functx-timezone-from-duration-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Converts an xs:dayTimeDuration into a timezone like "-05:00" or "Z" : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_timezone-from-duration.html : @param $duration the duration :)\n         declare function functx:timezone-from-duration ( $duration as xs:dayTimeDuration ) as xs:string { if (string($duration) = ('PT0S','-PT0S')) then 'Z' else if (matches(string($duration),'-PT[1-9]H')) then replace(string($duration),'PT([1-9])H','0$1:00') else if (matches(string($duration),'PT[1-9]H')) then replace(string($duration),'PT([1-9])H','+0$1:00') else if (matches(string($duration),'-PT1[0-4]H')) then replace(string($duration),'PT(1[0-4])H','$1:00') else if (matches(string($duration),'PT1[0-4]H')) then replace(string($duration),'PT(1[0-4])H','+$1:00') else error(xs:QName('functx:Invalid_Duration_Value')) } ;\n                    (functx:timezone-from-duration( xs:dayTimeDuration('PT0S')))'
functx-functx-timezone-from-duration-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Converts an xs:dayTimeDuration into a timezone like "-05:00" or "Z" : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_timezone-from-duration.html : @param $duration the duration :)\n         declare function functx:timezone-from-duration ( $duration as xs:dayTimeDuration ) as xs:string { if (string($duration) = ('PT0S','-PT0S')) then 'Z' else if (matches(string($duration),'-PT[1-9]H')) then replace(string($duration),'PT([1-9])H','0$1:00') else if (matches(string($duration),'PT[1-9]H')) then replace(string($duration),'PT([1-9])H','+0$1:00') else if (matches(string($duration),'-PT1[0-4]H')) then replace(string($duration),'PT(1[0-4])H','$1:00') else if (matches(string($duration),'PT1[0-4]H')) then replace(string($duration),'PT(1[0-4])H','+$1:00') else error(xs:QName('functx:Invalid_Duration_Value')) } ;\n                    (functx:timezone-from-duration( xs:dayTimeDuration('-PT5H')))'
functx-functx-timezone-from-duration-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Converts an xs:dayTimeDuration into a timezone like "-05:00" or "Z" : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_timezone-from-duration.html : @param $duration the duration :)\n         declare function functx:timezone-from-duration ( $duration as xs:dayTimeDuration ) as xs:string { if (string($duration) = ('PT0S','-PT0S')) then 'Z' else if (matches(string($duration),'-PT[1-9]H')) then replace(string($duration),'PT([1-9])H','0$1:00') else if (matches(string($duration),'PT[1-9]H')) then replace(string($duration),'PT([1-9])H','+0$1:00') else if (matches(string($duration),'-PT1[0-4]H')) then replace(string($duration),'PT(1[0-4])H','$1:00') else if (matches(string($duration),'PT1[0-4]H')) then replace(string($duration),'PT(1[0-4])H','+$1:00') else error(xs:QName('functx:Invalid_Duration_Value')) } ;\n                    (functx:timezone-from-duration( xs:dayTimeDuration('PT9H')))'
functx-functx-timezone-from-duration-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Converts an xs:dayTimeDuration into a timezone like "-05:00" or "Z" : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_timezone-from-duration.html : @param $duration the duration :)\n         declare function functx:timezone-from-duration ( $duration as xs:dayTimeDuration ) as xs:string { if (string($duration) = ('PT0S','-PT0S')) then 'Z' else if (matches(string($duration),'-PT[1-9]H')) then replace(string($duration),'PT([1-9])H','0$1:00') else if (matches(string($duration),'PT[1-9]H')) then replace(string($duration),'PT([1-9])H','+0$1:00') else if (matches(string($duration),'-PT1[0-4]H')) then replace(string($duration),'PT(1[0-4])H','$1:00') else if (matches(string($duration),'PT1[0-4]H')) then replace(string($duration),'PT(1[0-4])H','+$1:00') else error(xs:QName('functx:Invalid_Duration_Value')) } ;\n                    (functx:timezone-from-duration( xs:dayTimeDuration('PT0S')), functx:timezone-from-duration( xs:dayTimeDuration('-PT5H')), functx:timezone-from-duration( xs:dayTimeDuration('PT9H')))'
functx-functx-total-days-from-duration-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The total number of days in a dayTimeDuration : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_total-days-from-duration.html : @param $duration the duration :)\n         declare function functx:total-days-from-duration ( $duration as xs:dayTimeDuration? ) as xs:decimal? { $duration div xs:dayTimeDuration('P1D') } ;\n                    (functx:total-days-from-duration( xs:dayTimeDuration('PT24H'))) = 1'
functx-functx-total-days-from-duration-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The total number of days in a dayTimeDuration : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_total-days-from-duration.html : @param $duration the duration :)\n         declare function functx:total-days-from-duration ( $duration as xs:dayTimeDuration? ) as xs:decimal? { $duration div xs:dayTimeDuration('P1D') } ;\n                    (functx:total-days-from-duration( xs:dayTimeDuration('P1D'))) = 1'
functx-functx-total-days-from-duration-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The total number of days in a dayTimeDuration : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_total-days-from-duration.html : @param $duration the duration :)\n         declare function functx:total-days-from-duration ( $duration as xs:dayTimeDuration? ) as xs:decimal? { $duration div xs:dayTimeDuration('P1D') } ;\n                    (functx:total-days-from-duration( xs:dayTimeDuration('PT36H')))'
functx-functx-total-days-from-duration-4;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The total number of days in a dayTimeDuration : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_total-days-from-duration.html : @param $duration the duration :)\n         declare function functx:total-days-from-duration ( $duration as xs:dayTimeDuration? ) as xs:decimal? { $duration div xs:dayTimeDuration('P1D') } ;\n                    (functx:total-days-from-duration( xs:dayTimeDuration('PT48H'))) = 2'
functx-functx-total-days-from-duration-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The total number of days in a dayTimeDuration : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_total-days-from-duration.html : @param $duration the duration :)\n         declare function functx:total-days-from-duration ( $duration as xs:dayTimeDuration? ) as xs:decimal? { $duration div xs:dayTimeDuration('P1D') } ;\n                    (functx:total-days-from-duration( xs:dayTimeDuration('PT24H')), functx:total-days-from-duration( xs:dayTimeDuration('P1D')), functx:total-days-from-duration( xs:dayTimeDuration('PT36H')), functx:total-days-from-duration( xs:dayTimeDuration('PT48H')))'
functx-functx-total-hours-from-duration-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The total number of hours in a dayTimeDuration : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_total-hours-from-duration.html : @param $duration the duration :)\n         declare function functx:total-hours-from-duration ( $duration as xs:dayTimeDuration? ) as xs:decimal? { $duration div xs:dayTimeDuration('PT1H') } ;\n                    (functx:total-hours-from-duration( xs:dayTimeDuration('PT26H'))) = 26'
functx-functx-total-hours-from-duration-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The total number of hours in a dayTimeDuration : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_total-hours-from-duration.html : @param $duration the duration :)\n         declare function functx:total-hours-from-duration ( $duration as xs:dayTimeDuration? ) as xs:decimal? { $duration div xs:dayTimeDuration('PT1H') } ;\n                    (functx:total-hours-from-duration( xs:dayTimeDuration('PT1H30M')))'
functx-functx-total-hours-from-duration-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The total number of hours in a dayTimeDuration : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_total-hours-from-duration.html : @param $duration the duration :)\n         declare function functx:total-hours-from-duration ( $duration as xs:dayTimeDuration? ) as xs:decimal? { $duration div xs:dayTimeDuration('PT1H') } ;\n                    (functx:total-hours-from-duration( xs:dayTimeDuration('-PT3H'))) = -3'
functx-functx-total-hours-from-duration-4;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The total number of hours in a dayTimeDuration : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_total-hours-from-duration.html : @param $duration the duration :)\n         declare function functx:total-hours-from-duration ( $duration as xs:dayTimeDuration? ) as xs:decimal? { $duration div xs:dayTimeDuration('PT1H') } ;\n                    (functx:total-hours-from-duration( xs:dayTimeDuration('P1D'))) = 24'
functx-functx-total-hours-from-duration-5;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The total number of hours in a dayTimeDuration : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_total-hours-from-duration.html : @param $duration the duration :)\n         declare function functx:total-hours-from-duration ( $duration as xs:dayTimeDuration? ) as xs:decimal? { $duration div xs:dayTimeDuration('PT1H') } ;\n                    (functx:total-hours-from-duration( xs:dayTimeDuration('P1DT2H'))) = 26'
functx-functx-total-hours-from-duration-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The total number of hours in a dayTimeDuration : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_total-hours-from-duration.html : @param $duration the duration :)\n         declare function functx:total-hours-from-duration ( $duration as xs:dayTimeDuration? ) as xs:decimal? { $duration div xs:dayTimeDuration('PT1H') } ;\n                    (functx:total-hours-from-duration( xs:dayTimeDuration('PT26H')), functx:total-hours-from-duration( xs:dayTimeDuration('PT1H30M')), functx:total-hours-from-duration( xs:dayTimeDuration('-PT3H')), functx:total-hours-from-duration( xs:dayTimeDuration('P1D')), functx:total-hours-from-duration( xs:dayTimeDuration('P1DT2H')))'
functx-functx-total-minutes-from-duration-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The total number of minutes in a dayTimeDuration : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_total-minutes-from-duration.html : @param $duration the duration :)\n         declare function functx:total-minutes-from-duration ( $duration as xs:dayTimeDuration? ) as xs:decimal? { $duration div xs:dayTimeDuration('PT1M') } ;\n                    (functx:total-minutes-from-duration( xs:dayTimeDuration('PT90M'))) = 90'
functx-functx-total-minutes-from-duration-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The total number of minutes in a dayTimeDuration : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_total-minutes-from-duration.html : @param $duration the duration :)\n         declare function functx:total-minutes-from-duration ( $duration as xs:dayTimeDuration? ) as xs:decimal? { $duration div xs:dayTimeDuration('PT1M') } ;\n                    (functx:total-minutes-from-duration( xs:dayTimeDuration('PT1H90M'))) = 150'
functx-functx-total-minutes-from-duration-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The total number of minutes in a dayTimeDuration : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_total-minutes-from-duration.html : @param $duration the duration :)\n         declare function functx:total-minutes-from-duration ( $duration as xs:dayTimeDuration? ) as xs:decimal? { $duration div xs:dayTimeDuration('PT1M') } ;\n                    (functx:total-minutes-from-duration( xs:dayTimeDuration('PT3H'))) = 180'
functx-functx-total-minutes-from-duration-4;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The total number of minutes in a dayTimeDuration : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_total-minutes-from-duration.html : @param $duration the duration :)\n         declare function functx:total-minutes-from-duration ( $duration as xs:dayTimeDuration? ) as xs:decimal? { $duration div xs:dayTimeDuration('PT1M') } ;\n                    (functx:total-minutes-from-duration( xs:dayTimeDuration('PT1M30S')))'
functx-functx-total-minutes-from-duration-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The total number of minutes in a dayTimeDuration : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_total-minutes-from-duration.html : @param $duration the duration :)\n         declare function functx:total-minutes-from-duration ( $duration as xs:dayTimeDuration? ) as xs:decimal? { $duration div xs:dayTimeDuration('PT1M') } ;\n                    (functx:total-minutes-from-duration( xs:dayTimeDuration('PT90M')), functx:total-minutes-from-duration( xs:dayTimeDuration('PT1H90M')), functx:total-minutes-from-duration( xs:dayTimeDuration('PT3H')), functx:total-minutes-from-duration( xs:dayTimeDuration('PT1M30S')))'
functx-functx-total-months-from-duration-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The total number of months in a yearMonthDuration : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_total-months-from-duration.html : @param $duration the duration :)\n         declare function functx:total-months-from-duration ( $duration as xs:yearMonthDuration? ) as xs:decimal? { $duration div xs:yearMonthDuration('P1M') } ;\n                    (functx:total-months-from-duration( xs:yearMonthDuration('P18M'))) = 18'
functx-functx-total-months-from-duration-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The total number of months in a yearMonthDuration : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_total-months-from-duration.html : @param $duration the duration :)\n         declare function functx:total-months-from-duration ( $duration as xs:yearMonthDuration? ) as xs:decimal? { $duration div xs:yearMonthDuration('P1M') } ;\n                    (functx:total-months-from-duration( xs:yearMonthDuration('P1Y'))) = 12'
functx-functx-total-months-from-duration-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The total number of months in a yearMonthDuration : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_total-months-from-duration.html : @param $duration the duration :)\n         declare function functx:total-months-from-duration ( $duration as xs:yearMonthDuration? ) as xs:decimal? { $duration div xs:yearMonthDuration('P1M') } ;\n                    (functx:total-months-from-duration( xs:yearMonthDuration('P1Y6M'))) = 18'
functx-functx-total-months-from-duration-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The total number of months in a yearMonthDuration : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_total-months-from-duration.html : @param $duration the duration :)\n         declare function functx:total-months-from-duration ( $duration as xs:yearMonthDuration? ) as xs:decimal? { $duration div xs:yearMonthDuration('P1M') } ;\n                    (functx:total-months-from-duration( xs:yearMonthDuration('P18M')), functx:total-months-from-duration( xs:yearMonthDuration('P1Y')), functx:total-months-from-duration( xs:yearMonthDuration('P1Y6M')))'
functx-functx-total-seconds-from-duration-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The total number of seconds in a dayTimeDuration : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_total-seconds-from-duration.html : @param $duration the duration :)\n         declare function functx:total-seconds-from-duration ( $duration as xs:dayTimeDuration? ) as xs:decimal? { $duration div xs:dayTimeDuration('PT1S') } ;\n                    (functx:total-seconds-from-duration( xs:dayTimeDuration('PT90S'))) = 90'
functx-functx-total-seconds-from-duration-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The total number of seconds in a dayTimeDuration : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_total-seconds-from-duration.html : @param $duration the duration :)\n         declare function functx:total-seconds-from-duration ( $duration as xs:dayTimeDuration? ) as xs:decimal? { $duration div xs:dayTimeDuration('PT1S') } ;\n                    (functx:total-seconds-from-duration( xs:dayTimeDuration('PT90.5S')))'
functx-functx-total-seconds-from-duration-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The total number of seconds in a dayTimeDuration : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_total-seconds-from-duration.html : @param $duration the duration :)\n         declare function functx:total-seconds-from-duration ( $duration as xs:dayTimeDuration? ) as xs:decimal? { $duration div xs:dayTimeDuration('PT1S') } ;\n                    (functx:total-seconds-from-duration( xs:dayTimeDuration('PT1M30S'))) = 90'
functx-functx-total-seconds-from-duration-4;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The total number of seconds in a dayTimeDuration : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_total-seconds-from-duration.html : @param $duration the duration :)\n         declare function functx:total-seconds-from-duration ( $duration as xs:dayTimeDuration? ) as xs:decimal? { $duration div xs:dayTimeDuration('PT1S') } ;\n                    (functx:total-seconds-from-duration( xs:dayTimeDuration('PT3M'))) = 180'
functx-functx-total-seconds-from-duration-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The total number of seconds in a dayTimeDuration : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_total-seconds-from-duration.html : @param $duration the duration :)\n         declare function functx:total-seconds-from-duration ( $duration as xs:dayTimeDuration? ) as xs:decimal? { $duration div xs:dayTimeDuration('PT1S') } ;\n                    (functx:total-seconds-from-duration( xs:dayTimeDuration('PT90S')), functx:total-seconds-from-duration( xs:dayTimeDuration('PT90.5S')), functx:total-seconds-from-duration( xs:dayTimeDuration('PT1M30S')), functx:total-seconds-from-duration( xs:dayTimeDuration('PT3M')))'
functx-functx-total-years-from-duration-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The total number of years in a yearMonthDuration : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_total-years-from-duration.html : @param $duration the duration :)\n         declare function functx:total-years-from-duration ( $duration as xs:yearMonthDuration? ) as xs:decimal? { $duration div xs:yearMonthDuration('P1Y') } ;\n                    (functx:total-years-from-duration( xs:yearMonthDuration('P18M')))'
functx-functx-total-years-from-duration-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The total number of years in a yearMonthDuration : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_total-years-from-duration.html : @param $duration the duration :)\n         declare function functx:total-years-from-duration ( $duration as xs:yearMonthDuration? ) as xs:decimal? { $duration div xs:yearMonthDuration('P1Y') } ;\n                    (functx:total-years-from-duration( xs:yearMonthDuration('P1Y'))) = 1'
functx-functx-total-years-from-duration-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The total number of years in a yearMonthDuration : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_total-years-from-duration.html : @param $duration the duration :)\n         declare function functx:total-years-from-duration ( $duration as xs:yearMonthDuration? ) as xs:decimal? { $duration div xs:yearMonthDuration('P1Y') } ;\n                    (functx:total-years-from-duration( xs:yearMonthDuration('P1Y6M')))'
functx-functx-total-years-from-duration-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The total number of years in a yearMonthDuration : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_total-years-from-duration.html : @param $duration the duration :)\n         declare function functx:total-years-from-duration ( $duration as xs:yearMonthDuration? ) as xs:decimal? { $duration div xs:yearMonthDuration('P1Y') } ;\n                    (functx:total-years-from-duration( xs:yearMonthDuration('P18M')), functx:total-years-from-duration( xs:yearMonthDuration('P1Y')), functx:total-years-from-duration( xs:yearMonthDuration('P1Y6M')))'
functx-functx-trim-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Trims leading and trailing whitespace : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_trim.html : @param $arg the string to trim :)\n         declare function functx:trim ( $arg as xs:string? ) as xs:string { replace(replace($arg,'\s+$',''),'^\s+','') } ;\n                    (functx:trim(' xyz '))'
functx-functx-trim-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Trims leading and trailing whitespace : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_trim.html : @param $arg the string to trim :)\n         declare function functx:trim ( $arg as xs:string? ) as xs:string { replace(replace($arg,'\s+$',''),'^\s+','') } ;\n                    (functx:trim(' xyz'))'
functx-functx-trim-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Trims leading and trailing whitespace : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_trim.html : @param $arg the string to trim :)\n         declare function functx:trim ( $arg as xs:string? ) as xs:string { replace(replace($arg,'\s+$',''),'^\s+','') } ;\n                    (functx:trim('x   xyz '))'
functx-functx-trim-all;PRSC Error: Failed to parse query 'deep-equal((declare namespace functx = "http://www.example.com/";\n                    (:~ : Trims leading and trailing whitespace : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_trim.html : @param $arg the string to trim :)\n         declare function functx:trim ( $arg as xs:string? ) as xs:string { replace(replace($arg,'\s+$',''),'^\s+','') } ;\n                    (functx:trim(' xyz '), functx:trim(' xyz'), functx:trim('x   xyz '))), ("xyz", "xyz",  "x   xyz"))'
functx-functx-update-attributes-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Updates the attribute value of an XML element : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_update-attributes.html : @param $elements the element(s) for which you wish to update the attribute : @param $attrNames the name(s) of the attribute(s) to add : @param $attrValues the value(s) of the attribute(s) to add :)\n         declare function functx:update-attributes ( $elements as element()* , $attrNames as xs:QName* , $attrValues as xs:anyAtomicType* ) as element()? { for $element in $elements return element { node-name($element)} { for $attrName at $seq in $attrNames return if ($element/@*[node-name(.) = $attrName]) then attribute {$attrName} {$attrValues[$seq]} else (), $element/@*[not(node-name(.) = $attrNames)], $element/node() } } ;\n                    let $in-xml := <in-xml xmlns:new='http://new'> <a att1='def'>x</a> <b>x</b> <c new:att1='def'>x</c> </in-xml> return (functx:update-attributes( $in-xml/a, xs:QName('att1'), 123))'
functx-functx-update-attributes-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Updates the attribute value of an XML element : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_update-attributes.html : @param $elements the element(s) for which you wish to update the attribute : @param $attrNames the name(s) of the attribute(s) to add : @param $attrValues the value(s) of the attribute(s) to add :)\n         declare function functx:update-attributes ( $elements as element()* , $attrNames as xs:QName* , $attrValues as xs:anyAtomicType* ) as element()? { for $element in $elements return element { node-name($element)} { for $attrName at $seq in $attrNames return if ($element/@*[node-name(.) = $attrName]) then attribute {$attrName} {$attrValues[$seq]} else (), $element/@*[not(node-name(.) = $attrNames)], $element/node() } } ;\n                    let $in-xml := <in-xml xmlns:new='http://new'> <a att1='def'>x</a> <b>x</b> <c new:att1='def'>x</c> </in-xml> return (functx:update-attributes( $in-xml/a, (xs:QName('att1'),xs:QName('att2')), (1,2)))'
functx-functx-update-attributes-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Updates the attribute value of an XML element : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_update-attributes.html : @param $elements the element(s) for which you wish to update the attribute : @param $attrNames the name(s) of the attribute(s) to add : @param $attrValues the value(s) of the attribute(s) to add :)\n         declare function functx:update-attributes ( $elements as element()* , $attrNames as xs:QName* , $attrValues as xs:anyAtomicType* ) as element()? { for $element in $elements return element { node-name($element)} { for $attrName at $seq in $attrNames return if ($element/@*[node-name(.) = $attrName]) then attribute {$attrName} {$attrValues[$seq]} else (), $element/@*[not(node-name(.) = $attrNames)], $element/node() } } ;\n                    let $in-xml := <in-xml xmlns:new='http://new'> <a att1='def'>x</a> <b>x</b> <c new:att1='def'>x</c> </in-xml> return (functx:update-attributes( $in-xml/b, xs:QName('att1'), 123))'
functx-functx-update-attributes-4;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Updates the attribute value of an XML element : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_update-attributes.html : @param $elements the element(s) for which you wish to update the attribute : @param $attrNames the name(s) of the attribute(s) to add : @param $attrValues the value(s) of the attribute(s) to add :)\n         declare function functx:update-attributes ( $elements as element()* , $attrNames as xs:QName* , $attrValues as xs:anyAtomicType* ) as element()? { for $element in $elements return element { node-name($element)} { for $attrName at $seq in $attrNames return if ($element/@*[node-name(.) = $attrName]) then attribute {$attrName} {$attrValues[$seq]} else (), $element/@*[not(node-name(.) = $attrNames)], $element/node() } } ;\n                    let $in-xml := <in-xml xmlns:new='http://new'> <a att1='def'>x</a> <b>x</b> <c new:att1='def'>x</c> </in-xml> return (functx:update-attributes( $in-xml/c, QName('http://new','prefix:att1'), 123))'
functx-functx-update-attributes-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Updates the attribute value of an XML element : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_update-attributes.html : @param $elements the element(s) for which you wish to update the attribute : @param $attrNames the name(s) of the attribute(s) to add : @param $attrValues the value(s) of the attribute(s) to add :)\n         declare function functx:update-attributes ( $elements as element()* , $attrNames as xs:QName* , $attrValues as xs:anyAtomicType* ) as element()? { for $element in $elements return element { node-name($element)} { for $attrName at $seq in $attrNames return if ($element/@*[node-name(.) = $attrName]) then attribute {$attrName} {$attrValues[$seq]} else (), $element/@*[not(node-name(.) = $attrNames)], $element/node() } } ;\n                    let $in-xml := <in-xml xmlns:new='http://new'> <a att1='def'>x</a> <b>x</b> <c new:att1='def'>x</c> </in-xml> return (functx:update-attributes( $in-xml/a, xs:QName('att1'), 123), functx:update-attributes( $in-xml/a, (xs:QName('att1'),xs:QName('att2')), (1,2)), functx:update-attributes( $in-xml/b, xs:QName('att1'), 123), functx:update-attributes( $in-xml/c, QName('http://new','prefix:att1'), 123))'
functx-functx-value-except-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The values in one sequence that aren't in another sequence : : @author W3C XML Query Working Group : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_value-except.html : @param $arg1 the first sequence : @param $arg2 the second sequence :)\n         declare function functx:value-except ( $arg1 as xs:anyAtomicType* , $arg2 as xs:anyAtomicType* ) as xs:anyAtomicType* { distinct-values($arg1[not(.=$arg2)]) } ;\n                    (functx:value-except((1,2,3),(3,4,5)))'
functx-functx-value-except-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The values in one sequence that aren't in another sequence : : @author W3C XML Query Working Group : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_value-except.html : @param $arg1 the first sequence : @param $arg2 the second sequence :)\n         declare function functx:value-except ( $arg1 as xs:anyAtomicType* , $arg2 as xs:anyAtomicType* ) as xs:anyAtomicType* { distinct-values($arg1[not(.=$arg2)]) } ;\n                    (functx:value-except((1,1,2,3),(2,3))) = 1'
functx-functx-value-except-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The values in one sequence that aren't in another sequence : : @author W3C XML Query Working Group : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_value-except.html : @param $arg1 the first sequence : @param $arg2 the second sequence :)\n         declare function functx:value-except ( $arg1 as xs:anyAtomicType* , $arg2 as xs:anyAtomicType* ) as xs:anyAtomicType* { distinct-values($arg1[not(.=$arg2)]) } ;\n                    (functx:value-except((1,2),(3,4)))'
functx-functx-value-except-4;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The values in one sequence that aren't in another sequence : : @author W3C XML Query Working Group : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_value-except.html : @param $arg1 the first sequence : @param $arg2 the second sequence :)\n         declare function functx:value-except ( $arg1 as xs:anyAtomicType* , $arg2 as xs:anyAtomicType* ) as xs:anyAtomicType* { distinct-values($arg1[not(.=$arg2)]) } ;\n                    (functx:value-except((1,2,2,3),()))'
functx-functx-value-except-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The values in one sequence that aren't in another sequence : : @author W3C XML Query Working Group : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_value-except.html : @param $arg1 the first sequence : @param $arg2 the second sequence :)\n         declare function functx:value-except ( $arg1 as xs:anyAtomicType* , $arg2 as xs:anyAtomicType* ) as xs:anyAtomicType* { distinct-values($arg1[not(.=$arg2)]) } ;\n                    (functx:value-except((1,2,3),(3,4,5)), functx:value-except((1,1,2,3),(2,3)), functx:value-except((1,2),(3,4)), functx:value-except((1,2,2,3),()))'
functx-functx-value-intersect-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The intersection of two sequences of values : : @author W3C XML Query Working Group : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_value-intersect.html : @param $arg1 the first sequence : @param $arg2 the second sequence :)\n         declare function functx:value-intersect ( $arg1 as xs:anyAtomicType* , $arg2 as xs:anyAtomicType* ) as xs:anyAtomicType* { distinct-values($arg1[.=$arg2]) } ;\n                    (functx:value-intersect((1,2),(2,3))) = 2'
functx-functx-value-intersect-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The intersection of two sequences of values : : @author W3C XML Query Working Group : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_value-intersect.html : @param $arg1 the first sequence : @param $arg2 the second sequence :)\n         declare function functx:value-intersect ( $arg1 as xs:anyAtomicType* , $arg2 as xs:anyAtomicType* ) as xs:anyAtomicType* { distinct-values($arg1[.=$arg2]) } ;\n                    (functx:value-intersect((1,2,3),(2,3,4)))'
functx-functx-value-intersect-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The intersection of two sequences of values : : @author W3C XML Query Working Group : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_value-intersect.html : @param $arg1 the first sequence : @param $arg2 the second sequence :)\n         declare function functx:value-intersect ( $arg1 as xs:anyAtomicType* , $arg2 as xs:anyAtomicType* ) as xs:anyAtomicType* { distinct-values($arg1[.=$arg2]) } ;\n                    (functx:value-intersect((1,2,2,3),(2,3)))'
functx-functx-value-intersect-4;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The intersection of two sequences of values : : @author W3C XML Query Working Group : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_value-intersect.html : @param $arg1 the first sequence : @param $arg2 the second sequence :)\n         declare function functx:value-intersect ( $arg1 as xs:anyAtomicType* , $arg2 as xs:anyAtomicType* ) as xs:anyAtomicType* { distinct-values($arg1[.=$arg2]) } ;\n                    (functx:value-intersect((1,2,2,3),()))'
functx-functx-value-intersect-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The intersection of two sequences of values : : @author W3C XML Query Working Group : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_value-intersect.html : @param $arg1 the first sequence : @param $arg2 the second sequence :)\n         declare function functx:value-intersect ( $arg1 as xs:anyAtomicType* , $arg2 as xs:anyAtomicType* ) as xs:anyAtomicType* { distinct-values($arg1[.=$arg2]) } ;\n                    (functx:value-intersect((1,2),(2,3)), functx:value-intersect((1,2,3),(2,3,4)), functx:value-intersect((1,2,2,3),(2,3)), functx:value-intersect((1,2,2,3),()))'
functx-functx-value-union-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The union of two sequences of values : : @author W3C XML Query Working Group : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_value-union.html : @param $arg1 the first sequence : @param $arg2 the second sequence :)\n         declare function functx:value-union ( $arg1 as xs:anyAtomicType* , $arg2 as xs:anyAtomicType* ) as xs:anyAtomicType* { distinct-values(($arg1, $arg2)) } ;\n                    (functx:value-union((1,2),(3,4)))'
functx-functx-value-union-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The union of two sequences of values : : @author W3C XML Query Working Group : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_value-union.html : @param $arg1 the first sequence : @param $arg2 the second sequence :)\n         declare function functx:value-union ( $arg1 as xs:anyAtomicType* , $arg2 as xs:anyAtomicType* ) as xs:anyAtomicType* { distinct-values(($arg1, $arg2)) } ;\n                    (functx:value-union((1,2,3),(2,3,4)))'
functx-functx-value-union-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The union of two sequences of values : : @author W3C XML Query Working Group : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_value-union.html : @param $arg1 the first sequence : @param $arg2 the second sequence :)\n         declare function functx:value-union ( $arg1 as xs:anyAtomicType* , $arg2 as xs:anyAtomicType* ) as xs:anyAtomicType* { distinct-values(($arg1, $arg2)) } ;\n                    (functx:value-union((1,2,2,3),(3,4)))'
functx-functx-value-union-4;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The union of two sequences of values : : @author W3C XML Query Working Group : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_value-union.html : @param $arg1 the first sequence : @param $arg2 the second sequence :)\n         declare function functx:value-union ( $arg1 as xs:anyAtomicType* , $arg2 as xs:anyAtomicType* ) as xs:anyAtomicType* { distinct-values(($arg1, $arg2)) } ;\n                    (functx:value-union((1,2,2,3),()))'
functx-functx-value-union-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The union of two sequences of values : : @author W3C XML Query Working Group : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_value-union.html : @param $arg1 the first sequence : @param $arg2 the second sequence :)\n         declare function functx:value-union ( $arg1 as xs:anyAtomicType* , $arg2 as xs:anyAtomicType* ) as xs:anyAtomicType* { distinct-values(($arg1, $arg2)) } ;\n                    (functx:value-union((1,2),(3,4)), functx:value-union((1,2,3),(2,3,4)), functx:value-union((1,2,2,3),(3,4)), functx:value-union((1,2,2,3),()))'
functx-functx-word-count-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The number of words : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_word-count.html : @param $arg the string to measure :)\n         declare function functx:word-count ( $arg as xs:string? ) as xs:integer { count(tokenize($arg, '\W+')[. != '']) } ;\n                    (functx:word-count('hello there world')) = 3'
functx-functx-word-count-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The number of words : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_word-count.html : @param $arg the string to measure :)\n         declare function functx:word-count ( $arg as xs:string? ) as xs:integer { count(tokenize($arg, '\W+')[. != '']) } ;\n                    (functx:word-count(' hello world ')) = 2'
functx-functx-word-count-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The number of words : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_word-count.html : @param $arg the string to measure :)\n         declare function functx:word-count ( $arg as xs:string? ) as xs:integer { count(tokenize($arg, '\W+')[. != '']) } ;\n                    (functx:word-count('a.b.c')) = 3'
functx-functx-word-count-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The number of words : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_word-count.html : @param $arg the string to measure :)\n         declare function functx:word-count ( $arg as xs:string? ) as xs:integer { count(tokenize($arg, '\W+')[. != '']) } ;\n                    (functx:word-count('hello there world'), functx:word-count(' hello world '), functx:word-count('a.b.c'))'
functx-functx-words-to-camel-case-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Capitalizes the first character of a string : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_capitalize-first.html : @param $arg the word or phrase to capitalize :)\n         declare function functx:capitalize-first ( $arg as xs:string? ) as xs:string? { concat(upper-case(substring($arg,1,1)), substring($arg,2)) } ;\n                    (:~ : Turns a string of words into camelCase : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_words-to-camel-case.html : @param $arg the string to modify :)\n         declare function functx:words-to-camel-case ( $arg as xs:string? ) as xs:string { string-join((tokenize($arg,'\s+')[1], for $word in tokenize($arg,'\s+')[position() >\n                    1] return functx:capitalize-first($word)) ,'') } ;\n                    (functx:words-to-camel-case('this Is A Term'))'
functx-functx-words-to-camel-case-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Capitalizes the first character of a string : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_capitalize-first.html : @param $arg the word or phrase to capitalize :)\n         declare function functx:capitalize-first ( $arg as xs:string? ) as xs:string? { concat(upper-case(substring($arg,1,1)), substring($arg,2)) } ;\n                    (:~ : Turns a string of words into camelCase : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_words-to-camel-case.html : @param $arg the string to modify :)\n         declare function functx:words-to-camel-case ( $arg as xs:string? ) as xs:string { string-join((tokenize($arg,'\s+')[1], for $word in tokenize($arg,'\s+')[position() >\n                    1] return functx:capitalize-first($word)) ,'') } ;\n                    (functx:words-to-camel-case( 'This is a term'))'
functx-functx-words-to-camel-case-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Capitalizes the first character of a string : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_capitalize-first.html : @param $arg the word or phrase to capitalize :)\n         declare function functx:capitalize-first ( $arg as xs:string? ) as xs:string? { concat(upper-case(substring($arg,1,1)), substring($arg,2)) } ;\n                    (:~ : Turns a string of words into camelCase : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_words-to-camel-case.html : @param $arg the string to modify :)\n         declare function functx:words-to-camel-case ( $arg as xs:string? ) as xs:string { string-join((tokenize($arg,'\s+')[1], for $word in tokenize($arg,'\s+')[position() >\n                    1] return functx:capitalize-first($word)) ,'') } ;\n                    (functx:words-to-camel-case('this Is A Term'), functx:words-to-camel-case( 'This is a term'))'
functx-functx-wrap-values-in-elements-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n         declare namespace new = "http://newns";\n                    (:~ : Wraps a sequence of atomic values in XML elements : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_wrap-values-in-elements.html : @param $values the values to wrap in elements : @param $elementName the name of the elements to construct :)\n         declare function functx:wrap-values-in-elements ( $values as xs:anyAtomicType* , $elementName as xs:QName ) as element()* { for $value in $values return element {$elementName} {$value} } ;\n                    (functx:wrap-values-in-elements( (1,2,3), xs:QName('num')))'
functx-functx-wrap-values-in-elements-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n         declare namespace new = "http://newns";\n                    (:~ : Wraps a sequence of atomic values in XML elements : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_wrap-values-in-elements.html : @param $values the values to wrap in elements : @param $elementName the name of the elements to construct :)\n         declare function functx:wrap-values-in-elements ( $values as xs:anyAtomicType* , $elementName as xs:QName ) as element()* { for $value in $values return element {$elementName} {$value} } ;\n                    (functx:wrap-values-in-elements( (1,2,3), xs:QName('new:num')))'
functx-functx-wrap-values-in-elements-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n         declare namespace new = "http://newns";\n                    (:~ : Wraps a sequence of atomic values in XML elements : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_wrap-values-in-elements.html : @param $values the values to wrap in elements : @param $elementName the name of the elements to construct :)\n         declare function functx:wrap-values-in-elements ( $values as xs:anyAtomicType* , $elementName as xs:QName ) as element()* { for $value in $values return element {$elementName} {$value} } ;\n                    (functx:wrap-values-in-elements( (1,2,3), QName('http://newns','num')))'
functx-functx-wrap-values-in-elements-4;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n         declare namespace new = "http://newns";\n                    (:~ : Wraps a sequence of atomic values in XML elements : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_wrap-values-in-elements.html : @param $values the values to wrap in elements : @param $elementName the name of the elements to construct :)\n         declare function functx:wrap-values-in-elements ( $values as xs:anyAtomicType* , $elementName as xs:QName ) as element()* { for $value in $values return element {$elementName} {$value} } ;\n                    (functx:wrap-values-in-elements( (1,2,3), QName('http://newns','new:num')))'
functx-functx-wrap-values-in-elements-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n         declare namespace new = "http://newns";\n                    (:~ : Wraps a sequence of atomic values in XML elements : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_wrap-values-in-elements.html : @param $values the values to wrap in elements : @param $elementName the name of the elements to construct :)\n         declare function functx:wrap-values-in-elements ( $values as xs:anyAtomicType* , $elementName as xs:QName ) as element()* { for $value in $values return element {$elementName} {$value} } ;\n                    (functx:wrap-values-in-elements( (1,2,3), xs:QName('num')), functx:wrap-values-in-elements( (1,2,3), xs:QName('new:num')), functx:wrap-values-in-elements( (1,2,3), QName('http://newns','num')), functx:wrap-values-in-elements( (1,2,3), QName('http://newns','new:num')))'
functx-functx-yearMonthDuration-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The first argument if it is not blank, otherwise the second argument : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_if-empty.html : @param $arg the node that may be empty : @param $value the item(s) to use if the node is empty :)\n         declare function functx:if-empty ( $arg as item()? , $value as item()* ) as item()* { if (string($arg) != '') then data($arg) else $value } ;\n                    (:~ : Construct a yearMonthDuration from a number of years and months : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_yearmonthduration.html : @param $years the number of years : @param $months the number of months :)\n         declare function functx:yearMonthDuration ( $years as xs:decimal? , $months as xs:integer? ) as xs:yearMonthDuration { (xs:yearMonthDuration('P1M') * functx:if-empty($months,0)) + (xs:yearMonthDuration('P1Y') * functx:if-empty($years,0)) } ;\n                    (functx:yearMonthDuration(1,6))'
functx-functx-yearMonthDuration-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The first argument if it is not blank, otherwise the second argument : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_if-empty.html : @param $arg the node that may be empty : @param $value the item(s) to use if the node is empty :)\n         declare function functx:if-empty ( $arg as item()? , $value as item()* ) as item()* { if (string($arg) != '') then data($arg) else $value } ;\n                    (:~ : Construct a yearMonthDuration from a number of years and months : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_yearmonthduration.html : @param $years the number of years : @param $months the number of months :)\n         declare function functx:yearMonthDuration ( $years as xs:decimal? , $months as xs:integer? ) as xs:yearMonthDuration { (xs:yearMonthDuration('P1M') * functx:if-empty($months,0)) + (xs:yearMonthDuration('P1Y') * functx:if-empty($years,0)) } ;\n                    (functx:yearMonthDuration(1.5,0))'
functx-functx-yearMonthDuration-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The first argument if it is not blank, otherwise the second argument : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_if-empty.html : @param $arg the node that may be empty : @param $value the item(s) to use if the node is empty :)\n         declare function functx:if-empty ( $arg as item()? , $value as item()* ) as item()* { if (string($arg) != '') then data($arg) else $value } ;\n                    (:~ : Construct a yearMonthDuration from a number of years and months : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_yearmonthduration.html : @param $years the number of years : @param $months the number of months :)\n         declare function functx:yearMonthDuration ( $years as xs:decimal? , $months as xs:integer? ) as xs:yearMonthDuration { (xs:yearMonthDuration('P1M') * functx:if-empty($months,0)) + (xs:yearMonthDuration('P1Y') * functx:if-empty($years,0)) } ;\n                    (functx:yearMonthDuration(1,()))'
functx-functx-yearMonthDuration-4;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The first argument if it is not blank, otherwise the second argument : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_if-empty.html : @param $arg the node that may be empty : @param $value the item(s) to use if the node is empty :)\n         declare function functx:if-empty ( $arg as item()? , $value as item()* ) as item()* { if (string($arg) != '') then data($arg) else $value } ;\n                    (:~ : Construct a yearMonthDuration from a number of years and months : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_yearmonthduration.html : @param $years the number of years : @param $months the number of months :)\n         declare function functx:yearMonthDuration ( $years as xs:decimal? , $months as xs:integer? ) as xs:yearMonthDuration { (xs:yearMonthDuration('P1M') * functx:if-empty($months,0)) + (xs:yearMonthDuration('P1Y') * functx:if-empty($years,0)) } ;\n                    (functx:yearMonthDuration(1,0))'
functx-functx-yearMonthDuration-5;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The first argument if it is not blank, otherwise the second argument : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_if-empty.html : @param $arg the node that may be empty : @param $value the item(s) to use if the node is empty :)\n         declare function functx:if-empty ( $arg as item()? , $value as item()* ) as item()* { if (string($arg) != '') then data($arg) else $value } ;\n                    (:~ : Construct a yearMonthDuration from a number of years and months : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_yearmonthduration.html : @param $years the number of years : @param $months the number of months :)\n         declare function functx:yearMonthDuration ( $years as xs:decimal? , $months as xs:integer? ) as xs:yearMonthDuration { (xs:yearMonthDuration('P1M') * functx:if-empty($months,0)) + (xs:yearMonthDuration('P1Y') * functx:if-empty($years,0)) } ;\n                    (functx:yearMonthDuration(-1,-3))'
functx-functx-yearMonthDuration-6;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The first argument if it is not blank, otherwise the second argument : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_if-empty.html : @param $arg the node that may be empty : @param $value the item(s) to use if the node is empty :)\n         declare function functx:if-empty ( $arg as item()? , $value as item()* ) as item()* { if (string($arg) != '') then data($arg) else $value } ;\n                    (:~ : Construct a yearMonthDuration from a number of years and months : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_yearmonthduration.html : @param $years the number of years : @param $months the number of months :)\n         declare function functx:yearMonthDuration ( $years as xs:decimal? , $months as xs:integer? ) as xs:yearMonthDuration { (xs:yearMonthDuration('P1M') * functx:if-empty($months,0)) + (xs:yearMonthDuration('P1Y') * functx:if-empty($years,0)) } ;\n                    (functx:yearMonthDuration(-1,3))'
functx-functx-yearMonthDuration-7;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The first argument if it is not blank, otherwise the second argument : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_if-empty.html : @param $arg the node that may be empty : @param $value the item(s) to use if the node is empty :)\n         declare function functx:if-empty ( $arg as item()? , $value as item()* ) as item()* { if (string($arg) != '') then data($arg) else $value } ;\n                    (:~ : Construct a yearMonthDuration from a number of years and months : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_yearmonthduration.html : @param $years the number of years : @param $months the number of months :)\n         declare function functx:yearMonthDuration ( $years as xs:decimal? , $months as xs:integer? ) as xs:yearMonthDuration { (xs:yearMonthDuration('P1M') * functx:if-empty($months,0)) + (xs:yearMonthDuration('P1Y') * functx:if-empty($years,0)) } ;\n                    (functx:yearMonthDuration(0,0))'
functx-functx-yearMonthDuration-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : The first argument if it is not blank, otherwise the second argument : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_if-empty.html : @param $arg the node that may be empty : @param $value the item(s) to use if the node is empty :)\n         declare function functx:if-empty ( $arg as item()? , $value as item()* ) as item()* { if (string($arg) != '') then data($arg) else $value } ;\n                    (:~ : Construct a yearMonthDuration from a number of years and months : : @author Priscilla Walmsley, Datypic : @version 1.0 : @see http://www.xqueryfunctions.com/xq/functx_yearmonthduration.html : @param $years the number of years : @param $months the number of months :)\n         declare function functx:yearMonthDuration ( $years as xs:decimal? , $months as xs:integer? ) as xs:yearMonthDuration { (xs:yearMonthDuration('P1M') * functx:if-empty($months,0)) + (xs:yearMonthDuration('P1Y') * functx:if-empty($years,0)) } ;\n                    (functx:yearMonthDuration(1,6), functx:yearMonthDuration(1.5,0), functx:yearMonthDuration(1,()), functx:yearMonthDuration(1,0), functx:yearMonthDuration(-1,-3), functx:yearMonthDuration(-1,3), functx:yearMonthDuration(0,0))'
functx-functx-yyyyddmm-to-date-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Converts a string with format YYYYDDMM (with any delimiters) to a date : : @author Priscilla Walmsley, Datypic : @version 1.1 : @see http://www.xqueryfunctions.com/xq/functx_yyyyddmm-to-date.html : @param $dateString the YYYYDDMM string :)\n         declare function functx:yyyyddmm-to-date ( $dateString as xs:string? ) as xs:date? { if (empty($dateString)) then () else if (not(matches($dateString, '^\D*(\d{4})\D*(\d{2})\D*(\d{2})\D*$'))) then error(xs:QName('functx:Invalid_Date_Format')) else xs:date(replace($dateString, '^\D*(\d{4})\D*(\d{2})\D*(\d{2})\D*$', '$1-$3-$2')) } ;\n                    (functx:yyyyddmm-to-date('2004-15-12'))'
functx-functx-yyyyddmm-to-date-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Converts a string with format YYYYDDMM (with any delimiters) to a date : : @author Priscilla Walmsley, Datypic : @version 1.1 : @see http://www.xqueryfunctions.com/xq/functx_yyyyddmm-to-date.html : @param $dateString the YYYYDDMM string :)\n         declare function functx:yyyyddmm-to-date ( $dateString as xs:string? ) as xs:date? { if (empty($dateString)) then () else if (not(matches($dateString, '^\D*(\d{4})\D*(\d{2})\D*(\d{2})\D*$'))) then error(xs:QName('functx:Invalid_Date_Format')) else xs:date(replace($dateString, '^\D*(\d{4})\D*(\d{2})\D*(\d{2})\D*$', '$1-$3-$2')) } ;\n                    (functx:yyyyddmm-to-date('20041512'))'
functx-functx-yyyyddmm-to-date-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Converts a string with format YYYYDDMM (with any delimiters) to a date : : @author Priscilla Walmsley, Datypic : @version 1.1 : @see http://www.xqueryfunctions.com/xq/functx_yyyyddmm-to-date.html : @param $dateString the YYYYDDMM string :)\n         declare function functx:yyyyddmm-to-date ( $dateString as xs:string? ) as xs:date? { if (empty($dateString)) then () else if (not(matches($dateString, '^\D*(\d{4})\D*(\d{2})\D*(\d{2})\D*$'))) then error(xs:QName('functx:Invalid_Date_Format')) else xs:date(replace($dateString, '^\D*(\d{4})\D*(\d{2})\D*(\d{2})\D*$', '$1-$3-$2')) } ;\n                    (functx:yyyyddmm-to-date('2004/15/12'))'
functx-functx-yyyyddmm-to-date-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Converts a string with format YYYYDDMM (with any delimiters) to a date : : @author Priscilla Walmsley, Datypic : @version 1.1 : @see http://www.xqueryfunctions.com/xq/functx_yyyyddmm-to-date.html : @param $dateString the YYYYDDMM string :)\n         declare function functx:yyyyddmm-to-date ( $dateString as xs:string? ) as xs:date? { if (empty($dateString)) then () else if (not(matches($dateString, '^\D*(\d{4})\D*(\d{2})\D*(\d{2})\D*$'))) then error(xs:QName('functx:Invalid_Date_Format')) else xs:date(replace($dateString, '^\D*(\d{4})\D*(\d{2})\D*(\d{2})\D*$', '$1-$3-$2')) } ;\n                    (functx:yyyyddmm-to-date('2004-15-12'), functx:yyyyddmm-to-date('20041512'), functx:yyyyddmm-to-date('2004/15/12'))'
functx-functx-yyyymmdd-to-date-1;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Converts a string with format YYYYMMDD (with any delimiters) to a date : : @author Priscilla Walmsley, Datypic : @version 1.1 : @see http://www.xqueryfunctions.com/xq/functx_yyyymmdd-to-date.html : @param $dateString the YYYYMMDD string :)\n         declare function functx:yyyymmdd-to-date ( $dateString as xs:string? ) as xs:date? { if (empty($dateString)) then () else if (not(matches($dateString, '^\D*(\d{4})\D*(\d{2})\D*(\d{2})\D*$'))) then error(xs:QName('functx:Invalid_Date_Format')) else xs:date(replace($dateString, '^\D*(\d{4})\D*(\d{2})\D*(\d{2})\D*$', '$1-$2-$3')) } ;\n                    (functx:yyyymmdd-to-date('2004-12-15'))'
functx-functx-yyyymmdd-to-date-2;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Converts a string with format YYYYMMDD (with any delimiters) to a date : : @author Priscilla Walmsley, Datypic : @version 1.1 : @see http://www.xqueryfunctions.com/xq/functx_yyyymmdd-to-date.html : @param $dateString the YYYYMMDD string :)\n         declare function functx:yyyymmdd-to-date ( $dateString as xs:string? ) as xs:date? { if (empty($dateString)) then () else if (not(matches($dateString, '^\D*(\d{4})\D*(\d{2})\D*(\d{2})\D*$'))) then error(xs:QName('functx:Invalid_Date_Format')) else xs:date(replace($dateString, '^\D*(\d{4})\D*(\d{2})\D*(\d{2})\D*$', '$1-$2-$3')) } ;\n                    (functx:yyyymmdd-to-date('20041215'))'
functx-functx-yyyymmdd-to-date-3;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Converts a string with format YYYYMMDD (with any delimiters) to a date : : @author Priscilla Walmsley, Datypic : @version 1.1 : @see http://www.xqueryfunctions.com/xq/functx_yyyymmdd-to-date.html : @param $dateString the YYYYMMDD string :)\n         declare function functx:yyyymmdd-to-date ( $dateString as xs:string? ) as xs:date? { if (empty($dateString)) then () else if (not(matches($dateString, '^\D*(\d{4})\D*(\d{2})\D*(\d{2})\D*$'))) then error(xs:QName('functx:Invalid_Date_Format')) else xs:date(replace($dateString, '^\D*(\d{4})\D*(\d{2})\D*(\d{2})\D*$', '$1-$2-$3')) } ;\n                    (functx:yyyymmdd-to-date('2004/12/15'))'
functx-functx-yyyymmdd-to-date-all;PRSC Error: Failed to parse query 'declare namespace functx = "http://www.example.com/";\n                    (:~ : Converts a string with format YYYYMMDD (with any delimiters) to a date : : @author Priscilla Walmsley, Datypic : @version 1.1 : @see http://www.xqueryfunctions.com/xq/functx_yyyymmdd-to-date.html : @param $dateString the YYYYMMDD string :)\n         declare function functx:yyyymmdd-to-date ( $dateString as xs:string? ) as xs:date? { if (empty($dateString)) then () else if (not(matches($dateString, '^\D*(\d{4})\D*(\d{2})\D*(\d{2})\D*$'))) then error(xs:QName('functx:Invalid_Date_Format')) else xs:date(replace($dateString, '^\D*(\d{4})\D*(\d{2})\D*(\d{2})\D*$', '$1-$2-$3')) } ;\n                    (functx:yyyymmdd-to-date('2004-12-15'), functx:yyyymmdd-to-date('20041215'), functx:yyyymmdd-to-date('2004/12/15'))'
GenCompEq-10;PRSC Error: Failed to parse query 'declare variable $p external := 276; $p = (1 to 1000)'
GenCompEq-11;PRSC Error: Failed to parse query 'declare variable $p external := -276; (1 to 1000) = $p'
GenCompEq-12;PRSC Error: Failed to parse query 'declare variable $p external := xs:untypedAtomic('000504e0'); $p = (1 to 1000)'
GenCompEq-13;PRSC Error: Failed to parse query 'declare variable $p external := xs:untypedAtomic('4.5'); (1 to 1000) = $p'
GenCompEq-14;PRSC Error: Failed to parse query 'declare variable $p external := 17; $p = (1, 8, 13, 14, 98, -22, 0, 17, 34, 87, 99, 54, 22, 33, 44, 55, 66, 77)'
GenCompEq-15;PRSC Error: Failed to parse query 'declare variable $p external := -101; (1, 8, 13, 14, 98, -22, 0, 17, 34, 87, 99, 54, 22, 33, 44, 55, 66, 77) = $p'
GenCompEq-16;PRSC Error: Failed to parse query 'declare variable $p external := xs:untypedAtomic('-840'); $p = (1, 8, 13, 14, 98, -22, 0, 17, 34, 87, 99, 54, 22, 33, 44, 55, 66, 77)'
GenCompEq-17;PRSC Error: Failed to parse query 'declare variable $p external := xs:untypedAtomic('-022e0'); (1, 8, 13, 14, 98, -22, 0, 17, 34, 87, 99, 54, 22, 33, 44, 55, 66, 77) = $p'
GenCompEq-18;PRSC Error: Failed to parse query 'declare variable $p external := (105, 22e0); $p = (1, 8, 13, 14, 98, -22, 0, 17, 34, 87, 99, 54, 22, 33, 44, 55, 66, 77)'
GenCompEq-19;PRSC Error: Failed to parse query 'declare variable $p external := (105, xs:untypedAtomic('22e0')); (1, 8, 13, 14, 98, -22, 0, 17, 34, 87, 99, 54, 22, 33, 44, 55, 66, 77) = $p'
GenCompEq-2;Atomic Value for XsNcName is not implemented yet.
GenCompEq-20;PRSC Error: Failed to parse query 'declare variable $p external := xs:untypedAtomic('000504e0'); $p = (1 to xs:integer(xs:double($p)))'
GenCompEq-21;PRSC Error: Failed to parse query 'declare variable $p external := xs:untypedAtomic('860302'); (1 to xs:integer($p)) = $p'
GenCompEq-22;PRSC Error: Failed to parse query '\n        declare namespace z = "http://example.com/z";\n        declare variable $p external := xs:untypedAtomic('z:local'); \n        $p = (<xs:element/>, <z:local/>, <fn:function/>)!node-name(.)\n       '
GenCompEq-23;PRSC Error: Failed to parse query '\n        declare variable $p external := (1 to 10, xs:untypedAtomic('860302'), 83); \n        $p = (35 to 65, xs:untypedAtomic('082'), xs:untypedAtomic('0010'))'
GenCompEq-26;PRSC Error: Failed to parse query '\n         import schema namespace myType="http://www.w3.org/XQueryTest/userDefinedTypes"; \n         myType:hatsize(5) = myType:integer-or-nothing(5)'
GenCompEq-27;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         import schema namespace myType="http://www.w3.org/XQueryTest/userDefinedTypes"; \n         myType:hatsize(5) = myType:integer-or-nothing("")'
GenCompEq-3;Input string was not in a correct format.
GenCompEq-5;Expected XPath xs:untypedAtomic("P1999Y10M") = xs:yearMonthDuration("P1999Y10M") to resolve to true
GenCompEq-7;PRSC Error: Failed to parse query '[3, 4, 5] = 4'
GenCompEq-8;PRSC Error: Failed to parse query '[[3, 4], 5] = [4, [5, 6]]'
GenCompEq-9;PRSC Error: Failed to parse query '[3, 4, 5] = []'
GenCompLT-10;PRSC Error: Failed to parse query '[[3, 4], 5] < [4, [5, 6]]'
GenCompLT-11;PRSC Error: Failed to parse query '[3, 4, 5] < []'
GenCompLT-9;PRSC Error: Failed to parse query '[3, 4, 5] < 4'
generalexpression104;PRSC Error: Failed to parse query '() != <a>10000</a>'
generalexpression105;PRSC Error: Failed to parse query '() != (<a>10000</a>)'
generalexpression106;PRSC Error: Failed to parse query '() != (<a>10000</a>,<b>50000</b>)'
generalexpression113;PRSC Error: Failed to parse query '10000 != <a>10000</a>'
generalexpression114;PRSC Error: Failed to parse query '10000 != (<a>10000</a>)'
generalexpression115;PRSC Error: Failed to parse query '10000 != (<a>10000</a>,<b>50000</b>)'
generalexpression123;PRSC Error: Failed to parse query '(50000) != <a>10000</a>'
generalexpression124;PRSC Error: Failed to parse query '(50000) != (<a>10000</a>)'
generalexpression125;PRSC Error: Failed to parse query '(50000) != (<a>10000</a>,<b>50000</b>)'
generalexpression133;PRSC Error: Failed to parse query '(10000,50000) != <a>10000</a>'
generalexpression134;PRSC Error: Failed to parse query '(10000,50000) != (<a>10000</a>)'
generalexpression135;PRSC Error: Failed to parse query '(10000,50000) != (<a>10000</a>,<b>50000</b>)'
generalexpression139;PRSC Error: Failed to parse query '<a>10000</a> != ()'
generalexpression14;PRSC Error: Failed to parse query '10000 = <a>10000</a>'
generalexpression140;PRSC Error: Failed to parse query '<a>10000</a> != 10000'
generalexpression141;PRSC Error: Failed to parse query '<a>10000</a> != (50000)'
generalexpression142;PRSC Error: Failed to parse query '<a>10000</a> != (10000,50000)'
generalexpression143;PRSC Error: Failed to parse query '<a>10000</a> != <a>10000</a>'
generalexpression144;PRSC Error: Failed to parse query '<a>10000</a> != (<a>10000</a>)'
generalexpression145;PRSC Error: Failed to parse query '<a>10000</a> != (<a>10000</a>,<b>50000</b>)'
generalexpression146;PRSC Error: Failed to parse query '<a>10000</a> != (/works/employee[1]/hours[1])'
generalexpression147;PRSC Error: Failed to parse query '<a>10000</a> != (/works/employee[1]/hours[1],/works/employee[6]/hours[1])'
generalexpression148;PRSC Error: Failed to parse query '<a>10000</a> != ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])'
generalexpression149;PRSC Error: Failed to parse query '(<a>10000</a>) != ()'
generalexpression15;PRSC Error: Failed to parse query '10000 = (<a>10000</a>)'
generalexpression150;PRSC Error: Failed to parse query '(<a>10000</a>) != 10000'
generalexpression151;PRSC Error: Failed to parse query '(<a>10000</a>) != (50000)'
generalexpression152;PRSC Error: Failed to parse query '(<a>10000</a>) != (10000,50000)'
generalexpression153;PRSC Error: Failed to parse query '(<a>10000</a>) != <a>10000</a>'
generalexpression154;PRSC Error: Failed to parse query '(<a>10000</a>) != (<a>10000</a>)'
generalexpression155;PRSC Error: Failed to parse query '(<a>10000</a>) != (<a>10000</a>,<b>50000</b>)'
generalexpression156;PRSC Error: Failed to parse query '(<a>10000</a>) != (/works/employee[1]/hours[1])'
generalexpression157;PRSC Error: Failed to parse query '(<a>10000</a>) != (/works/employee[1]/hours[1],/works/employee[6]/hours[1])'
generalexpression158;PRSC Error: Failed to parse query '(<a>10000</a>) != ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])'
generalexpression159;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) != ()'
generalexpression16;PRSC Error: Failed to parse query '10000 = (<a>10000</a>,<b>50000</b>)'
generalexpression160;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) != 10000'
generalexpression161;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) != (50000)'
generalexpression162;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) != (10000,50000)'
generalexpression163;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) != <a>10000</a>'
generalexpression164;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) != (<a>10000</a>)'
generalexpression165;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) != (<a>10000</a>,<b>50000</b>)'
generalexpression166;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) != (/works/employee[1]/hours[1])'
generalexpression167;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) != (/works/employee[1]/hours[1],/works/employee[6]/hours[1])'
generalexpression168;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) != ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])'
generalexpression173;PRSC Error: Failed to parse query '(/works/employee[1]/hours[1]) != <a>10000</a>'
generalexpression174;PRSC Error: Failed to parse query '(/works/employee[1]/hours[1]) != (<a>10000</a>)'
generalexpression175;PRSC Error: Failed to parse query '(/works/employee[1]/hours[1]) != (<a>10000</a>,<b>50000</b>)'
generalexpression183;PRSC Error: Failed to parse query '(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) != <a>10000</a>'
generalexpression184;PRSC Error: Failed to parse query '(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) != (<a>10000</a>)'
generalexpression185;PRSC Error: Failed to parse query '(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) != (<a>10000</a>,<b>50000</b>)'
generalexpression193;PRSC Error: Failed to parse query '($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) != <a>10000</a>'
generalexpression194;PRSC Error: Failed to parse query '($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) != (<a>10000</a>)'
generalexpression195;PRSC Error: Failed to parse query '($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) != (<a>10000</a>,<b>50000</b>)'
generalexpression203;PRSC Error: Failed to parse query '() < <a>10000</a>'
generalexpression204;PRSC Error: Failed to parse query '() < (<a>10000</a>)'
generalexpression205;PRSC Error: Failed to parse query '() < (<a>10000</a>,<b>50000</b>)'
generalexpression212;PRSC Error: Failed to parse query '10000 < <a>10000</a>'
generalexpression213;PRSC Error: Failed to parse query '10000 < (<a>10000</a>)'
generalexpression214;PRSC Error: Failed to parse query '10000 < (<a>10000</a>,<b>50000</b>)'
generalexpression222;PRSC Error: Failed to parse query '(50000) < <a>10000</a>'
generalexpression223;PRSC Error: Failed to parse query '(50000) < (<a>10000</a>)'
generalexpression224;PRSC Error: Failed to parse query '(50000) < (<a>10000</a>,<b>50000</b>)'
generalexpression232;PRSC Error: Failed to parse query '(10000,50000) < <a>10000</a>'
generalexpression233;PRSC Error: Failed to parse query '(10000,50000) < (<a>10000</a>)'
generalexpression234;PRSC Error: Failed to parse query '(10000,50000) < (<a>10000</a>,<b>50000</b>)'
generalexpression238;PRSC Error: Failed to parse query '<a>10000</a> < ()'
generalexpression239;PRSC Error: Failed to parse query '<a>10000</a> < 10000'
generalexpression24;PRSC Error: Failed to parse query '(50000) = <a>10000</a>'
generalexpression240;PRSC Error: Failed to parse query '<a>10000</a> < (50000)'
generalexpression241;PRSC Error: Failed to parse query '<a>10000</a> < (10000,50000)'
generalexpression242;PRSC Error: Failed to parse query '<a>10000</a> < <a>10000</a>'
generalexpression243;PRSC Error: Failed to parse query '<a>10000</a> < (<a>10000</a>)'
generalexpression244;PRSC Error: Failed to parse query '<a>10000</a> < (<a>10000</a>,<b>50000</b>)'
generalexpression245;PRSC Error: Failed to parse query '<a>10000</a> < (/works/employee[1]/hours[1])'
generalexpression246;PRSC Error: Failed to parse query '<a>10000</a> < (/works/employee[1]/hours[1],/works/employee[6]/hours[1])'
generalexpression247;PRSC Error: Failed to parse query '\n         <a>10000</a> < ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])'
generalexpression248;PRSC Error: Failed to parse query '(<a>10000</a>) < ()'
generalexpression249;PRSC Error: Failed to parse query '(<a>10000</a>) < 10000'
generalexpression25;PRSC Error: Failed to parse query '(50000) = (<a>10000</a>)'
generalexpression250;PRSC Error: Failed to parse query '(<a>10000</a>) < (50000)'
generalexpression251;PRSC Error: Failed to parse query '(<a>10000</a>) < (10000,50000)'
generalexpression252;PRSC Error: Failed to parse query '(<a>10000</a>) < <a>10000</a>'
generalexpression253;PRSC Error: Failed to parse query '(<a>10000</a>) < (<a>10000</a>)'
generalexpression254;PRSC Error: Failed to parse query '(<a>10000</a>) < (<a>10000</a>,<b>50000</b>)'
generalexpression255;PRSC Error: Failed to parse query '(<a>10000</a>) < (/works/employee[1]/hours[1])'
generalexpression256;PRSC Error: Failed to parse query '(<a>10000</a>) < (/works/employee[1]/hours[1],/works/employee[6]/hours[1])'
generalexpression257;PRSC Error: Failed to parse query '\n         (<a>10000</a>) < ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])'
generalexpression258;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) < ()'
generalexpression259;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) < 10000'
generalexpression26;PRSC Error: Failed to parse query '(50000) = (<a>10000</a>,<b>50000</b>)'
generalexpression260;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) < (50000)'
generalexpression261;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) < (10000,50000)'
generalexpression262;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) < <a>10000</a>'
generalexpression263;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) < (<a>10000</a>)'
generalexpression264;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) < (<a>10000</a>,<b>50000</b>)'
generalexpression265;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) < (/works/employee[1]/hours[1])'
generalexpression266;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) < (/works/employee[1]/hours[1],/works/employee[6]/hours[1])'
generalexpression267;PRSC Error: Failed to parse query '(\n         <a>10000</a>,<b>50000</b>) < ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])'
generalexpression272;PRSC Error: Failed to parse query '(/works/employee[1]/hours[1]) < <a>10000</a>'
generalexpression273;PRSC Error: Failed to parse query '(/works/employee[1]/hours[1]) < (<a>10000</a>)'
generalexpression274;PRSC Error: Failed to parse query '(/works/employee[1]/hours[1]) < (<a>10000</a>,<b>50000</b>)'
generalexpression282;PRSC Error: Failed to parse query '(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) < <a>10000</a>'
generalexpression283;PRSC Error: Failed to parse query '(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) < (<a>10000</a>)'
generalexpression284;PRSC Error: Failed to parse query '(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) < (<a>10000</a>,<b>50000</b>)'
generalexpression292;PRSC Error: Failed to parse query '($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) < <a>10000</a>'
generalexpression293;PRSC Error: Failed to parse query '($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) < (<a>10000</a>)'
generalexpression294;PRSC Error: Failed to parse query '($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) < (<a>10000</a>,<b>50000</b>)'
generalexpression302;PRSC Error: Failed to parse query '() <= <a>10000</a>'
generalexpression303;PRSC Error: Failed to parse query '() <= (<a>10000</a>)'
generalexpression304;PRSC Error: Failed to parse query '() <= (<a>10000</a>,<b>50000</b>)'
generalexpression311;PRSC Error: Failed to parse query '10000 <= <a>10000</a>'
generalexpression312;PRSC Error: Failed to parse query '10000 <= (<a>10000</a>)'
generalexpression313;PRSC Error: Failed to parse query '10000 <= (<a>10000</a>,<b>50000</b>)'
generalexpression321;PRSC Error: Failed to parse query '(50000) <= <a>10000</a>'
generalexpression322;PRSC Error: Failed to parse query '(50000) <= (<a>10000</a>)'
generalexpression323;PRSC Error: Failed to parse query '(50000) <= (<a>10000</a>,<b>50000</b>)'
generalexpression331;PRSC Error: Failed to parse query '(10000,50000) <= <a>10000</a>'
generalexpression332;PRSC Error: Failed to parse query '(10000,50000) <= (<a>10000</a>)'
generalexpression333;PRSC Error: Failed to parse query '(10000,50000) <= (<a>10000</a>,<b>50000</b>)'
generalexpression337;PRSC Error: Failed to parse query '<a>10000</a> <= ()'
generalexpression338;PRSC Error: Failed to parse query '<a>10000</a> <= 10000'
generalexpression339;PRSC Error: Failed to parse query '<a>10000</a> <= (50000)'
generalexpression34;PRSC Error: Failed to parse query '(10000,50000) = <a>10000</a>'
generalexpression340;PRSC Error: Failed to parse query '<a>10000</a> <= (10000,50000)'
generalexpression341;PRSC Error: Failed to parse query '<a>10000</a> <= <a>10000</a>'
generalexpression342;PRSC Error: Failed to parse query '<a>10000</a> <= (<a>10000</a>)'
generalexpression343;PRSC Error: Failed to parse query '<a>10000</a> <= (<a>10000</a>,<b>50000</b>)'
generalexpression344;PRSC Error: Failed to parse query '<a>10000</a> <= (/works/employee[1]/hours[1])'
generalexpression345;PRSC Error: Failed to parse query '<a>10000</a> <= (/works/employee[1]/hours[1],/works/employee[6]/hours[1])'
generalexpression346;PRSC Error: Failed to parse query '<a>10000</a> <= ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])'
generalexpression347;PRSC Error: Failed to parse query '(<a>10000</a>) <= ()'
generalexpression348;PRSC Error: Failed to parse query '(<a>10000</a>) <= 10000'
generalexpression349;PRSC Error: Failed to parse query '(<a>10000</a>) <= (50000)'
generalexpression35;PRSC Error: Failed to parse query '(10000,50000) = (<a>10000</a>)'
generalexpression350;PRSC Error: Failed to parse query '(<a>10000</a>) <= (10000,50000)'
generalexpression351;PRSC Error: Failed to parse query '(<a>10000</a>) <= <a>10000</a>'
generalexpression352;PRSC Error: Failed to parse query '(<a>10000</a>) <= (<a>10000</a>)'
generalexpression353;PRSC Error: Failed to parse query '(<a>10000</a>) <= (<a>10000</a>,<b>50000</b>)'
generalexpression354;PRSC Error: Failed to parse query '(<a>10000</a>) <= (/works/employee[1]/hours[1])'
generalexpression355;PRSC Error: Failed to parse query '(<a>10000</a>) <= (/works/employee[1]/hours[1],/works/employee[6]/hours[1])'
generalexpression356;PRSC Error: Failed to parse query '(<a>10000</a>) <= ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])'
generalexpression357;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) <= ()'
generalexpression358;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) <= 10000'
generalexpression359;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) <= (50000)'
generalexpression36;PRSC Error: Failed to parse query '(10000,50000) = (<a>10000</a>,<b>50000</b>)'
generalexpression360;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) <= (10000,50000)'
generalexpression361;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) <= <a>10000</a>'
generalexpression362;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) <= (<a>10000</a>)'
generalexpression363;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) <= (<a>10000</a>,<b>50000</b>)'
generalexpression364;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) <= (/works/employee[1]/hours[1])'
generalexpression365;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) <= (/works/employee[1]/hours[1],/works/employee[6]/hours[1])'
generalexpression366;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) <= ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])'
generalexpression371;PRSC Error: Failed to parse query '(/works/employee[1]/hours[1]) <= <a>10000</a>'
generalexpression372;PRSC Error: Failed to parse query '(/works/employee[1]/hours[1]) <= (<a>10000</a>)'
generalexpression373;PRSC Error: Failed to parse query '(/works/employee[1]/hours[1]) <= (<a>10000</a>,<b>50000</b>)'
generalexpression381;PRSC Error: Failed to parse query '(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) <= <a>10000</a>'
generalexpression382;PRSC Error: Failed to parse query '(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) <= (<a>10000</a>)'
generalexpression383;PRSC Error: Failed to parse query '(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) <= (<a>10000</a>,<b>50000</b>)'
generalexpression391;PRSC Error: Failed to parse query '($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) <= <a>10000</a>'
generalexpression392;PRSC Error: Failed to parse query '($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) <= (<a>10000</a>)'
generalexpression393;PRSC Error: Failed to parse query '($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) <= (<a>10000</a>,<b>50000</b>)'
generalexpression40;PRSC Error: Failed to parse query '<a>10000</a> = ()'
generalexpression401;PRSC Error: Failed to parse query '() > <a>10000</a>'
generalexpression402;PRSC Error: Failed to parse query '() > (<a>10000</a>)'
generalexpression403;PRSC Error: Failed to parse query '() > (<a>10000</a>,<b>50000</b>)'
generalexpression41;PRSC Error: Failed to parse query '<a>10000</a> = 10000'
generalexpression410;PRSC Error: Failed to parse query '10000 > <a>10000</a>'
generalexpression411;PRSC Error: Failed to parse query '10000 > (<a>10000</a>)'
generalexpression412;PRSC Error: Failed to parse query '10000 > (<a>10000</a>,<b>50000</b>)'
generalexpression42;PRSC Error: Failed to parse query '<a>10000</a> = (50000)'
generalexpression420;PRSC Error: Failed to parse query '(50000) > <a>10000</a>'
generalexpression421;PRSC Error: Failed to parse query '(50000) > (<a>10000</a>)'
generalexpression422;PRSC Error: Failed to parse query '(50000) > (<a>10000</a>,<b>50000</b>)'
generalexpression43;PRSC Error: Failed to parse query '<a>10000</a> = (10000,50000)'
generalexpression430;PRSC Error: Failed to parse query '(10000,50000) > <a>10000</a>'
generalexpression431;PRSC Error: Failed to parse query '(10000,50000) > (<a>10000</a>)'
generalexpression432;PRSC Error: Failed to parse query '(10000,50000) > (<a>10000</a>,<b>50000</b>)'
generalexpression436;PRSC Error: Failed to parse query '<a>10000</a> > ()'
generalexpression437;PRSC Error: Failed to parse query '<a>10000</a> > 10000'
generalexpression438;PRSC Error: Failed to parse query '<a>10000</a> > (50000)'
generalexpression439;PRSC Error: Failed to parse query '<a>10000</a> > (10000,50000)'
generalexpression44;PRSC Error: Failed to parse query '<a>10000</a> = <a>10000</a>'
generalexpression440;PRSC Error: Failed to parse query '<a>10000</a> > <a>10000</a>'
generalexpression441;PRSC Error: Failed to parse query '<a>10000</a> > (<a>10000</a>)'
generalexpression442;PRSC Error: Failed to parse query '<a>10000</a> > (<a>10000</a>,<b>50000</b>)'
generalexpression443;PRSC Error: Failed to parse query '<a>10000</a> > (/works/employee[1]/hours[1])'
generalexpression444;PRSC Error: Failed to parse query '<a>10000</a> > (/works/employee[1]/hours[1],/works/employee[6]/hours[1])'
generalexpression445;PRSC Error: Failed to parse query '<a>10000</a> > ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])'
generalexpression446;PRSC Error: Failed to parse query '(<a>10000</a>) > ()'
generalexpression447;PRSC Error: Failed to parse query '(<a>10000</a>) > 10000'
generalexpression448;PRSC Error: Failed to parse query '(<a>10000</a>) > (50000)'
generalexpression449;PRSC Error: Failed to parse query '(<a>10000</a>) > (10000,50000)'
generalexpression45;PRSC Error: Failed to parse query '<a>10000</a> = (<a>10000</a>)'
generalexpression450;PRSC Error: Failed to parse query '(<a>10000</a>) > <a>10000</a>'
generalexpression451;PRSC Error: Failed to parse query '(<a>10000</a>) > (<a>10000</a>)'
generalexpression452;PRSC Error: Failed to parse query '(<a>10000</a>) > (<a>10000</a>,<b>50000</b>)'
generalexpression453;PRSC Error: Failed to parse query '(<a>10000</a>) > (/works/employee[1]/hours[1])'
generalexpression454;PRSC Error: Failed to parse query '(<a>10000</a>) > (/works/employee[1]/hours[1],/works/employee[6]/hours[1])'
generalexpression455;PRSC Error: Failed to parse query '(<a>10000</a>) > ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])'
generalexpression456;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) > ()'
generalexpression457;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) > 10000'
generalexpression458;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) > (50000)'
generalexpression459;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) > (10000,50000)'
generalexpression46;PRSC Error: Failed to parse query '<a>10000</a> = (<a>10000</a>,<b>50000</b>)'
generalexpression460;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) > <a>10000</a>'
generalexpression461;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) > (<a>10000</a>)'
generalexpression462;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) > (<a>10000</a>,<b>50000</b>)'
generalexpression463;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) > (/works/employee[1]/hours[1])'
generalexpression464;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) > (/works/employee[1]/hours[1],/works/employee[6]/hours[1])'
generalexpression465;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) > ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])'
generalexpression47;PRSC Error: Failed to parse query '<a>10000</a> = (/works/employee[1]/hours[1])'
generalexpression470;PRSC Error: Failed to parse query '(/works/employee[1]/hours[1]) > <a>10000</a>'
generalexpression471;PRSC Error: Failed to parse query '(/works/employee[1]/hours[1]) > (<a>10000</a>)'
generalexpression472;PRSC Error: Failed to parse query '(/works/employee[1]/hours[1]) > (<a>10000</a>,<b>50000</b>)'
generalexpression48;PRSC Error: Failed to parse query '<a>10000</a> = (/works/employee[1]/hours[1],/works/employee[6]/hours[1])'
generalexpression480;PRSC Error: Failed to parse query '(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) > <a>10000</a>'
generalexpression481;PRSC Error: Failed to parse query '(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) > (<a>10000</a>)'
generalexpression482;PRSC Error: Failed to parse query '(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) > (<a>10000</a>,<b>50000</b>)'
generalexpression49;PRSC Error: Failed to parse query '<a>10000</a> = ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])'
generalexpression490;PRSC Error: Failed to parse query '($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) > <a>10000</a>'
generalexpression491;PRSC Error: Failed to parse query '($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) > (<a>10000</a>)'
generalexpression492;PRSC Error: Failed to parse query '($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) > (<a>10000</a>,<b>50000</b>)'
generalexpression5;PRSC Error: Failed to parse query '() = <a>10000</a>'
generalexpression50;PRSC Error: Failed to parse query '(<a>10000</a>) = ()'
generalexpression500;PRSC Error: Failed to parse query '() >= <a>10000</a>'
generalexpression501;PRSC Error: Failed to parse query '() >= (<a>10000</a>)'
generalexpression502;PRSC Error: Failed to parse query '() >= (<a>10000</a>,<b>50000</b>)'
generalexpression509;PRSC Error: Failed to parse query '10000 >= <a>10000</a>'
generalexpression51;PRSC Error: Failed to parse query '(<a>10000</a>) = 10000'
generalexpression510;PRSC Error: Failed to parse query '10000 >= (<a>10000</a>)'
generalexpression511;PRSC Error: Failed to parse query '10000 >= (<a>10000</a>,<b>50000</b>)'
generalexpression519;PRSC Error: Failed to parse query '(50000) >= <a>10000</a>'
generalexpression52;PRSC Error: Failed to parse query '(<a>10000</a>) = (50000)'
generalexpression520;PRSC Error: Failed to parse query '(50000) >= (<a>10000</a>)'
generalexpression521;PRSC Error: Failed to parse query '(50000) >= (<a>10000</a>,<b>50000</b>)'
generalexpression529;PRSC Error: Failed to parse query '(10000,50000) >= <a>10000</a>'
generalexpression53;PRSC Error: Failed to parse query '(<a>10000</a>) = (10000,50000)'
generalexpression530;PRSC Error: Failed to parse query '(10000,50000) >= (<a>10000</a>)'
generalexpression531;PRSC Error: Failed to parse query '(10000,50000) >= (<a>10000</a>,<b>50000</b>)'
generalexpression535;PRSC Error: Failed to parse query '<a>10000</a> >= ()'
generalexpression536;PRSC Error: Failed to parse query '<a>10000</a> >= 10000'
generalexpression537;PRSC Error: Failed to parse query '<a>10000</a> >= (50000)'
generalexpression538;PRSC Error: Failed to parse query '<a>10000</a> >= (10000,50000)'
generalexpression539;PRSC Error: Failed to parse query '<a>10000</a> >= <a>10000</a>'
generalexpression54;PRSC Error: Failed to parse query '(<a>10000</a>) = <a>10000</a>'
generalexpression540;PRSC Error: Failed to parse query '<a>10000</a> >= (<a>10000</a>)'
generalexpression541;PRSC Error: Failed to parse query '<a>10000</a> >= (<a>10000</a>,<b>50000</b>)'
generalexpression542;PRSC Error: Failed to parse query '<a>10000</a> >= (/works/employee[1]/hours[1])'
generalexpression543;PRSC Error: Failed to parse query '<a>10000</a> >= (/works/employee[1]/hours[1],/works/employee[6]/hours[1])'
generalexpression544;PRSC Error: Failed to parse query '<a>10000</a> >= ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])'
generalexpression545;PRSC Error: Failed to parse query '(<a>10000</a>) >= ()'
generalexpression546;PRSC Error: Failed to parse query '(<a>10000</a>) >= 10000'
generalexpression547;PRSC Error: Failed to parse query '(<a>10000</a>) >= (50000)'
generalexpression548;PRSC Error: Failed to parse query '(<a>10000</a>) >= (10000,50000)'
generalexpression549;PRSC Error: Failed to parse query '(<a>10000</a>) >= <a>10000</a>'
generalexpression55;PRSC Error: Failed to parse query '(<a>10000</a>) = (<a>10000</a>)'
generalexpression550;PRSC Error: Failed to parse query '(<a>10000</a>) >= (<a>10000</a>)'
generalexpression551;PRSC Error: Failed to parse query '(<a>10000</a>) >= (<a>10000</a>,<b>50000</b>)'
generalexpression552;PRSC Error: Failed to parse query '(<a>10000</a>) >= (/works/employee[1]/hours[1])'
generalexpression553;PRSC Error: Failed to parse query '(<a>10000</a>) >= (/works/employee[1]/hours[1],/works/employee[6]/hours[1])'
generalexpression554;PRSC Error: Failed to parse query '(<a>10000</a>) >= ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])'
generalexpression555;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) >= ()'
generalexpression556;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) >= 10000'
generalexpression557;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) >= (50000)'
generalexpression558;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) >= (10000,50000)'
generalexpression559;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) >= <a>10000</a>'
generalexpression56;PRSC Error: Failed to parse query '(<a>10000</a>) = (<a>10000</a>,<b>50000</b>)'
generalexpression560;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) >= (<a>10000</a>)'
generalexpression561;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) >= (<a>10000</a>,<b>50000</b>)'
generalexpression562;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) >= (/works/employee[1]/hours[1])'
generalexpression563;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) >= (/works/employee[1]/hours[1],/works/employee[6]/hours[1])'
generalexpression564;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) >= ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])'
generalexpression569;PRSC Error: Failed to parse query '(/works/employee[1]/hours[1]) >= <a>10000</a>'
generalexpression57;PRSC Error: Failed to parse query '(<a>10000</a>) = (/works/employee[1]/hours[1])'
generalexpression570;PRSC Error: Failed to parse query '(/works/employee[1]/hours[1]) >= (<a>10000</a>)'
generalexpression571;PRSC Error: Failed to parse query '(/works/employee[1]/hours[1]) >= (<a>10000</a>,<b>50000</b>)'
generalexpression579;PRSC Error: Failed to parse query '(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) >= <a>10000</a>'
generalexpression58;PRSC Error: Failed to parse query '(<a>10000</a>) = (/works/employee[1]/hours[1],/works/employee[6]/hours[1])'
generalexpression580;PRSC Error: Failed to parse query '(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) >= (<a>10000</a>)'
generalexpression581;PRSC Error: Failed to parse query '(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) >= (<a>10000</a>,<b>50000</b>)'
generalexpression589;PRSC Error: Failed to parse query '($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) >= <a>10000</a>'
generalexpression59;PRSC Error: Failed to parse query '(<a>10000</a>) = ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])'
generalexpression590;PRSC Error: Failed to parse query '($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) >= (<a>10000</a>)'
generalexpression591;PRSC Error: Failed to parse query '($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) >= (<a>10000</a>,<b>50000</b>)'
generalexpression6;PRSC Error: Failed to parse query '() = (<a>10000</a>)'
generalexpression60;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) = ()'
generalexpression61;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) = 10000'
generalexpression62;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) = (50000)'
generalexpression63;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) = (10000,50000)'
generalexpression64;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) = <a>10000</a>'
generalexpression65;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) = (<a>10000</a>)'
generalexpression66;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) = (<a>10000</a>,<b>50000</b>)'
generalexpression67;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) = (/works/employee[1]/hours[1])'
generalexpression68;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) = (/works/employee[1]/hours[1],/works/employee[6]/hours[1])'
generalexpression69;PRSC Error: Failed to parse query '(<a>10000</a>,<b>50000</b>) = ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])'
generalexpression7;PRSC Error: Failed to parse query '() = (<a>10000</a>,<b>50000</b>)'
generalexpression74;PRSC Error: Failed to parse query '(/works/employee[1]/hours[1]) = <a>10000</a>'
generalexpression75;PRSC Error: Failed to parse query '(/works/employee[1]/hours[1]) = (<a>10000</a>)'
generalexpression76;PRSC Error: Failed to parse query '(/works/employee[1]/hours[1]) = (<a>10000</a>,<b>50000</b>)'
generalexpression84;PRSC Error: Failed to parse query '(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) = <a>10000</a>'
generalexpression85;PRSC Error: Failed to parse query '(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) = (<a>10000</a>)'
generalexpression86;PRSC Error: Failed to parse query '(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) = (<a>10000</a>,<b>50000</b>)'
generalexpression94;PRSC Error: Failed to parse query '($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) = <a>10000</a>'
generalexpression95;PRSC Error: Failed to parse query '($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) = (<a>10000</a>)'
generalexpression96;PRSC Error: Failed to parse query '($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) = (<a>10000</a>,<b>50000</b>)'
generate-id-000;PRSC Error: Failed to parse query '(generate-id(())) instance of $xs:string'
generate-id-001;The function generate-id with arity 1 is not registered.
generate-id-002;The function generate-id with arity 1 is not registered.
generate-id-003;The function generate-id with arity 1 is not registered.
generate-id-004;The function generate-id with arity 1 is not registered.
generate-id-005;The function generate-id with arity 1 is not registered.
generate-id-006;The function generate-id with arity 1 is not registered.
generate-id-007;PRSC Error: Failed to parse query 'let $result := (generate-id((//namespace::*)[1])) return matches($result, '^[A-Za-z][A-Za-z0-9]*$')'
generate-id-008;The function generate-id with arity 0 is not registered.
generate-id-009;The function generate-id with arity 0 is not registered.
generate-id-010;The function generate-id with arity 0 is not registered.
generate-id-011;PRSC Error: Failed to parse query 'let $nodes := //*/(@* | namespace::*) \n            return count($nodes) eq count(distinct-values($nodes/generate-id()))'
generate-id-012;The function collection with arity 0 is not registered.
generate-id-013;The function collection with arity 0 is not registered.
generate-id-014;PRSC Error: Failed to parse query 'let $result := (\n        import module namespace copy="http://www.w3.org/QT3/copy";\n        generate-id(copy:copy(/*))\n      ) return matches($result, '^[A-Za-z][A-Za-z0-9]*$')'
generate-id-015;PRSC Error: Failed to parse query 'let $result := (\n        import module namespace copy="http://www.w3.org/QT3/copy";\n        generate-id(copy:copy((//@*)[1]))\n      ) return matches($result, '^[A-Za-z][A-Za-z0-9]*$')'
generate-id-016;PRSC Error: Failed to parse query '\n        import module namespace copy="http://www.w3.org/QT3/copy";\n        generate-id(copy:copy(/*)) eq generate-id(/*)\n      '
generate-id-017;PRSC Error: Failed to parse query '\n        import module namespace copy="http://www.w3.org/QT3/copy";\n        let $att := (//@*)[1] return generate-id(copy:copy($att)) eq generate-id($att)\n      '
generate-id-018;The function generate-id with arity 1 is not registered.
generate-id-019;The function generate-id with arity 0 is not registered.
generate-id-020;PRSC Error: Failed to parse query '\n         let $nodes := (<a lang='de' xml:lang='de'>Insel</a>, <a lang='en' xml:lang='en'>Island</a>)\n         let $ids := for $n in $nodes return generate-id($n)\n         return count($nodes) = count(distinct-values($ids))\n       '
generate-id-021;PRSC Error: Failed to parse query '\n         let $nodes := (<a lang='de' xml:lang='de'>Insel</a>, <a lang='en' xml:lang='en'>Island</a>)\n         let $ids := for $n in $nodes return generate-id($n)\n         return every $id in $ids satisfies matches($id, '^[A-Za-z][A-Za-z0-9]*$')\n       '
generate-id-022;PRSC Error: Failed to parse query '\n         let $nodes := (text{''}, text{''}, text{''}, text{''})\n         let $ids := for $n in $nodes return generate-id($n)\n         return count($nodes) = count(distinct-values($ids))\n       '
generate-id-023;PRSC Error: Failed to parse query '\n         let $nodes := (text{''}, text{''}, text{''}, text{''})\n         let $ids := for $n in $nodes return generate-id($n)\n         return every $id in $ids satisfies matches($id, '^[A-Za-z][A-Za-z0-9]*$')\n       '
generate-id-901;Expected error code: XPDY0002. Found error code: XPST0017 with error message: The function generate-id with arity 0 is not registered.
generate-id-902;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function generate-id with arity 1 is not registered.
generate-id-903;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function generate-id with arity 1 is not registered.
generate-id-904;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function generate-id with arity 1 is not registered.
generate-id-905;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function generate-id with arity 1 is not registered.
greaterthaneqonanyuri-1;Type casting to XsAnyUri has not been implemented yet.
greaterthanonanyuri-1;Type casting to XsAnyUri has not been implemented yet.
head-002;The function current-dateTime with arity 0 is not registered.
head-004;Haven't implemented Qnames from: works:
head-006;Expected XPath let $a := /works/* return (head($a) is $a[1]) to resolve to true
head-007;The function current-date with arity 0 is not registered.
head-008;The function current-date with arity 0 is not registered.
hexBinary-1;Type casting to XsHexBinary has not been implemented yet.
hexBinary-10;Type casting to XsHexBinary has not been implemented yet.
hexBinary-11;Type casting to XsHexBinary has not been implemented yet.
hexBinary-12;Type casting to XsHexBinary has not been implemented yet.
hexBinary-13;Type casting to XsHexBinary has not been implemented yet.
hexBinary-14;Type casting to XsHexBinary has not been implemented yet.
hexBinary-2;Type casting to XsHexBinary has not been implemented yet.
hexBinary-3;Type casting to XsHexBinary has not been implemented yet.
hexBinary-4;Type casting to XsHexBinary has not been implemented yet.
hexBinary-5;Type casting to XsHexBinary has not been implemented yet.
hexBinary-6;Type casting to XsHexBinary has not been implemented yet.
hexBinary-7;Type casting to XsHexBinary has not been implemented yet.
hexBinary-8;Type casting to XsHexBinary has not been implemented yet.
hexBinary-9;Type casting to XsHexBinary has not been implemented yet.
hof-001;PRSC Error: Failed to parse query '\n        declare function local:f($x as xs:integer) as xs:integer { $x + 1 }; \n        let $f := local:f#1 return $f(2) = 3'
hof-002;PRSC Error: Failed to parse query '\n      	declare function local:f() as xs:integer { 42 }; \n      	declare function local:f($x as xs:integer) as xs:integer { $x + 1 }; \n      	let $f := local:f#0 return $f()\n       = 42'
hof-003;PRSC Error: Failed to parse query '\n        import module namespace m="http://example.com/hof-003"; \n        let $f := m:f#1 return $f(17) = 18'
hof-006;PRSC Error: Failed to parse query '\n      declare default function namespace "http://example.com/hof-006"; \n      declare function g($x as xs:integer) as xs:integer { $x + 1 }; \n      let $f := g#1 return $f(21)\n       = 22'
hof-007;PRSC Error: Failed to parse query '\n      declare default function namespace "http://www.w3.org/2001/XMLSchema"; \n      let $f := date#1 return $f('2008-01-31')\n      '
hof-009;PRSC Error: Failed to parse query '\n        import schema namespace a = "http://www.w3.org/XQueryTest/userDefinedTypes"; \n        let $f := a:hatsize#1 \n        return ($f(8) instance of a:hatsize)\n      '
hof-010;PRSC Error: Failed to parse query '\n      declare function local:f($x as xs:integer) as xs:integer { $x + 1 }; \n      let $f as function(*) := local:f#1 return $f(2)\n       = 3'
hof-011;PRSC Error: Failed to parse query '\n      declare function local:f($x as xs:integer) as xs:integer { $x + 3 }; \n      let $f as function(xs:integer) as xs:integer := local:f#1 \n      return $f(2)\n       = 5'
hof-012;PRSC Error: Failed to parse query '\n      declare function local:f($x as xs:integer, $y as xs:long) as xs:integer { $x + $y }; \n      let $f as function(xs:integer, xs:long) as xs:integer := local:f#2 \n      return $f(2, xs:long(5))\n       = 7'
hof-013;PRSC Error: Failed to parse query '\n      declare function local:f($x as xs:integer) as xs:integer { $x + 3 }; \n      declare function local:g($x as xs:integer) as xs:integer { $x + 4 }; \n      declare function local:h($x as xs:integer) as xs:integer { $x + 5 }; \n      let $f as (function(xs:integer) as xs:integer)* := (local:f#1, local:g#1, local:h#1) return $f[3](2)[1]\n       = 7'
hof-014;PRSC Error: Failed to parse query '\n      declare function local:case($x as xs:boolean) as function(*) \n      	{ if ($x) then fn:upper-case#1 else fn:lower-case#1 }; \n      local:case(true())("Mike"), local:case(false())("Mike")\n      '
hof-015;PRSC Error: Failed to parse query '\n      declare function local:case($x as xs:boolean) as function(xs:string?) as xs:string \n      	{ if ($x) then fn:upper-case#1 else fn:lower-case#1 }; \n      local:case(true())("Mike"), local:case(false())("Mike")'
hof-016;PRSC Error: Failed to parse query '\n      declare function local:case($x as function(*), $y as xs:string) as xs:string { $x($y) }; \n      local:case(upper-case#1, "Mike"), local:case(lower-case#1, "Mike")\n      '
hof-017;PRSC Error: Failed to parse query '\n      declare function local:case($x as function(xs:string?) as xs:string, $y as xs:string) as xs:string { $x($y) }; \n      local:case(upper-case#1, "Mike"), local:case(lower-case#1, "Mike")\n      '
hof-018;PRSC Error: Failed to parse query '\n      declare function local:scramble($x as function(xs:string) as xs:string, $y as xs:string) as xs:string \n      	{ $x($y) }; \n      declare function local:rot13($x as xs:string) as xs:string \n      	{ translate($x, "abcdefghijklmnopqrstuvwxyz", "nopqrstuvwxyzabcdefghijklm") }; \n      local:scramble(local:rot13#1, "mike")\n      '
hof-019;PRSC Error: Failed to parse query '\n      declare function local:scramble($x as function(*), $y as xs:string) as xs:string { $x($y) }; \n      declare function local:rot13($x as xs:string) as xs:string { translate($x, "abcdefghijklmnopqrstuvwxyz", "nopqrstuvwxyzabcdefghijklm") }; \n      local:scramble(local:rot13#1, "mike")\n      '
hof-020;PRSC Error: Failed to parse query '\n      declare function local:scramble($x as function(*), $y as xs:string) as xs:string { $x($y) }; \n      local:scramble(function($x){translate($x, "abcdefghijklmnopqrstuvwxyz", "nopqrstuvwxyzabcdefghijklm")}, "john")\n      '
hof-021;PRSC Error: Failed to parse query '\n      declare function local:scramble($x as function(xs:string) as xs:string, $y as xs:string) as xs:string { $x($y) }; \n      local:scramble(function($x){translate($x, "abcdefghijklmnopqrstuvwxyz", "nopqrstuvwxyzabcdefghijklm")}, "john")\n      '
hof-022;PRSC Error: Failed to parse query '\n      declare function local:scramble($x as function(xs:string) as xs:string, $y as xs:string) as xs:string { $x($y) }; \n      let $n := function-name(local:scramble#2) \n      return (local-name-from-QName($n), namespace-uri-from-QName($n), function-arity(local:scramble#2))\n      '
hof-023;The function fn:function-name with arity 1 is not registered.
hof-024;The function function-name with arity 1 is not registered.
hof-025;The function function-name with arity 1 is not registered.
hof-026;PRSC Error: Failed to parse query '\n        let $f := function($x as xs:string) as xs:string { upper-case($x) } \n        let $n := function-name($f) \n        return <a loc="{local-name-from-QName($n)}" uri="{namespace-uri-from-QName($n)}"\n        			arity="{function-arity($f)}" eloc="{empty(local-name-from-QName($n))}" euri="{empty(namespace-uri-from-QName($n))}"/>\n      '
hof-027;Expected XPath let $f := fn:contains(?, "e") \n        return for $s in ("Mike", "John", "Dave", "Mary", "Jane") return $f($s) to resolve to true false true false true, but instead got True False True False True
hof-028;PRSC Error: Failed to parse query '\n      declare function local:splitter() as (function(xs:string) as xs:string*) { function($x as xs:string) { tokenize($x, '\s') } }; \n      string-join(local:splitter()("A nice cup of tea"), '|')\n      '
hof-029;PRSC Error: Failed to parse query '\n      declare function local:splitter() as (function(xs:string) as xs:string+)? \n      { function($x as xs:string) { for $i in tokenize($x, '\s') return upper-case($i)} }; \n      string-join(local:splitter()("A nice cup of tea"), '|')\n      '
hof-030;PRSC Error: Failed to parse query '\n      declare variable $sep as xs:string := "\s"; \n      declare function local:splitter() as (function(xs:string) as xs:string*)? \n      	{ function($x as xs:string) { for $i in tokenize($x, $sep) return upper-case($i)} }; \n      string-join(local:splitter()("A nice cup of tea"), '|')\n      '
hof-031;PRSC Error: Failed to parse query '\n      declare function local:splitter($sep as xs:string) as (function(xs:string) as xs:string*) \n      	{ function($x as xs:string) { for $i in tokenize($x, $sep) return upper-case($i)} }; \n      string-join(local:splitter("\s")("A nice cup of tea"), '|')\n      '
hof-032;The function current-date with arity 0 is not registered.
hof-033;The function local-name-from-QName with arity 1 is not registered.
hof-034;PRSC Error: Failed to parse query 'local-name-from-QName(function-name((upper-case#1, lower-case#1)[ordered{.}("Mike") = "MIKE"]))'
hof-035;PRSC Error: Failed to parse query 'local-name-from-QName(function-name((upper-case#1, lower-case#1)[ordered{.}("Mike") = "MIKE"]))'
hof-036;PRSC Error: Failed to parse query '(<a b="3"/>/(string(@b), upper-case#1, 17))[. instance of xs:anyAtomicType]'
hof-037;PRSC Error: Failed to parse query '\n        declare function local:f($x as xs:long, $y as xs:NCName) as element(e) { \n            <e x="{$x}" y="{$y}"/> \n        }; \n        local:f#2 instance of function(*), \n        local:f#2 instance of function(xs:long, xs:NCName) as element(e), \n        local:f#2 instance of function(xs:anyAtomicType?, xs:anyAtomicType?) as element(e), \n        local:f#2 instance of function(item()*, item()*) as element(e)\n      '
hof-038;PRSC Error: Failed to parse query '\n        declare function local:f($x as xs:long?, $y as xs:NCName?) as element(e) { \n            <e x="{$x}" y="{$y}"/> \n        }; \n        local:f#2 instance of function(xs:int?, xs:NCName?) as element(e), \n        local:f#2 instance of function(xs:long?) as element(e), \n        local:f#2 instance of function(xs:long?, xs:NCName?, item()*) as element(e), \n        local:f#2 instance of function(xs:long, xs:anyAtomicType?) as element(e), \n        local:f#2 instance of function(item()+, item()+) as element(e)\n      '
hof-039;PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:long, $y as xs:NCName) as element(e)? { <e x="{$x}" y="{$y}"/> }; \n      	local:f#2 instance of function(xs:long, xs:NCName) as element()?, \n      	local:f#2 instance of function(xs:long, xs:NCName) as element()*, \n      	local:f#2 instance of function(xs:long, xs:NCName) as element(e)*, \n      	local:f#2 instance of function(xs:long, xs:NCName) as element(e, xs:anyType?)*, \n      	local:f#2 instance of function(xs:long, xs:NCName) as element(*, xs:anyType?)?, \n      	local:f#2 instance of function(xs:long, xs:NCName) as element(*, xs:untyped)?\n      '
hof-040;PRSC Error: Failed to parse query '\n      declare function local:apply($fns as (function(xs:string) as xs:string)*, $s as xs:string) as xs:string* { for $f in $fns return $f($s) }; \n      let $ops := (upper-case#1, lower-case#1, function($x){translate($x, 'e', 'i')}, substring-before(?, ' ')) \n      return string-join(local:apply($ops, 'Michael Kay'), '~')\n      '
hof-041;PRSC Error: Failed to parse query '\n      declare function local:ops() as (function(xs:string) as xs:string)*\n      	{ (upper-case#1, lower-case#1, function($x){translate($x, 'e', 'i')}, substring-before(?, ' ')) }; \n      string-join(for $f in local:ops() return $f('Michael Kay'), '~')\n      '
hof-042;PRSC Error: Failed to parse query '\n        declare function local:lower-case($x as xs:string) as xs:string { \n           concat("'", fn:lower-case($x), "'") \n        }; \n        declare function local:ops() as (function(xs:string) as xs:string)* {\n        	upper-case#1, \n        	local:lower-case#1, \n        	function($x){translate($x, 'e', 'i')}, \n        	substring-before(?, ' ') \n        }; \n        string-join(for $f in local:ops() \n                    return $f(<a name="Michael Kay"/>/@name), '~')\n      '
hof-043;PRSC Error: Failed to parse query '\n      declare function local:round($x as xs:double) as xs:double \n      	{ fn:floor($x) }; \n      declare function local:ops() as (function(xs:double) as xs:double)* \n      	{ (abs#1, local:round#1, function($x){$x+1}, round-half-to-even(?, 2)) }; \n      string-join(for $f in local:ops() return string($f(xs:untypedAtomic('123.456'))), '~')\n      '
hof-044;PRSC Error: Failed to parse query '\n      declare function local:round($x as xs:double) as xs:double { fn:floor($x) }; \n      declare function local:ops() as (function(xs:double) as xs:double)* \n      	{ (abs#1, local:round#1, function($x as xs:double){$x+1}, round-half-to-even(?, 2)) }; \n      string-join(for $f in local:ops() return string(round-half-to-even($f(xs:decimal('123.456')), 4)), '~')\n      '
hof-045;PRSC Error: Failed to parse query '\n      declare function local:round($x as xs:double, $algorithm as (function(xs:double) as xs:double)) as xs:double { $algorithm($x) }; \n      declare variable $roundToCeiling := local:round(?, ceiling#1); $roundToCeiling(12.4) = 13'
hof-046;PRSC Error: Failed to parse query '\n        declare function local:splitter($x as xs:string) as (function() as xs:string*)* { \n            for $sep in ('\s', ',', '!') \n            return function() { for $i in tokenize($x, $sep) return upper-case($i) } \n        }; \n        <out>{ \n            for $f as function(*) in local:splitter("How nice! Thank you, I enjoyed that.") \n            return <tokens>{ for $t in $f() \n                             return <t>{$t}</t> \n                   }</tokens> \n       }</out>\n    '
hof-047;PRSC Error: Failed to parse query '\n        declare function local:splitter($x as xs:string) as (function() as xs:string*)* { \n            for $sep in ('\s', ',', '!') return function() { \n                for $i in tokenize($x, $sep) return \n                    let $f := function(){ concat($sep, ':', upper-case($i)) } \n                    return $f() } \n        }; \n        <out>{ \n            for $f as function(*) in local:splitter("How nice! Thank you, I enjoyed that.") \n            return <tokens>{ for $t in $f() \n                             return <t>{$t}</t> }</tokens> \n        }</out>\n     '
hof-048;PRSC Error: Failed to parse query '\n        declare function local:do() as xs:integer { (local:f#1)(5) }; \n        declare function local:f($x as xs:integer) as xs:integer { $x + 1 }; \n        local:do() = 6'
hof-049;PRSC Error: Failed to parse query '\n        declare function local:tf($i as xs:integer) as function () as xs:boolean { \n            if ($i) then true#0 else false#0 \n        }; \n        <out>{(local:tf(0)(), local:tf(1)())}</out>\n      '
hof-050;PRSC Error: Failed to parse query 'let $f := fn:substring-before#2(?, '-') return <out>{$f('the-end-of-the-world')}</out>'
hof-051;PRSC Error: Failed to parse query '\n        let $f := function($a as xs:string, $b as xs:string) { \n            starts-with($a, $b) and ends-with($a, $b)}(?, 'a') \n        return <out>{$f('abracadabra')}</out>'
hof-052;PRSC Error: Failed to parse query 'let $f := fn:concat#3(?, '*', ?) let $g := $f('[', ?) return <out>{$g(']')}</out>'
hof-053;PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:long, $y as xs:NCName) as element(e, xs:anyAtomicType) { <e x="{$x}" y="{$y}"/> }; \n      	local:f#2 instance of function(xs:long, xs:NCName) as element(), \n      	local:f#2 instance of function(xs:long, xs:NCName) as element()+, \n      	local:f#2 instance of function(xs:long, xs:NCName) as element()?, \n      	local:f#2 instance of function(xs:long, xs:NCName) as element()*, \n      	local:f#2 instance of function(xs:long, xs:NCName) as element(e)*, \n      	local:f#2 instance of function(xs:long, xs:NCName) as element(e, xs:anyType?)*, \n      	local:f#2 instance of function(xs:long, xs:NCName) as element(*, xs:anyType?)?, \n      	local:f#2 instance of function(xs:long, xs:NCName) as element(e, xs:anyType)*, \n      	local:f#2 instance of function(xs:long, xs:NCName) as element(*, xs:anyType)?, \n      	local:f#2 instance of function(xs:long, xs:NCName) as element(*, xs:untyped)?\n      '
hof-901;Expected error code: XPST0017. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) as xs:integer { $x + 1 }; \n      	let $f := local:g#1 return $f(2)'
hof-902;Expected error code: XPST0017. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) as xs:integer { $x + 1 }; \n      	let $f := local:f#3 return $f(2)\n      '
hof-903;Expected error code: XPST0017. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) as xs:integer { $x + 1 }; \n      	let $f := xs:date#2 return $f('2008-03-01')\n      '
hof-904;Expected error code: XPST0017. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) as xs:integer { $x + 1 }; \n      	let $f := concat#1 return $f('2008-03-01')\n      '
hof-905;Expected error code: FOTY0014. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) as xs:integer { $x + 1 }; \n      	string(local:f#1)\n      '
hof-906;Expected error code: FOTY0013. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) as xs:integer { $x + 1 }; \n      	exists(data(local:f#1))\n      '
hof-907;Expected error code: FOTY0015. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) as xs:integer { $x + 1 }; \n      	deep-equal((1,2,3,4,local:f#1), (1,2,3,4,local:f#1))\n      '
hof-908;Expected error code: FOTY0013. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) as xs:integer { $x + 1 }; \n      	local:f#1 eq 3\n      '
hof-909;Expected error code: FOTY0013. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	declare function local:f($x as xs:integer) as xs:integer { $x + 1 }; \n      	number(local:f#1)\n      '
hof-911;Expected error code: XPTY0018. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<a b="3"/>/(@b, upper-case#1)'
hof-912;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:apply($fns as (function(xs:string) as xs:string)*, $s as xs:string) as xs:string* \n        { for $f in $fns return $f($s) };\n        let $ops := (upper-case#1, lower-case#1, function($x){translate($x, 'e', 'i')}, \n            substring-before(?, ' ', ?)) \n        return string-join(local:apply($ops, 'Michael Kay'), '~')'
hof-913;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:apply($fns as (function(xs:string) as xs:string)*, $s as xs:string) as xs:string* \n        { for $f in $fns return $f($s) }; \n        let $ops := (upper-case#1, lower-case#1, function($x){translate($x, 'e', 'i')}, \n            string-length#1) \n        return string-join(local:apply($ops, 'Michael Kay'), '~')'
hof-914;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:apply($fns as (function(xs:string) as xs:string)*, $s as xs:string) as xs:string* \n        { for $f in $fns return $f($s) }; \n        let $ops := (upper-case#1, lower-case#1, function($x as xs:double){string($x)}) \n        return string-join(local:apply($ops, 'Michael Kay'), '~')'
hof-918;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:round($x as xs:double, $algorithm as (function(xs:double) as xs:double)) as xs:double \n        { $algorithm($x) }; \n        declare variable $roundToCeiling := local:round(?, upper-case#1); \n        $roundToCeiling(12.4)\n      '
hof-919;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      declare function local:round($x as xs:double) as xs:double { fn:floor($x) }; \n      declare function local:ops() as (function(xs:double) as xs:double)* \n      	{ (abs#1, local:round#1, function($x as xs:float){$x+1}, round-half-to-even(?, 2)) }; \n      string-join(for $f in local:ops() return string(round-half-to-even($f(xs:decimal('123.456')), 4)), '~')\n      '
inline-fn-006;Expected error code: XPST0003. Query succeeded with result: 
inline-fn-013;PRSC Error: Failed to parse query '(\n         let $add := function($x, $y) as xs:double {$x + $y}\n         return $add(3, 4)\n      ) instance of $xs:double'
inline-fn-014;PRSC Error: Failed to parse query '\n         let $process := function($op, $x, $y) as function(*) {if ($op = "+") then function() {$x + $y} else function() {$x - $y}}\n         return $process("+", 3, 4)()\n       = 7'
inline-fn-015;PRSC Error: Failed to parse query '\n         let $add := %Q{http://example.com/speed}fast %Q{http://example.com/origin}author("Mike") function($x, $y) {$x + $y} return $add(2,2)\n       = 4'
inline-fn-021;The function function-name with arity 1 is not registered.
inline-fn-022;The function function-arity with arity 1 is not registered.
inline-fn-023;PRSC Error: Failed to parse query '\n         let $add := function($x, $y) {$x + $y} return apply($add, [12, 5])\n       = 17'
inline-fn-025;The function function-arity with arity 1 is not registered.
inline-fn-027;PRSC Error: Failed to parse query '\n         let $calc := map{\n            "+" : function($a, $b) {$a + $b},\n            "-" : function($a, $b) {$a - $b},\n            "*" : function($a, $b) {$a * $b},\n            "/" : function($a, $b) {$a div $b}}\n         return $calc("*")(2,3)  \n       = 6'
inline-fn-028;Expected XPathException with code FOTY0014, but got Can't cast a non-atomic value.
inline-fn-029;Expected error code: FOTY0015. Query succeeded with result: False
inline-fn-032;PRSC Error: Failed to parse query '(\n         function($a, $b) {$a + $b}\n      ) instance of $item()'
inline-fn-033;PRSC Error: Failed to parse query '(\n         function($a as xs:integer, $b as xs:integer) as xs:integer {$a + $b}\n      ) instance of $item()'
inline-fn-034;PRSC Error: Failed to parse query '\n         declare variable $p as xs:integer external;\n         declare variable $f := function($a) {$a + $p};\n         $f(12)\n       = 19'
inline-fn-035;PRSC Error: Failed to parse query '\n         declare variable $p as xs:integer external;\n         declare function local:negate($x) {-$x};\n         declare variable $f := let $x := $p return function($a) {local:negate($a + $x + $p)};\n         $f(12)\n       = -26'
inline-function-1;PRSC Error: Failed to parse query 'function() { 5 } instance of function(*)'
inline-function-12a;Expected error code: XQST0039. Query succeeded with result: lala monkey
inline-function-13;Expected error code: XQST0039. Query succeeded with result: lala ape monkey
inline-function-15;Expected error code: XQST0039. Query succeeded with result: lala ape monkey
inline-function-2;The function function-name with arity 1 is not registered.
inline-function-6;PRSC Error: Failed to parse query 'function($a, $b as xs:double) as xs:double { $a * $b + 5 } instance of function(item()*, xs:double) as xs:double'
inline-function-7;PRSC Error: Failed to parse query 'function($a as node()+, $b) as xs:double { $a * $b + 5 } instance of function(node(), item()*) as xs:double'
inline-function-8;PRSC Error: Failed to parse query 'function($a as node()+) { $a + 5 } instance of function(node()) as item()*'
inline-function-9;PRSC Error: Failed to parse query 'function() { true() } instance of function() as item()*'
instanceof111;Expected XPathException with code XPST0051, but got Atomic Value for XsNmToken is not implemented yet.
instanceof112;PRSC Error: Failed to parse query '\n      	declare namespace lu = 'http://www.w3.org/XQueryTest/ListUnionTypes' ;\n        import schema "http://www.w3.org/XQueryTest/ListUnionTypes";\n      	23 instance of lu:unionType\n      '
instanceof113;Expected error code: XPST0051. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	declare namespace lu = 'http://www.w3.org/XQueryTest/ListUnionTypes' ;\n        import schema "http://www.w3.org/XQueryTest/ListUnionTypes";\n      	-23 instance of lu:restrictedUnionType\n      '
instanceof114;Expected error code: XPST0051. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	declare namespace lu = 'http://www.w3.org/XQueryTest/ListUnionTypes' ;\n        import schema "http://www.w3.org/XQueryTest/ListUnionTypes";\n      	-23 instance of lu:listType\n      '
instanceof115;Expected error code: XPST0051. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	declare namespace lu = 'http://www.w3.org/XQueryTest/ListUnionTypes' ;\n        import schema "http://www.w3.org/XQueryTest/ListUnionTypes";\n      	-23 instance of lu:unionOfListType\n      '
instanceof116;PRSC Error: Failed to parse query '\n      	declare namespace lu = 'http://www.w3.org/XQueryTest/ListUnionTypes' ;\n        import schema "http://www.w3.org/XQueryTest/ListUnionTypes";\n      	current-date() instance of lu:unionOfUnionType\n      	  and\n      	23 instance of lu:unionOfUnionType\n      '
instanceof117;Expected error code: XPST0051. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         xquery version "3.0";\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         s:gYearMonth('2012-10') instance of s:restrictedUnion\n       '
instanceof118;PRSC Error: Failed to parse query '\n         xquery version "3.0";\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         s:unrestrictedInteger(3) instance of s:myUnionType1\n       '
instanceof119;PRSC Error: Failed to parse query '\n         xquery version "3.0";\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         s:restrictedString("IB40") instance of s:myUnionType2\n       '
instanceof120;Expected error code: XPST0051. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         xquery version "3.0";\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         85 instance of s:unionOfListsAndAtomic\n       '
instanceof121;PRSC Error: Failed to parse query '\n         name#1 instance of function(*)\n       '
instanceof122;PRSC Error: Failed to parse query '\n         name#1 instance of function(node()?) as xs:string\n       '
instanceof123;PRSC Error: Failed to parse query '\n         name#1 instance of function(node()) as xs:string\n       '
instanceof124;PRSC Error: Failed to parse query '\n         name#1 instance of function(element(A)?) as xs:string\n       '
instanceof125;PRSC Error: Failed to parse query '\n         name#1 instance of function(element(A)) as xs:string\n       '
instanceof126;PRSC Error: Failed to parse query '\n         name#1 instance of function(element(A)) as xs:anyAtomicType\n       '
instanceof127;PRSC Error: Failed to parse query '\n         name#1 instance of function(element(A)) as xs:string+\n       '
instanceof128;PRSC Error: Failed to parse query '\n         name#1 instance of function(element(A)) as xs:NCName\n       '
instanceof129;PRSC Error: Failed to parse query '\n         name#1 instance of function(node()*) as xs:string\n       '
instanceof130;PRSC Error: Failed to parse query '\n         name#1 instance of function(item()) as xs:string\n       '
instanceof131;PRSC Error: Failed to parse query '\n         name#0 instance of function(item()) as xs:string\n       '
instanceof132;PRSC Error: Failed to parse query '\n         filter#2 instance of function(item()*, function(item()) as xs:boolean) as item()*\n       '
instanceof133;PRSC Error: Failed to parse query '\n         filter#2 instance of function(item()*, function(item()*) as xs:boolean) as item()*\n       '
instanceof134;PRSC Error: Failed to parse query '\n         filter#2 instance of function(function(*), item()*) as item()*\n       '
instanceof135;PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         declare function local:f($a as s:myUnionType1) as xs:boolean { true() };\n         local:f#1 instance of function(s:myUnionType1) as xs:boolean\n       '
instanceof136;PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         declare function local:f($a as s:myUnionType1) as xs:boolean { true() };\n         local:f#1 instance of function(s:unrestrictedDate) as xs:boolean\n       '
instanceof137;PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         declare function local:f($a as s:myUnionType1) as xs:boolean { true() };\n         local:f#1 instance of function(s:unrestrictedInteger) as xs:boolean\n       '
instanceof138;PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         declare function local:f($a as s:myUnionType1) as xs:boolean { true() };\n         local:f#1 instance of function(s:restrictedDate) as xs:boolean\n       '
instanceof139;PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         declare function local:f($a as s:approximateDate) as xs:boolean { true() };\n         local:f#1 instance of function(s:dateOrDateTime) as xs:boolean\n       '
instanceof140;PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         declare function local:f($a as xs:integer) as xs:boolean { true() };\n         local:f#1 instance of function(s:integer-union) as xs:boolean\n       '
instanceof141;PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         declare function local:f($a as s:decimal-or-string) as xs:boolean { true() };\n         local:f#1 instance of function(xs:integer) as xs:boolean\n       '
instanceof142;PRSC Error: Failed to parse query '\n         xquery version "3.0";\n         declare namespace s = 'http://www.w3.org/XQueryTest/ListUnionTypes' ;\n        import schema "http://www.w3.org/XQueryTest/ListUnionTypes";\n         (validate strict { <s:cuckoo><s:sub-U>12</s:sub-U></s:cuckoo> }) /* instance of schema-element(s:u)\n       '
instanceof45;PRSC Error: Failed to parse query '1267.43233E12 instance of xs:dateTime'
instanceof46;PRSC Error: Failed to parse query '1267.43233E12 instance of xs:time'
instanceof47;PRSC Error: Failed to parse query '1267.43233E12 instance of xs:date'
instanceof48;PRSC Error: Failed to parse query '1267.43233E12 instance of xs:boolean'
instanceof49;PRSC Error: Failed to parse query '1267.43233E12 instance of xs:float'
instanceof50;PRSC Error: Failed to parse query '1267.43233E12 instance of xs:double'
instanceof51;PRSC Error: Failed to parse query '1267.43233E12 instance of xs:anyURI'
instanceof52;PRSC Error: Failed to parse query '1267.43233E12 instance of xs:string'
instanceof53;PRSC Error: Failed to parse query '1267.43233E12 instance of xs:decimal'
instanceof54;PRSC Error: Failed to parse query '1267.43233E12 instance of xs:integer'
instanceof55;PRSC Error: Failed to parse query '1267.43233E12 instance of xs:int'
instanceof56;PRSC Error: Failed to parse query '1267.43233E12 instance of xs:dateTime'
instanceof57;PRSC Error: Failed to parse query '1267.43233E12 instance of xs:time'
instanceof58;PRSC Error: Failed to parse query '1267.43233E12 instance of xs:date'
instanceof59;PRSC Error: Failed to parse query '1267.43233E12 instance of xs:boolean'
instanceof60;PRSC Error: Failed to parse query '1267.43233E12 instance of xs:float'
instanceof61;PRSC Error: Failed to parse query '1267.43233E12 instance of xs:double'
instanceof62;PRSC Error: Failed to parse query '1267.43233E12 instance of xs:anyURI'
instanceof63;PRSC Error: Failed to parse query '1267.43233E12 instance of xs:string'
instanceof64;PRSC Error: Failed to parse query '1267.43233E12 instance of xs:decimal'
instanceof65;PRSC Error: Failed to parse query '1267.43233E12 instance of xs:integer'
instanceof66;PRSC Error: Failed to parse query '1267.43233E12 instance of xs:int'
instanceof67;Type casting to XsAnyUri has not been implemented yet.
instanceof68;Type casting to XsAnyUri has not been implemented yet.
instanceof69;Type casting to XsAnyUri has not been implemented yet.
instanceof70;Type casting to XsAnyUri has not been implemented yet.
instanceof71;Type casting to XsAnyUri has not been implemented yet.
instanceof72;Type casting to XsAnyUri has not been implemented yet.
instanceof73;Type casting to XsAnyUri has not been implemented yet.
instanceof74;Type casting to XsAnyUri has not been implemented yet.
instanceof75;Type casting to XsAnyUri has not been implemented yet.
instanceof76;Type casting to XsAnyUri has not been implemented yet.
instanceof77;Type casting to XsAnyUri has not been implemented yet.
internalcontextitem-1;Expected error code: XPDY0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace eg = "http://example.org"; declare function eg:noContextFunction() { . }; eg:noContextFunction()'
internalcontextitem-16;Expected XPath (fn:true(),fn:false(),fn:true())[xs:boolean(.) and xs:boolean(.)] to resolve to true true, but instead got True True
internalcontextitem-17;Expected XPath (fn:true(),fn:false(),fn:true())[xs:boolean(.) or xs:boolean(.)] to resolve to true true, but instead got True True
internalcontextitem-4;Casting AbstractValue(XsDecimal) to IntegerValue
internalcontextitem-5;Casting AbstractValue(XsFloat) to IntegerValue
internalcontextitem-6;Casting AbstractValue(XsDouble) to IntegerValue
internalcontextitem-7;Expected XPath (fn:true(),fn:false(),fn:true())[xs:boolean(.)] to resolve to true true, but instead got True True
internalcontextitem-8;Expected XPath (fn:false(),fn:true(),fn:false())[fn:not(xs:boolean(.))] to resolve to false false, but instead got False False
internalvar-1;PRSC Error: Failed to parse query 'declare(::)variable(::)$var(::)as(::)item((: :))*(::):=(::)1(::);(::) 1(::)eq(::)1(::)'
internalvar-2;PRSC Error: Failed to parse query '(::)declare(::)variable(::)$var(::):=(::)1(::);(::) 1(::)eq(::)1'
K-ABSFunc-5;Value was either too large or too small for a Decimal.
K-AnyURIEqual-1;Type casting to XsAnyUri has not been implemented yet.
K-AnyURIEqual-10;Type casting to XsAnyUri has not been implemented yet.
K-AnyURIEqual-2;Type casting to XsAnyUri has not been implemented yet.
K-AnyURIEqual-3;Type casting to XsAnyUri has not been implemented yet.
K-AnyURIEqual-4;Type casting to XsAnyUri has not been implemented yet.
K-AnyURIEqual-5;Type casting to XsAnyUri has not been implemented yet.
K-AnyURIEqual-6;Type casting to XsAnyUri has not been implemented yet.
K-AnyURIEqual-7;Type casting to XsAnyUri has not been implemented yet.
K-AnyURIEqual-8;Type casting to XsAnyUri has not been implemented yet.
K-AnyURIEqual-9;Type casting to XsAnyUri has not been implemented yet.
K-Base64BinaryEQ-1;Type casting to XsHexBinary has not been implemented yet.
K-Base64BinaryEQ-2;Type casting to XsHexBinary has not been implemented yet.
K-Base64BinaryEQ-3;Type casting to XsBase64Binary has not been implemented yet.
K-CeilingFunc-3-dyn;PRSC Error: Failed to parse query 'declare variable $empty external; empty(ceiling($empty))'
K-CeilingFunc-5;Value was either too large or too small for a Decimal.
K-CodepointToStringFunc-11b;Could not convert codepoint to string, it is outside of the valid range.
K-CodepointToStringFunc-12b;Could not convert codepoint to string, it is outside of the valid range.
K-CodepointToStringFunc-13;Expected XPath codepoints-to-string(13) eq "&#xD;" to resolve to true
K-CodepointToStringFunc-8a;Could not convert codepoint to string, it is outside of the valid range.
K-CombinedErrorCodes-1;Expected executing the XPath 'import schema "http://example.com/NSNOTRECOGNIZED"; 1 eq 1' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XQST0009. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'import schema "http://example.com/NSNOTRECOGNIZED"; 1 eq 1'
K-CombinedErrorCodes-10;Expected executing the XPath 'validate { () }' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XQTY0030. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'validate { () }'
K-CombinedErrorCodes-11;Expected executing the XPath 'validate lax { 1 }' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XQTY0030. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'validate lax { 1 }'
K-CombinedErrorCodes-12;Expected executing the XPath 'validate strict { 1 }' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XQTY0030. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'validate strict { 1 }'
K-CombinedErrorCodes-2;Expected executing the XPath 'import schema "http://example.com/NSNOTRECOGNIZED" at "http://example.com/DOESNOTEXIST";\n         1 eq 1' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XQST0009. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'import schema "http://example.com/NSNOTRECOGNIZED" at "http://example.com/DOESNOTEXIST";\n         1 eq 1'
K-CombinedErrorCodes-3;Expected executing the XPath 'import schema "http://example.com/NSNOTRECOGNIZED" at "http://example.com/DOESNOTEXIST",\n         "http://example.com/2", "http://example.com/3"; 1 eq 1' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XQST0009. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'import schema "http://example.com/NSNOTRECOGNIZED" at "http://example.com/DOESNOTEXIST",\n         "http://example.com/2", "http://example.com/3"; 1 eq 1'
K-CombinedErrorCodes-4;Expected executing the XPath 'import schema "http://example.com/NSNOTRECOGNIZED" at "http://example.com/DOESNOTEXIST",\n         "http://example.com/2", "http://example.com/3"; 1 eq 1' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XQST0009. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'import schema "http://example.com/NSNOTRECOGNIZED" at "http://example.com/DOESNOTEXIST",\n         "http://example.com/2", "http://example.com/3"; 1 eq 1'
K-CombinedErrorCodes-5;Expected executing the XPath 'import schema namespace prefix = "http://example.com/NSNOTRECOGNIZED" at\n         "http://example.com/DOESNOTEXIST", "http://example.com/2DOESNOTEXIST",\n         "http://example.com/3DOESNOTEXIST"; 1 eq 1' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XQST0009. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'import schema namespace prefix = "http://example.com/NSNOTRECOGNIZED" at\n         "http://example.com/DOESNOTEXIST", "http://example.com/2DOESNOTEXIST",\n         "http://example.com/3DOESNOTEXIST"; 1 eq 1'
K-CombinedErrorCodes-6;Expected executing the XPath 'import schema default element namespace "http://example.com/NSNOTRECOGNIZED" at\n         "http://example.com/DOESNOTEXIST", "http://example.com/2DOESNOTEXIST",\n         "http://example.com/3DOESNOTEXIST"; 1 eq 1' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XQST0009. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'import schema default element namespace "http://example.com/NSNOTRECOGNIZED" at\n         "http://example.com/DOESNOTEXIST", "http://example.com/2DOESNOTEXIST",\n         "http://example.com/3DOESNOTEXIST"; 1 eq 1'
K-CombinedErrorCodes-9;Expected executing the XPath 'validate { 1 }' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XQTY0030. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'validate { 1 }'
K-CondExpr-10;The function current-time with arity 0 is not registered.
K-CondExpr-11;The function current-time with arity 0 is not registered.
K-CondExpr-12;TreatExpr AST to Expression not yet implemented
K-CondExpr-3;TreatExpr AST to Expression not yet implemented
K-CondExpr-4;TreatExpr AST to Expression not yet implemented
K-CondExpr-5;The function hours-from-time with arity 1 is not registered.
K-CondExpr-6;TreatExpr AST to Expression not yet implemented
K-CondExpr-7;Expected error code: FORG0006. Found error code: XPST0017 with error message: The function current-time with arity 0 is not registered.
K-CondExpr-8;Type casting to XsAnyUri has not been implemented yet.
K-CondExpr-9;Type casting to XsAnyUri has not been implemented yet.
K-ConstructionProlog-1;PRSC Error: Failed to parse query '(::)declare(::)construction(::)preserve(::);(::)1(::)eq(::)1(::)'
K-ConstructionProlog-3;PRSC Error: Failed to parse query 'declare(::)construction(::)strip;(::)1(::)eq(::)1'
K-ConstructionProlog-4;Expected error code: XQST0067. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare(::)construction(::)strip; declare(::)construction(::)strip;1(::)eq(::)1'
K-ContainsFunc-3-dyn;PRSC Error: Failed to parse query 'declare variable $empty external; contains($empty, $empty)'
K-ContainsFunc-4-dyn;Expected error code: FOCH0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $zls external; \n         contains("another string", "a string", $zls || "http://www.example.com/COLLATION/NOT/SUPPORTED")'
K-ContainsFunc-5;No collations are supported
K-ContextCurrentDateFunc-2;The function current-date with arity 0 is not registered.
K-ContextCurrentDatetimeFunc-2;The function current-dateTime with arity 0 is not registered.
K-ContextCurrentTimeFunc-2;The function current-time with arity 0 is not registered.
K-ContextImplicitTimezoneFunc-2;The function seconds-from-duration with arity 1 is not registered.
K-ContextImplicitTimezoneFunc-3;The function seconds-from-duration with arity 1 is not registered.
K-ContextLastFunc-10;Expected executing the XPath 'empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [0 eq last()])' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function current-time with arity 0 is not registered.
K-ContextLastFunc-11;The function current-time with arity 0 is not registered.
K-ContextLastFunc-12;The function current-time with arity 0 is not registered.
K-ContextLastFunc-13;The function current-time with arity 0 is not registered.
K-ContextLastFunc-14;The function current-time with arity 0 is not registered.
K-ContextLastFunc-15;Expected executing the XPath 'empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [last() lt 1])' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function current-time with arity 0 is not registered.
K-ContextLastFunc-16;Expected executing the XPath 'empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [last() < 1])' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function current-time with arity 0 is not registered.
K-ContextLastFunc-17;Expected executing the XPath 'empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [last() le 0])' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function current-time with arity 0 is not registered.
K-ContextLastFunc-18;Expected executing the XPath 'empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [last() <= 0])' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function current-time with arity 0 is not registered.
K-ContextLastFunc-19;The function current-time with arity 0 is not registered.
K-ContextLastFunc-20;The function current-time with arity 0 is not registered.
K-ContextLastFunc-21;The function current-time with arity 0 is not registered.
K-ContextLastFunc-22;The function current-time with arity 0 is not registered.
K-ContextLastFunc-23;The function current-time with arity 0 is not registered.
K-ContextLastFunc-24;TreatExpr AST to Expression not yet implemented
K-ContextLastFunc-25;TreatExpr AST to Expression not yet implemented
K-ContextLastFunc-26;TreatExpr AST to Expression not yet implemented
K-ContextLastFunc-27;TreatExpr AST to Expression not yet implemented
K-ContextLastFunc-5;TreatExpr AST to Expression not yet implemented
K-ContextLastFunc-6;The function current-time with arity 0 is not registered.
K-ContextLastFunc-7;Expected executing the XPath 'empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [last() = 0])' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function current-time with arity 0 is not registered.
K-ContextLastFunc-8;Expected executing the XPath 'empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [0 = last()])' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function current-time with arity 0 is not registered.
K-ContextLastFunc-9;Expected executing the XPath 'empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [last() eq 0])' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function current-time with arity 0 is not registered.
K-ContextPositionFunc-10;The function current-time with arity 0 is not registered.
K-ContextPositionFunc-11;The function current-time with arity 0 is not registered.
K-ContextPositionFunc-12;The function current-time with arity 0 is not registered.
K-ContextPositionFunc-13;The function current-time with arity 0 is not registered.
K-ContextPositionFunc-14;The function current-time with arity 0 is not registered.
K-ContextPositionFunc-15;The function current-time with arity 0 is not registered.
K-ContextPositionFunc-16;The function current-time with arity 0 is not registered.
K-ContextPositionFunc-17;The function current-time with arity 0 is not registered.
K-ContextPositionFunc-18;The function current-time with arity 0 is not registered.
K-ContextPositionFunc-19;The function current-time with arity 0 is not registered.
K-ContextPositionFunc-20;TreatExpr AST to Expression not yet implemented
K-ContextPositionFunc-21;TreatExpr AST to Expression not yet implemented
K-ContextPositionFunc-22;TreatExpr AST to Expression not yet implemented
K-ContextPositionFunc-23;TreatExpr AST to Expression not yet implemented
K-ContextPositionFunc-24;The function current-time with arity 0 is not registered.
K-ContextPositionFunc-25;The function current-time with arity 0 is not registered.
K-ContextPositionFunc-26;The function current-time with arity 0 is not registered.
K-ContextPositionFunc-27;The function current-time with arity 0 is not registered.
K-ContextPositionFunc-28;The function current-time with arity 0 is not registered.
K-ContextPositionFunc-29;The function current-time with arity 0 is not registered.
K-ContextPositionFunc-3;The function current-time with arity 0 is not registered.
K-ContextPositionFunc-30;The function current-time with arity 0 is not registered.
K-ContextPositionFunc-31;The function current-time with arity 0 is not registered.
K-ContextPositionFunc-32;The function current-time with arity 0 is not registered.
K-ContextPositionFunc-33;The function current-time with arity 0 is not registered.
K-ContextPositionFunc-34;The function current-time with arity 0 is not registered.
K-ContextPositionFunc-35;The function current-time with arity 0 is not registered.
K-ContextPositionFunc-36;The function current-time with arity 0 is not registered.
K-ContextPositionFunc-37;The function current-time with arity 0 is not registered.
K-ContextPositionFunc-38;The function current-time with arity 0 is not registered.
K-ContextPositionFunc-39;The function current-time with arity 0 is not registered.
K-ContextPositionFunc-4;The function current-time with arity 0 is not registered.
K-ContextPositionFunc-40;The function current-time with arity 0 is not registered.
K-ContextPositionFunc-41;The function current-time with arity 0 is not registered.
K-ContextPositionFunc-42;The function current-time with arity 0 is not registered.
K-ContextPositionFunc-43;The function current-time with arity 0 is not registered.
K-ContextPositionFunc-5;The function current-time with arity 0 is not registered.
K-ContextPositionFunc-6;The function current-time with arity 0 is not registered.
K-ContextPositionFunc-7;The function current-time with arity 0 is not registered.
K-ContextPositionFunc-8;The function current-time with arity 0 is not registered.
K-ContextPositionFunc-9;The function current-time with arity 0 is not registered.
K-DataFunc-1;Expected error code: XPST0017. Query succeeded with result: 
K-DatesSubtract-1;Expected XPath xs:date("1999-07-19") - xs:date("1969-11-30") eq xs:dayTimeDuration("P10823D") to resolve to true
K-DateTimeFunc-10;The function dateTime with arity 2 is not registered.
K-DateTimeFunc-11;The function dateTime with arity 2 is not registered.
K-DateTimeFunc-12;The function dateTime with arity 2 is not registered.
K-DateTimeFunc-13;The function dateTime with arity 2 is not registered.
K-DateTimeFunc-14;The function dateTime with arity 2 is not registered.
K-DateTimeFunc-15;The function dateTime with arity 2 is not registered.
K-DateTimeFunc-16;The function dateTime with arity 2 is not registered.
K-DateTimeFunc-17;The function dateTime with arity 2 is not registered.
K-DateTimeFunc-18;The function dateTime with arity 2 is not registered.
K-DateTimeFunc-4;The function dateTime with arity 2 is not registered.
K-DateTimeFunc-5;The function dateTime with arity 2 is not registered.
K-DateTimeFunc-6;Expected error code: FORG0008. Found error code: XPST0017 with error message: The function dateTime with arity 2 is not registered.
K-DateTimeFunc-7;Expected error code: FORG0008. Found error code: XPST0017 with error message: The function dateTime with arity 2 is not registered.
K-DateTimeFunc-8;The function dateTime with arity 2 is not registered.
K-DateTimeFunc-9;The function dateTime with arity 2 is not registered.
K-DayFromDateFunc-3;The function day-from-date with arity 1 is not registered.
K-DayFromDateFunc-4;The function day-from-date with arity 1 is not registered.
K-DayFromDateFunc-5;The function day-from-date with arity 1 is not registered.
K-DayFromDateTimeFunc-3;The function day-from-dateTime with arity 1 is not registered.
K-DayFromDateTimeFunc-4;The function day-from-dateTime with arity 1 is not registered.
K-DayFromDateTimeFunc-5;The function day-from-dateTime with arity 1 is not registered.
K-DaysFromDurationFunc-3;The function days-from-duration with arity 1 is not registered.
K-DaysFromDurationFunc-4;The function days-from-duration with arity 1 is not registered.
K-DaysFromDurationFunc-5;The function days-from-duration with arity 1 is not registered.
K-DaysFromDurationFunc-6;The function days-from-duration with arity 1 is not registered.
K-DaysFromDurationFunc-7;The function days-from-duration with arity 1 is not registered.
K-DayTimeDurationAdd-1;Input string was not in a correct format.
K-DayTimeDurationAdd-2;Input string was not in a correct format.
K-DayTimeDurationAdd-3;Input string was not in a correct format.
K-DayTimeDurationDivide-1;Input string was not in a correct format.
K-DayTimeDurationDivide-2;Value overflow while constructing xs:dayTimeDuration, scalar is not finite.
K-DayTimeDurationDivide-3;Value overflow while constructing xs:dayTimeDuration, scalar is not finite.
K-DayTimeDurationDivide-4;Expected XPathException with code FODT0002, but got Input string was not in a correct format.
K-DayTimeDurationDivide-5;Expected XPathException with code FOCA0005, but got Input string was not in a correct format.
K-DayTimeDurationDivide-6;Expected error code: FODT0002. Query succeeded with result: PT
K-DayTimeDurationDivideDTD-1;Attempted to divide by zero.
K-DayTimeDurationEQ-1;Input string was not in a correct format.
K-DayTimeDurationEQ-3;Input string was not in a correct format.
K-DayTimeDurationEQ-4;Input string was not in a correct format.
K-DayTimeDurationEQ-5;Input string was not in a correct format.
K-DayTimeDurationEQ-7;Expected XPath xs:dayTimeDuration("-P2DT5H") ne xs:dayTimeDuration("P2DT5H") to resolve to true
K-DayTimeDurationEQ-8;Input string was not in a correct format.
K-DayTimeDurationGT-1;Input string was not in a correct format.
K-DayTimeDurationGT-2;Input string was not in a correct format.
K-DayTimeDurationGT-3;Input string was not in a correct format.
K-DayTimeDurationGT-4;Input string was not in a correct format.
K-DayTimeDurationGT-5;Input string was not in a correct format.
K-DayTimeDurationGT-6;Input string was not in a correct format.
K-DayTimeDurationLT-1;Input string was not in a correct format.
K-DayTimeDurationLT-2;Input string was not in a correct format.
K-DayTimeDurationLT-3;Input string was not in a correct format.
K-DayTimeDurationLT-4;Input string was not in a correct format.
K-DayTimeDurationLT-5;Input string was not in a correct format.
K-DayTimeDurationLT-6;Input string was not in a correct format.
K-DayTimeDurationMultiply-1;Input string was not in a correct format.
K-DayTimeDurationMultiply-10;Input string was not in a correct format.
K-DayTimeDurationMultiply-2;Input string was not in a correct format.
K-DayTimeDurationMultiply-3;Input string was not in a correct format.
K-DayTimeDurationMultiply-4;Input string was not in a correct format.
K-DayTimeDurationMultiply-5;Input string was not in a correct format.
K-DayTimeDurationMultiply-6;Input string was not in a correct format.
K-DayTimeDurationMultiply-7;Expected XPathException with code FODT0002, but got Input string was not in a correct format.
K-DayTimeDurationMultiply-8;Expected XPathException with code FODT0002, but got Input string was not in a correct format.
K-DayTimeDurationMultiply-9;Expected XPathException with code FOCA0005, but got Input string was not in a correct format.
K-DayTimeDurationSubtract-1;Input string was not in a correct format.
K-DayTimeDurationSubtract-2;Input string was not in a correct format.
K-DayTimeDurationSubtract-3;Input string was not in a correct format.
K-DefaultOrderingProlog-1;PRSC Error: Failed to parse query 'declare(::)ordering ordered; 1 eq 1'
K-DefaultOrderingProlog-2;PRSC Error: Failed to parse query 'declare(::)ordering unordered; 1 eq 1'
K-DefaultOrderingProlog-3;Expected error code: XQST0065. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare(::)ordering unordered; declare(::)ordering ordered; 1 eq 1'
K-DurationEQ-1;Input string was not in a correct format.
K-DurationEQ-10;Expected XPath xs:duration("-P1Y3M4DT08H4M33S") ne xs:duration("P1Y3M4DT08H4M33S") to resolve to true
K-DurationEQ-11;Expected XPathException with code XPTY0004, but got Input string was not in a correct format.
K-DurationEQ-12;Expected XPathException with code XPTY0004, but got Input string was not in a correct format.
K-DurationEQ-13;Expected XPathException with code XPTY0004, but got Input string was not in a correct format.
K-DurationEQ-14;Expected XPathException with code XPTY0004, but got Input string was not in a correct format.
K-DurationEQ-23;Expected XPath xs:duration("P1M1DT2H") ne xs:dayTimeDuration("P1DT2H") to resolve to true
K-DurationEQ-24;Expected XPath xs:dayTimeDuration("P1DT2H") ne xs:duration("P1M1DT2H") to resolve to true
K-DurationEQ-29;Expected XPath xs:yearMonthDuration("P1M") ne xs:duration("P31D") to resolve to true
K-DurationEQ-3;Input string was not in a correct format.
K-DurationEQ-30;Expected XPath xs:duration("P31D") ne xs:yearMonthDuration("P1M") to resolve to true
K-DurationEQ-31;Expected XPath xs:yearMonthDuration("P1M") ne xs:dayTimeDuration("P31D") to resolve to true
K-DurationEQ-32;Expected XPath xs:dayTimeDuration("P31D") ne xs:yearMonthDuration("P1M") to resolve to true
K-DurationEQ-33;Expected XPathException with code XPTY0004, but got Input string was not in a correct format.
K-DurationEQ-34;Expected XPathException with code XPTY0004, but got Input string was not in a correct format.
K-DurationEQ-35;Expected XPathException with code XPTY0004, but got Input string was not in a correct format.
K-DurationEQ-36;Expected XPathException with code XPTY0004, but got Input string was not in a correct format.
K-DurationEQ-37;Expected XPathException with code XPTY0004, but got Input string was not in a correct format.
K-DurationEQ-38;Expected XPathException with code XPTY0004, but got Input string was not in a correct format.
K-DurationEQ-39;Expected XPathException with code XPTY0004, but got Input string was not in a correct format.
K-DurationEQ-4;Input string was not in a correct format.
K-DurationEQ-40;Expected XPathException with code XPTY0004, but got Input string was not in a correct format.
K-DurationEQ-41;Expected XPathException with code XPTY0004, but got Input string was not in a correct format.
K-DurationEQ-42;Expected XPathException with code XPTY0004, but got Input string was not in a correct format.
K-DurationEQ-43;Expected XPathException with code XPTY0004, but got Input string was not in a correct format.
K-DurationEQ-44;Expected XPathException with code XPTY0004, but got Input string was not in a correct format.
K-DurationEQ-45;Expected XPathException with code XPTY0004, but got Input string was not in a correct format.
K-DurationEQ-46;Expected XPathException with code XPTY0004, but got Input string was not in a correct format.
K-DurationEQ-47;Expected XPathException with code XPTY0004, but got Input string was not in a correct format.
K-DurationEQ-48;Expected XPathException with code XPTY0004, but got Input string was not in a correct format.
K-DurationEQ-49;Expected XPathException with code XPTY0004, but got Input string was not in a correct format.
K-DurationEQ-5;Input string was not in a correct format.
K-DurationEQ-50;Expected XPathException with code XPTY0004, but got Input string was not in a correct format.
K-DurationEQ-51;Expected XPathException with code XPTY0004, but got Input string was not in a correct format.
K-DurationEQ-52;Expected XPathException with code XPTY0004, but got Input string was not in a correct format.
K-DurationEQ-53;Expected XPathException with code XPTY0004, but got Input string was not in a correct format.
K-DurationEQ-54;Expected XPathException with code XPTY0004, but got Input string was not in a correct format.
K-DurationEQ-55;Expected XPathException with code XPTY0004, but got Input string was not in a correct format.
K-DurationEQ-56;Expected XPathException with code XPTY0004, but got Input string was not in a correct format.
K-DurationEQ-57;Expected XPathException with code XPTY0004, but got Input string was not in a correct format.
K-DurationEQ-58;Expected XPathException with code XPTY0004, but got Input string was not in a correct format.
K-DurationEQ-59;Expected XPathException with code XPTY0004, but got Input string was not in a correct format.
K-DurationEQ-6;Expected XPath xs:duration("P1Y") ne xs:duration("P365D") to resolve to true
K-DurationEQ-60;Expected XPathException with code XPTY0004, but got Input string was not in a correct format.
K-DurationEQ-8;Expected XPath xs:duration("P1M") ne xs:duration("P31D") to resolve to true
K-EmptyOrderProlog-1;PRSC Error: Failed to parse query 'declare(::)default order empty(::)greatest; 1 eq 1'
K-EmptyOrderProlog-2;PRSC Error: Failed to parse query 'declare(::)default order empty(::)least; 1 eq 1'
K-EmptyOrderProlog-3;Expected error code: XQST0069. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare(::)default order empty(::)greatest; declare(::)default order empty(::)least; 1 eq 1'
K-EncodeURIfunc-4;Expected XPath concat("http://www.example.com/", encode-for-uri("~bébé")) eq "http://www.example.com/~b%C3%A9b%C3%A9" to resolve to true
K-EncodeURIfunc-5;Expected XPath concat("http://www.example.com/", encode-for-uri("100% organic")) eq "http://www.example.com/100%25%20organic" to resolve to true
K-EncodeURIfunc-6;TreatExpr AST to Expression not yet implemented
K-EndsWithFunc-5;No collations are supported
K-ErrorFunc-1;The function error with arity 0 is not registered.
K-ErrorFunc-10;Expected error code: FOER0000. Found error code: XPST0017 with error message: The function error with arity 0 is not registered.
K-ErrorFunc-2;The function error with arity 2 is not registered.
K-ErrorFunc-4;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function error with arity 1 is not registered.
K-ErrorFunc-4a;Expected error code: FOER0000. Found error code: XPST0017 with error message: The function error with arity 1 is not registered.
K-ErrorFunc-5;Expected error code: FOER0000. Found error code: XPST0017 with error message: The function error with arity 1 is not registered.
K-ErrorFunc-6;Expected error code: FOER0000. Found error code: XPST0017 with error message: The function error with arity 2 is not registered.
K-ErrorFunc-7;The function error with arity 2 is not registered.
K-ErrorFunc-8;Expected error code: FOER0000. Found error code: XPST0017 with error message: The function error with arity 0 is not registered.
K-ErrorFunc-9;Expected error code: *. Found error code: XPST0017 with error message: The function error with arity 3 is not registered.
K-ExpandedQNameConstructFunc-10;Atomic Value for XsName is not implemented yet.
K-ExpandedQNameConstructFunc-4;PerformValueCompare: Handle QName
K-ExpandedQNameConstructFunc-5;Expected XPathException with code FOCA0002, but got Haven't implemented Qnames from: error:1asd
K-ExpandedQNameConstructFunc-6;Expected XPathException with code FOCA0002, but got Haven't implemented Qnames from: ncname:error
K-ExpandedQNameConstructFunc-8;Expected XPathException with code FOCA0002, but got Haven't implemented Qnames from: //example.com/MyErrorNS:http
K-ExpandedQNameConstructFunc-9;Atomic Value for XsName is not implemented yet.
K-FilterExpr-19;Expected XPath (1, 2, 3)[1.0] eq 1 to resolve to true
K-FilterExpr-20;PRSC Error: Failed to parse query '(1, 2, 3)[1.0e0] eq 1'
K-FilterExpr-22;Expected XPath (1, 2, 3)[3.0] eq 3 to resolve to true
K-FilterExpr-23;PRSC Error: Failed to parse query '(1, 2, 3)[3.0e0] eq 3'
K-FilterExpr-36;The function current-time with arity 0 is not registered.
K-FilterExpr-37;Type casting to XsAnyUri has not been implemented yet.
K-FilterExpr-38;Expected XPathException with code FORG0006, but got Type casting to XsAnyUri has not been implemented yet.
K-FilterExpr-51;Expected executing the XPath '((0, 1, 2, "a", "b", "c")[. instance of xs:string][. treat as xs:string eq "c"] treat as xs:string) eq "c"' to resolve to one of the expected results, but got System.NotImplementedException: TreatExpr AST to Expression not yet implemented
K-FilterExpr-52;Expected executing the XPath '((0, 1, 2, "a", "b", "c")[. instance of xs:integer][. treat as xs:integer eq 0] treat as xs:integer) eq 0' to resolve to one of the expected results, but got System.NotImplementedException: TreatExpr AST to Expression not yet implemented
K-FilterExpr-59;Expected executing the XPath 'empty(()[count(remove((current-time(), 1), 1)) eq 1])' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function current-time with arity 0 is not registered.
K-FilterExpr-69;Casting AbstractValue(XsDouble) to IntegerValue
K-FilterExpr-86;The function current-time with arity 0 is not registered.
K-FilterExpr-87;The function current-time with arity 0 is not registered.
K-FilterExpr-88;Expected executing the XPath 'empty(remove((1, 2, 3, current-time()), 4)[false()])' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function current-time with arity 0 is not registered.
K-FilterExpr-89;The function current-time with arity 0 is not registered.
K-FilterExpr-91;Expected XPathException with code FORG0006, but got Type casting to XsHexBinary has not been implemented yet.
K-FilterExpr-92;Expected error code: FORG0006. Query succeeded with result: 1
K-FilterExpr-93;Expected error code: FORG0006. Query succeeded with result: 1
K-FilterExpr-96;PRSC Error: Failed to parse query '\n         document{<works>{/tail(works/employee)}</works>}/works/employee[@name=/works/employee[2]/@name]/@name/string()\n          = "Jane Doe 3"'
K-FloorFunc-5;Value was either too large or too small for a Decimal.
K-ForExprPositionalVar-12;The function current-time with arity 0 is not registered.
K-ForExprPositionalVar-13;The function current-time with arity 0 is not registered.
K-ForExprPositionalVar-14;The function current-time with arity 0 is not registered.
K-ForExprPositionalVar-17;The function current-time with arity 0 is not registered.
K-ForExprPositionalVar-18;The function current-time with arity 0 is not registered.
K-ForExprPositionalVar-19;The function current-time with arity 0 is not registered.
K-ForExprPositionalVar-20;The function current-time with arity 0 is not registered.
K-ForExprPositionalVar-21;The function current-time with arity 0 is not registered.
K-ForExprPositionalVar-22;The function current-time with arity 0 is not registered.
K-ForExprPositionalVar-23;The function current-time with arity 0 is not registered.
K-ForExprPositionalVar-24;Expected executing the XPath 'empty(for $i at $p in subsequence((1, 2, 3, current-time()), 5) return $p)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function current-time with arity 0 is not registered.
K-ForExprPositionalVar-25;Expected executing the XPath 'empty(for $i at $p in subsequence((1, 2, 3, current-time()), 5, 8) return $p)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function current-time with arity 0 is not registered.
K-ForExprPositionalVar-26;The function current-time with arity 0 is not registered.
K-ForExprPositionalVar-27;The function current-time with arity 0 is not registered.
K-ForExprPositionalVar-28;The function current-time with arity 0 is not registered.
K-ForExprWithout-18;Expected executing the XPath 'empty(for $var in () return current-time())' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function current-time with arity 0 is not registered.
K-ForExprWithout-20;Expected executing the XPath 'empty((for $var in () return current-time()))' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function current-time with arity 0 is not registered.
K-ForExprWithout-22;The function current-time with arity 0 is not registered.
K-ForExprWithout-23;The function current-time with arity 0 is not registered.
K-ForExprWithout-27;Expected error code: XPST0081. Found error code: XPST0008 with error message: The variable 'NOTEXIST' is not in scope.
K-ForExprWithout-30;Expected error code: XPST0081. Found error code: XPST0008 with error message: The variable 'NOTEXIST' is not in scope.
K-ForExprWithout-33;Expected error code: XPST0081. Found error code: XPST0008 with error message: The variable 'NOTEXIST' is not in scope.
K-ForExprWithout-49;The function trace with arity 2 is not registered.
K-ForExprWithout-52;PRSC Error: Failed to parse query '\n        declare variable $i := false(); \n        declare variable $t := false(); \n        deep-equal( for $i in (true(), true()), $t in (true(), true()) \n                    return ($i, $t), (true(), true(), true(), true(), true(), true(), true(), true()))'
K-ForExprWithout-53;PRSC Error: Failed to parse query 'declare variable $my := 3; (for $i in 1 return $my) eq 3'
K-ForExprWithout-54;PRSC Error: Failed to parse query 'declare variable $i := 3; (for $i in 1 return $i) eq 1'
K-ForExprWithout-55;The function current-time with arity 0 is not registered.
K-ForExprWithout-56;The function timezone-from-time with arity 1 is not registered.
K-FunctionCallExpr-15a;The function format-number with arity 2 is not registered.
K-FunctionCallExpr-16a;The function format-time with arity 2 is not registered.
K-FunctionCallExpr-17a;The function format-time with arity 5 is not registered.
K-FunctionCallExpr-25;Expected error code: XPST0017. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'generate-id(<a/>) castable as xs:NCName'
K-FunctionCallExpr-25a;PRSC Error: Failed to parse query 'generate-id(<a/>) castable as xs:NCName'
K-FunctionCallExpr-5;Expected error code: XPST0081. Found error code: XPST0017 with error message: The function prefix-does-not-exist:func-does-not-exist 1with arity 3 could not be resolved.
K-FunctionProlog-1;PRSC Error: Failed to parse query 'declare namespace test = "http://www.w3.org/2005/xpath-datatypes";\n        declare function test:myFunction() { 1};\n        1 eq 1'
K-FunctionProlog-10;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:myFunction() as xs:double { "This is not a double, it's an xs:string." };\n        local:myFunction()'
K-FunctionProlog-11;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:myFunction() as item() { () };\n        local:myFunction()'
K-FunctionProlog-12a;Expected error code: XPST0008. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:computeSum() { $myVariable };\n        declare variable $myVariable := 1;\n        1'
K-FunctionProlog-12b;PRSC Error: Failed to parse query '\n        declare function local:computeSum() { $myVariable };\n        declare variable $myVariable := 1;\n        1 = 1'
K-FunctionProlog-14;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:myFunction() as xs:integer { subsequence((1, 2, "a string"), 3 ,1) };\n        fn:boolean(local:myFunction())'
K-FunctionProlog-15;Expected executing the XPath 'declare function local:myFunction() as xs:anyURI { 1 };\n        true()' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n        declare function local:myFunction() as xs:anyURI { 1 };\n        true()'
K-FunctionProlog-18;PRSC Error: Failed to parse query 'declare variable $var1 := 1;\n        declare function local:func1() as xs:integer { $var1 };\n        declare variable $var2 := 2;\n        declare function local:func2() as xs:integer { $var2 };\n        1 eq local:func1() and 2 eq local:func2()'
K-FunctionProlog-19;PRSC Error: Failed to parse query '\n        declare function local:func1($a1, $a2, $a3) { 1 };\n        local:func1(1, 2, 3) = 1'
K-FunctionProlog-2;Expected error code: XQST0045. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function wrongNS() { 1 };\n        1'
K-FunctionProlog-20;PRSC Error: Failed to parse query '\n        declare function local:func($choose, $whenTrue, $whenFalse) { if($choose) then $whenTrue else $whenFalse };\n        local:func(true(), current-time(), current-date()) instance of xs:time and local:func(false(), current-time(), current-date()) instance of xs:date'
K-FunctionProlog-21;PRSC Error: Failed to parse query '\n        declare function local:func($a as xs:integer, $unused, $c as xs:integer) { $a + $c };\n        local:func(1, 2, 3) = 4'
K-FunctionProlog-22;PRSC Error: Failed to parse query '\n        declare function local:func($unused, $b as xs:integer, $c as xs:integer) { $b + $c };\n        local:func(1, 2, 3) = 5'
K-FunctionProlog-23;PRSC Error: Failed to parse query '\n        declare function local:func($a as xs:integer, $b as xs:integer, $unused) { $a + $b };\n        local:func(1, 2, 3) = 3'
K-FunctionProlog-24;Expected error code: XQST0045. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function wrongNS() { 1 };\n        1'
K-FunctionProlog-25;PRSC Error: Failed to parse query 'declare variable $local:myName := 1;\n        declare function local:myName() as xs:integer { 1 };\n        $local:myName eq local:myName()'
K-FunctionProlog-26;Expected error code: XQST0034. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:myName() { 1 };\n        declare function local:myName() { 1 };\n        1'
K-FunctionProlog-27;Expected error code: XQST0034. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:myName() as xs:integer { 1 };\n        declare function local:myName() as xs:nonPositiveInteger { 1 };\n        1'
K-FunctionProlog-28;Expected error code: XQST0034. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:myName($myvar as xs:integer) { 1 };\n        declare function local:myName($myvar as xs:nonPositiveInteger) { 1 };\n        1'
K-FunctionProlog-29;Expected error code: XQST0034. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:myName($myvar) { 1 };\n        declare function local:myName($myvar2) { 1 };\n        1'
K-FunctionProlog-3;Expected error code: XQST0045. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function xml:wrongNS() { 1 };\n        1'
K-FunctionProlog-30;PRSC Error: Failed to parse query '\n        declare function local:myName($var as xs:integer) as xs:integer { $var };\n        declare function local:myName() as xs:integer { 1 };\n        (local:myName(4) - 3) eq local:myName()'
K-FunctionProlog-31;Expected error code: XQST0045. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function fn:count($var) { fn:count($var) };\n        1'
K-FunctionProlog-32;Expected error code: XQST0045. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function xs:gYear($arg as xs:anyAtomicType?) as xs:gYear? { xs:gYear($arg) };\n        1'
K-FunctionProlog-33;Expected executing the XPath 'declare function local:myFunction() { "a string" + 1 };\n        true()' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n        declare function local:myFunction() { "a string" + 1 };\n        true()'
K-FunctionProlog-34;Expected error code: XPST0017. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:MyFunction() { 1 };\n        local:myFunction()'
K-FunctionProlog-35;Expected error code: XPST0017. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:MyFunction() { 1 };\n        local:myFunctionn()'
K-FunctionProlog-36;Expected error code: XPST0008. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:MyFunction($myArg) { 0 };\n        $myArg'
K-FunctionProlog-37;Expected error code: XPST0008. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:MyFunction($myArg) { 0 };\n        declare function local:MyFunction2($myArg2) { $myArg };\n        1'
K-FunctionProlog-38;Expected error code: XPST0008. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:MyFunction($myArg) { $myArg2 };\n        declare function local:MyFunction2($myArg2) { 0 };\n        1'
K-FunctionProlog-39;PRSC Error: Failed to parse query 'declare variable $local:myVar := 1;\n        declare function local:myFunction($local:myVar) { $local:myVar };\n        $local:myVar, local:myFunction(2)'
K-FunctionProlog-4;Expected error code: XQST0045. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace my = "http://www.w3.org/2001/XMLSchema-instance";\n        declare function my:wrongNS() { 1 };\n        1'
K-FunctionProlog-40;PRSC Error: Failed to parse query '\n        declare function local:myFunction($local:myVar as xs:integer) { for $local:myVar in ($local:myVar, 3) return $local:myVar };\n        deep-equal(local:myFunction(1), (1, 3))'
K-FunctionProlog-41;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:myFunction($local:myVar) { $local:myVar + 1 };\n        local:myFunction(1), local:myFunction("this will fail")'
K-FunctionProlog-42;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:myFunction($local:arg) as item() { 1, $local:arg };\n        local:myFunction(()), local:myFunction(1)'
K-FunctionProlog-43;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:myFunction($arg as item(), $arg2 as xs:integer) { $arg, $arg2 };\n        local:myFunction("3", "3")'
K-FunctionProlog-44;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:myFunction($arg as item(), $arg2 as xs:integer) { $arg, $arg2 };\n        local:myFunction("3", ())'
K-FunctionProlog-45;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:myFunction($arg as item()?, $arg2 as xs:integer) { $arg, $arg2 };\n        local:myFunction((), 4.1)'
K-FunctionProlog-46;Expected executing the XPath 'declare function local:myFunction($arg as empty-sequence()) { $arg };\n        local:myFunction(1)' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:myFunction($arg as empty-sequence()) { $arg };\n        local:myFunction(1)'
K-FunctionProlog-49;Expected executing the XPath 'declare function local:myFunction($arg as empty-sequence()) { $arg };\n        empty(local:myFunction(()))' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n        declare function local:myFunction($arg as empty-sequence()) { $arg };\n        empty(local:myFunction(()))'
K-FunctionProlog-5;Expected error code: XQST0045. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace my = "http://www.w3.org/2001/XMLSchema";\n        declare function my:wrongNS() { 1 };\n        1'
K-FunctionProlog-50;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:myFunction($arg) as empty-sequence() { $arg };\n        local:myFunction(1)'
K-FunctionProlog-51;Expected error code: XPST0017. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:myFunction($arg) { $arg };\n        local:myFunction()'
K-FunctionProlog-52;Expected error code: FOER0000. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:myFunction() as empty-sequence() { fn:error() };\n        local:myFunction()'
K-FunctionProlog-53;Expected executing the XPath 'declare namespace my = "http://example.com/MyNamespace/";\n        declare variable $my:error-qname := QName("http:example.org/", "prefix:ncname");\n        declare function my:error($choice, $msg as xs:string) as empty-sequence() { if($choice) then error($my:error-qname, concat('No luck: ', $msg)) else () };\n        empty((my:error(false(), "msg"), my:error(false(), "The message")))' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare namespace my = "http://example.com/MyNamespace/";\n        declare variable $my:error-qname := QName("http:example.org/", "prefix:ncname");\n        declare function my:error($choice, $msg as xs:string) as empty-sequence() { if($choice) then error($my:error-qname, concat('No luck: ', $msg)) else () };\n        empty((my:error(false(), "msg"), my:error(false(), "The message")))'
K-FunctionProlog-54;Expected error code: *. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace my = "http://example.com/MyNamespace/";\n        declare variable $my:error-qname := QName("http://example.com/MyErrorNS", "my:qName");\n        declare function my:error($msg as xs:string) as empty-sequence() { error($my:error-qname, concat('No luck: ', $msg)) };\n        my:error("The message")'
K-FunctionProlog-55;Expected error code: *. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace my = "http://example.com/MyNamespace/";\n        declare variable $my:error-qname := QName("http://example.com/MyErrorNS", "my:qName");\n        declare function my:error($choice, $msg as xs:string) as empty-sequence() { if($choice) then error($my:error-qname, concat('No luck: ', $msg)) else () };\n        my:error(false(), "msg"), my:error(true(), "The message")'
K-FunctionProlog-56;Expected executing the XPath 'declare namespace my = "http://example.com/MyNamespace/";\n        declare variable $my:error-qname := QName("http://example.com/MyErrorNS", "my:qName");\n        declare function my:error($choice, $msg as xs:string) as empty-sequence() { if($choice) then error($my:error-qname, concat('No luck: ', $msg)) else () };\n        empty((my:error(false(), "msg"), my:error(false(), "The message")))' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare namespace my = "http://example.com/MyNamespace/";\n        declare variable $my:error-qname := QName("http://example.com/MyErrorNS", "my:qName");\n        declare function my:error($choice, $msg as xs:string) as empty-sequence() { if($choice) then error($my:error-qname, concat('No luck: ', $msg)) else () };\n        empty((my:error(false(), "msg"), my:error(false(), "The message")))'
K-FunctionProlog-57;Expected error code: XPST0051. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:error() as none { 1 };\n        local:error()'
K-FunctionProlog-59;Expected executing the XPath 'declare function local:myFunction($unusedArg) { true() };\n        local:myFunction(1 + "a string")' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n        declare function local:myFunction($unusedArg) { true() };\n        local:myFunction(1 + "a string")'
K-FunctionProlog-60;Expected error code: XPST0008. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:myFunction($arg) { 1 };\n        $arg'
K-FunctionProlog-61;Expected error code: XPST0008. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:myFunction($arg, $arg2, $arg3) { 1 };\n        $arg3'
K-FunctionProlog-62;PRSC Error: Failed to parse query 'declare variable $my := 3;\n        declare function local:myFunction($my, $arg2, $arg4) { 1 };\n        $my eq 3'
K-FunctionProlog-64;Expected error code: XPST0017. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace my = "http://example.com/ANamespace";\n        my:function(1)'
K-FunctionProlog-65;Expected executing the XPath 'declare function local:myFunction() as empty-sequence() { fn:error() };\n        QName("http://example.com/ANamespace", local:myFunction())' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:myFunction() as empty-sequence() { fn:error() };\n        QName("http://example.com/ANamespace", local:myFunction())'
K-FunctionProlog-66;Expected executing the XPath 'declare function local:myFunction() { fn:error() };\n        QName("http://example.com/ANamespace", local:myFunction())' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: FOER0000. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:myFunction() { fn:error() };\n        QName("http://example.com/ANamespace", local:myFunction())'
K-FunctionProlog-67;PRSC Error: Failed to parse query 'declare default function namespace "http://www.w3.org/2005/xquery-local-functions";\n        declare function local:is() as xs:integer { 1 };\n        is() eq 1'
K-FunctionProlog-68;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:myFunction($usedArg) { $usedArg };\n        local:myFunction(1 + "a string")'
K-GenCompEq-16;Expected error code: FOER0000. Found error code: XPST0017 with error message: The function error with arity 0 is not registered.
K-GenCompEq-17;Expected error code: FOER0000. Found error code: XPST0017 with error message: The function error with arity 0 is not registered.
K-GenCompEq-18;Expected error code: FOER0000. Found error code: XPST0017 with error message: The function error with arity 0 is not registered.
K-GenCompEq-19;Expected error code: FOER0000. Found error code: XPST0017 with error message: The function error with arity 0 is not registered.
K-GenCompEq-20;The function current-time with arity 0 is not registered.
K-GenCompEq-21;The function timezone-from-time with arity 1 is not registered.
K-GenCompEq-22;The function timezone-from-time with arity 1 is not registered.
K-GenCompEq-23;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-GenCompEq-51;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K-GenCompEq-54;Expected error code: FORG0001. Found error code: XPTY0004 with error message: Casting not supported from given type to xs:boolean or any of its derived types.
K-GenCompEq-55;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-GenCompEq-56;Expected error code: FORG0001. Found error code: XPTY0004 with error message: Casting not supported from given type to xs:boolean or any of its derived types.
K-GenCompEq-57;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K-GenCompEq-58;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-GenCompEq-59;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-GenCompGT-16;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-GenCompGT-17;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-GenCompGT-18;The function timezone-from-time with arity 1 is not registered.
K-GenCompGT-19;The function timezone-from-time with arity 1 is not registered.
K-GenCompGTEQ-10;The function timezone-from-time with arity 1 is not registered.
K-GenCompGTEQ-5;The function timezone-from-time with arity 1 is not registered.
K-GenCompLT-16;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-GenCompLT-17;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-GenCompLT-18;The function timezone-from-time with arity 1 is not registered.
K-GenCompLT-19;The function timezone-from-time with arity 1 is not registered.
K-GenCompNE-13;The function timezone-from-time with arity 1 is not registered.
K-GenCompNE-31;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K-GenCompNE-32;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K-GenCompNE-35;Expected error code: FORG0001. Found error code: XPTY0004 with error message: Casting not supported from given type to xs:boolean or any of its derived types.
K-GenCompNE-39;Expected error code: FORG0001. Found error code: XPTY0004 with error message: Casting not supported from given type to xs:boolean or any of its derived types.
K-GenCompNE-40;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-GenCompNE-41;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-HexBinaryEQ-1;Type casting to XsHexBinary has not been implemented yet.
K-HexBinaryEQ-2;Type casting to XsHexBinary has not been implemented yet.
K-HexBinaryEQ-3;Type casting to XsHexBinary has not been implemented yet.
K-HexBinaryEQ-4;Type casting to XsHexBinary has not been implemented yet.
K-HexBinaryEQ-5;Type casting to XsHexBinary has not been implemented yet.
K-HexBinaryEQ-6;Type casting to XsHexBinary has not been implemented yet.
K-HexBinaryEQ-7;Type casting to XsHexBinary has not been implemented yet.
K-HexBinaryEQ-8;Type casting to XsHexBinary has not been implemented yet.
K-HoursFromDateTimeFunc-3;The function hours-from-dateTime with arity 1 is not registered.
K-HoursFromDateTimeFunc-4;The function hours-from-dateTime with arity 1 is not registered.
K-HoursFromDateTimeFunc-5;The function hours-from-dateTime with arity 1 is not registered.
K-HoursFromDurationFunc-3;The function hours-from-duration with arity 1 is not registered.
K-HoursFromDurationFunc-4;The function hours-from-duration with arity 1 is not registered.
K-HoursFromDurationFunc-5;The function hours-from-duration with arity 1 is not registered.
K-HoursFromDurationFunc-6;The function hours-from-duration with arity 1 is not registered.
K-HoursFromDurationFunc-7;The function hours-from-duration with arity 1 is not registered.
K-HoursFromTimeFunc-3;The function hours-from-time with arity 1 is not registered.
K-HoursFromTimeFunc-4;The function hours-from-time with arity 1 is not registered.
K-HoursFromTimeFunc-5;The function hours-from-time with arity 1 is not registered.
K-InternalVariablesWith-1;PRSC Error: Failed to parse query 'declare(::)variable(::)$local:var(::)as(::)item((: :))* :=3(::);(::)1(::)eq(::)1'
K-InternalVariablesWith-11;PRSC Error: Failed to parse query 'declare variable $var1 := 2; declare variable $var2 := $var1; $var2 eq 2'
K-InternalVariablesWith-12;PRSC Error: Failed to parse query 'declare variable $var1 := local:myFunc(); declare function local:myFunc() { 1 }; $var1 eq 1'
K-InternalVariablesWith-13;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $var1 as xs:string := local:myFunc(); declare function local:myFunc() as xs:integer { 1 }; $var1 eq 1'
K-InternalVariablesWith-14;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $var1 as xs:string := local:myFunc(); declare function local:myFunc() { 1 }; $var1 eq 1'
K-InternalVariablesWith-15a;Expected error code: XPST0008. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $var1 := $var1; true()'
K-InternalVariablesWith-15b;Expected error code: XPST0008. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $var1 := $var1; true()'
K-InternalVariablesWith-16;Expected error code: XQST0054. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      declare variable $var := local:func1(); \n      declare function local:func1() { local:func2() }; \n      declare function local:func2() { local:func3() }; \n      declare function local:func3() { local:func4() }; \n      declare function local:func4() { $var }; \n      boolean($var)'
K-InternalVariablesWith-16a;Expected error code: XQDY0054. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      declare variable $var := local:func1(); \n      declare function local:func1() { local:func2() }; \n      declare function local:func2() { local:func3() }; \n      declare function local:func3() { local:func4() }; \n      declare function local:func4() { $var }; \n      boolean($var)'
K-InternalVariablesWith-17;Expected error code: XQST0054. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $var := local:func1(); declare function local:func1() { local:func2($var) }; declare function local:func2($arg2) { 1 }; true()'
K-InternalVariablesWith-17a;Expected error code: XQDY0054. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $var := local:func1(); declare function local:func1() { local:func2($var) }; declare function local:func2($arg2) { 1 }; true()'
K-InternalVariablesWith-18;Expected error code: XQST0054. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $var := local:func1(); declare function local:func1() { local:func2($var) }; declare function local:func2($arg2) { $arg2 }; $var'
K-InternalVariablesWith-18a;Expected error code: XQDY0054. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $var := local:func1(); declare function local:func1() { local:func2($var) }; declare function local:func2($arg2) { $arg2 }; $var'
K-InternalVariablesWith-19;Expected error code: XQST0054. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $var2 := local:func1(); declare variable $var := ($var2 treat as xs:integer) + 1; declare function local:func1() { local:func2() }; declare function local:func2() { local:func3() }; declare function local:func3() { local:func4() }; declare function local:func4() { $var }; boolean($var)'
K-InternalVariablesWith-19a;Expected error code: XQDY0054. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $var2 := local:func1(); declare variable $var := ($var2 treat as xs:integer) + 1; declare function local:func1() { local:func2() }; declare function local:func2() { local:func3() }; declare function local:func3() { local:func4() }; declare function local:func4() { $var }; boolean($var)'
K-InternalVariablesWith-2;PRSC Error: Failed to parse query '(::)declare(::)variable(::)$local:var(::):=(::)3;(::)1(::)eq(::)1(::)'
K-InternalVariablesWith-20;Expected error code: XQST0054. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $var := local:func1(); declare function local:func1() { local:func2() }; declare function local:func2() { local:func3() }; declare variable $var2 := local:func2(); declare function local:func3() { $var2 }; boolean($var)'
K-InternalVariablesWith-20a;Expected error code: XQDY0054. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $var := local:func1(); declare function local:func1() { local:func2() }; declare function local:func2() { local:func3() }; declare variable $var2 := local:func2(); declare function local:func3() { $var2 }; boolean($var)'
K-InternalVariablesWith-21;PRSC Error: Failed to parse query 'declare variable $local:var as item() *:=3; true()'
K-InternalVariablesWith-3;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $myVar as xs:integer := subsequence((1, 2, "a string"), 3, 1); $myVar eq 3'
K-InternalVariablesWith-4;Expected executing the XPath 'declare variable $myVar as xs:gYear := 2006; true()' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare variable $myVar as xs:gYear := 2006; true()'
K-InternalVariablesWith-5;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $myVar as xs:gYear := 2006; $myVar'
K-InternalVariablesWith-6a;Expected error code: XPST0008. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $var1 := $var2; declare variable $var2 := 2; true()'
K-InternalVariablesWith-6b;PRSC Error: Failed to parse query 'declare variable $var1 := $var2; declare variable $var2 := 2; true()'
K-InternalVariablesWith-9a;Expected error code: XPST0008. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $var1 := $var2; declare variable $var2 := 2; $var1'
K-InternalVariablesWith-9b;PRSC Error: Failed to parse query 'declare variable $var1 := $var2; declare variable $var2 := 2; $var1 = 2'
K-IRIToURIfunc-4;Expected executing the XPath 'normalize-space(iri-to-uri(("somestring", current-time())[1])) eq "somestring"' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function current-time with arity 0 is not registered.
K-LetExprWithout-4;PRSC Error: Failed to parse query '\n        declare variable $i := false(); \n        declare variable $t := false(); \n        deep-equal((let $i := true(), $t := true() return ($i, $t)), (true(), true()))'
K-Literals-10;PRSC Error: Failed to parse query '1.3e-3 instance of xs:double'
K-Literals-13;PRSC Error: Failed to parse query '1231.123e3 instance of xs:double'
K-Literals-15;PRSC Error: Failed to parse query '-1231.123e3 instance of xs:double'
K-Literals-18;PRSC Error: Failed to parse query '3.3e1 instance of xs:double'
K-Literals-31;Expected error code: XPST0003. Query succeeded with result: a string &;
K-Literals-32;Expected error code: XPST0003. Query succeeded with result: a string &#;
K-Literals-33;Expected error code: XPST0003. Query succeeded with result: a string &#;
K-Literals-34;Expected error code: XPST0003. Query succeeded with result: a string &#1233a98;
K-Literals-35;Expected error code: XPST0003. Query succeeded with result: a string &#1233.98;
K-Literals-36;Expected error code: XPST0003. Query succeeded with result: a string &#1233 98;
K-Literals-38;Expected error code: XPST0003. Query succeeded with result: a string &#x;
K-Literals-39;Expected error code: XPST0003. Query succeeded with result: a string &#x543.3;
K-Literals-40;Expected error code: XPST0003. Query succeeded with result: a string &#x543g3;
K-Literals-41;Expected error code: XPST0003. Query succeeded with result: a string &#x543 3;
K-Literals-42;Expected error code: XPST0003. Query succeeded with result: a string &LT;
K-Literals-43;Expected error code: XPST0003. Query succeeded with result: a string &lte;
K-Literals-44;Expected error code: XPST0003. Query succeeded with result: a string &
K-Literals-45;Expected error code: XPST0003. Query succeeded with result: a string &#x;
K-Literals-46;Expected XPath "&lt; &gt; &amp; &quot; &apos; &#x48; &#48;" eq "< > &amp; "" ' &#x48; &#48;" to resolve to true
K-Literals-47;Expected XPath "t" eq "&#x74;" to resolve to true
K-Literals-48;Expected error code: XPST0003. Query succeeded with result: &#X4A;
K-LocalNameFromQNameFunc-3;The function local-name-from-QName with arity 1 is not registered.
K-LocalNameFromQNameFunc-4;The function local-name-from-QName with arity 1 is not registered.
K-LogicExpr-10;Type casting to XsAnyUri has not been implemented yet.
K-LogicExpr-11;Type casting to XsAnyUri has not been implemented yet.
K-LogicExpr-14;TreatExpr AST to Expression not yet implemented
K-LogicExpr-15;TreatExpr AST to Expression not yet implemented
K-LogicExpr-16;Expected error code: FORG0006. Found error code: XPST0017 with error message: The function current-date with arity 0 is not registered.
K-LogicExpr-17;Expected error code: FORG0006. Found error code: XPST0017 with error message: The function current-date with arity 0 is not registered.
K-LogicExpr-18;Expected error code: FORG0006. Found error code: XPST0017 with error message: The function current-date with arity 0 is not registered.
K-LogicExpr-19;Expected error code: FORG0006. Found error code: XPST0017 with error message: The function current-date with arity 0 is not registered.
K-LogicExpr-20;Expected error code: FORG0006. Found error code: XPST0017 with error message: The function current-date with arity 0 is not registered.
K-LogicExpr-21;Expected error code: FORG0006. Found error code: XPST0017 with error message: The function current-date with arity 0 is not registered.
K-LogicExpr-22;The function timezone-from-time with arity 1 is not registered.
K-LogicExpr-23;The function timezone-from-time with arity 1 is not registered.
K-LogicExpr-24;The function timezone-from-time with arity 1 is not registered.
K-LogicExpr-25;TreatExpr AST to Expression not yet implemented
K-LogicExpr-26;TreatExpr AST to Expression not yet implemented
K-LogicExpr-27;TreatExpr AST to Expression not yet implemented
K-LogicExpr-32;TreatExpr AST to Expression not yet implemented
K-LogicExpr-33;TreatExpr AST to Expression not yet implemented
K-LogicExpr-34;Type casting to XsAnyUri has not been implemented yet.
K-LogicExpr-35;Type casting to XsAnyUri has not been implemented yet.
K-LogicExpr-36;Type casting to XsAnyUri has not been implemented yet.
K-LogicExpr-39;The function timezone-from-time with arity 1 is not registered.
K-LogicExpr-40;The function timezone-from-time with arity 1 is not registered.
K-LogicExpr-41;The function timezone-from-time with arity 1 is not registered.
K-LogicExpr-42;TreatExpr AST to Expression not yet implemented
K-LogicExpr-43;TreatExpr AST to Expression not yet implemented
K-LogicExpr-44;TreatExpr AST to Expression not yet implemented
K-LogicExpr-8;Type casting to XsAnyUri has not been implemented yet.
K-LogicExpr-9;Type casting to XsAnyUri has not been implemented yet.
K-MatchesFunc-3;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function matches with arity 3 is not registered.
K-MatchesFunc-5;Expected error code: FORX0001. Found error code: XPST0017 with error message: The function matches with arity 3 is not registered.
K-MatchesFunc-6;Expected error code: FORX0001. Found error code: XPST0017 with error message: The function matches with arity 3 is not registered.
K-MinutesFromDateTimeFunc-3;The function minutes-from-dateTime with arity 1 is not registered.
K-MinutesFromDateTimeFunc-4;The function minutes-from-dateTime with arity 1 is not registered.
K-MinutesFromDateTimeFunc-5;The function minutes-from-dateTime with arity 1 is not registered.
K-MinutesFromDurationFunc-3;The function minutes-from-duration with arity 1 is not registered.
K-MinutesFromDurationFunc-4;The function minutes-from-duration with arity 1 is not registered.
K-MinutesFromDurationFunc-5;The function minutes-from-duration with arity 1 is not registered.
K-MinutesFromDurationFunc-6;The function minutes-from-duration with arity 1 is not registered.
K-MinutesFromDurationFunc-7;The function minutes-from-duration with arity 1 is not registered.
K-MinutesFromTimeFunc-3;The function minutes-from-time with arity 1 is not registered.
K-MinutesFromTimeFunc-4;The function minutes-from-time with arity 1 is not registered.
K-MinutesFromTimeFunc-5;The function minutes-from-time with arity 1 is not registered.
K-MonthFromDateFunc-3;The function month-from-date with arity 1 is not registered.
K-MonthFromDateFunc-4;The function month-from-date with arity 1 is not registered.
K-MonthFromDateFunc-5;The function month-from-date with arity 1 is not registered.
K-MonthFromDateTimeFunc-3;The function month-from-dateTime with arity 1 is not registered.
K-MonthFromDateTimeFunc-4;The function month-from-dateTime with arity 1 is not registered.
K-MonthFromDateTimeFunc-5;The function month-from-dateTime with arity 1 is not registered.
K-MonthsFromDurationFunc-3;The function months-from-duration with arity 1 is not registered.
K-MonthsFromDurationFunc-4;The function months-from-duration with arity 1 is not registered.
K-MonthsFromDurationFunc-5;The function months-from-duration with arity 1 is not registered.
K-MonthsFromDurationFunc-6;The function months-from-duration with arity 1 is not registered.
K-MonthsFromDurationFunc-7;The function months-from-duration with arity 1 is not registered.
K-NameFunc-3;Multiplicity of function return value of type xs:string for 'name' is incorrect. Expected exactly one
K-NamespaceProlog-1;PRSC Error: Failed to parse query '(::)declare(::)namespace(::)ncname(::)=(::)'http://example.com/';(::)1(::)eq(::)1(::)'
K-NamespaceProlog-2;PRSC Error: Failed to parse query '(::)declare(::)namespace(::)ncname(::)=(::)"http://example.com/"(::);(::)1(::)eq(::)1(::)'
K-NamespaceURIFromQNameFunc-3;The function namespace-uri-from-QName with arity 1 is not registered.
K-NamespaceURIFromQNameFunc-4;The function namespace-uri-from-QName with arity 1 is not registered.
K-NamespaceURIFromQNameFunc-5;The function namespace-uri-from-QName with arity 1 is not registered.
K-NameTest-10;Expected error code: XPST0003. Query succeeded with result: f oo
K-NameTest-11;Expected error code: XPST0003. Found error code: XPST0017 with error message: The function normalize-unicode with arity 1 is not registered.
K-NodeAfter-6;Expected error code: XPST0003. Query succeeded with result: 
K-NodeAfter-9;Expected error code: XPST0003. Query succeeded with result: 1
K-NodeBefore-12;PRSC Error: Failed to parse query '\n   let $doc := \n   <catalog>\n       <product dept="WMN">\n        <number>557</number>\n        <name language="en">Fleece Pullover</name>\n        <colorChoices>navy black</colorChoices>\n       </product>\n       <product dept="ACC">\n        <number>563</number>\n        <name language="en">Floppy Sun Hat</name>\n       </product>\n       <product dept="ACC">\n        <number>443</number>\n        <name language="en">Deluxe Travel Bag</name>\n       </product>\n       <product dept="MEN">\n        <number>784</number>\n        <name language="en">Cotton Dress Shirt</name>\n        <colorChoices>white gray</colorChoices>\n        <desc>Our <i>favorite</i> shirt!</desc>\n       </product>\n   </catalog>\n   let $prods := $doc//product\n   for $prod in $prods\n   where $prod << $prods[@dept = $prod/@dept][last()]\n   return $prod'
K-NodeBefore-6;Expected error code: XPST0003. Query succeeded with result: 
K-NodeBefore-9;Expected error code: XPST0003. Query succeeded with result: 1
K-NodeNameFunc-1;Expected error code: XPST0017. Query succeeded with result: 
K-NodeNameFunc-1a;Expected error code: XPDY0002. Query succeeded with result: 
K-NodeNameFunc-3;Object reference not set to an instance of an object.
K-NodeNumberFunc-12;Type casting to XsAnyUri has not been implemented yet.
K-NodeNumberFunc-13;Type casting to XsAnyUri has not been implemented yet.
K-NodeNumberFunc-15;Expected XPath string(number(xs:gYear("2005"))) eq "NaN" to resolve to true
K-NodeNumberFunc-16;Casting AbstractValue(XsDouble) to IntegerValue
K-NodeNumberFunc-17;Casting AbstractValue(XsDouble) to IntegerValue
K-NodeNumberFunc-3;Input string was not in a correct format.
K-NodeNumberFunc-4;Input string was not in a correct format.
K-NodeRootFunc-2;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function generate-id with arity 0 is not registered.
K-NodeSame-5;Expected error code: XPST0003. Query succeeded with result: 
K-NormalizeSpaceFunc-6;Object reference not set to an instance of an object.
K-NormalizeSpaceFunc-9;Expected executing the XPath 'normalize-space(normalize-space(("foo", current-time())[1])) eq "foo"' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function current-time with arity 0 is not registered.
K-NotFunc-10;TreatExpr AST to Expression not yet implemented
K-NotFunc-8;Type casting to XsAnyUri has not been implemented yet.
K-NotFunc-9;Type casting to XsAnyUri has not been implemented yet.
K-NumericAdd-10;Expected XPath string(xs:double("NaN") + 3) eq "NaN" to resolve to true
K-NumericAdd-11;Expected XPath string(3 + xs:float("NaN")) eq "NaN" to resolve to true
K-NumericAdd-12;Expected XPath string(3 + xs:double("NaN")) eq "NaN" to resolve to true
K-NumericAdd-17;Expected XPath (xs:decimal(6) + xs:float(2)) instance of xs:float to resolve to true
K-NumericAdd-18;Expected XPath (xs:float(6) + xs:decimal(2)) instance of xs:float to resolve to true
K-NumericAdd-19;Expected XPath (xs:float(6) + xs:integer(2)) instance of xs:float to resolve to true
K-NumericAdd-20;Expected XPath (xs:integer(6) + xs:float(2)) instance of xs:float to resolve to true
K-NumericAdd-31;Expected error code: FOER0000. Found error code: XPST0017 with error message: The function error with arity 0 is not registered.
K-NumericAdd-32;Expected error code: FOER0000. Found error code: XPST0017 with error message: The function error with arity 0 is not registered.
K-NumericAdd-33;Expected error code: FOER0000. Found error code: XPST0017 with error message: The function error with arity 0 is not registered.
K-NumericAdd-34;Expected executing the XPath '(4, error()) + 3' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: FOER0000. Found error code: XPST0017 with error message: The function error with arity 0 is not registered.
K-NumericAdd-35;Expected executing the XPath '3 + (4, error())' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: FOER0000. Found error code: XPST0017 with error message: The function error with arity 0 is not registered.
K-NumericAdd-36;Expected error code: FOER0000. Found error code: XPST0017 with error message: The function error with arity 0 is not registered.
K-NumericAdd-41;Expected executing the XPath 'error() + 3' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: FOER0000. Found error code: XPST0017 with error message: The function error with arity 0 is not registered.
K-NumericAdd-42;Expected error code: FOER0000. Found error code: XPST0017 with error message: The function error with arity 0 is not registered.
K-NumericAdd-5;Expected XPath xs:double(1.1) + xs:double(2.2) ne 3.3 to resolve to true
K-NumericAdd-6;Expected XPath xs:float(1.1) + xs:float(2.2) ne 3.3 to resolve to true
K-NumericAdd-9;Expected XPath string(xs:float("NaN") + 3) eq "NaN" to resolve to true
K-NumericDivide-20;Expected XPath (xs:float(6) div xs:decimal(2)) instance of xs:float to resolve to true
K-NumericDivide-21;Expected XPath (xs:decimal(6) div xs:float(2)) instance of xs:float to resolve to true
K-NumericDivide-22;Expected XPath (xs:float(6) div xs:integer(2)) instance of xs:float to resolve to true
K-NumericDivide-23;Expected XPath (xs:integer(6) div xs:float(2)) instance of xs:float to resolve to true
K-NumericDivide-37;Expected error code: XPST0003. Query succeeded with result: 3.33333333333333
K-NumericEqual-16;Expected XPath xs:double("NaN") ne xs:double("NaN") to resolve to true
K-NumericEqual-30;Expected XPath xs:float("NaN") ne xs:float("NaN") to resolve to true
K-NumericEqual-41;The function current-time with arity 0 is not registered.
K-NumericEqual-42;The function timezone-from-time with arity 1 is not registered.
K-NumericEqual-43;The function timezone-from-time with arity 1 is not registered.
K-NumericEqual-44;Expected error code: XPTY0004. Query succeeded with result: True
K-NumericEqual-46;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K-NumericEqual-9;Can not cast '<Value>[type: XsDouble, value: NaN]' to xs:decimal
K-NumericGT-10;Value was either too large or too small for a Decimal.
K-NumericGT-13;Value was either too large or too small for a Decimal.
K-NumericGT-14;Value was either too large or too small for a Decimal.
K-NumericGT-15;Value was either too large or too small for a Decimal.
K-NumericGT-16;Value was either too large or too small for a Decimal.
K-NumericGT-17;Value was either too large or too small for a Decimal.
K-NumericGT-18;Value was either too large or too small for a Decimal.
K-NumericGT-19;Value was either too large or too small for a Decimal.
K-NumericGT-20;Value was either too large or too small for a Decimal.
K-NumericGT-21;The function timezone-from-time with arity 1 is not registered.
K-NumericGT-22;The function timezone-from-time with arity 1 is not registered.
K-NumericGT-23;The function timezone-from-time with arity 1 is not registered.
K-NumericGT-5;Value was either too large or too small for a Decimal.
K-NumericGT-6;Value was either too large or too small for a Decimal.
K-NumericGT-9;Value was either too large or too small for a Decimal.
K-NumericIntegerDivide-24;One of the operands of idiv is NaN or the first operand is (-)INF
K-NumericIntegerDivide-26;PRSC Error: Failed to parse query '3.1E1 idiv 6 eq 5'
K-NumericIntegerDivide-27;PRSC Error: Failed to parse query '3.1E1 idiv 7 eq 4'
K-NumericIntegerDivide-43;Expected error code: XPST0003. Query succeeded with result: 3
K-NumericIntegerDivide-50;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K-NumericIntegerDivide-51;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K-NumericLT-10;Value was either too large or too small for a Decimal.
K-NumericLT-13;Value was either too large or too small for a Decimal.
K-NumericLT-14;Value was either too large or too small for a Decimal.
K-NumericLT-15;Value was either too large or too small for a Decimal.
K-NumericLT-16;Value was either too large or too small for a Decimal.
K-NumericLT-17;Value was either too large or too small for a Decimal.
K-NumericLT-18;Value was either too large or too small for a Decimal.
K-NumericLT-19;Value was either too large or too small for a Decimal.
K-NumericLT-20;Value was either too large or too small for a Decimal.
K-NumericLT-21;The function timezone-from-time with arity 1 is not registered.
K-NumericLT-22;The function timezone-from-time with arity 1 is not registered.
K-NumericLT-5;Value was either too large or too small for a Decimal.
K-NumericLT-6;Value was either too large or too small for a Decimal.
K-NumericLT-9;Value was either too large or too small for a Decimal.
K-NumericMod-20;PRSC Error: Failed to parse query '1.23E2 mod 0.6E1 eq 3.0E0'
K-NumericMod-22;Expected error code: XPST0003. Query succeeded with result: 1
K-NumericMod-5;Expected XPath (xs:decimal(6) mod xs:float(2)) instance of xs:float to resolve to true
K-NumericMod-6;Expected XPath (xs:float(6) mod xs:decimal(2)) instance of xs:float to resolve to true
K-NumericMod-7;Expected XPath (xs:float(6) mod xs:integer(2)) instance of xs:float to resolve to true
K-NumericMod-8;Expected XPath (xs:integer(6) mod xs:float(2)) instance of xs:float to resolve to true
K-NumericMultiply-10;Expected XPath (xs:float(6) * xs:decimal(2)) instance of xs:float to resolve to true
K-NumericMultiply-11;Expected XPath (xs:float(6) * xs:integer(2)) instance of xs:float to resolve to true
K-NumericMultiply-12;Expected XPath (xs:integer(6) * xs:float(2)) instance of xs:float to resolve to true
K-NumericMultiply-21;Expected XPath string(xs:float("NaN") * 3) eq "NaN" to resolve to true
K-NumericMultiply-22;Expected XPath string(xs:double("NaN") * 3) eq "NaN" to resolve to true
K-NumericMultiply-23;Expected XPath string(3 * xs:float("NaN")) eq "NaN" to resolve to true
K-NumericMultiply-24;Expected XPath string(3 * xs:double("NaN")) eq "NaN" to resolve to true
K-NumericMultiply-9;Expected XPath (xs:decimal(6) * xs:float(2)) instance of xs:float to resolve to true
K-NumericSubtract-10;Expected XPath (xs:float(6) - xs:decimal(2)) instance of xs:float to resolve to true
K-NumericSubtract-11;Expected XPath (xs:float(6) - xs:integer(2)) instance of xs:float to resolve to true
K-NumericSubtract-12;Expected XPath (xs:integer(6) - xs:float(2)) instance of xs:float to resolve to true
K-NumericSubtract-21;Expected XPath string(xs:float("NaN") - 3) eq "NaN" to resolve to true
K-NumericSubtract-22;Expected XPath string(xs:double("NaN") - 3) eq "NaN" to resolve to true
K-NumericSubtract-23;Expected XPath string(3 - xs:float("NaN")) eq "NaN" to resolve to true
K-NumericSubtract-24;Expected XPath string(3 - xs:double("NaN")) eq "NaN" to resolve to true
K-NumericSubtract-36;Expected executing the XPath '1 eq (remove((current-time(), 1), 1) - 0)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function current-time with arity 0 is not registered.
K-NumericSubtract-37;Expected executing the XPath '1 eq (remove((current-time(), 1), 1) + 0)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function current-time with arity 0 is not registered.
K-NumericSubtract-38;Expected executing the XPath '1 eq (0 + remove((current-time(), 1), 1))' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function current-time with arity 0 is not registered.
K-NumericSubtract-9;Expected XPath (xs:decimal(6) - xs:float(2)) instance of xs:float to resolve to true
K-NumericUnaryMinus-1;Expected error code: XPTY0004. Query succeeded with result: Infinity
K-NumericUnaryMinus-15;Value was either too large or too small for a Decimal.
K-NumericUnaryPlus-1;Expected error code: XPTY0004. Query succeeded with result: Infinity
K-OrderExpr-1a;PRSC Error: Failed to parse query '(ordered{}) => empty()'
K-OrderExpr-2a;PRSC Error: Failed to parse query '(unordered{}) => empty()'
K-OrderExpr-3;PRSC Error: Failed to parse query 'ordered{true()}'
K-OrderExpr-4;PRSC Error: Failed to parse query 'unordered{true()}'
K-PrefixFromQName-3;The function prefix-from-QName with arity 1 is not registered.
K-PrefixFromQName-4;The function prefix-from-QName with arity 1 is not registered.
K-QNameEQ-1;PerformValueCompare: Handle QName
K-QNameEQ-10;Expected XPathException with code XPTY0004, but got PerformValueCompare: Handle QName
K-QNameEQ-2;PerformValueCompare: Handle QName
K-QNameEQ-3;PerformValueCompare: Handle QName
K-QNameEQ-4;PerformValueCompare: Handle QName
K-QNameEQ-6;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-QNameEQ-7;Expected XPathException with code XPTY0004, but got PerformValueCompare: Handle QName
K-QNameEQ-8;Expected XPathException with code XPTY0004, but got PerformValueCompare: Handle QName
K-QNameEQ-9;Expected XPathException with code XPTY0004, but got PerformValueCompare: Handle QName
K-QuantExprWith-1;The variable 'a' is declared but not in scope.
K-QuantExprWith-10;Expected error code: XPTY0004. Query succeeded with result: 
K-QuantExprWith-11;Expected error code: XPTY0004. Found error code: XQDY0054 with error message: The variable 'a' is declared but not in scope.
K-QuantExprWith-12;Expected error code: XPTY0004. Found error code: XQDY0054 with error message: The variable 'a' is declared but not in scope.
K-QuantExprWith-13;Expected error code: XPTY0004. Found error code: XQDY0054 with error message: The variable 'a' is declared but not in scope.
K-QuantExprWith-14;Expected error code: XPTY0004. Found error code: XQDY0054 with error message: The variable 'a' is declared but not in scope.
K-QuantExprWith-15;Expected error code: XPTY0004. Found error code: XQDY0054 with error message: The variable 'a' is declared but not in scope.
K-QuantExprWith-16;Expected error code: XPTY0004. Found error code: XQDY0054 with error message: The variable 'a' is declared but not in scope.
K-QuantExprWith-17;The variable 'a' is declared but not in scope.
K-QuantExprWith-18;The variable 'a' is declared but not in scope.
K-QuantExprWith-2;The variable 'a' is declared but not in scope.
K-QuantExprWith-21;Expected executing the XPath 'every $a as empty-sequence() in (), $b as xs:integer in $a satisfies $b' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The variable 'a' is declared but not in scope.
K-QuantExprWith-22;Expected executing the XPath 'not(some $a as empty-sequence() in (), $b as xs:integer in $a satisfies $b)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The variable 'a' is declared but not in scope.
K-QuantExprWith-23;The variable 'a' is declared but not in scope.
K-QuantExprWith-24;The variable 'a' is declared but not in scope.
K-QuantExprWith-3;The variable 'a' is declared but not in scope.
K-QuantExprWith-4;The variable 'a' is declared but not in scope.
K-QuantExprWith-5;The variable 'a' is declared but not in scope.
K-QuantExprWith-6;The variable 'a' is declared but not in scope.
K-QuantExprWith-9;Expected error code: XPTY0004. Query succeeded with result: 
K-QuantExprWithout-28;Expected XPathException with code FORG0006, but got Type casting to XsHexBinary has not been implemented yet.
K-QuantExprWithout-29;Expected XPathException with code FORG0006, but got Type casting to XsHexBinary has not been implemented yet.
K-QuantExprWithout-30;Expected XPathException with code FORG0006, but got Type casting to XsHexBinary has not been implemented yet.
K-QuantExprWithout-31;Expected XPathException with code FORG0006, but got Type casting to XsHexBinary has not been implemented yet.
K-QuantExprWithout-32;Expected XPathException with code FORG0006, but got Type casting to XsHexBinary has not been implemented yet.
K-QuantExprWithout-33;Expected executing the XPath 'some $var in (true(), true(), xs:hexBinary("FF")) satisfies $var' to resolve to one of the expected results, but got System.NotImplementedException: Type casting to XsHexBinary has not been implemented yet.
K-QuantExprWithout-42;PRSC Error: Failed to parse query '\n        declare variable $i := false(); \n        some $i in (true(), true(), true()) satisfies $i'
K-QuantExprWithout-43;PRSC Error: Failed to parse query '\n        declare variable $i := false(); \n        declare variable $t := false(); \n        some $i in (true(), true()), $t in (true(), true()) satisfies $i eq $t'
K-QuantExprWithout-44;PRSC Error: Failed to parse query '\n        declare variable $i := false(); \n        declare variable $t := false(); \n        some $i in (true(), true()), $t in (true(), true()) satisfies ($i eq $t)'
K-QuantExprWithout-45;PRSC Error: Failed to parse query '\n        declare variable $i := false(); \n        every $i in (true(), true()) satisfies $i'
K-QuantExprWithout-54;Expected XPath true() eq (some $a in 1 satisfies $a) to resolve to true
K-QuantExprWithout-55;Expected XPath true() eq (every $a in 1 satisfies $a) to resolve to true
K-QuantExprWithout-56;Expected XPath true() eq (some $fn:name in (1, 2) satisfies $fn:name) to resolve to true
K-QuantExprWithout-57;Expected XPath true() eq (some $xs:name in (1, 2) satisfies $xs:name) to resolve to true
K-QuantExprWithout-58;Expected XPath true() eq (every $fn:name in (1, 2) satisfies $fn:name) to resolve to true
K-QuantExprWithout-59;Expected XPath true() eq (every $xs:name in (1, 2) satisfies $xs:name) to resolve to true
K-QuantExprWithout-7;TreatExpr AST to Expression not yet implemented
K-QuantExprWithout-8;TreatExpr AST to Expression not yet implemented
K-QuantExprWithout-89;The variable 'a' is declared but not in scope.
K-QuantExprWithout-90;The variable 'a' is declared but not in scope.
K-QuantExprWithout-91;The variable 'a' is declared but not in scope.
K-QuantExprWithout-92;The variable 'a' is declared but not in scope.
K-RangeExpr-31;TreatExpr AST to Expression not yet implemented
K-RangeExpr-32;TreatExpr AST to Expression not yet implemented
K-ReplaceFunc-1;Expected XPathException with code FORX0001, but got Using flags in 'replace' is not supported
K-ReplaceFunc-4;Expected XPathException with code FORX0001, but got Using flags in 'replace' is not supported
K-ReplaceFunc-6;Expected error code: FORX0004. Query succeeded with result: thisIsInvalid\put
K-ReplaceFunc-7;Expected error code: FORX0004. Query succeeded with result: thisIsInvalid$
K-ReplaceFunc-8;Expected error code: FORX0004. Query succeeded with result: thisIsInvalid\ put
K-ReplaceFunc-9;Expected error code: FORX0004. Query succeeded with result: thisIsInvalid$ put
K-RoundFunc-2;Expected error code: XPST0017. Query succeeded with result: 1
K-RoundFunc-9;Value was either too large or too small for a Decimal.
K-SecondsFromDateTimeFunc-3;The function seconds-from-dateTime with arity 1 is not registered.
K-SecondsFromDateTimeFunc-4;The function seconds-from-dateTime with arity 1 is not registered.
K-SecondsFromDateTimeFunc-5;The function seconds-from-dateTime with arity 1 is not registered.
K-SecondsFromDurationFunc-3;The function seconds-from-duration with arity 1 is not registered.
K-SecondsFromDurationFunc-4;The function seconds-from-duration with arity 1 is not registered.
K-SecondsFromDurationFunc-5;The function seconds-from-duration with arity 1 is not registered.
K-SecondsFromDurationFunc-6;The function seconds-from-duration with arity 1 is not registered.
K-SecondsFromDurationFunc-7;The function seconds-from-duration with arity 1 is not registered.
K-SecondsFromTimeFunc-3;The function seconds-from-time with arity 1 is not registered.
K-SecondsFromTimeFunc-4;The function seconds-from-time with arity 1 is not registered.
K-SecondsFromTimeFunc-5;The function seconds-from-time with arity 1 is not registered.
K-SeqAVGFunc-14;Expected XPath string(avg((3, 3, xs:double("NaN")))) eq "NaN" to resolve to true
K-SeqAVGFunc-15;Expected XPath string(avg((3, xs:double("NaN"), 3))) eq "NaN" to resolve to true
K-SeqAVGFunc-16;Expected XPath string(avg((xs:double("NaN"), 3, 3))) eq "NaN" to resolve to true
K-SeqAVGFunc-19;Expected XPath avg((-5, -0, -3, -6)) eq -3.5 to resolve to true
K-SeqAVGFunc-20;Overflow when creating a Int64 from NaN.
K-SeqAVGFunc-21;Expected XPath string(avg((1, 2, 3, xs:double("NaN")))) eq "NaN" to resolve to true
K-SeqAVGFunc-22;Expected XPath string(avg((xs:double("NaN"), 1, 2, 3))) eq "NaN" to resolve to true
K-SeqAVGFunc-23;Overflow when creating a Int64 from NaN.
K-SeqAVGFunc-24;Expected XPath string(avg((1, 2, xs:double("NaN"), 1, 2, 3))) eq "NaN" to resolve to true
K-SeqAVGFunc-25;Overflow when creating a Int64 from NaN.
K-SeqAVGFunc-32;Expected XPathException with code FORG0006, but got Type casting to XsAnyUri has not been implemented yet.
K-SeqAVGFunc-33;Expected XPathException with code FORG0006, but got Type casting to XsAnyUri has not been implemented yet.
K-SeqAVGFunc-41;Overflow when creating a Int64 from NaN.
K-SeqAVGFunc-42;Overflow when creating a Int64 from NaN.
K-SeqAVGFunc-6;Expected XPath avg((xs:float(1), xs:integer(3), xs:float(3))) instance of xs:float to resolve to true
K-SeqAVGFunc-7;Expected XPath avg((xs:float(1), xs:integer(3), xs:decimal(3))) instance of xs:float to resolve to true
K-SeqBooleanFunc-16;TreatExpr AST to Expression not yet implemented
K-SeqBooleanFunc-20;PRSC Error: Failed to parse query 'boolean(1.1e1)'
K-SeqBooleanFunc-21;PRSC Error: Failed to parse query 'not(0.0e0)'
K-SeqBooleanFunc-23;Expected XPath boolean(-1) to resolve to true
K-SeqBooleanFunc-32;The function timezone-from-time with arity 1 is not registered.
K-SeqBooleanFunc-4;Expected XPathException with code FORG0006, but got Atomic Value for XsName is not implemented yet.
K-SeqBooleanFunc-5;Expected XPathException with code FORG0006, but got Type casting to XsHexBinary has not been implemented yet.
K-SeqBooleanFunc-6;Expected XPathException with code FORG0006, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqBooleanFunc-7;Type casting to XsAnyUri has not been implemented yet.
K-SeqBooleanFunc-8;Type casting to XsAnyUri has not been implemented yet.
K-SeqCountFunc-18;The function current-time with arity 0 is not registered.
K-SeqDeepEqualFunc-16;Type casting to XsAnyUri has not been implemented yet.
K-SeqDeepEqualFunc-18;Type casting to XsAnyUri has not been implemented yet.
K-SeqDeepEqualFunc-22;Type casting to XsHexBinary has not been implemented yet.
K-SeqDeepEqualFunc-23;Type casting to XsBase64Binary has not been implemented yet.
K-SeqDeepEqualFunc-24;Type casting to XsBase64Binary has not been implemented yet.
K-SeqDeepEqualFunc-56;No collations are supported
K-SeqDeepEqualFunc-57;No collations are supported
K-SeqDeepEqualFunc-58;PRSC Error: Failed to parse query '\n         deep-equal(<a><b x="abc"/></a>, <a><b x="ABC"/></a>,\n             "http://www.w3.org/2010/09/qt-fots-catalog/collation/caseblind")\n      '
K-SeqDeepEqualFunc-59;PRSC Error: Failed to parse query '\n         deep-equal(<a><b>abc</b></a>, <a><b>ABC</b></a>,\n             "http://www.w3.org/2010/09/qt-fots-catalog/collation/caseblind")\n      '
K-SeqDeepEqualFunc-6;No collations are supported
K-SeqDeepEqualFunc-60;PRSC Error: Failed to parse query '\n         deep-equal(<a><b>abc</b></a>, <a><B>abc</B></a>,\n             "http://www.w3.org/2010/09/qt-fots-catalog/collation/caseblind")\n      '
K-SeqDeepEqualFunc-61;PRSC Error: Failed to parse query '\n         deep-equal(<a><b x="abc"/></a>, <a><b X="abc"/></a>,\n             "http://www.w3.org/2010/09/qt-fots-catalog/collation/caseblind")\n      '
K-SeqDeepEqualFunc-62;PRSC Error: Failed to parse query '\n         let $deep := deep-equal(?, ?, "http://www.w3.org/2010/09/qt-fots-catalog/collation/caseblind")\n         return $deep(<a><b>abc</b></a>, <a><b>ABC</b></a>)\n      '
K-SeqDeepEqualFunc-63;PRSC Error: Failed to parse query '\n         let $deep := deep-equal#3 \n         return $deep(<a><b>abc</b></a>, <a><b>ABC</b></a>, \n                      "http://www.w3.org/2010/09/qt-fots-catalog/collation/caseblind")\n      '
K-SeqDeepEqualFunc-64;No collations are supported
K-SeqDeepEqualFunc-65;No collations are supported
K-SeqDeepEqualFunc-66;PRSC Error: Failed to parse query '\n         deep-equal(<a><b x="abc"/></a>, <a><b x="ABC"/></a>,\n             "http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive")\n      '
K-SeqDeepEqualFunc-67;PRSC Error: Failed to parse query '\n         deep-equal(<a><b>abc</b></a>, <a><b>ABC</b></a>,\n             "http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive")\n      '
K-SeqDeepEqualFunc-68;PRSC Error: Failed to parse query '\n         deep-equal(<a><b>abc</b></a>, <a><B>abc</B></a>,\n             "http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive")\n      '
K-SeqDeepEqualFunc-69;PRSC Error: Failed to parse query '\n         deep-equal(<a><b x="abc"/></a>, <a><b X="abc"/></a>,\n             "http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive")\n      '
K-SeqDeepEqualFunc-70;PRSC Error: Failed to parse query '\n         let $deep := deep-equal(?, ?, "http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive")\n         return $deep(<a><b>abc</b></a>, <a><b>ABC</b></a>)\n      '
K-SeqDeepEqualFunc-71;PRSC Error: Failed to parse query '\n         let $deep := deep-equal#3 \n         return $deep(<a><b>abc</b></a>, <a><b>ABC</b></a>, \n                      "http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive")\n      '
K-SeqEmptyFunc-9;The function current-time with arity 0 is not registered.
K-SeqExactlyOneFunc-6;Expected error code: FOER0000. Found error code: XPST0017 with error message: The function error with arity 0 is not registered.
K-SeqExactlyOneFunc-7;Expected error code: FOER0000. Found error code: XPST0017 with error message: The function error with arity 0 is not registered.
K-SeqExactlyOneFunc-8;Expected error code: FOER0000. Found error code: XPST0017 with error message: The function error with arity 0 is not registered.
K-SeqExistsFunc-10;The function timezone-from-dateTime with arity 1 is not registered.
K-SeqExistsFunc-11;The function timezone-from-date with arity 1 is not registered.
K-SeqExistsFunc-12;The function timezone-from-time with arity 1 is not registered.
K-SeqExistsFunc-13;The function current-time with arity 0 is not registered.
K-SeqExistsFunc-14;The function current-time with arity 0 is not registered.
K-SeqExprCast-100;Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1000;Expected error code: XPST0080. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'not(xs:gYearMonth("1999-11") castable as xs:NOTATION)'
K-SeqExprCast-1005;Expected XPathException with code FORG0001, but got The string '' is not a valid AllXsd value.
K-SeqExprCast-1009;PRSC Error: Failed to parse query 'xs:gYear("1999") castable as xs:untypedAtomic'
K-SeqExprCast-101;Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1011;PRSC Error: Failed to parse query 'xs:gYear("1999") castable as xs:string'
K-SeqExprCast-1013;PRSC Error: Failed to parse query 'not(xs:gYear("1999") castable as xs:float)'
K-SeqExprCast-1015;PRSC Error: Failed to parse query 'not(xs:gYear("1999") castable as xs:double)'
K-SeqExprCast-1017;PRSC Error: Failed to parse query 'not(xs:gYear("1999") castable as xs:decimal)'
K-SeqExprCast-1019;PRSC Error: Failed to parse query 'not(xs:gYear("1999") castable as xs:integer)'
K-SeqExprCast-102;Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1021;PRSC Error: Failed to parse query 'not(xs:gYear("1999") castable as xs:duration)'
K-SeqExprCast-1023;PRSC Error: Failed to parse query 'not(xs:gYear("1999") castable as xs:yearMonthDuration)'
K-SeqExprCast-1025;PRSC Error: Failed to parse query 'not(xs:gYear("1999") castable as xs:dayTimeDuration)'
K-SeqExprCast-1027;PRSC Error: Failed to parse query 'not(xs:gYear("1999") castable as xs:dateTime)'
K-SeqExprCast-1029;PRSC Error: Failed to parse query 'not(xs:gYear("1999") castable as xs:time)'
K-SeqExprCast-103;Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1031;PRSC Error: Failed to parse query 'not(xs:gYear("1999") castable as xs:date)'
K-SeqExprCast-1033;PRSC Error: Failed to parse query 'not(xs:gYear("1999") castable as xs:gYearMonth)'
K-SeqExprCast-1035;PRSC Error: Failed to parse query 'xs:gYear("1999") castable as xs:gYear'
K-SeqExprCast-1037;PRSC Error: Failed to parse query 'not(xs:gYear("1999") castable as xs:gMonthDay)'
K-SeqExprCast-1039;PRSC Error: Failed to parse query 'not(xs:gYear("1999") castable as xs:gDay)'
K-SeqExprCast-104;Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1041;PRSC Error: Failed to parse query 'not(xs:gYear("1999") castable as xs:gMonth)'
K-SeqExprCast-1043;PRSC Error: Failed to parse query 'not(xs:gYear("1999") castable as xs:boolean)'
K-SeqExprCast-1044;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1045;PRSC Error: Failed to parse query 'not(xs:gYear("1999") castable as xs:base64Binary)'
K-SeqExprCast-1046;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1047;PRSC Error: Failed to parse query 'not(xs:gYear("1999") castable as xs:hexBinary)'
K-SeqExprCast-1048;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-1049;PRSC Error: Failed to parse query 'not(xs:gYear("1999") castable as xs:anyURI)'
K-SeqExprCast-105;Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1050;Expected XPathException with code XPTY0004, but got Type casting to XsQName has not been implemented yet.
K-SeqExprCast-1051;PRSC Error: Failed to parse query 'not(xs:gYear("1999") castable as xs:QName)'
K-SeqExprCast-1052;Expected error code: XPST0080. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'not(xs:gYear("1999") castable as xs:NOTATION)'
K-SeqExprCast-1057;Expected XPathException with code FORG0001, but got The string '' is not a valid AllXsd value.
K-SeqExprCast-106;Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1061;PRSC Error: Failed to parse query 'xs:gMonthDay("--11-13") castable as xs:untypedAtomic'
K-SeqExprCast-1063;PRSC Error: Failed to parse query 'xs:gMonthDay("--11-13") castable as xs:string'
K-SeqExprCast-1065;PRSC Error: Failed to parse query 'not(xs:gMonthDay("--11-13") castable as xs:float)'
K-SeqExprCast-1067;PRSC Error: Failed to parse query 'not(xs:gMonthDay("--11-13") castable as xs:double)'
K-SeqExprCast-1069;PRSC Error: Failed to parse query 'not(xs:gMonthDay("--11-13") castable as xs:decimal)'
K-SeqExprCast-107;Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1071;PRSC Error: Failed to parse query 'not(xs:gMonthDay("--11-13") castable as xs:integer)'
K-SeqExprCast-1073;PRSC Error: Failed to parse query 'not(xs:gMonthDay("--11-13") castable as xs:duration)'
K-SeqExprCast-1075;PRSC Error: Failed to parse query 'not(xs:gMonthDay("--11-13") castable as xs:yearMonthDuration)'
K-SeqExprCast-1077;PRSC Error: Failed to parse query 'not(xs:gMonthDay("--11-13") castable as xs:dayTimeDuration)'
K-SeqExprCast-1079;PRSC Error: Failed to parse query 'not(xs:gMonthDay("--11-13") castable as xs:dateTime)'
K-SeqExprCast-108;Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1081;PRSC Error: Failed to parse query 'not(xs:gMonthDay("--11-13") castable as xs:time)'
K-SeqExprCast-1083;PRSC Error: Failed to parse query 'not(xs:gMonthDay("--11-13") castable as xs:date)'
K-SeqExprCast-1085;PRSC Error: Failed to parse query 'not(xs:gMonthDay("--11-13") castable as xs:gYearMonth)'
K-SeqExprCast-1087;PRSC Error: Failed to parse query 'not(xs:gMonthDay("--11-13") castable as xs:gYear)'
K-SeqExprCast-1089;PRSC Error: Failed to parse query 'xs:gMonthDay("--11-13") castable as xs:gMonthDay'
K-SeqExprCast-109;Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1091;PRSC Error: Failed to parse query 'not(xs:gMonthDay("--11-13") castable as xs:gDay)'
K-SeqExprCast-1093;PRSC Error: Failed to parse query 'not(xs:gMonthDay("--11-13") castable as xs:gMonth)'
K-SeqExprCast-1095;PRSC Error: Failed to parse query 'not(xs:gMonthDay("--11-13") castable as xs:boolean)'
K-SeqExprCast-1096;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1097;PRSC Error: Failed to parse query 'not(xs:gMonthDay("--11-13") castable as xs:base64Binary)'
K-SeqExprCast-1098;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1099;PRSC Error: Failed to parse query 'not(xs:gMonthDay("--11-13") castable as xs:hexBinary)'
K-SeqExprCast-110;Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1100;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-1101;PRSC Error: Failed to parse query 'not(xs:gMonthDay("--11-13") castable as xs:anyURI)'
K-SeqExprCast-1102;Expected XPathException with code XPTY0004, but got Type casting to XsQName has not been implemented yet.
K-SeqExprCast-1103;PRSC Error: Failed to parse query 'not(xs:gMonthDay("--11-13") castable as xs:QName)'
K-SeqExprCast-1104;Expected error code: XPST0080. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'not(xs:gMonthDay("--11-13") castable as xs:NOTATION)'
K-SeqExprCast-1109;Expected XPathException with code FORG0001, but got The string '' is not a valid AllXsd value.
K-SeqExprCast-111;Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1113;PRSC Error: Failed to parse query 'xs:gDay("---03") castable as xs:untypedAtomic'
K-SeqExprCast-1115;PRSC Error: Failed to parse query 'xs:gDay("---03") castable as xs:string'
K-SeqExprCast-1117;PRSC Error: Failed to parse query 'not(xs:gDay("---03") castable as xs:float)'
K-SeqExprCast-1119;PRSC Error: Failed to parse query 'not(xs:gDay("---03") castable as xs:double)'
K-SeqExprCast-112;Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1121;PRSC Error: Failed to parse query 'not(xs:gDay("---03") castable as xs:decimal)'
K-SeqExprCast-1123;PRSC Error: Failed to parse query 'not(xs:gDay("---03") castable as xs:integer)'
K-SeqExprCast-1125;PRSC Error: Failed to parse query 'not(xs:gDay("---03") castable as xs:duration)'
K-SeqExprCast-1127;PRSC Error: Failed to parse query 'not(xs:gDay("---03") castable as xs:yearMonthDuration)'
K-SeqExprCast-1129;PRSC Error: Failed to parse query 'not(xs:gDay("---03") castable as xs:dayTimeDuration)'
K-SeqExprCast-113;Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1131;PRSC Error: Failed to parse query 'not(xs:gDay("---03") castable as xs:dateTime)'
K-SeqExprCast-1133;PRSC Error: Failed to parse query 'not(xs:gDay("---03") castable as xs:time)'
K-SeqExprCast-1135;PRSC Error: Failed to parse query 'not(xs:gDay("---03") castable as xs:date)'
K-SeqExprCast-1137;PRSC Error: Failed to parse query 'not(xs:gDay("---03") castable as xs:gYearMonth)'
K-SeqExprCast-1139;PRSC Error: Failed to parse query 'not(xs:gDay("---03") castable as xs:gYear)'
K-SeqExprCast-114;Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1141;PRSC Error: Failed to parse query 'not(xs:gDay("---03") castable as xs:gMonthDay)'
K-SeqExprCast-1143;PRSC Error: Failed to parse query 'xs:gDay("---03") castable as xs:gDay'
K-SeqExprCast-1145;PRSC Error: Failed to parse query 'not(xs:gDay("---03") castable as xs:gMonth)'
K-SeqExprCast-1147;PRSC Error: Failed to parse query 'not(xs:gDay("---03") castable as xs:boolean)'
K-SeqExprCast-1148;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1149;PRSC Error: Failed to parse query 'not(xs:gDay("---03") castable as xs:base64Binary)'
K-SeqExprCast-115;Expected XPathException with code FORG0001, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1150;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1151;PRSC Error: Failed to parse query 'not(xs:gDay("---03") castable as xs:hexBinary)'
K-SeqExprCast-1152;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-1153;PRSC Error: Failed to parse query 'not(xs:gDay("---03") castable as xs:anyURI)'
K-SeqExprCast-1154;Expected XPathException with code XPTY0004, but got Type casting to XsQName has not been implemented yet.
K-SeqExprCast-1155;PRSC Error: Failed to parse query 'not(xs:gDay("---03") castable as xs:QName)'
K-SeqExprCast-1156;Expected error code: XPST0080. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'not(xs:gDay("---03") castable as xs:NOTATION)'
K-SeqExprCast-116;Expected XPathException with code FORG0001, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1161;Expected XPathException with code FORG0001, but got The string '' is not a valid AllXsd value.
K-SeqExprCast-1165;PRSC Error: Failed to parse query 'xs:gMonth("--11") castable as xs:untypedAtomic'
K-SeqExprCast-1167;PRSC Error: Failed to parse query 'xs:gMonth("--11") castable as xs:string'
K-SeqExprCast-1169;PRSC Error: Failed to parse query 'not(xs:gMonth("--11") castable as xs:float)'
K-SeqExprCast-117;Expected XPathException with code FORG0001, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1171;PRSC Error: Failed to parse query 'not(xs:gMonth("--11") castable as xs:double)'
K-SeqExprCast-1173;PRSC Error: Failed to parse query 'not(xs:gMonth("--11") castable as xs:decimal)'
K-SeqExprCast-1175;PRSC Error: Failed to parse query 'not(xs:gMonth("--11") castable as xs:integer)'
K-SeqExprCast-1177;PRSC Error: Failed to parse query 'not(xs:gMonth("--11") castable as xs:duration)'
K-SeqExprCast-1179;PRSC Error: Failed to parse query 'not(xs:gMonth("--11") castable as xs:yearMonthDuration)'
K-SeqExprCast-118;Expected XPathException with code FORG0001, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1181;PRSC Error: Failed to parse query 'not(xs:gMonth("--11") castable as xs:dayTimeDuration)'
K-SeqExprCast-1183;PRSC Error: Failed to parse query 'not(xs:gMonth("--11") castable as xs:dateTime)'
K-SeqExprCast-1185;PRSC Error: Failed to parse query 'not(xs:gMonth("--11") castable as xs:time)'
K-SeqExprCast-1187;PRSC Error: Failed to parse query 'not(xs:gMonth("--11") castable as xs:date)'
K-SeqExprCast-1189;PRSC Error: Failed to parse query 'not(xs:gMonth("--11") castable as xs:gYearMonth)'
K-SeqExprCast-119;Expected XPathException with code FORG0001, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1191;PRSC Error: Failed to parse query 'not(xs:gMonth("--11") castable as xs:gYear)'
K-SeqExprCast-1193;PRSC Error: Failed to parse query 'not(xs:gMonth("--11") castable as xs:gMonthDay)'
K-SeqExprCast-1195;PRSC Error: Failed to parse query 'not(xs:gMonth("--11") castable as xs:gDay)'
K-SeqExprCast-1197;PRSC Error: Failed to parse query 'xs:gMonth("--11") castable as xs:gMonth'
K-SeqExprCast-1199;PRSC Error: Failed to parse query 'not(xs:gMonth("--11") castable as xs:boolean)'
K-SeqExprCast-120;Expected XPathException with code FORG0001, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1200;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1201;PRSC Error: Failed to parse query 'not(xs:gMonth("--11") castable as xs:base64Binary)'
K-SeqExprCast-1202;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1203;PRSC Error: Failed to parse query 'not(xs:gMonth("--11") castable as xs:hexBinary)'
K-SeqExprCast-1204;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-1205;PRSC Error: Failed to parse query 'not(xs:gMonth("--11") castable as xs:anyURI)'
K-SeqExprCast-1206;Expected XPathException with code XPTY0004, but got Type casting to XsQName has not been implemented yet.
K-SeqExprCast-1207;PRSC Error: Failed to parse query 'not(xs:gMonth("--11") castable as xs:QName)'
K-SeqExprCast-1208;Expected error code: XPST0080. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'not(xs:gMonth("--11") castable as xs:NOTATION)'
K-SeqExprCast-121;Expected XPathException with code FORG0001, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1213;Expected error code: FORG0001. Found error code: XPTY0004 with error message: Casting not supported from given type to xs:boolean or any of its derived types.
K-SeqExprCast-1217;PRSC Error: Failed to parse query 'xs:boolean("true") castable as xs:untypedAtomic'
K-SeqExprCast-1219;PRSC Error: Failed to parse query 'xs:boolean("true") castable as xs:string'
K-SeqExprCast-122;Expected XPathException with code FORG0001, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1221;PRSC Error: Failed to parse query 'xs:boolean("true") castable as xs:float'
K-SeqExprCast-1223;PRSC Error: Failed to parse query 'xs:boolean("true") castable as xs:double'
K-SeqExprCast-1225;PRSC Error: Failed to parse query 'xs:boolean("true") castable as xs:decimal'
K-SeqExprCast-1227;PRSC Error: Failed to parse query 'xs:boolean("true") castable as xs:integer'
K-SeqExprCast-1229;PRSC Error: Failed to parse query 'not(xs:boolean("true") castable as xs:duration)'
K-SeqExprCast-123;Expected XPathException with code FORG0001, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1231;PRSC Error: Failed to parse query 'not(xs:boolean("true") castable as xs:yearMonthDuration)'
K-SeqExprCast-1233;PRSC Error: Failed to parse query 'not(xs:boolean("true") castable as xs:dayTimeDuration)'
K-SeqExprCast-1235;PRSC Error: Failed to parse query 'not(xs:boolean("true") castable as xs:dateTime)'
K-SeqExprCast-1237;PRSC Error: Failed to parse query 'not(xs:boolean("true") castable as xs:time)'
K-SeqExprCast-1239;PRSC Error: Failed to parse query 'not(xs:boolean("true") castable as xs:date)'
K-SeqExprCast-124;Expected XPathException with code FORG0001, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1241;PRSC Error: Failed to parse query 'not(xs:boolean("true") castable as xs:gYearMonth)'
K-SeqExprCast-1243;PRSC Error: Failed to parse query 'not(xs:boolean("true") castable as xs:gYear)'
K-SeqExprCast-1245;PRSC Error: Failed to parse query 'not(xs:boolean("true") castable as xs:gMonthDay)'
K-SeqExprCast-1247;PRSC Error: Failed to parse query 'not(xs:boolean("true") castable as xs:gDay)'
K-SeqExprCast-1249;PRSC Error: Failed to parse query 'not(xs:boolean("true") castable as xs:gMonth)'
K-SeqExprCast-125;Expected XPathException with code FORG0001, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1251;PRSC Error: Failed to parse query 'xs:boolean("true") castable as xs:boolean'
K-SeqExprCast-1252;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1253;PRSC Error: Failed to parse query 'not(xs:boolean("true") castable as xs:base64Binary)'
K-SeqExprCast-1254;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1255;PRSC Error: Failed to parse query 'not(xs:boolean("true") castable as xs:hexBinary)'
K-SeqExprCast-1256;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-1257;PRSC Error: Failed to parse query 'not(xs:boolean("true") castable as xs:anyURI)'
K-SeqExprCast-1258;Expected XPathException with code XPTY0004, but got Type casting to XsQName has not been implemented yet.
K-SeqExprCast-1259;PRSC Error: Failed to parse query 'not(xs:boolean("true") castable as xs:QName)'
K-SeqExprCast-126;Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1260;Expected error code: XPST0080. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'not(xs:boolean("true") castable as xs:NOTATION)'
K-SeqExprCast-1263;Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1264;Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1265;Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1266;Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1267;Expected XPathException with code FORG0006, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1268;Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1269;PRSC Error: Failed to parse query 'xs:base64Binary("aaaa") castable as xs:untypedAtomic'
K-SeqExprCast-127;Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1270;Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1271;PRSC Error: Failed to parse query 'xs:base64Binary("aaaa") castable as xs:string'
K-SeqExprCast-1272;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1273;PRSC Error: Failed to parse query 'not(xs:base64Binary("aaaa") castable as xs:float)'
K-SeqExprCast-1274;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1275;PRSC Error: Failed to parse query 'not(xs:base64Binary("aaaa") castable as xs:double)'
K-SeqExprCast-1276;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1277;PRSC Error: Failed to parse query 'not(xs:base64Binary("aaaa") castable as xs:decimal)'
K-SeqExprCast-1278;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1279;PRSC Error: Failed to parse query 'not(xs:base64Binary("aaaa") castable as xs:integer)'
K-SeqExprCast-128;Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1280;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1281;PRSC Error: Failed to parse query 'not(xs:base64Binary("aaaa") castable as xs:duration)'
K-SeqExprCast-1282;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1283;PRSC Error: Failed to parse query 'not(xs:base64Binary("aaaa") castable as xs:yearMonthDuration)'
K-SeqExprCast-1284;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1285;PRSC Error: Failed to parse query 'not(xs:base64Binary("aaaa") castable as xs:dayTimeDuration)'
K-SeqExprCast-1286;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1287;PRSC Error: Failed to parse query 'not(xs:base64Binary("aaaa") castable as xs:dateTime)'
K-SeqExprCast-1288;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1289;PRSC Error: Failed to parse query 'not(xs:base64Binary("aaaa") castable as xs:time)'
K-SeqExprCast-129;Expected XPathException with code FORG0001, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1290;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1291;PRSC Error: Failed to parse query 'not(xs:base64Binary("aaaa") castable as xs:date)'
K-SeqExprCast-1292;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1293;PRSC Error: Failed to parse query 'not(xs:base64Binary("aaaa") castable as xs:gYearMonth)'
K-SeqExprCast-1294;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1295;PRSC Error: Failed to parse query 'not(xs:base64Binary("aaaa") castable as xs:gYear)'
K-SeqExprCast-1296;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1297;PRSC Error: Failed to parse query 'not(xs:base64Binary("aaaa") castable as xs:gMonthDay)'
K-SeqExprCast-1298;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1299;PRSC Error: Failed to parse query 'not(xs:base64Binary("aaaa") castable as xs:gDay)'
K-SeqExprCast-130;Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1300;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1301;PRSC Error: Failed to parse query 'not(xs:base64Binary("aaaa") castable as xs:gMonth)'
K-SeqExprCast-1302;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1303;PRSC Error: Failed to parse query 'not(xs:base64Binary("aaaa") castable as xs:boolean)'
K-SeqExprCast-1304;Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1305;PRSC Error: Failed to parse query 'xs:base64Binary("aaaa") castable as xs:base64Binary'
K-SeqExprCast-1306;Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1307;PRSC Error: Failed to parse query 'xs:base64Binary("aaaa") castable as xs:hexBinary'
K-SeqExprCast-1308;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1309;PRSC Error: Failed to parse query 'not(xs:base64Binary("aaaa") castable as xs:anyURI)'
K-SeqExprCast-131;Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1310;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1311;PRSC Error: Failed to parse query 'not(xs:base64Binary("aaaa") castable as xs:QName)'
K-SeqExprCast-1312;Expected error code: XPST0080. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'not(xs:base64Binary("aaaa") castable as xs:NOTATION)'
K-SeqExprCast-1315;Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1316;Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1317;Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1318;Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1319;Expected XPathException with code FORG0006, but got Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-132;Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1320;Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1321;PRSC Error: Failed to parse query 'xs:hexBinary("0FB7") castable as xs:untypedAtomic'
K-SeqExprCast-1322;Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1323;PRSC Error: Failed to parse query 'xs:hexBinary("0FB7") castable as xs:string'
K-SeqExprCast-1324;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1325;PRSC Error: Failed to parse query 'not(xs:hexBinary("0FB7") castable as xs:float)'
K-SeqExprCast-1326;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1327;PRSC Error: Failed to parse query 'not(xs:hexBinary("0FB7") castable as xs:double)'
K-SeqExprCast-1328;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1329;PRSC Error: Failed to parse query 'not(xs:hexBinary("0FB7") castable as xs:decimal)'
K-SeqExprCast-133;Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1330;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1331;PRSC Error: Failed to parse query 'not(xs:hexBinary("0FB7") castable as xs:integer)'
K-SeqExprCast-1332;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1333;PRSC Error: Failed to parse query 'not(xs:hexBinary("0FB7") castable as xs:duration)'
K-SeqExprCast-1334;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1335;PRSC Error: Failed to parse query 'not(xs:hexBinary("0FB7") castable as xs:yearMonthDuration)'
K-SeqExprCast-1336;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1337;PRSC Error: Failed to parse query 'not(xs:hexBinary("0FB7") castable as xs:dayTimeDuration)'
K-SeqExprCast-1338;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1339;PRSC Error: Failed to parse query 'not(xs:hexBinary("0FB7") castable as xs:dateTime)'
K-SeqExprCast-134;Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1340;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1341;PRSC Error: Failed to parse query 'not(xs:hexBinary("0FB7") castable as xs:time)'
K-SeqExprCast-1342;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1343;PRSC Error: Failed to parse query 'not(xs:hexBinary("0FB7") castable as xs:date)'
K-SeqExprCast-1344;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1345;PRSC Error: Failed to parse query 'not(xs:hexBinary("0FB7") castable as xs:gYearMonth)'
K-SeqExprCast-1346;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1347;PRSC Error: Failed to parse query 'not(xs:hexBinary("0FB7") castable as xs:gYear)'
K-SeqExprCast-1348;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1349;PRSC Error: Failed to parse query 'not(xs:hexBinary("0FB7") castable as xs:gMonthDay)'
K-SeqExprCast-135;Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1350;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1351;PRSC Error: Failed to parse query 'not(xs:hexBinary("0FB7") castable as xs:gDay)'
K-SeqExprCast-1352;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1353;PRSC Error: Failed to parse query 'not(xs:hexBinary("0FB7") castable as xs:gMonth)'
K-SeqExprCast-1354;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1355;PRSC Error: Failed to parse query 'not(xs:hexBinary("0FB7") castable as xs:boolean)'
K-SeqExprCast-1356;Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1357;PRSC Error: Failed to parse query 'xs:hexBinary("0FB7") castable as xs:base64Binary'
K-SeqExprCast-1358;Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1359;PRSC Error: Failed to parse query 'xs:hexBinary("0FB7") castable as xs:hexBinary'
K-SeqExprCast-136;Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1360;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1361;PRSC Error: Failed to parse query 'not(xs:hexBinary("0FB7") castable as xs:anyURI)'
K-SeqExprCast-1362;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1363;PRSC Error: Failed to parse query 'not(xs:hexBinary("0FB7") castable as xs:QName)'
K-SeqExprCast-1364;Expected error code: XPST0080. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'not(xs:hexBinary("0FB7") castable as xs:NOTATION)'
K-SeqExprCast-1367;Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-1368;Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-1369;Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-137;Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1370;Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-1371;Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-1372;Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-1373;PRSC Error: Failed to parse query 'xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:untypedAtomic'
K-SeqExprCast-1374;Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-1375;PRSC Error: Failed to parse query 'xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:string'
K-SeqExprCast-1376;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-1377;PRSC Error: Failed to parse query 'not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:float)'
K-SeqExprCast-1378;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-1379;PRSC Error: Failed to parse query 'not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:double)'
K-SeqExprCast-138;Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1380;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-1381;PRSC Error: Failed to parse query 'not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:decimal)'
K-SeqExprCast-1382;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-1383;PRSC Error: Failed to parse query 'not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:integer)'
K-SeqExprCast-1384;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-1385;PRSC Error: Failed to parse query 'not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:duration)'
K-SeqExprCast-1386;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-1387;PRSC Error: Failed to parse query 'not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:yearMonthDuration)'
K-SeqExprCast-1388;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-1389;PRSC Error: Failed to parse query 'not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:dayTimeDuration)'
K-SeqExprCast-139;Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-1390;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-1391;PRSC Error: Failed to parse query 'not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:dateTime)'
K-SeqExprCast-1392;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-1393;PRSC Error: Failed to parse query 'not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:time)'
K-SeqExprCast-1394;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-1395;PRSC Error: Failed to parse query 'not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:date)'
K-SeqExprCast-1396;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-1397;PRSC Error: Failed to parse query 'not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:gYearMonth)'
K-SeqExprCast-1398;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-1399;PRSC Error: Failed to parse query 'not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:gYear)'
K-SeqExprCast-140;Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1400;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-1401;PRSC Error: Failed to parse query 'not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:gMonthDay)'
K-SeqExprCast-1402;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-1403;PRSC Error: Failed to parse query 'not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:gDay)'
K-SeqExprCast-1404;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-1405;PRSC Error: Failed to parse query 'not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:gMonth)'
K-SeqExprCast-1406;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-1407;PRSC Error: Failed to parse query 'not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:boolean)'
K-SeqExprCast-1408;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-1409;PRSC Error: Failed to parse query 'not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:base64Binary)'
K-SeqExprCast-141;Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1410;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-1411;PRSC Error: Failed to parse query 'not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:hexBinary)'
K-SeqExprCast-1412;Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-1413;PRSC Error: Failed to parse query 'xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:anyURI'
K-SeqExprCast-1414;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-1415;PRSC Error: Failed to parse query 'not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:QName)'
K-SeqExprCast-1416;Expected error code: XPST0080. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:NOTATION)'
K-SeqExprCast-1419;Atomic Value for XsName is not implemented yet.
K-SeqExprCast-142;Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-1420;Atomic Value for XsName is not implemented yet.
K-SeqExprCast-1421;Expected XPathException with code FORG0001, but got Atomic Value for XsName is not implemented yet.
K-SeqExprCast-1422;Expected XPathException with code FORG0006, but got Atomic Value for XsName is not implemented yet.
K-SeqExprCast-1423;Atomic Value for XsName is not implemented yet.
K-SeqExprCast-1424;PRSC Error: Failed to parse query 'xs:QName("ncname") castable as xs:untypedAtomic'
K-SeqExprCast-1425;Atomic Value for XsName is not implemented yet.
K-SeqExprCast-1426;PRSC Error: Failed to parse query 'xs:QName("ncname") castable as xs:string'
K-SeqExprCast-1427;Expected XPathException with code XPTY0004, but got Atomic Value for XsName is not implemented yet.
K-SeqExprCast-1428;PRSC Error: Failed to parse query 'not(xs:QName("ncname") castable as xs:float)'
K-SeqExprCast-1429;Expected XPathException with code XPTY0004, but got Atomic Value for XsName is not implemented yet.
K-SeqExprCast-143;TreatExpr AST to Expression not yet implemented
K-SeqExprCast-1430;PRSC Error: Failed to parse query 'not(xs:QName("ncname") castable as xs:double)'
K-SeqExprCast-1431;Expected XPathException with code XPTY0004, but got Atomic Value for XsName is not implemented yet.
K-SeqExprCast-1432;PRSC Error: Failed to parse query 'not(xs:QName("ncname") castable as xs:decimal)'
K-SeqExprCast-1433;Expected XPathException with code XPTY0004, but got Atomic Value for XsName is not implemented yet.
K-SeqExprCast-1434;PRSC Error: Failed to parse query 'not(xs:QName("ncname") castable as xs:integer)'
K-SeqExprCast-1435;Expected XPathException with code XPTY0004, but got Atomic Value for XsName is not implemented yet.
K-SeqExprCast-1436;PRSC Error: Failed to parse query 'not(xs:QName("ncname") castable as xs:duration)'
K-SeqExprCast-1437;Expected XPathException with code XPTY0004, but got Atomic Value for XsName is not implemented yet.
K-SeqExprCast-1438;PRSC Error: Failed to parse query 'not(xs:QName("ncname") castable as xs:yearMonthDuration)'
K-SeqExprCast-1439;Expected XPathException with code XPTY0004, but got Atomic Value for XsName is not implemented yet.
K-SeqExprCast-1440;PRSC Error: Failed to parse query 'not(xs:QName("ncname") castable as xs:dayTimeDuration)'
K-SeqExprCast-1441;Expected XPathException with code XPTY0004, but got Atomic Value for XsName is not implemented yet.
K-SeqExprCast-1442;PRSC Error: Failed to parse query 'not(xs:QName("ncname") castable as xs:dateTime)'
K-SeqExprCast-1443;Expected XPathException with code XPTY0004, but got Atomic Value for XsName is not implemented yet.
K-SeqExprCast-1444;PRSC Error: Failed to parse query 'not(xs:QName("ncname") castable as xs:time)'
K-SeqExprCast-1445;Expected XPathException with code XPTY0004, but got Atomic Value for XsName is not implemented yet.
K-SeqExprCast-1446;PRSC Error: Failed to parse query 'not(xs:QName("ncname") castable as xs:date)'
K-SeqExprCast-1447;Expected XPathException with code XPTY0004, but got Atomic Value for XsName is not implemented yet.
K-SeqExprCast-1448;PRSC Error: Failed to parse query 'not(xs:QName("ncname") castable as xs:gYearMonth)'
K-SeqExprCast-1449;Expected XPathException with code XPTY0004, but got Atomic Value for XsName is not implemented yet.
K-SeqExprCast-1450;PRSC Error: Failed to parse query 'not(xs:QName("ncname") castable as xs:gYear)'
K-SeqExprCast-1451;Expected XPathException with code XPTY0004, but got Atomic Value for XsName is not implemented yet.
K-SeqExprCast-1452;PRSC Error: Failed to parse query 'not(xs:QName("ncname") castable as xs:gMonthDay)'
K-SeqExprCast-1453;Expected XPathException with code XPTY0004, but got Atomic Value for XsName is not implemented yet.
K-SeqExprCast-1454;PRSC Error: Failed to parse query 'not(xs:QName("ncname") castable as xs:gDay)'
K-SeqExprCast-1455;Expected XPathException with code XPTY0004, but got Atomic Value for XsName is not implemented yet.
K-SeqExprCast-1456;PRSC Error: Failed to parse query 'not(xs:QName("ncname") castable as xs:gMonth)'
K-SeqExprCast-1457;Expected XPathException with code XPTY0004, but got Atomic Value for XsName is not implemented yet.
K-SeqExprCast-1458;PRSC Error: Failed to parse query 'not(xs:QName("ncname") castable as xs:boolean)'
K-SeqExprCast-1459;Expected XPathException with code XPTY0004, but got Atomic Value for XsName is not implemented yet.
K-SeqExprCast-1460;PRSC Error: Failed to parse query 'not(xs:QName("ncname") castable as xs:base64Binary)'
K-SeqExprCast-1461;Expected XPathException with code XPTY0004, but got Atomic Value for XsName is not implemented yet.
K-SeqExprCast-1462;PRSC Error: Failed to parse query 'not(xs:QName("ncname") castable as xs:hexBinary)'
K-SeqExprCast-1463;Expected XPathException with code XPTY0004, but got Atomic Value for XsName is not implemented yet.
K-SeqExprCast-1464;PRSC Error: Failed to parse query 'not(xs:QName("ncname") castable as xs:anyURI)'
K-SeqExprCast-1465;PRSC Error: Failed to parse query 'xs:QName("ncname") castable as xs:QName'
K-SeqExprCast-1466;Expected error code: XPST0080. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'not(xs:QName("ncname") castable as xs:NOTATION)'
K-SeqExprCast-1469;Expected error code: XPST0017. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'not(xs:NOTATION("prefix:local") castable as xs:untypedAtomic)'
K-SeqExprCast-147;Expected error code: FORG0001. Query succeeded with result: PT
K-SeqExprCast-1470;Expected error code: XPST0017. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'not(xs:NOTATION("prefix:local") castable as xs:string)'
K-SeqExprCast-1471;Expected error code: XPST0017. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'not(xs:NOTATION("prefix:local") castable as xs:float)'
K-SeqExprCast-1472;Expected error code: XPST0017. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'not(xs:NOTATION("prefix:local") castable as xs:double)'
K-SeqExprCast-1473;Expected error code: XPST0017. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'not(xs:NOTATION("prefix:local") castable as xs:decimal)'
K-SeqExprCast-1474;Expected error code: XPST0017. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'not(xs:NOTATION("prefix:local") castable as xs:integer)'
K-SeqExprCast-1475;Expected error code: XPST0017. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'not(xs:NOTATION("prefix:local") castable as xs:duration)'
K-SeqExprCast-1476;Expected error code: XPST0017. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'not(xs:NOTATION("prefix:local") castable as xs:yearMonthDuration)'
K-SeqExprCast-1477;Expected error code: XPST0017. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'not(xs:NOTATION("prefix:local") castable as xs:dayTimeDuration)'
K-SeqExprCast-1478;Expected error code: XPST0017. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'not(xs:NOTATION("prefix:local") castable as xs:dateTime)'
K-SeqExprCast-1479;Expected error code: XPST0017. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'not(xs:NOTATION("prefix:local") castable as xs:time)'
K-SeqExprCast-148;Expected error code: FORG0001. Query succeeded with result: PT
K-SeqExprCast-1480;Expected error code: XPST0017. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'not(xs:NOTATION("prefix:local") castable as xs:date)'
K-SeqExprCast-1481;Expected error code: XPST0017. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'not(xs:NOTATION("prefix:local") castable as xs:gYearMonth)'
K-SeqExprCast-1482;Expected error code: XPST0017. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'not(xs:NOTATION("prefix:local") castable as xs:gYear)'
K-SeqExprCast-1483;Expected error code: XPST0017. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'not(xs:NOTATION("prefix:local") castable as xs:gMonthDay)'
K-SeqExprCast-1484;Expected error code: XPST0017. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'not(xs:NOTATION("prefix:local") castable as xs:gDay)'
K-SeqExprCast-1485;Expected error code: XPST0017. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'not(xs:NOTATION("prefix:local") castable as xs:gMonth)'
K-SeqExprCast-1486;Expected error code: XPST0017. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'not(xs:NOTATION("prefix:local") castable as xs:boolean)'
K-SeqExprCast-1487;Expected error code: XPST0017. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'not(xs:NOTATION("prefix:local") castable as xs:base64Binary)'
K-SeqExprCast-1488;Expected error code: XPST0017. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'not(xs:NOTATION("prefix:local") castable as xs:hexBinary)'
K-SeqExprCast-1489;Expected error code: XPST0017. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'not(xs:NOTATION("prefix:local") castable as xs:anyURI)'
K-SeqExprCast-149;Expected error code: FORG0001. Query succeeded with result: PT
K-SeqExprCast-1490;Expected error code: XPST0017. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'not(xs:NOTATION("prefix:local") castable as xs:QName)'
K-SeqExprCast-1491;Expected executing the XPath 'not(xs:NOTATION("prefix:local") castable as xs:NOTATION)' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XPST0017. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'not(xs:NOTATION("prefix:local") castable as xs:NOTATION)'
K-SeqExprCast-150;Expected error code: FORG0001. Query succeeded with result: PT
K-SeqExprCast-151;Expected error code: FORG0001. Query succeeded with result: PT
K-SeqExprCast-152;Expected error code: FORG0001. Query succeeded with result: PT
K-SeqExprCast-153;Expected error code: FORG0001. Query succeeded with result: PT
K-SeqExprCast-154;Expected XPath xs:string(xs:duration("P0010Y0010M0010DT0010H0010M0010S")) eq "P10Y10M10DT10H10M10S" to resolve to true
K-SeqExprCast-155;Expected XPath xs:string(xs:duration("-P0010DT0010H0010M0010S")) eq "-P10DT10H10M10S" to resolve to true
K-SeqExprCast-156;Input string was not in a correct format.
K-SeqExprCast-157;Expected XPath xs:string(xs:duration("-PT8H23M0S")) eq "-PT8H23M" to resolve to true
K-SeqExprCast-158;Input string was not in a correct format.
K-SeqExprCast-159;Expected XPath xs:string(xs:duration("P365D")) eq "P365D" to resolve to true
K-SeqExprCast-160;Expected XPath xs:string(xs:duration("P12M")) eq "P1Y" to resolve to true
K-SeqExprCast-161;Expected XPath xs:string(xs:duration("P31D")) eq "P31D" to resolve to true
K-SeqExprCast-162;Expected XPath xs:string(xs:yearMonthDuration("P3Y0M")) eq "P3Y" to resolve to true
K-SeqExprCast-163;Input string was not in a correct format.
K-SeqExprCast-164;Expected XPath xs:string(xs:duration("-PT0S")) eq "PT0S" to resolve to true
K-SeqExprCast-165;Input string was not in a correct format.
K-SeqExprCast-166;Expected XPath xs:string(xs:duration(xs:yearMonthDuration("P543Y456M"))) eq "P581Y" to resolve to true
K-SeqExprCast-167;Input string was not in a correct format.
K-SeqExprCast-168;Expected XPath xs:string(xs:duration(xs:yearMonthDuration("-P543Y456M"))) eq "-P581Y" to resolve to true
K-SeqExprCast-172;Expected error code: FORG0001. Query succeeded with result: PT
K-SeqExprCast-173;Expected error code: FORG0001. Query succeeded with result: PT
K-SeqExprCast-174;Expected error code: FORG0001. Query succeeded with result: PT
K-SeqExprCast-175;Input string was not in a correct format.
K-SeqExprCast-176;Expected error code: FORG0001. Query succeeded with result: PT
K-SeqExprCast-177;Expected error code: FORG0001. Query succeeded with result: PT
K-SeqExprCast-179;Expected XPath xs:string(xs:dayTimeDuration("P0010DT0010H0010M0010S")) eq "P10DT10H10M10S" to resolve to true
K-SeqExprCast-180;Expected XPath xs:string(xs:dayTimeDuration("-P0010DT0010H0010M0010S")) eq "-P10DT10H10M10S" to resolve to true
K-SeqExprCast-181;Expected XPath xs:string(xs:dayTimeDuration("-PT8H23M0S")) eq "-PT8H23M" to resolve to true
K-SeqExprCast-182;Input string was not in a correct format.
K-SeqExprCast-183;Expected XPath xs:string(xs:dayTimeDuration("P9876DT1M")) eq "P9876DT1M" to resolve to true
K-SeqExprCast-184;Expected XPath xs:string(xs:dayTimeDuration("PT9876H1M")) eq "P411DT12H1M" to resolve to true
K-SeqExprCast-185;Expected XPath xs:string(xs:dayTimeDuration("PT6000M")) eq "P4DT4H" to resolve to true
K-SeqExprCast-186;Input string was not in a correct format.
K-SeqExprCast-187;Input string was not in a correct format.
K-SeqExprCast-188;Expected XPath xs:string(xs:dayTimeDuration("-PT0S")) eq "PT0S" to resolve to true
K-SeqExprCast-189;Input string was not in a correct format.
K-SeqExprCast-190;Input string was not in a correct format.
K-SeqExprCast-191;Input string was not in a correct format.
K-SeqExprCast-192;Input string was not in a correct format.
K-SeqExprCast-193;Expected XPath xs:string(xs:dayTimeDuration("P3D")) eq "P3D" to resolve to true
K-SeqExprCast-197;Expected error code: FORG0001. Query succeeded with result: P
K-SeqExprCast-198;Expected error code: FORG0001. Query succeeded with result: P
K-SeqExprCast-199;Expected error code: FORG0001. Query succeeded with result: P
K-SeqExprCast-200;Expected error code: FORG0001. Query succeeded with result: P
K-SeqExprCast-202;Expected XPath xs:string(xs:yearMonthDuration("P0010Y0010M")) eq "P10Y10M" to resolve to true
K-SeqExprCast-203;Expected XPath xs:string(xs:yearMonthDuration("-P0010Y0010M")) eq "-P10Y10M" to resolve to true
K-SeqExprCast-204;Expected XPath xs:string(xs:yearMonthDuration("P0Y0M")) eq "P0M" to resolve to true
K-SeqExprCast-205;Expected XPath xs:string(xs:yearMonthDuration("P2Y323M")) eq "P28Y11M" to resolve to true
K-SeqExprCast-206;Expected XPath xs:string(xs:yearMonthDuration("-P543Y456M")) eq "-P581Y" to resolve to true
K-SeqExprCast-207;Expected XPath xs:string(xs:yearMonthDuration("-P0M")) eq "P0M" to resolve to true
K-SeqExprCast-208;Input string was not in a correct format.
K-SeqExprCast-209;Input string was not in a correct format.
K-SeqExprCast-210;Input string was not in a correct format.
K-SeqExprCast-211;Input string was not in a correct format.
K-SeqExprCast-213;Expected XPathException with code FORG0001, but got The string '1' is not a valid AllXsd value.
K-SeqExprCast-214;Expected XPathException with code FORG0001, but got The string '12' is not a valid AllXsd value.
K-SeqExprCast-215;Expected XPathException with code FORG0001, but got The string '867' is not a valid AllXsd value.
K-SeqExprCast-216;Expected XPathException with code FORG0001, but got The string '+1999' is not a valid AllXsd value.
K-SeqExprCast-217;Expected XPathException with code FORG0001, but got The string '+1999' is not a valid AllXsd value.
K-SeqExprCast-218;Expected XPathException with code FORG0001, but got The string '+0000' is not a valid AllXsd value.
K-SeqExprCast-219;Expected XPathException with code FORG0001, but got The string '1111-' is not a valid AllXsd value.
K-SeqExprCast-220;Expected XPathException with code FORG0001, but got The string '1111a' is not a valid AllXsd value.
K-SeqExprCast-221;Expected XPathException with code FORG0001, but got The string 'a1111' is not a valid AllXsd value.
K-SeqExprCast-222;Expected XPathException with code FORG0001, but got The string '1 111' is not a valid AllXsd value.
K-SeqExprCast-223;Expected XPathException with code FORG0001, but got The string '1111 Z' is not a valid AllXsd value.
K-SeqExprCast-224;Expected XPathException with code FORG0001, but got The string '1111 Z' is not a valid AllXsd value.
K-SeqExprCast-225;Expected XPathException with code FORG0001, but got Offset must be within plus or minus 14 hours. (Parameter 'offset')
K-SeqExprCast-226;Expected XPathException with code FORG0001, but got Offset must be within plus or minus 14 hours. (Parameter 'offset')
K-SeqExprCast-227;Expected error code: FORG0001. Query succeeded with result: 1956+11:00
K-SeqExprCast-228;Expected error code: FORG0001. Query succeeded with result: 1956-11:00
K-SeqExprCast-229;Expected XPathException with code FORG0001, but got The string '02004' is not a valid AllXsd value.
K-SeqExprCast-230;Expected error code: FORG0001. Query succeeded with result: 1956
K-SeqExprCast-234;Expected XPathException with code FORG0001, but got The string '10' is not a valid AllXsd value.
K-SeqExprCast-235;Expected XPathException with code FORG0001, but got The string '-01' is not a valid AllXsd value.
K-SeqExprCast-236;Expected XPathException with code FORG0001, but got The string '---321' is not a valid AllXsd value.
K-SeqExprCast-237;Expected error code: FORG0001. Query succeeded with result: ---01
K-SeqExprCast-238;Expected XPathException with code FORG0001, but got The string 'E---01' is not a valid AllXsd value.
K-SeqExprCast-239;Expected XPathException with code FORG0001, but got The string '---01E' is not a valid AllXsd value.
K-SeqExprCast-240;Expected XPathException with code FORG0001, but got The string '---01-' is not a valid AllXsd value.
K-SeqExprCast-241;Expected XPathException with code FORG0001, but got The string '---001' is not a valid AllXsd value.
K-SeqExprCast-242;Expected XPathException with code FORG0001, but got The string '---32' is not a valid AllXsd value.
K-SeqExprCast-243;Expected XPathException with code FORG0001, but got The string '---00' is not a valid AllXsd value.
K-SeqExprCast-244;Expected XPathException with code FORG0001, but got The string '+--08' is not a valid AllXsd value.
K-SeqExprCast-245;Expected XPathException with code FORG0001, but got The string '+--08' is not a valid AllXsd value.
K-SeqExprCast-246;Expected XPathException with code FORG0001, but got The string '+---08' is not a valid AllXsd value.
K-SeqExprCast-247;Expected XPathException with code FORG0001, but got The string '---08 Z' is not a valid AllXsd value.
K-SeqExprCast-248;Expected XPathException with code FORG0001, but got Offset must be within plus or minus 14 hours. (Parameter 'offset')
K-SeqExprCast-249;Expected XPathException with code FORG0001, but got Offset must be within plus or minus 14 hours. (Parameter 'offset')
K-SeqExprCast-250;Expected error code: FORG0001. Query succeeded with result: ---08+11:00
K-SeqExprCast-251;Expected error code: FORG0001. Query succeeded with result: ---08-11:00
K-SeqExprCast-252;Expected XPathException with code FORG0001, but got The string '---08-10' is not a valid AllXsd value.
K-SeqExprCast-256;Expected XPathException with code FORG0001, but got The string '-01' is not a valid AllXsd value.
K-SeqExprCast-257;Expected error code: FORG0001. Query succeeded with result: --01
K-SeqExprCast-258;Expected XPathException with code FORG0001, but got The string '+--01' is not a valid AllXsd value.
K-SeqExprCast-259;Expected XPathException with code FORG0001, but got The string '--13' is not a valid AllXsd value.
K-SeqExprCast-260;Expected XPathException with code FORG0001, but got The string '--431' is not a valid AllXsd value.
K-SeqExprCast-261;Expected XPathException with code FORG0001, but got The string '--11-' is not a valid AllXsd value.
K-SeqExprCast-262;Expected XPathException with code FORG0001, but got The string '--00' is not a valid AllXsd value.
K-SeqExprCast-263;Expected XPathException with code FORG0001, but got Offset must be within plus or minus 14 hours. (Parameter 'offset')
K-SeqExprCast-264;Expected XPathException with code FORG0001, but got Offset must be within plus or minus 14 hours. (Parameter 'offset')
K-SeqExprCast-265;Expected error code: FORG0001. Query succeeded with result: --08+11:00
K-SeqExprCast-266;Expected error code: FORG0001. Query succeeded with result: --08-11:00
K-SeqExprCast-267;Expected error code: FORG0001. Query succeeded with result: --08
K-SeqExprCast-271;Expected XPathException with code FORG0001, but got The string '--1999-12' is not a valid AllXsd value.
K-SeqExprCast-272;Expected XPathException with code FORG0001, but got The string '+1999-12' is not a valid AllXsd value.
K-SeqExprCast-273;Expected XPathException with code FORG0001, but got The string '1999-12-' is not a valid AllXsd value.
K-SeqExprCast-274;Expected XPathException with code FORG0001, but got The string '1999--12' is not a valid AllXsd value.
K-SeqExprCast-275;Expected XPathException with code FORG0001, but got The string '1999-13' is not a valid AllXsd value.
K-SeqExprCast-276;Expected XPathException with code FORG0001, but got The string '1999-00' is not a valid AllXsd value.
K-SeqExprCast-277;Expected XPathException with code FORG0001, but got The string '02004-08' is not a valid AllXsd value.
K-SeqExprCast-278;Expected error code: FORG0001. Query succeeded with result: 1999-08
K-SeqExprCast-279;Expected XPathException with code FORG0001, but got Offset must be within plus or minus 14 hours. (Parameter 'offset')
K-SeqExprCast-280;Expected XPathException with code FORG0001, but got Offset must be within plus or minus 14 hours. (Parameter 'offset')
K-SeqExprCast-281;Expected error code: FORG0001. Query succeeded with result: 1999-01+11:00
K-SeqExprCast-282;Expected error code: FORG0001. Query succeeded with result: 1999-01-11:00
K-SeqExprCast-286;Expected XPathException with code FORG0001, but got The string '-01-12' is not a valid AllXsd value.
K-SeqExprCast-287;Expected XPathException with code FORG0001, but got The string '+--01-12' is not a valid AllXsd value.
K-SeqExprCast-288;Expected XPathException with code FORG0001, but got The string '01-12-' is not a valid AllXsd value.
K-SeqExprCast-289;Expected XPathException with code FORG0001, but got The string '--01--12' is not a valid AllXsd value.
K-SeqExprCast-290;Expected XPathException with code FORG0001, but got The string '--01-00' is not a valid AllXsd value.
K-SeqExprCast-291;Expected XPathException with code FORG0001, but got The string '--00-01' is not a valid AllXsd value.
K-SeqExprCast-292;Expected XPathException with code FORG0001, but got The string '--13-01' is not a valid AllXsd value.
K-SeqExprCast-293;Expected XPathException with code FORG0001, but got The string '--111-01' is not a valid AllXsd value.
K-SeqExprCast-294;Expected XPathException with code FORG0001, but got The string '--1967-01' is not a valid AllXsd value.
K-SeqExprCast-295;Expected XPathException with code FORG0001, but got The string '--02-31' is not a valid AllXsd value.
K-SeqExprCast-296;Expected XPathException with code FORG0001, but got The string '--11-08-10' is not a valid AllXsd value.
K-SeqExprCast-297;Expected XPathException with code FORG0001, but got The string '--02-30' is not a valid AllXsd value.
K-SeqExprCast-298;Expected XPathException with code FORG0001, but got The string '--04-31' is not a valid AllXsd value.
K-SeqExprCast-299;Expected XPathException with code FORG0001, but got The string '--11-31' is not a valid AllXsd value.
K-SeqExprCast-300;Expected XPathException with code FORG0001, but got Offset must be within plus or minus 14 hours. (Parameter 'offset')
K-SeqExprCast-301;Expected XPathException with code FORG0001, but got Offset must be within plus or minus 14 hours. (Parameter 'offset')
K-SeqExprCast-302;Expected error code: FORG0001. Query succeeded with result: --01-01+11:00
K-SeqExprCast-303;Expected error code: FORG0001. Query succeeded with result: --01-01-11:00
K-SeqExprCast-308;Expected XPathException with code FORG0001, but got The string '+2004-08-01T12:44:05' is not a valid AllXsd value.
K-SeqExprCast-309;Expected XPathException with code FORG0001, but got The string '02004-08-01T12:44:05' is not a valid AllXsd value.
K-SeqExprCast-310;Expected XPathException with code FORG0001, but got The string '00004-08-01T12:44:05' is not a valid AllXsd value.
K-SeqExprCast-311;Expected XPathException with code FORG0001, but got The string '2004-32-01T12:44:05' is not a valid AllXsd value.
K-SeqExprCast-312;Expected XPathException with code FORG0001, but got The string '2002-02-30T12:44:05' is not a valid AllXsd value.
K-SeqExprCast-313;Expected XPathException with code FORG0001, but got The string '2002-002-15T12:44:05' is not a valid AllXsd value.
K-SeqExprCast-314;Expected XPathException with code FORG0001, but got The string '2002-02-150T12:44:05' is not a valid AllXsd value.
K-SeqExprCast-315;Expected XPathException with code FORG0001, but got The string '2002-02-15T24:00:00.001' is not a valid AllXsd value.
K-SeqExprCast-316;Expected XPathException with code FORG0001, but got The string '2002-02-15T24:01:00' is not a valid AllXsd value.
K-SeqExprCast-317;Expected XPathException with code FORG0001, but got The string '2002-02-15T25:01:00' is not a valid AllXsd value.
K-SeqExprCast-318;Expected XPathException with code FORG0001, but got The string '2002-02-15T21:60:00' is not a valid AllXsd value.
K-SeqExprCast-319;Expected XPathException with code FORG0001, but got The string '2002-02-15T21:01:60' is not a valid AllXsd value.
K-SeqExprCast-320;Expected XPathException with code FORG0001, but got The string '--2002-02-15T21:01:23' is not a valid AllXsd value.
K-SeqExprCast-321;Expected XPathException with code FORG0001, but got Offset must be within plus or minus 14 hours. (Parameter 'offset')
K-SeqExprCast-322;Expected XPathException with code FORG0001, but got Offset must be within plus or minus 14 hours. (Parameter 'offset')
K-SeqExprCast-323;Expected error code: FORG0001. Query succeeded with result: 1999-12-01T23:59:12.432+11:00
K-SeqExprCast-324;Expected error code: FORG0001. Query succeeded with result: 1999-12-01T23:59:12.432-11:00
K-SeqExprCast-325;Expected XPathException with code FORG0001, but got The string '1999-12-01T23:59:12.999-00' is not a valid AllXsd value.
K-SeqExprCast-33;PRSC Error: Failed to parse query 'xs:boolean(0.0E0) eq false()'
K-SeqExprCast-330;Expected XPath xs:gMonth(xs:dateTime("2002-11-23T22:12:23.867-00:00")) eq xs:gMonth("--11Z") to resolve to true
K-SeqExprCast-331;Expected XPath xs:gMonth(xs:dateTime("2002-11-23T22:12:23.867-13:37")) eq xs:gMonth("--11-13:37") to resolve to true
K-SeqExprCast-332;Expected XPath xs:gMonthDay(xs:dateTime("2002-11-23T22:12:23.867-00:00")) eq xs:gMonthDay("--11-23Z") to resolve to true
K-SeqExprCast-333;Expected XPath xs:gMonthDay(xs:dateTime("2002-11-23T22:12:23.867-13:37")) eq xs:gMonthDay("--11-23-13:37") to resolve to true
K-SeqExprCast-334;Expected XPath xs:gDay(xs:dateTime("2002-11-23T22:12:23.867-00:00")) eq xs:gDay("---23Z") to resolve to true
K-SeqExprCast-335;Expected XPath xs:gDay(xs:dateTime("2002-11-23T22:12:23.867-13:37")) eq xs:gDay("---23-13:37") to resolve to true
K-SeqExprCast-338;Casting not supported from given type to xs:time or any of its derived types.
K-SeqExprCast-339;Casting not supported from given type to xs:time or any of its derived types.
K-SeqExprCast-34;Expected XPath xs:boolean(xs:double("NaN")) eq false() to resolve to true
K-SeqExprCast-35;Expected XPath xs:boolean(xs:float("NaN")) eq false() to resolve to true
K-SeqExprCast-350;The string '2004-03-31T24:00:00' is not a valid AllXsd value.
K-SeqExprCast-351;Expected XPathException with code FORG0001, but got The string '24:00:00.001' is not a valid AllXsd value.
K-SeqExprCast-352;Expected XPathException with code FORG0001, but got The string '24:01:00' is not a valid AllXsd value.
K-SeqExprCast-353;Expected XPathException with code FORG0001, but got The string '25:01:00' is not a valid AllXsd value.
K-SeqExprCast-354;Expected XPathException with code FORG0001, but got The string '21:60:00' is not a valid AllXsd value.
K-SeqExprCast-355;Expected XPathException with code FORG0001, but got The string '21:01:60' is not a valid AllXsd value.
K-SeqExprCast-356;Expected XPathException with code FORG0001, but got The string '+21:01:50' is not a valid AllXsd value.
K-SeqExprCast-357;Expected XPathException with code FORG0001, but got The string '-21:01:50' is not a valid AllXsd value.
K-SeqExprCast-358;Expected error code: FORG0001. Query succeeded with result: 08:12:12
K-SeqExprCast-359;Expected XPathException with code FORG0001, but got Offset must be within plus or minus 14 hours. (Parameter 'offset')
K-SeqExprCast-36;Expected error code: FORG0001. Found error code: XPTY0004 with error message: Casting not supported from given type to xs:boolean or any of its derived types.
K-SeqExprCast-360;Expected XPathException with code FORG0001, but got Offset must be within plus or minus 14 hours. (Parameter 'offset')
K-SeqExprCast-361;Expected error code: FORG0001. Query succeeded with result: 23:59:12.432+11:00
K-SeqExprCast-362;Expected error code: FORG0001. Query succeeded with result: 23:59:12.432-11:00
K-SeqExprCast-363;Expected XPathException with code FORG0001, but got The string 'T23:59:12.999-03' is not a valid AllXsd value.
K-SeqExprCast-37;Expected XPath false() cast as xs:string eq "false" to resolve to true
K-SeqExprCast-374;The string '24:00:00' is not a valid AllXsd value.
K-SeqExprCast-375;Expected XPathException with code FORG0001, but got The string '+2004-08-01' is not a valid AllXsd value.
K-SeqExprCast-376;Expected XPathException with code FORG0001, but got The string '02004-08-01' is not a valid AllXsd value.
K-SeqExprCast-377;Expected XPathException with code FORG0001, but got The string '00004-08-01' is not a valid AllXsd value.
K-SeqExprCast-378;Expected XPathException with code FORG0001, but got The string '2004-32-01' is not a valid AllXsd value.
K-SeqExprCast-379;Expected XPathException with code FORG0001, but got The string '2002-02-30' is not a valid AllXsd value.
K-SeqExprCast-38;Expected XPath true() cast as xs:string eq "true" to resolve to true
K-SeqExprCast-380;Expected XPathException with code FORG0001, but got The string '2002-002-15' is not a valid AllXsd value.
K-SeqExprCast-381;Expected XPathException with code FORG0001, but got The string '2002-02-150' is not a valid AllXsd value.
K-SeqExprCast-382;Expected XPathException with code FORG0001, but got The string '--2002-02-15' is not a valid AllXsd value.
K-SeqExprCast-383;Expected error code: FORG0001. Query succeeded with result: 2002-02-15
K-SeqExprCast-384;Expected XPathException with code FORG0001, but got Offset must be within plus or minus 14 hours. (Parameter 'offset')
K-SeqExprCast-385;Expected XPathException with code FORG0001, but got Offset must be within plus or minus 14 hours. (Parameter 'offset')
K-SeqExprCast-386;Expected error code: FORG0001. Query succeeded with result: 1999-12-01+11:00
K-SeqExprCast-387;Expected error code: FORG0001. Query succeeded with result: 1999-12-01-11:00
K-SeqExprCast-388;Expected XPathException with code FORG0001, but got The string '1999-12-01-03' is not a valid AllXsd value.
K-SeqExprCast-389;Casting not supported from given type to xs:gYear or any of its derived types.
K-SeqExprCast-39;Expected XPath ('1' cast as xs:boolean) cast as xs:string eq 'true' to resolve to true
K-SeqExprCast-390;Casting not supported from given type to xs:gYear or any of its derived types.
K-SeqExprCast-391;Casting not supported from given type to xs:gYearMonth or any of its derived types.
K-SeqExprCast-392;Casting not supported from given type to xs:gYearMonth or any of its derived types.
K-SeqExprCast-393;Casting not supported from given type to xs:gMonth or any of its derived types.
K-SeqExprCast-394;Casting not supported from given type to xs:gMonth or any of its derived types.
K-SeqExprCast-395;Casting not supported from given type to xs:gMonthDay or any of its derived types.
K-SeqExprCast-396;Casting not supported from given type to xs:gMonthDay or any of its derived types.
K-SeqExprCast-397;Casting not supported from given type to xs:gDay or any of its derived types.
K-SeqExprCast-398;Casting not supported from given type to xs:gDay or any of its derived types.
K-SeqExprCast-399;Casting not supported from given type to xs:dateTime or any of its derived types.
K-SeqExprCast-4;Expected error code: XPST0051. Found error code: XPST0080 with error message: Casting to xs:anyAtomicType, xs:anySimpleType or xs:NOTATION is not permitted.
K-SeqExprCast-40;Expected XPath xs:boolean('0') cast as xs:string eq 'false' to resolve to true
K-SeqExprCast-400;Casting not supported from given type to xs:dateTime or any of its derived types.
K-SeqExprCast-419;PRSC Error: Failed to parse query 'xs:untypedAtomic("an arbitrary string(untypedAtomic source)") castable as xs:untypedAtomic'
K-SeqExprCast-42;Haven't implemented Qnames from: local-name:fn
K-SeqExprCast-421;PRSC Error: Failed to parse query 'xs:untypedAtomic("an arbitrary string(untypedAtomic source)") castable as xs:string'
K-SeqExprCast-422;Expected XPathException with code XPTY0004, but got Type casting to XsQName has not been implemented yet.
K-SeqExprCast-422a;Expected XPathException with code FORG0001, but got Type casting to XsQName has not been implemented yet.
K-SeqExprCast-423;PRSC Error: Failed to parse query 'not(xs:untypedAtomic("an arbitrary string(untypedAtomic source)") castable as xs:QName)'
K-SeqExprCast-424;Expected error code: XPST0080. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'not(xs:untypedAtomic("an arbitrary string(untypedAtomic source)") castable as xs:NOTATION)'
K-SeqExprCast-43;Atomic Value for XsName is not implemented yet.
K-SeqExprCast-433;PRSC Error: Failed to parse query 'xs:string("an arbitrary string") castable as xs:untypedAtomic'
K-SeqExprCast-435;PRSC Error: Failed to parse query 'xs:string("an arbitrary string") castable as xs:string'
K-SeqExprCast-436;Expected error code: XPST0080. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'not(xs:string("an arbitrary string") castable as xs:NOTATION)'
K-SeqExprCast-44;Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-441;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K-SeqExprCast-445;PRSC Error: Failed to parse query 'xs:float("3.4e5") castable as xs:untypedAtomic'
K-SeqExprCast-447;PRSC Error: Failed to parse query 'xs:float("3.4e5") castable as xs:string'
K-SeqExprCast-449;PRSC Error: Failed to parse query 'xs:float("3.4e5") castable as xs:float'
K-SeqExprCast-451;PRSC Error: Failed to parse query 'xs:float("3.4e5") castable as xs:double'
K-SeqExprCast-453;PRSC Error: Failed to parse query 'not(xs:float("3.4e5") castable as xs:duration)'
K-SeqExprCast-455;PRSC Error: Failed to parse query 'not(xs:float("3.4e5") castable as xs:yearMonthDuration)'
K-SeqExprCast-457;PRSC Error: Failed to parse query 'not(xs:float("3.4e5") castable as xs:dayTimeDuration)'
K-SeqExprCast-459;PRSC Error: Failed to parse query 'not(xs:float("3.4e5") castable as xs:dateTime)'
K-SeqExprCast-461;PRSC Error: Failed to parse query 'not(xs:float("3.4e5") castable as xs:time)'
K-SeqExprCast-463;PRSC Error: Failed to parse query 'not(xs:float("3.4e5") castable as xs:date)'
K-SeqExprCast-465;PRSC Error: Failed to parse query 'not(xs:float("3.4e5") castable as xs:gYearMonth)'
K-SeqExprCast-467;PRSC Error: Failed to parse query 'not(xs:float("3.4e5") castable as xs:gYear)'
K-SeqExprCast-469;PRSC Error: Failed to parse query 'not(xs:float("3.4e5") castable as xs:gMonthDay)'
K-SeqExprCast-471;PRSC Error: Failed to parse query 'not(xs:float("3.4e5") castable as xs:gDay)'
K-SeqExprCast-473;PRSC Error: Failed to parse query 'not(xs:float("3.4e5") castable as xs:gMonth)'
K-SeqExprCast-475;PRSC Error: Failed to parse query 'xs:float("3.4e5") castable as xs:boolean'
K-SeqExprCast-476;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-477;PRSC Error: Failed to parse query 'not(xs:float("3.4e5") castable as xs:base64Binary)'
K-SeqExprCast-478;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-479;PRSC Error: Failed to parse query 'not(xs:float("3.4e5") castable as xs:hexBinary)'
K-SeqExprCast-480;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-481;PRSC Error: Failed to parse query 'not(xs:float("3.4e5") castable as xs:anyURI)'
K-SeqExprCast-482;Expected XPathException with code XPTY0004, but got Type casting to XsQName has not been implemented yet.
K-SeqExprCast-483;PRSC Error: Failed to parse query 'not(xs:float("3.4e5") castable as xs:QName)'
K-SeqExprCast-484;Expected error code: XPST0080. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'not(xs:float("3.4e5") castable as xs:NOTATION)'
K-SeqExprCast-489;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K-SeqExprCast-493;PRSC Error: Failed to parse query 'xs:double("3.3e3") castable as xs:untypedAtomic'
K-SeqExprCast-495;PRSC Error: Failed to parse query 'xs:double("3.3e3") castable as xs:string'
K-SeqExprCast-497;PRSC Error: Failed to parse query 'xs:double("3.3e3") castable as xs:float'
K-SeqExprCast-499;PRSC Error: Failed to parse query 'xs:double("3.3e3") castable as xs:double'
K-SeqExprCast-50;Expected XPath false() cast as xs:untypedAtomic eq xs:untypedAtomic("false") to resolve to true
K-SeqExprCast-501;PRSC Error: Failed to parse query 'not(xs:double("3.3e3") castable as xs:duration)'
K-SeqExprCast-503;PRSC Error: Failed to parse query 'not(xs:double("3.3e3") castable as xs:yearMonthDuration)'
K-SeqExprCast-505;PRSC Error: Failed to parse query 'not(xs:double("3.3e3") castable as xs:dayTimeDuration)'
K-SeqExprCast-507;PRSC Error: Failed to parse query 'not(xs:double("3.3e3") castable as xs:dateTime)'
K-SeqExprCast-509;PRSC Error: Failed to parse query 'not(xs:double("3.3e3") castable as xs:time)'
K-SeqExprCast-51;Expected XPath true() cast as xs:untypedAtomic eq xs:untypedAtomic("true") to resolve to true
K-SeqExprCast-511;PRSC Error: Failed to parse query 'not(xs:double("3.3e3") castable as xs:date)'
K-SeqExprCast-513;PRSC Error: Failed to parse query 'not(xs:double("3.3e3") castable as xs:gYearMonth)'
K-SeqExprCast-515;PRSC Error: Failed to parse query 'not(xs:double("3.3e3") castable as xs:gYear)'
K-SeqExprCast-517;PRSC Error: Failed to parse query 'not(xs:double("3.3e3") castable as xs:gMonthDay)'
K-SeqExprCast-519;PRSC Error: Failed to parse query 'not(xs:double("3.3e3") castable as xs:gDay)'
K-SeqExprCast-521;PRSC Error: Failed to parse query 'not(xs:double("3.3e3") castable as xs:gMonth)'
K-SeqExprCast-523;PRSC Error: Failed to parse query 'xs:double("3.3e3") castable as xs:boolean'
K-SeqExprCast-524;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-525;PRSC Error: Failed to parse query 'not(xs:double("3.3e3") castable as xs:base64Binary)'
K-SeqExprCast-526;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-527;PRSC Error: Failed to parse query 'not(xs:double("3.3e3") castable as xs:hexBinary)'
K-SeqExprCast-528;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-529;PRSC Error: Failed to parse query 'not(xs:double("3.3e3") castable as xs:anyURI)'
K-SeqExprCast-530;Expected XPathException with code XPTY0004, but got Type casting to XsQName has not been implemented yet.
K-SeqExprCast-531;PRSC Error: Failed to parse query 'not(xs:double("3.3e3") castable as xs:QName)'
K-SeqExprCast-532;Expected error code: XPST0080. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'not(xs:double("3.3e3") castable as xs:NOTATION)'
K-SeqExprCast-537;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K-SeqExprCast-54;Atomic Value for XsName is not implemented yet.
K-SeqExprCast-541;PRSC Error: Failed to parse query 'xs:decimal("10.01") castable as xs:untypedAtomic'
K-SeqExprCast-543;PRSC Error: Failed to parse query 'xs:decimal("10.01") castable as xs:string'
K-SeqExprCast-545;PRSC Error: Failed to parse query 'xs:decimal("10.01") castable as xs:float'
K-SeqExprCast-547;PRSC Error: Failed to parse query 'xs:decimal("10.01") castable as xs:double'
K-SeqExprCast-549;PRSC Error: Failed to parse query 'xs:decimal("10.01") castable as xs:decimal'
K-SeqExprCast-55;Haven't implemented Qnames from: local-name:fn
K-SeqExprCast-551;PRSC Error: Failed to parse query 'xs:decimal("10.01") castable as xs:integer'
K-SeqExprCast-553;PRSC Error: Failed to parse query 'not(xs:decimal("10.01") castable as xs:duration)'
K-SeqExprCast-555;PRSC Error: Failed to parse query 'not(xs:decimal("10.01") castable as xs:yearMonthDuration)'
K-SeqExprCast-557;PRSC Error: Failed to parse query 'not(xs:decimal("10.01") castable as xs:dayTimeDuration)'
K-SeqExprCast-559;PRSC Error: Failed to parse query 'not(xs:decimal("10.01") castable as xs:dateTime)'
K-SeqExprCast-56;Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-561;PRSC Error: Failed to parse query 'not(xs:decimal("10.01") castable as xs:time)'
K-SeqExprCast-563;PRSC Error: Failed to parse query 'not(xs:decimal("10.01") castable as xs:date)'
K-SeqExprCast-565;PRSC Error: Failed to parse query 'not(xs:decimal("10.01") castable as xs:gYearMonth)'
K-SeqExprCast-567;PRSC Error: Failed to parse query 'not(xs:decimal("10.01") castable as xs:gYear)'
K-SeqExprCast-569;PRSC Error: Failed to parse query 'not(xs:decimal("10.01") castable as xs:gMonthDay)'
K-SeqExprCast-571;PRSC Error: Failed to parse query 'not(xs:decimal("10.01") castable as xs:gDay)'
K-SeqExprCast-573;PRSC Error: Failed to parse query 'not(xs:decimal("10.01") castable as xs:gMonth)'
K-SeqExprCast-575;PRSC Error: Failed to parse query 'xs:decimal("10.01") castable as xs:boolean'
K-SeqExprCast-576;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-577;PRSC Error: Failed to parse query 'not(xs:decimal("10.01") castable as xs:base64Binary)'
K-SeqExprCast-578;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-579;PRSC Error: Failed to parse query 'not(xs:decimal("10.01") castable as xs:hexBinary)'
K-SeqExprCast-580;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-581;PRSC Error: Failed to parse query 'not(xs:decimal("10.01") castable as xs:anyURI)'
K-SeqExprCast-582;Expected XPathException with code XPTY0004, but got Type casting to XsQName has not been implemented yet.
K-SeqExprCast-583;PRSC Error: Failed to parse query 'not(xs:decimal("10.01") castable as xs:QName)'
K-SeqExprCast-584;Expected error code: XPST0080. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'not(xs:decimal("10.01") castable as xs:NOTATION)'
K-SeqExprCast-593;PRSC Error: Failed to parse query 'xs:integer("6789") castable as xs:untypedAtomic'
K-SeqExprCast-595;PRSC Error: Failed to parse query 'xs:integer("6789") castable as xs:string'
K-SeqExprCast-597;PRSC Error: Failed to parse query 'xs:integer("6789") castable as xs:float'
K-SeqExprCast-599;PRSC Error: Failed to parse query 'xs:integer("6789") castable as xs:double'
K-SeqExprCast-5a;Expected error code: XQST0052. Found error code: XPST0051 with error message: The type "xs:untyped" could not be found
K-SeqExprCast-601;PRSC Error: Failed to parse query 'xs:integer("6789") castable as xs:decimal'
K-SeqExprCast-603;PRSC Error: Failed to parse query 'xs:integer("6789") castable as xs:integer'
K-SeqExprCast-605;PRSC Error: Failed to parse query 'not(xs:integer("6789") castable as xs:duration)'
K-SeqExprCast-607;PRSC Error: Failed to parse query 'not(xs:integer("6789") castable as xs:yearMonthDuration)'
K-SeqExprCast-609;PRSC Error: Failed to parse query 'not(xs:integer("6789") castable as xs:dayTimeDuration)'
K-SeqExprCast-611;PRSC Error: Failed to parse query 'not(xs:integer("6789") castable as xs:dateTime)'
K-SeqExprCast-613;PRSC Error: Failed to parse query 'not(xs:integer("6789") castable as xs:time)'
K-SeqExprCast-615;PRSC Error: Failed to parse query 'not(xs:integer("6789") castable as xs:date)'
K-SeqExprCast-617;PRSC Error: Failed to parse query 'not(xs:integer("6789") castable as xs:gYearMonth)'
K-SeqExprCast-619;PRSC Error: Failed to parse query 'not(xs:integer("6789") castable as xs:gYear)'
K-SeqExprCast-621;PRSC Error: Failed to parse query 'not(xs:integer("6789") castable as xs:gMonthDay)'
K-SeqExprCast-623;PRSC Error: Failed to parse query 'not(xs:integer("6789") castable as xs:gDay)'
K-SeqExprCast-625;PRSC Error: Failed to parse query 'not(xs:integer("6789") castable as xs:gMonth)'
K-SeqExprCast-627;PRSC Error: Failed to parse query 'xs:integer("6789") castable as xs:boolean'
K-SeqExprCast-628;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-629;PRSC Error: Failed to parse query 'not(xs:integer("6789") castable as xs:base64Binary)'
K-SeqExprCast-630;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-631;PRSC Error: Failed to parse query 'not(xs:integer("6789") castable as xs:hexBinary)'
K-SeqExprCast-632;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-633;PRSC Error: Failed to parse query 'not(xs:integer("6789") castable as xs:anyURI)'
K-SeqExprCast-634;Expected XPathException with code XPTY0004, but got Type casting to XsQName has not been implemented yet.
K-SeqExprCast-635;PRSC Error: Failed to parse query 'not(xs:integer("6789") castable as xs:QName)'
K-SeqExprCast-636;Expected error code: XPST0080. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'not(xs:integer("6789") castable as xs:NOTATION)'
K-SeqExprCast-641;Expected error code: FORG0001. Query succeeded with result: PT
K-SeqExprCast-642;Expected XPath xs:duration(xs:untypedAtomic( "P1Y2M3DT10H30M" )) eq xs:duration("P1Y2M3DT10H30M") to resolve to true
K-SeqExprCast-645;PRSC Error: Failed to parse query 'xs:duration("P1Y2M3DT10H30M") castable as xs:untypedAtomic'
K-SeqExprCast-647;PRSC Error: Failed to parse query 'xs:duration("P1Y2M3DT10H30M") castable as xs:string'
K-SeqExprCast-649;PRSC Error: Failed to parse query 'not(xs:duration("P1Y2M3DT10H30M") castable as xs:float)'
K-SeqExprCast-651;PRSC Error: Failed to parse query 'not(xs:duration("P1Y2M3DT10H30M") castable as xs:double)'
K-SeqExprCast-653;PRSC Error: Failed to parse query 'not(xs:duration("P1Y2M3DT10H30M") castable as xs:decimal)'
K-SeqExprCast-655;PRSC Error: Failed to parse query 'not(xs:duration("P1Y2M3DT10H30M") castable as xs:integer)'
K-SeqExprCast-657;PRSC Error: Failed to parse query 'xs:duration("P1Y2M3DT10H30M") castable as xs:duration'
K-SeqExprCast-658;Expected XPath xs:duration("P1Y2M3DT10H30M") cast as xs:yearMonthDuration ne xs:yearMonthDuration("P1Y12M") to resolve to true
K-SeqExprCast-659;PRSC Error: Failed to parse query 'xs:duration("P1Y2M3DT10H30M") castable as xs:yearMonthDuration'
K-SeqExprCast-660;Expected XPath xs:duration("P1Y2M3DT10H30M") cast as xs:dayTimeDuration ne xs:dayTimeDuration("P3DT2H") to resolve to true
K-SeqExprCast-661;PRSC Error: Failed to parse query 'xs:duration("P1Y2M3DT10H30M") castable as xs:dayTimeDuration'
K-SeqExprCast-663;PRSC Error: Failed to parse query 'not(xs:duration("P1Y2M3DT10H30M") castable as xs:dateTime)'
K-SeqExprCast-665;PRSC Error: Failed to parse query 'not(xs:duration("P1Y2M3DT10H30M") castable as xs:time)'
K-SeqExprCast-667;PRSC Error: Failed to parse query 'not(xs:duration("P1Y2M3DT10H30M") castable as xs:date)'
K-SeqExprCast-669;PRSC Error: Failed to parse query 'not(xs:duration("P1Y2M3DT10H30M") castable as xs:gYearMonth)'
K-SeqExprCast-671;PRSC Error: Failed to parse query 'not(xs:duration("P1Y2M3DT10H30M") castable as xs:gYear)'
K-SeqExprCast-673;PRSC Error: Failed to parse query 'not(xs:duration("P1Y2M3DT10H30M") castable as xs:gMonthDay)'
K-SeqExprCast-675;PRSC Error: Failed to parse query 'not(xs:duration("P1Y2M3DT10H30M") castable as xs:gDay)'
K-SeqExprCast-677;PRSC Error: Failed to parse query 'not(xs:duration("P1Y2M3DT10H30M") castable as xs:gMonth)'
K-SeqExprCast-679;PRSC Error: Failed to parse query 'not(xs:duration("P1Y2M3DT10H30M") castable as xs:boolean)'
K-SeqExprCast-68;Expected XPathException with code XPTY0004, but got Type casting to XsQName has not been implemented yet.
K-SeqExprCast-680;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-681;PRSC Error: Failed to parse query 'not(xs:duration("P1Y2M3DT10H30M") castable as xs:base64Binary)'
K-SeqExprCast-682;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-683;PRSC Error: Failed to parse query 'not(xs:duration("P1Y2M3DT10H30M") castable as xs:hexBinary)'
K-SeqExprCast-684;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-685;PRSC Error: Failed to parse query 'not(xs:duration("P1Y2M3DT10H30M") castable as xs:anyURI)'
K-SeqExprCast-686;Expected XPathException with code XPTY0004, but got Type casting to XsQName has not been implemented yet.
K-SeqExprCast-687;PRSC Error: Failed to parse query 'not(xs:duration("P1Y2M3DT10H30M") castable as xs:QName)'
K-SeqExprCast-688;Expected error code: XPST0080. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'not(xs:duration("P1Y2M3DT10H30M") castable as xs:NOTATION)'
K-SeqExprCast-69;Expected executing the XPath '. cast as xs:QName' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPathException with code XPTY0004, but got Type casting to XsQName has not been implemented yet.
K-SeqExprCast-694;Expected XPath xs:yearMonthDuration(xs:untypedAtomic( "P1Y12M" )) eq xs:yearMonthDuration("P1Y12M") to resolve to true
K-SeqExprCast-697;PRSC Error: Failed to parse query 'xs:yearMonthDuration("P1Y12M") castable as xs:untypedAtomic'
K-SeqExprCast-699;PRSC Error: Failed to parse query 'xs:yearMonthDuration("P1Y12M") castable as xs:string'
K-SeqExprCast-70;Atomic Value for XsName is not implemented yet.
K-SeqExprCast-701;PRSC Error: Failed to parse query 'not(xs:yearMonthDuration("P1Y12M") castable as xs:float)'
K-SeqExprCast-703;PRSC Error: Failed to parse query 'not(xs:yearMonthDuration("P1Y12M") castable as xs:double)'
K-SeqExprCast-705;PRSC Error: Failed to parse query 'not(xs:yearMonthDuration("P1Y12M") castable as xs:decimal)'
K-SeqExprCast-707;PRSC Error: Failed to parse query 'not(xs:yearMonthDuration("P1Y12M") castable as xs:integer)'
K-SeqExprCast-708;Expected XPath xs:yearMonthDuration("P1Y12M") cast as xs:duration ne xs:duration("P1Y2M3DT10H30M") to resolve to true
K-SeqExprCast-709;PRSC Error: Failed to parse query 'xs:yearMonthDuration("P1Y12M") castable as xs:duration'
K-SeqExprCast-711;PRSC Error: Failed to parse query 'xs:yearMonthDuration("P1Y12M") castable as xs:yearMonthDuration'
K-SeqExprCast-712;Input string was not in a correct format.
K-SeqExprCast-713;PRSC Error: Failed to parse query 'xs:yearMonthDuration("P1Y12M") castable as xs:dayTimeDuration'
K-SeqExprCast-715;PRSC Error: Failed to parse query 'not(xs:yearMonthDuration("P1Y12M") castable as xs:dateTime)'
K-SeqExprCast-717;PRSC Error: Failed to parse query 'not(xs:yearMonthDuration("P1Y12M") castable as xs:time)'
K-SeqExprCast-719;PRSC Error: Failed to parse query 'not(xs:yearMonthDuration("P1Y12M") castable as xs:date)'
K-SeqExprCast-71a;Expected XPathException with code XPTY0004, but got Type casting to XsQName has not been implemented yet.
K-SeqExprCast-71b;Type casting to XsQName has not been implemented yet.
K-SeqExprCast-72;Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-721;PRSC Error: Failed to parse query 'not(xs:yearMonthDuration("P1Y12M") castable as xs:gYearMonth)'
K-SeqExprCast-723;PRSC Error: Failed to parse query 'not(xs:yearMonthDuration("P1Y12M") castable as xs:gYear)'
K-SeqExprCast-725;PRSC Error: Failed to parse query 'not(xs:yearMonthDuration("P1Y12M") castable as xs:gMonthDay)'
K-SeqExprCast-727;PRSC Error: Failed to parse query 'not(xs:yearMonthDuration("P1Y12M") castable as xs:gDay)'
K-SeqExprCast-729;PRSC Error: Failed to parse query 'not(xs:yearMonthDuration("P1Y12M") castable as xs:gMonth)'
K-SeqExprCast-73;Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-731;PRSC Error: Failed to parse query 'not(xs:yearMonthDuration("P1Y12M") castable as xs:boolean)'
K-SeqExprCast-732;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-733;PRSC Error: Failed to parse query 'not(xs:yearMonthDuration("P1Y12M") castable as xs:base64Binary)'
K-SeqExprCast-734;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-735;PRSC Error: Failed to parse query 'not(xs:yearMonthDuration("P1Y12M") castable as xs:hexBinary)'
K-SeqExprCast-736;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-737;PRSC Error: Failed to parse query 'not(xs:yearMonthDuration("P1Y12M") castable as xs:anyURI)'
K-SeqExprCast-738;Expected XPathException with code XPTY0004, but got Type casting to XsQName has not been implemented yet.
K-SeqExprCast-739;PRSC Error: Failed to parse query 'not(xs:yearMonthDuration("P1Y12M") castable as xs:QName)'
K-SeqExprCast-74;Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-740;Expected error code: XPST0080. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'not(xs:yearMonthDuration("P1Y12M") castable as xs:NOTATION)'
K-SeqExprCast-746;Expected XPath xs:dayTimeDuration(xs:untypedAtomic( "P3DT2H" )) eq xs:dayTimeDuration("P3DT2H") to resolve to true
K-SeqExprCast-749;PRSC Error: Failed to parse query 'xs:dayTimeDuration("P3DT2H") castable as xs:untypedAtomic'
K-SeqExprCast-751;PRSC Error: Failed to parse query 'xs:dayTimeDuration("P3DT2H") castable as xs:string'
K-SeqExprCast-753;PRSC Error: Failed to parse query 'not(xs:dayTimeDuration("P3DT2H") castable as xs:float)'
K-SeqExprCast-755;PRSC Error: Failed to parse query 'not(xs:dayTimeDuration("P3DT2H") castable as xs:double)'
K-SeqExprCast-757;PRSC Error: Failed to parse query 'not(xs:dayTimeDuration("P3DT2H") castable as xs:decimal)'
K-SeqExprCast-759;PRSC Error: Failed to parse query 'not(xs:dayTimeDuration("P3DT2H") castable as xs:integer)'
K-SeqExprCast-760;Expected XPath xs:dayTimeDuration("P3DT2H") cast as xs:duration ne xs:duration("P1Y2M3DT10H30M") to resolve to true
K-SeqExprCast-761;PRSC Error: Failed to parse query 'xs:dayTimeDuration("P3DT2H") castable as xs:duration'
K-SeqExprCast-762;Expected XPath xs:dayTimeDuration("P3DT2H") cast as xs:yearMonthDuration ne xs:yearMonthDuration("P1Y12M") to resolve to true
K-SeqExprCast-763;PRSC Error: Failed to parse query 'xs:dayTimeDuration("P3DT2H") castable as xs:yearMonthDuration'
K-SeqExprCast-765;PRSC Error: Failed to parse query 'xs:dayTimeDuration("P3DT2H") castable as xs:dayTimeDuration'
K-SeqExprCast-767;PRSC Error: Failed to parse query 'not(xs:dayTimeDuration("P3DT2H") castable as xs:dateTime)'
K-SeqExprCast-769;PRSC Error: Failed to parse query 'not(xs:dayTimeDuration("P3DT2H") castable as xs:time)'
K-SeqExprCast-771;PRSC Error: Failed to parse query 'not(xs:dayTimeDuration("P3DT2H") castable as xs:date)'
K-SeqExprCast-773;PRSC Error: Failed to parse query 'not(xs:dayTimeDuration("P3DT2H") castable as xs:gYearMonth)'
K-SeqExprCast-775;PRSC Error: Failed to parse query 'not(xs:dayTimeDuration("P3DT2H") castable as xs:gYear)'
K-SeqExprCast-777;PRSC Error: Failed to parse query 'not(xs:dayTimeDuration("P3DT2H") castable as xs:gMonthDay)'
K-SeqExprCast-779;PRSC Error: Failed to parse query 'not(xs:dayTimeDuration("P3DT2H") castable as xs:gDay)'
K-SeqExprCast-78;Expected XPath xs:string(xs:double("INF")) eq "INF" to resolve to true
K-SeqExprCast-781;PRSC Error: Failed to parse query 'not(xs:dayTimeDuration("P3DT2H") castable as xs:gMonth)'
K-SeqExprCast-783;PRSC Error: Failed to parse query 'not(xs:dayTimeDuration("P3DT2H") castable as xs:boolean)'
K-SeqExprCast-784;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-785;PRSC Error: Failed to parse query 'not(xs:dayTimeDuration("P3DT2H") castable as xs:base64Binary)'
K-SeqExprCast-786;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-787;PRSC Error: Failed to parse query 'not(xs:dayTimeDuration("P3DT2H") castable as xs:hexBinary)'
K-SeqExprCast-788;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-789;PRSC Error: Failed to parse query 'not(xs:dayTimeDuration("P3DT2H") castable as xs:anyURI)'
K-SeqExprCast-79;Expected XPath xs:string(xs:double("-INF")) eq "-INF" to resolve to true
K-SeqExprCast-790;Expected XPathException with code XPTY0004, but got Type casting to XsQName has not been implemented yet.
K-SeqExprCast-791;PRSC Error: Failed to parse query 'not(xs:dayTimeDuration("P3DT2H") castable as xs:QName)'
K-SeqExprCast-792;Expected error code: XPST0080. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'not(xs:dayTimeDuration("P3DT2H") castable as xs:NOTATION)'
K-SeqExprCast-797;Expected XPathException with code FORG0001, but got The string '' is not a valid AllXsd value.
K-SeqExprCast-7a;Expected error code: XQST0052. Found error code: XPST0051 with error message: The type "xs:anyType" could not be found
K-SeqExprCast-801;PRSC Error: Failed to parse query 'xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:untypedAtomic'
K-SeqExprCast-803;PRSC Error: Failed to parse query 'xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:string'
K-SeqExprCast-805;PRSC Error: Failed to parse query 'not(xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:float)'
K-SeqExprCast-807;PRSC Error: Failed to parse query 'not(xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:double)'
K-SeqExprCast-809;PRSC Error: Failed to parse query 'not(xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:decimal)'
K-SeqExprCast-811;PRSC Error: Failed to parse query 'not(xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:integer)'
K-SeqExprCast-813;PRSC Error: Failed to parse query 'not(xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:duration)'
K-SeqExprCast-815;PRSC Error: Failed to parse query 'not(xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:yearMonthDuration)'
K-SeqExprCast-817;PRSC Error: Failed to parse query 'not(xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:dayTimeDuration)'
K-SeqExprCast-819;PRSC Error: Failed to parse query 'xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:dateTime'
K-SeqExprCast-820;Casting not supported from given type to xs:time or any of its derived types.
K-SeqExprCast-821;PRSC Error: Failed to parse query 'xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:time'
K-SeqExprCast-823;PRSC Error: Failed to parse query 'xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:date'
K-SeqExprCast-825;PRSC Error: Failed to parse query 'xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:gYearMonth'
K-SeqExprCast-827;PRSC Error: Failed to parse query 'xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:gYear'
K-SeqExprCast-829;PRSC Error: Failed to parse query 'xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:gMonthDay'
K-SeqExprCast-83;Expected XPath xs:string(xs:float("INF")) eq "INF" to resolve to true
K-SeqExprCast-831;PRSC Error: Failed to parse query 'xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:gDay'
K-SeqExprCast-833;PRSC Error: Failed to parse query 'xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:gMonth'
K-SeqExprCast-835;PRSC Error: Failed to parse query 'not(xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:boolean)'
K-SeqExprCast-836;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-837;PRSC Error: Failed to parse query 'not(xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:base64Binary)'
K-SeqExprCast-838;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-839;PRSC Error: Failed to parse query 'not(xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:hexBinary)'
K-SeqExprCast-84;Expected XPath xs:string(xs:float("-INF")) eq "-INF" to resolve to true
K-SeqExprCast-840;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-841;PRSC Error: Failed to parse query 'not(xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:anyURI)'
K-SeqExprCast-842;Expected XPathException with code XPTY0004, but got Type casting to XsQName has not been implemented yet.
K-SeqExprCast-843;PRSC Error: Failed to parse query 'not(xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:QName)'
K-SeqExprCast-844;Expected error code: XPST0080. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'not(xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:NOTATION)'
K-SeqExprCast-849;Expected XPathException with code FORG0001, but got The string '' is not a valid AllXsd value.
K-SeqExprCast-853;PRSC Error: Failed to parse query 'xs:time("03:20:00-05:00") castable as xs:untypedAtomic'
K-SeqExprCast-855;PRSC Error: Failed to parse query 'xs:time("03:20:00-05:00") castable as xs:string'
K-SeqExprCast-857;PRSC Error: Failed to parse query 'not(xs:time("03:20:00-05:00") castable as xs:float)'
K-SeqExprCast-859;PRSC Error: Failed to parse query 'not(xs:time("03:20:00-05:00") castable as xs:double)'
K-SeqExprCast-861;PRSC Error: Failed to parse query 'not(xs:time("03:20:00-05:00") castable as xs:decimal)'
K-SeqExprCast-863;PRSC Error: Failed to parse query 'not(xs:time("03:20:00-05:00") castable as xs:integer)'
K-SeqExprCast-865;PRSC Error: Failed to parse query 'not(xs:time("03:20:00-05:00") castable as xs:duration)'
K-SeqExprCast-867;PRSC Error: Failed to parse query 'not(xs:time("03:20:00-05:00") castable as xs:yearMonthDuration)'
K-SeqExprCast-869;PRSC Error: Failed to parse query 'not(xs:time("03:20:00-05:00") castable as xs:dayTimeDuration)'
K-SeqExprCast-871;PRSC Error: Failed to parse query 'not(xs:time("03:20:00-05:00") castable as xs:dateTime)'
K-SeqExprCast-873;PRSC Error: Failed to parse query 'xs:time("03:20:00-05:00") castable as xs:time'
K-SeqExprCast-875;PRSC Error: Failed to parse query 'not(xs:time("03:20:00-05:00") castable as xs:date)'
K-SeqExprCast-877;PRSC Error: Failed to parse query 'not(xs:time("03:20:00-05:00") castable as xs:gYearMonth)'
K-SeqExprCast-879;PRSC Error: Failed to parse query 'not(xs:time("03:20:00-05:00") castable as xs:gYear)'
K-SeqExprCast-881;PRSC Error: Failed to parse query 'not(xs:time("03:20:00-05:00") castable as xs:gMonthDay)'
K-SeqExprCast-883;PRSC Error: Failed to parse query 'not(xs:time("03:20:00-05:00") castable as xs:gDay)'
K-SeqExprCast-885;PRSC Error: Failed to parse query 'not(xs:time("03:20:00-05:00") castable as xs:gMonth)'
K-SeqExprCast-887;PRSC Error: Failed to parse query 'not(xs:time("03:20:00-05:00") castable as xs:boolean)'
K-SeqExprCast-888;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-889;PRSC Error: Failed to parse query 'not(xs:time("03:20:00-05:00") castable as xs:base64Binary)'
K-SeqExprCast-890;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-891;PRSC Error: Failed to parse query 'not(xs:time("03:20:00-05:00") castable as xs:hexBinary)'
K-SeqExprCast-892;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-893;PRSC Error: Failed to parse query 'not(xs:time("03:20:00-05:00") castable as xs:anyURI)'
K-SeqExprCast-894;Expected XPathException with code XPTY0004, but got Type casting to XsQName has not been implemented yet.
K-SeqExprCast-895;PRSC Error: Failed to parse query 'not(xs:time("03:20:00-05:00") castable as xs:QName)'
K-SeqExprCast-896;Expected error code: XPST0080. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'not(xs:time("03:20:00-05:00") castable as xs:NOTATION)'
K-SeqExprCast-901;Expected XPathException with code FORG0001, but got The string '' is not a valid AllXsd value.
K-SeqExprCast-905;PRSC Error: Failed to parse query 'xs:date("2004-10-13") castable as xs:untypedAtomic'
K-SeqExprCast-907;PRSC Error: Failed to parse query 'xs:date("2004-10-13") castable as xs:string'
K-SeqExprCast-909;PRSC Error: Failed to parse query 'not(xs:date("2004-10-13") castable as xs:float)'
K-SeqExprCast-911;PRSC Error: Failed to parse query 'not(xs:date("2004-10-13") castable as xs:double)'
K-SeqExprCast-913;PRSC Error: Failed to parse query 'not(xs:date("2004-10-13") castable as xs:decimal)'
K-SeqExprCast-915;PRSC Error: Failed to parse query 'not(xs:date("2004-10-13") castable as xs:integer)'
K-SeqExprCast-917;PRSC Error: Failed to parse query 'not(xs:date("2004-10-13") castable as xs:duration)'
K-SeqExprCast-919;PRSC Error: Failed to parse query 'not(xs:date("2004-10-13") castable as xs:yearMonthDuration)'
K-SeqExprCast-921;PRSC Error: Failed to parse query 'not(xs:date("2004-10-13") castable as xs:dayTimeDuration)'
K-SeqExprCast-922;Casting not supported from given type to xs:dateTime or any of its derived types.
K-SeqExprCast-923;PRSC Error: Failed to parse query 'xs:date("2004-10-13") castable as xs:dateTime'
K-SeqExprCast-925;PRSC Error: Failed to parse query 'not(xs:date("2004-10-13") castable as xs:time)'
K-SeqExprCast-927;PRSC Error: Failed to parse query 'xs:date("2004-10-13") castable as xs:date'
K-SeqExprCast-928;Casting not supported from given type to xs:gYearMonth or any of its derived types.
K-SeqExprCast-929;PRSC Error: Failed to parse query 'xs:date("2004-10-13") castable as xs:gYearMonth'
K-SeqExprCast-93;Expected XPathException with code FORG0001, but got Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-930;Casting not supported from given type to xs:gYear or any of its derived types.
K-SeqExprCast-931;PRSC Error: Failed to parse query 'xs:date("2004-10-13") castable as xs:gYear'
K-SeqExprCast-932;Casting not supported from given type to xs:gMonthDay or any of its derived types.
K-SeqExprCast-933;PRSC Error: Failed to parse query 'xs:date("2004-10-13") castable as xs:gMonthDay'
K-SeqExprCast-934;Casting not supported from given type to xs:gDay or any of its derived types.
K-SeqExprCast-935;PRSC Error: Failed to parse query 'xs:date("2004-10-13") castable as xs:gDay'
K-SeqExprCast-936;Casting not supported from given type to xs:gMonth or any of its derived types.
K-SeqExprCast-937;PRSC Error: Failed to parse query 'xs:date("2004-10-13") castable as xs:gMonth'
K-SeqExprCast-939;PRSC Error: Failed to parse query 'not(xs:date("2004-10-13") castable as xs:boolean)'
K-SeqExprCast-94;Expected XPathException with code FORG0001, but got Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-940;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-941;PRSC Error: Failed to parse query 'not(xs:date("2004-10-13") castable as xs:base64Binary)'
K-SeqExprCast-942;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-943;PRSC Error: Failed to parse query 'not(xs:date("2004-10-13") castable as xs:hexBinary)'
K-SeqExprCast-944;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-945;PRSC Error: Failed to parse query 'not(xs:date("2004-10-13") castable as xs:anyURI)'
K-SeqExprCast-946;Expected XPathException with code XPTY0004, but got Type casting to XsQName has not been implemented yet.
K-SeqExprCast-947;PRSC Error: Failed to parse query 'not(xs:date("2004-10-13") castable as xs:QName)'
K-SeqExprCast-948;Expected error code: XPST0080. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'not(xs:date("2004-10-13") castable as xs:NOTATION)'
K-SeqExprCast-95;Expected XPathException with code FORG0001, but got Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-953;Expected XPathException with code FORG0001, but got The string '' is not a valid AllXsd value.
K-SeqExprCast-957;PRSC Error: Failed to parse query 'xs:gYearMonth("1999-11") castable as xs:untypedAtomic'
K-SeqExprCast-959;PRSC Error: Failed to parse query 'xs:gYearMonth("1999-11") castable as xs:string'
K-SeqExprCast-96;Expected XPathException with code FORG0001, but got Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-961;PRSC Error: Failed to parse query 'not(xs:gYearMonth("1999-11") castable as xs:float)'
K-SeqExprCast-963;PRSC Error: Failed to parse query 'not(xs:gYearMonth("1999-11") castable as xs:double)'
K-SeqExprCast-965;PRSC Error: Failed to parse query 'not(xs:gYearMonth("1999-11") castable as xs:decimal)'
K-SeqExprCast-967;PRSC Error: Failed to parse query 'not(xs:gYearMonth("1999-11") castable as xs:integer)'
K-SeqExprCast-969;PRSC Error: Failed to parse query 'not(xs:gYearMonth("1999-11") castable as xs:duration)'
K-SeqExprCast-97;Expected XPathException with code FORG0001, but got Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-971;PRSC Error: Failed to parse query 'not(xs:gYearMonth("1999-11") castable as xs:yearMonthDuration)'
K-SeqExprCast-973;PRSC Error: Failed to parse query 'not(xs:gYearMonth("1999-11") castable as xs:dayTimeDuration)'
K-SeqExprCast-975;PRSC Error: Failed to parse query 'not(xs:gYearMonth("1999-11") castable as xs:dateTime)'
K-SeqExprCast-977;PRSC Error: Failed to parse query 'not(xs:gYearMonth("1999-11") castable as xs:time)'
K-SeqExprCast-979;PRSC Error: Failed to parse query 'not(xs:gYearMonth("1999-11") castable as xs:date)'
K-SeqExprCast-98;Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-981;PRSC Error: Failed to parse query 'xs:gYearMonth("1999-11") castable as xs:gYearMonth'
K-SeqExprCast-983;PRSC Error: Failed to parse query 'not(xs:gYearMonth("1999-11") castable as xs:gYear)'
K-SeqExprCast-985;PRSC Error: Failed to parse query 'not(xs:gYearMonth("1999-11") castable as xs:gMonthDay)'
K-SeqExprCast-987;PRSC Error: Failed to parse query 'not(xs:gYearMonth("1999-11") castable as xs:gDay)'
K-SeqExprCast-989;PRSC Error: Failed to parse query 'not(xs:gYearMonth("1999-11") castable as xs:gMonth)'
K-SeqExprCast-99;Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-991;PRSC Error: Failed to parse query 'not(xs:gYearMonth("1999-11") castable as xs:boolean)'
K-SeqExprCast-992;Expected XPathException with code XPTY0004, but got Type casting to XsBase64Binary has not been implemented yet.
K-SeqExprCast-993;PRSC Error: Failed to parse query 'not(xs:gYearMonth("1999-11") castable as xs:base64Binary)'
K-SeqExprCast-994;Expected XPathException with code XPTY0004, but got Type casting to XsHexBinary has not been implemented yet.
K-SeqExprCast-995;PRSC Error: Failed to parse query 'not(xs:gYearMonth("1999-11") castable as xs:hexBinary)'
K-SeqExprCast-996;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K-SeqExprCast-997;PRSC Error: Failed to parse query 'not(xs:gYearMonth("1999-11") castable as xs:anyURI)'
K-SeqExprCast-998;Expected XPathException with code XPTY0004, but got Type casting to XsQName has not been implemented yet.
K-SeqExprCast-999;PRSC Error: Failed to parse query 'not(xs:gYearMonth("1999-11") castable as xs:QName)'
K-SeqExprCast-9a;Expected error code: XQST0052. Found error code: XPST0051 with error message: The type "xs:doesNotExist" could not be found
K-SeqExprCastable-10;Expected error code: XPST0080. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '"notation is abstract" castable as xs:NOTATION'
K-SeqExprCastable-11;Expected error code: XPST0080. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '() castable as xs:NOTATION'
K-SeqExprCastable-17;PRSC Error: Failed to parse query 'not(QName("", "lname") castable as xs:integer)'
K-SeqExprCastable-18;PRSC Error: Failed to parse query 'QName("", "lname") castable as xs:QName'
K-SeqExprCastable-19;PRSC Error: Failed to parse query '"ncname" castable as xs:QName'
K-SeqExprCastable-20;PRSC Error: Failed to parse query 'not(() castable as xs:QName)'
K-SeqExprCastable-21;PRSC Error: Failed to parse query '() castable as xs:QName?'
K-SeqExprCastable-22;Expected executing the XPath 'not(xs:untypedAtomic("ncname") castable as xs:QName)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'not(xs:untypedAtomic("ncname") castable as xs:QName)'
K-SeqExprCastable-23;PRSC Error: Failed to parse query 'not(("one", "two") castable as xs:string?)'
K-SeqExprCastable-24;PRSC Error: Failed to parse query 'not('string' castable as xs:boolean)'
K-SeqExprCastable-25;PRSC Error: Failed to parse query ''true' castable as xs:boolean'
K-SeqExprCastable-26;PRSC Error: Failed to parse query 'xs:float(1) castable as xs:float'
K-SeqExprCastable-27;PRSC Error: Failed to parse query 'xs:float(1) castable as xs:untypedAtomic'
K-SeqExprCastable-28;PRSC Error: Failed to parse query 'xs:float(1) castable as xs:string'
K-SeqExprCastable-29;PRSC Error: Failed to parse query 'not(xs:anyURI("example.com/") castable as xs:integer)'
K-SeqExprCastable-30;PRSC Error: Failed to parse query 'not("three" castable as xs:float)'
K-SeqExprCastable-31;PRSC Error: Failed to parse query 'not("three" castable as xs:integer)'
K-SeqExprCastable-32;PRSC Error: Failed to parse query 'not("three" castable as xs:decimal)'
K-SeqExprCastable-33;PRSC Error: Failed to parse query 'not("three" castable as xs:double)'
K-SeqExprCastable-34;PRSC Error: Failed to parse query 'not((1, 2, 3) castable as xs:integer)'
K-SeqExprCastable-35;PRSC Error: Failed to parse query 'not(() castable as xs:integer)'
K-SeqExprCastable-36;PRSC Error: Failed to parse query '() castable as xs:integer?'
K-SeqExprCastable-37;PRSC Error: Failed to parse query '(1) castable as xs:integer?'
K-SeqExprCastable-38;PRSC Error: Failed to parse query 'not(("one", "two") castable as xs:string?)'
K-SeqExprCastable-5;Expected error code: XPST0051. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query ''string' castable as xs:anySimpleType'
K-SeqExprCastable-5a;Expected error code: XPST0080. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query ''string' castable as xs:anySimpleType'
K-SeqExprCastable-6;Expected error code: XPST0051. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query ''string' castable as xs:untyped'
K-SeqExprCastable-6a;Expected error code: XQST0052. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query ''string' castable as xs:untyped'
K-SeqExprCastable-7;Expected error code: XPST0080. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query ''string' castable as xs:anyAtomicType'
K-SeqExprCastable-8;Expected error code: XPST0080. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '"notation is abstract" castable as xs:NOTATION?'
K-SeqExprCastable-9;Expected error code: XPST0080. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '() castable as xs:NOTATION?'
K-SeqExprInstanceOf-14;Type casting to XsAnyUri has not been implemented yet.
K-SeqExprInstanceOf-15;Type casting to XsAnyUri has not been implemented yet.
K-SeqExprInstanceOf-37;VoidSequenceType AST to Expression not yet implemented
K-SeqExprInstanceOf-38;VoidSequenceType AST to Expression not yet implemented
K-SeqExprInstanceOf-39;VoidSequenceType AST to Expression not yet implemented
K-SeqExprInstanceOf-40;VoidSequenceType AST to Expression not yet implemented
K-SeqExprInstanceOf-41;VoidSequenceType AST to Expression not yet implemented
K-SeqExprInstanceOf-42;VoidSequenceType AST to Expression not yet implemented
K-SeqExprInstanceOf-56;Expected executing the XPath 'error() instance of xs:integer' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function error with arity 0 is not registered.
K-SeqExprInstanceOf-57;Expected executing the XPath 'error() instance of xs:integer*' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function error with arity 0 is not registered.
K-SeqExprInstanceOf-58;Expected executing the XPath 'error() instance of empty-sequence()' to resolve to one of the expected results, but got System.NotImplementedException: VoidSequenceType AST to Expression not yet implemented
K-SeqExprInstanceOf-59;Expected executing the XPath '(error(), 1) instance of empty-sequence()' to resolve to one of the expected results, but got System.NotImplementedException: VoidSequenceType AST to Expression not yet implemented
K-SeqExprInstanceOf-60;Expected error code: FOER0000. Found error code: XPST0017 with error message: The function error with arity 0 is not registered.
K-SeqExprInstanceOf-61;Expected error code: FOER0000. Found error code: XPST0017 with error message: The function error with arity 0 is not registered.
K-SeqExprInstanceOf-62;Expected executing the XPath '(1, error()) instance of xs:integer*' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function error with arity 0 is not registered.
K-SeqExprInstanceOf-63;Expected executing the XPath '(error(), 1) instance of xs:integer*' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function error with arity 0 is not registered.
K-SeqIndexOfFunc-10;Expected XPath empty(index-of(xs:double("NaN"), xs:double("NaN"))) to resolve to true
K-SeqIndexOfFunc-11;Equal not available for XsInteger and XsString
K-SeqIndexOfFunc-16;Type casting to XsAnyUri has not been implemented yet.
K-SeqIndexOfFunc-17;Type casting to XsAnyUri has not been implemented yet.
K-SeqIndexOfFunc-18;Equal not available for XsString and XsInteger
K-SeqIndexOfFunc-6;No collations are supported
K-SeqIndexOfFunc-7;Value was either too large or too small for a Decimal.
K-SeqIndexOfFunc-8;Value was either too large or too small for a Decimal.
K-SeqIndexOfFunc-9;Expected XPath empty(index-of(xs:float("NaN"), xs:float("NaN"))) to resolve to true
K-SeqInsertBeforeFunc-16;Expected executing the XPath 'count(insert-before((error(), 1), 1, (1, "two", 3))) > 1' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function error with arity 0 is not registered.
K-SeqInsertBeforeFunc-17;TreatExpr AST to Expression not yet implemented
K-SeqInsertBeforeFunc-18;TreatExpr AST to Expression not yet implemented
K-SeqInsertBeforeFunc-19;TreatExpr AST to Expression not yet implemented
K-SeqInsertBeforeFunc-20;TreatExpr AST to Expression not yet implemented
K-SeqInsertBeforeFunc-21;The function current-time with arity 0 is not registered.
K-SeqMAXFunc-16;Expected XPath string(max((1, xs:untypedAtomic("NaN"), xs:float(2)))) eq "NaN" to resolve to true
K-SeqMAXFunc-17;Expected XPath string(max((xs:float("NaN"), xs:untypedAtomic("3"), xs:float(2)))) eq "NaN" to resolve to true
K-SeqMAXFunc-21;Expected error code: FORG0006. Query succeeded with result: Infinity
K-SeqMAXFunc-22;Expected error code: FORG0006. Query succeeded with result: Infinity
K-SeqMAXFunc-23;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K-SeqMAXFunc-24;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K-SeqMAXFunc-25;Expected XPath string(max((xs:double("NaN"), xs:double("NaN")))) eq "NaN" to resolve to true
K-SeqMAXFunc-26;Expected XPath string(max((xs:float("NaN"), xs:float("NaN")))) eq "NaN" to resolve to true
K-SeqMAXFunc-27;Expected XPath string(max((3, xs:double("NaN")))) eq "NaN" to resolve to true
K-SeqMAXFunc-28;Expected XPath string(max((3, xs:float("NaN")))) eq "NaN" to resolve to true
K-SeqMAXFunc-30;Expected XPath max((3, xs:float("NaN"))) instance of xs:float to resolve to true
K-SeqMAXFunc-31;Expected XPath string(max((xs:float(-3), xs:untypedAtomic("3"), xs:double("NaN")))) eq "NaN" to resolve to true
K-SeqMAXFunc-33;Expected XPath string(max(xs:float("NaN"))) eq "NaN" to resolve to true
K-SeqMAXFunc-34;Expected XPath string(max(xs:double("NaN"))) eq "NaN" to resolve to true
K-SeqMAXFunc-35;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K-SeqMAXFunc-38;Expected XPathException with code FORG0006, but got Haven't implemented Qnames from: ncname:
K-SeqMAXFunc-39;Type casting to XsAnyUri has not been implemented yet.
K-SeqMAXFunc-40;Type casting to XsAnyUri has not been implemented yet.
K-SeqMAXFunc-43;PRSC Error: Failed to parse query 'max((5, 5.0e0)) eq 5.0e0'
K-SeqMAXFunc-44;PRSC Error: Failed to parse query 'max((5, 5.0e0)) instance of xs:double'
K-SeqMAXFunc-45;PRSC Error: Failed to parse query 'max((5, 3.0e0)) instance of xs:double'
K-SeqMAXFunc-46;PRSC Error: Failed to parse query 'max((5.0e0, 5)) instance of xs:double'
K-SeqMAXFunc-47;PRSC Error: Failed to parse query 'max((3, 5.0e0)) instance of xs:double'
K-SeqMAXFunc-48;PRSC Error: Failed to parse query 'max((5.0e0, 3)) instance of xs:double'
K-SeqMAXFunc-49;Expected XPath max((1, 1, 1, 1, 1.0)) instance of xs:decimal to resolve to true
K-SeqMAXFunc-50;Expected XPath max((1.0, 1, 1, 1, 1)) instance of xs:decimal to resolve to true
K-SeqMAXFunc-51;Expected XPath max((1.0, 1, 1.0, 1, 1)) instance of xs:decimal to resolve to true
K-SeqMAXFunc-52;PRSC Error: Failed to parse query 'max((5.0e0, 5)) eq 5.0e0'
K-SeqMAXFunc-53;PRSC Error: Failed to parse query 'max((3, 5.0e0)) eq 5.0e0'
K-SeqMAXFunc-54;PRSC Error: Failed to parse query 'max((5.0e0, 3)) eq 5.0e0'
K-SeqMAXFunc-55;The function current-date with arity 0 is not registered.
K-SeqMAXFunc-57;PRSC Error: Failed to parse query 'max((5, 5.0e0)) eq 5.0e0'
K-SeqMAXFunc-59;Input string was not in a correct format.
K-SeqMAXFunc-8;Value was either too large or too small for a Decimal.
K-SeqMINFunc-16;Expected XPath string(min((1, xs:untypedAtomic("NaN"), xs:float(2)))) eq "NaN" to resolve to true
K-SeqMINFunc-17;Expected XPath string(min((xs:float("NaN"), xs:untypedAtomic("3"), xs:float(2)))) eq "NaN" to resolve to true
K-SeqMINFunc-21;Expected error code: FORG0006. Query succeeded with result: Infinity
K-SeqMINFunc-22;Expected error code: FORG0006. Query succeeded with result: Infinity
K-SeqMINFunc-23;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K-SeqMINFunc-24;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K-SeqMINFunc-25;Expected XPath string(min((xs:double("NaN"), xs:double("NaN")))) eq "NaN" to resolve to true
K-SeqMINFunc-26;Expected XPath string(min((xs:float("NaN"), xs:float("NaN")))) eq "NaN" to resolve to true
K-SeqMINFunc-27;Expected XPath string(min((3, xs:double("NaN")))) eq "NaN" to resolve to true
K-SeqMINFunc-28;Expected XPath string(min((3, xs:float("NaN")))) eq "NaN" to resolve to true
K-SeqMINFunc-30;Expected XPath min((3, xs:float("NaN"))) instance of xs:float to resolve to true
K-SeqMINFunc-31;Expected XPath string(min((xs:float(-3), xs:untypedAtomic("3"), xs:double("NaN")))) eq "NaN" to resolve to true
K-SeqMINFunc-33;Expected XPath string(min(xs:float("NaN"))) eq "NaN" to resolve to true
K-SeqMINFunc-34;Expected XPath string(min(xs:double("NaN"))) eq "NaN" to resolve to true
K-SeqMINFunc-35;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K-SeqMINFunc-38;Expected XPathException with code FORG0006, but got Haven't implemented Qnames from: ncname:
K-SeqMINFunc-39;Type casting to XsAnyUri has not been implemented yet.
K-SeqMINFunc-40;Type casting to XsAnyUri has not been implemented yet.
K-SeqMINFunc-43;PRSC Error: Failed to parse query 'min((5, 5.0e0)) eq 5.0e0'
K-SeqMINFunc-44;PRSC Error: Failed to parse query 'min((5.0e0, 5)) eq 5.0e0'
K-SeqMINFunc-45;PRSC Error: Failed to parse query 'min((3, 5.0e0)) eq 3'
K-SeqMINFunc-46;PRSC Error: Failed to parse query 'min((5.0e0, 3)) eq 3'
K-SeqMINFunc-47;Unable to cast object of type 'FontoXPathCSharp.Value.InternalValues.DateTime' to type 'System.IConvertible'.
K-SeqMINFunc-49;PRSC Error: Failed to parse query 'min((5, 5.0e0)) eq 5.0e0'
K-SeqMINFunc-51;PRSC Error: Failed to parse query 'min((xs:float(0.0E0), xs:float(-0.0E0))) eq xs:float("-0")'
K-SeqOneOrMoreFunc-7;Expected error code: FOER0000. Found error code: XPST0017 with error message: The function error with arity 0 is not registered.
K-SeqRemoveFunc-13;Expected executing the XPath 'remove(error(), 1)' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: FOER0000. Found error code: XPST0017 with error message: The function error with arity 0 is not registered.
K-SeqRemoveFunc-17;Expected error code: XPTY0004. Query succeeded with result: True
K-SeqRemoveFunc-18;Expected error code: XPTY0004. Query succeeded with result: False
K-SeqRemoveFunc-19;The function current-time with arity 0 is not registered.
K-SeqRemoveFunc-20;The function current-time with arity 0 is not registered.
K-SeqRemoveFunc-21;The function current-time with arity 0 is not registered.
K-SeqRemoveFunc-22;The function current-time with arity 0 is not registered.
K-SeqRemoveFunc-23;The function current-time with arity 0 is not registered.
K-SeqRemoveFunc-24;The function current-time with arity 0 is not registered.
K-SeqRemoveFunc-26;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'remove(1 to 10, 1.0e0)'
K-SeqReverseFunc-15;Expected error code: FOER0000. Found error code: XPST0017 with error message: The function error with arity 0 is not registered.
K-SeqReverseFunc-20;The function current-time with arity 0 is not registered.
K-SeqReverseFunc-21;The function current-time with arity 0 is not registered.
K-SeqReverseFunc-8;The function current-time with arity 0 is not registered.
K-SeqSubsequenceFunc-30;Expected error code: FOER0000. Found error code: XPST0017 with error message: The function error with arity 0 is not registered.
K-SeqSubsequenceFunc-31;The function current-time with arity 0 is not registered.
K-SeqSubsequenceFunc-32;The function current-time with arity 0 is not registered.
K-SeqSubsequenceFunc-33;The function current-time with arity 0 is not registered.
K-SeqSubsequenceFunc-34;The function current-time with arity 0 is not registered.
K-SeqSubsequenceFunc-35;The function current-time with arity 0 is not registered.
K-SeqSubsequenceFunc-36;The function current-time with arity 0 is not registered.
K-SeqSubsequenceFunc-37;The function current-time with arity 0 is not registered.
K-SeqSubsequenceFunc-38;The function current-time with arity 0 is not registered.
K-SeqSubsequenceFunc-39;The function current-time with arity 0 is not registered.
K-SeqSubsequenceFunc-40;The function current-time with arity 0 is not registered.
K-SeqSubsequenceFunc-41;The function current-time with arity 0 is not registered.
K-SeqSubsequenceFunc-42;The function current-time with arity 0 is not registered.
K-SeqSubsequenceFunc-43;The function current-time with arity 0 is not registered.
K-SeqSubsequenceFunc-44;The function current-time with arity 0 is not registered.
K-SeqSUMFunc-11;Expected XPath string(sum((1, 2, 3, xs:float("NaN")))) eq "NaN" to resolve to true
K-SeqSUMFunc-12;Expected XPath string(sum((1, 2, 3, xs:double("NaN")))) eq "NaN" to resolve to true
K-SeqSUMFunc-13;Expected XPath string(sum((xs:double("NaN"), 1, 2, 3))) eq "NaN" to resolve to true
K-SeqSUMFunc-14;Expected XPath string(sum((xs:float("NaN"), 1, 2, 3))) eq "NaN" to resolve to true
K-SeqSUMFunc-15;Expected XPath string(sum((1, 2, xs:double("NaN"), 1, 2, 3))) eq "NaN" to resolve to true
K-SeqSUMFunc-16;Expected XPath string(sum((1, 2, xs:float("NaN"), 1, 2, 3))) eq "NaN" to resolve to true
K-SeqSUMFunc-24;Expected XPathException with code FORG0006, but got Type casting to XsAnyUri has not been implemented yet.
K-SeqSUMFunc-25;Expected XPathException with code FORG0006, but got Type casting to XsAnyUri has not been implemented yet.
K-SeqSUMFunc-26;Expected XPathException with code FORG0006, but got Type casting to XsAnyUri has not been implemented yet.
K-SeqSUMFunc-30;Items passed to fn:sum are not all numeric.
K-sequenceExprTypeswitch-1;PRSC Error: Failed to parse query '(typeswitch((1, 2)) case xs:integer return -1 case xs:integer+ return 1 default return -2) eq 1'
K-sequenceExprTypeswitch-2;PRSC Error: Failed to parse query '(typeswitch("a string") case xs:anyURI return -1 case xs:string return 1 default return -2) eq 1'
K-sequenceExprTypeswitch-3;PRSC Error: Failed to parse query '(typeswitch("a string") case xs:untypedAtomic return -1 case xs:string return 1 default return -2) eq 1'
K-sequenceExprTypeswitch-4;PRSC Error: Failed to parse query '(typeswitch((1, "a string")) case xs:integer return -1 case xs:string return -2 case xs:anyAtomicType+ return 1 default return -3) eq 1'
K-sequenceExprTypeswitch-5;PRSC Error: Failed to parse query '(typeswitch(((1, current-time())[1])) case element() return -1 case xs:integer return 1 default return -2) eq 1'
K-sequenceExprTypeswitch-6;PRSC Error: Failed to parse query '(typeswitch(()) case xs:integer* return 1 case empty-sequence() return 1 default return -2) eq 1'
K-sequenceExprTypeswitch-7;PRSC Error: Failed to parse query '(typeswitch(1, 2, 3) case xs:string+ return -1 case xs:integer+ return 1 default return -2) eq 1'
K-sequenceExprTypeswitch-8;PRSC Error: Failed to parse query '(typeswitch(1, 2, current-time()) case element() return -1 case document-node() return -2 default return 1) eq 1'
K-SeqUnorderedFunc-5;The function current-time with arity 0 is not registered.
K-SeqUnorderedFunc-8;Expected error code: FOER0000. Found error code: XPST0017 with error message: The function error with arity 0 is not registered.
K-SeqZeroOrOneFunc-7;Expected error code: FOER0000. Found error code: XPST0017 with error message: The function error with arity 0 is not registered.
K-StartsWithFunc-5;No collations are supported
K-StringFunc-5;The function current-time with arity 0 is not registered.
K-StringJoinFunc-1;Expected error code: XPST0017. Query succeeded with result: a string
K-StringLengthFunc-4;Object reference not set to an instance of an object.
K-StringLengthFunc-6;Object reference not set to an instance of an object.
K-SubstringAfterFunc-4;Expected error code: FOCH0002. Found error code: XPST0017 with error message: The function substring-after with arity 3 is not registered.
K-SubstringAfterFunc-5;The function substring-after with arity 3 is not registered.
K-SubstringBeforeFunc-4;Expected error code: FOCH0002. Found error code: XPST0017 with error message: The function substring-before with arity 3 is not registered.
K-SubstringBeforeFunc-5;The function substring-before with arity 3 is not registered.
K-SubstringFunc-10;Value was either too large or too small for an Int32.
K-SubstringFunc-11;Value was either too large or too small for an Int32.
K-SubstringFunc-13;Value was either too large or too small for an Int32.
K-SubstringFunc-14;Value was either too large or too small for an Int32.
K-SubstringFunc-15;Length cannot be less than zero. (Parameter 'length')
K-TimeSubtract-1;Expected XPath xs:time("08:12:32") - xs:time("18:12:32") eq xs:dayTimeDuration("-PT10H") to resolve to true
K-TimezoneFromDateFunc-3;The function timezone-from-date with arity 1 is not registered.
K-TimezoneFromDateFunc-4;The function timezone-from-date with arity 1 is not registered.
K-TimezoneFromDateFunc-5;The function timezone-from-date with arity 1 is not registered.
K-TimezoneFromDateFunc-6;The function timezone-from-date with arity 1 is not registered.
K-TimezoneFromDateFunc-7;The function timezone-from-date with arity 1 is not registered.
K-TimezoneFromDateTimeFunc-3;The function timezone-from-dateTime with arity 1 is not registered.
K-TimezoneFromDateTimeFunc-4;The function timezone-from-dateTime with arity 1 is not registered.
K-TimezoneFromDateTimeFunc-5;The function timezone-from-dateTime with arity 1 is not registered.
K-TimezoneFromDateTimeFunc-6;The function timezone-from-dateTime with arity 1 is not registered.
K-TimezoneFromDateTimeFunc-7;The function timezone-from-dateTime with arity 1 is not registered.
K-TimezoneFromTimeFunc-3;The function timezone-from-time with arity 1 is not registered.
K-TimezoneFromTimeFunc-4;The function timezone-from-time with arity 1 is not registered.
K-TimezoneFromTimeFunc-5;The function timezone-from-time with arity 1 is not registered.
K-TimezoneFromTimeFunc-6;The function timezone-from-time with arity 1 is not registered.
K-TimezoneFromTimeFunc-7;The function timezone-from-time with arity 1 is not registered.
K-TokenizeFunc-3;Expected XPathException with code FORX0001, but got Using flags in 'tokenize' is not supported
K-TokenizeFunc-4;Expected XPathException with code FORX0001, but got Using flags in 'tokenize' is not supported
K-TranslateFunc-10;Index was outside the bounds of the array.
K-TranslateFunc-4;Index was outside the bounds of the array.
K-TranslateFunc-8;Index was outside the bounds of the array.
K-ValCompTypeChecking-1;Expected error code: XPTY0004. Query succeeded with result: False
K-ValCompTypeChecking-10;Expected error code: XPTY0004. Query succeeded with result: True
K-ValCompTypeChecking-11;Expected error code: XPTY0004. Query succeeded with result: False
K-ValCompTypeChecking-12;Expected error code: XPTY0004. Query succeeded with result: True
K-ValCompTypeChecking-16;Expected error code: XPTY0004. Query succeeded with result: True
K-ValCompTypeChecking-17;Expected error code: XPTY0004. Query succeeded with result: True
K-ValCompTypeChecking-18;Expected error code: XPTY0004. Query succeeded with result: True
K-ValCompTypeChecking-19;Expected error code: XPTY0004. Query succeeded with result: True
K-ValCompTypeChecking-2;Expected error code: XPTY0004. Query succeeded with result: False
K-ValCompTypeChecking-20;Expected error code: XPTY0004. Query succeeded with result: True
K-ValCompTypeChecking-21;Expected error code: XPTY0004. Query succeeded with result: True
K-ValCompTypeChecking-22;Expected error code: XPTY0004. Query succeeded with result: False
K-ValCompTypeChecking-23;Expected error code: XPTY0004. Query succeeded with result: False
K-ValCompTypeChecking-24;Expected error code: XPTY0004. Query succeeded with result: True
K-ValCompTypeChecking-25;Expected error code: XPTY0004. Query succeeded with result: True
K-ValCompTypeChecking-26;Expected error code: XPTY0004. Query succeeded with result: True
K-ValCompTypeChecking-27;Expected error code: XPTY0004. Query succeeded with result: True
K-ValCompTypeChecking-28;Expected error code: XPTY0004. Query succeeded with result: True
K-ValCompTypeChecking-29;Expected error code: XPTY0004. Query succeeded with result: True
K-ValCompTypeChecking-3;Expected error code: XPTY0004. Query succeeded with result: True
K-ValCompTypeChecking-32;The function current-time with arity 0 is not registered.
K-ValCompTypeChecking-33;The function current-time with arity 0 is not registered.
K-ValCompTypeChecking-34;The function current-time with arity 0 is not registered.
K-ValCompTypeChecking-35;Expected error code: FOER0000. Found error code: XPST0017 with error message: The function error with arity 0 is not registered.
K-ValCompTypeChecking-36;Expected error code: FOER0000. Found error code: XPST0017 with error message: The function error with arity 0 is not registered.
K-ValCompTypeChecking-37;Expected error code: FOER0000. Found error code: XPST0017 with error message: The function error with arity 0 is not registered.
K-ValCompTypeChecking-38;Expected error code: FOER0000. Found error code: XPST0017 with error message: The function error with arity 0 is not registered.
K-ValCompTypeChecking-39;Expected executing the XPath '3 eq (3, error())' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: FOER0000. Found error code: XPST0017 with error message: The function error with arity 0 is not registered.
K-ValCompTypeChecking-4;Expected error code: XPTY0004. Query succeeded with result: True
K-ValCompTypeChecking-40;Expected error code: FOER0000. Found error code: XPST0017 with error message: The function error with arity 0 is not registered.
K-ValCompTypeChecking-41;Expected executing the XPath '(3, error()) eq 3' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: FOER0000. Found error code: XPST0017 with error message: The function error with arity 0 is not registered.
K-ValCompTypeChecking-5;Expected error code: XPTY0004. Query succeeded with result: True
K-ValCompTypeChecking-6;Expected error code: XPTY0004. Query succeeded with result: False
K-ValCompTypeChecking-7;Expected error code: XPTY0004. Query succeeded with result: True
K-ValCompTypeChecking-8;Expected error code: XPTY0004. Query succeeded with result: False
K-ValCompTypeChecking-9;Expected error code: XPTY0004. Query succeeded with result: False
K-VersionProlog-1;Expected executing the XPath '(:encoding "UTF-8XX":)xquery version "1.0" encoding "UTF-8"; 1 eq 1' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '(:encoding "UTF-8XX":)xquery version "1.0" encoding "UTF-8"; 1 eq 1'
K-VersionProlog-2-v3;PRSC Error: Failed to parse query 'xquery version "3.0" ; 1 eq 1'
K-VersionProlog-2-v31;PRSC Error: Failed to parse query 'xquery version "3.1" ; 1 eq 1'
K-VersionProlog-2;PRSC Error: Failed to parse query 'xquery version "1.0" ; 1 eq 1'
K-VersionProlog-3-v3;Expected error code: XQST0087. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'xquery version "3.0" encoding "UTF-8 "; 1'
K-VersionProlog-3;Expected error code: XQST0087. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'xquery version "1.0" encoding "UTF-8 "; 1'
K-VersionProlog-4-v3;Expected error code: XQST0087. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'xquery version "3.0" encoding "ISO-8859-1|"; 1'
K-VersionProlog-4;Expected error code: XQST0087. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'xquery version "1.0" encoding "ISO-8859-1|"; 1'
K-VersionProlog-5-v3;PRSC Error: Failed to parse query '\n        xquery version "3.0" encoding "ISO-8859-1"; \n        declare boundary-space preserve; \n        declare default collation "http://www.w3.org/2005/xpath-functions/collation/codepoint"; \n        declare base-uri "http://example.com/"; \n        declare construction strip; \n        declare ordering ordered; \n        declare default order empty greatest; \n        declare copy-namespaces no-preserve, no-inherit; \n        declare namespace ex = "http://example.com/a/Namespace"; \n        declare default element namespace "http://example.com/"; \n        declare default function namespace "http://example.com/"; \n        declare option fn:x-notRecognized "option content"; \n        1 eq 1'
K-VersionProlog-5;PRSC Error: Failed to parse query '\n        xquery version "1.0" encoding "ISO-8859-1"; \n        declare boundary-space preserve; \n        declare default collation "http://www.w3.org/2005/xpath-functions/collation/codepoint"; \n        declare base-uri "http://example.com/"; \n        declare construction strip; \n        declare ordering ordered; \n        declare default order empty greatest; \n        declare copy-namespaces no-preserve, no-inherit; \n        declare namespace ex = "http://example.com/a/Namespace"; \n        declare default element namespace "http://example.com/"; \n        declare default function namespace "http://example.com/"; \n        declare option fn:x-notRecognized "option content"; \n        1 eq 1'
K-WhereExpr-1;Use of XQuery FLWOR expressions in XPath is not allowed
K-WhereExpr-10;Use of XQuery FLWOR expressions in XPath is not allowed
K-WhereExpr-11;Use of XQuery FLWOR expressions in XPath is not allowed
K-WhereExpr-2;Use of XQuery FLWOR expressions in XPath is not allowed
K-WhereExpr-3;Expected error code: FORG0006. Found error code: XPST0003 with error message: Use of XQuery FLWOR expressions in XPath is not allowed
K-WhereExpr-4;Use of XQuery FLWOR expressions in XPath is not allowed
K-WhereExpr-5;Use of XQuery FLWOR expressions in XPath is not allowed
K-WhereExpr-6;Use of XQuery FLWOR expressions in XPath is not allowed
K-WhereExpr-7;Use of XQuery FLWOR expressions in XPath is not allowed
K-WhereExpr-8;Use of XQuery FLWOR expressions in XPath is not allowed
K-WhereExpr-9;Use of XQuery FLWOR expressions in XPath is not allowed
K-YearFromDateFunc-3;The function year-from-date with arity 1 is not registered.
K-YearFromDateFunc-4;The function year-from-date with arity 1 is not registered.
K-YearFromDateFunc-5;The function year-from-date with arity 1 is not registered.
K-YearFromDateTimeFunc-3;The function year-from-dateTime with arity 1 is not registered.
K-YearFromDateTimeFunc-4;The function year-from-dateTime with arity 1 is not registered.
K-YearFromDateTimeFunc-5;The function year-from-dateTime with arity 1 is not registered.
K-YearMonthDurationDivide-2;Value overflow while constructing xs:yearMonthDuration, scalar is not finite.
K-YearMonthDurationDivide-3;Value overflow while constructing xs:yearMonthDuration, scalar is not finite.
K-YearMonthDurationDivide-4;Expected error code: FODT0002. Query succeeded with result: P
K-YearMonthDurationDivide-6;Expected error code: FODT0002. Query succeeded with result: P
K-YearMonthDurationDivideYMD-1;Attempted to divide by zero.
K-YearMonthDurationEQ-3;Expected XPath not(xs:yearMonthDuration("P1999Y") eq xs:yearMonthDuration("P1999Y10M")) to resolve to true
K-YearMonthDurationEQ-4;Expected XPath xs:yearMonthDuration("P1999Y01M") ne xs:yearMonthDuration("P1999Y10M") to resolve to true
K-YearMonthDurationEQ-6;Expected XPath xs:yearMonthDuration("-P3Y8M") ne xs:yearMonthDuration("P3Y8M") to resolve to true
K-YearMonthDurationEQ-7;Expected XPath xs:yearMonthDuration("-P3Y8M") ne xs:yearMonthDuration("P3Y8M") to resolve to true
K-YearMonthDurationGT-1;Expected XPath xs:yearMonthDuration("P1999Y10M") gt xs:yearMonthDuration("P1999Y9M") to resolve to true
K-YearMonthDurationGT-6;Expected XPath not(xs:yearMonthDuration("P1999Y9M") ge xs:yearMonthDuration("P1999Y10M")) to resolve to true
K-YearMonthDurationLT-1;Expected XPath xs:yearMonthDuration("P1999Y9M") lt xs:yearMonthDuration("P1999Y10M") to resolve to true
K-YearMonthDurationLT-6;Expected XPath not(xs:yearMonthDuration("P1999Y10M") le xs:yearMonthDuration("P1999Y9M")) to resolve to true
K-YearsFromDurationFunc-3;The function years-from-duration with arity 1 is not registered.
K-YearsFromDurationFunc-4;The function years-from-duration with arity 1 is not registered.
K-YearsFromDurationFunc-5;The function years-from-duration with arity 1 is not registered.
K-YearsFromDurationFunc-6;The function years-from-duration with arity 1 is not registered.
K-YearsFromDurationFunc-7;The function years-from-duration with arity 1 is not registered.
K2-AbbrAxes-1;Expected error code: XPDY0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:myFunc() { .. }; local:myFunc()'
K2-ABSFunc-47;Expected XPath fn:abs(xs:float("-INF")) to resolve to INF, but instead got Infinity
K2-ABSFunc-48;Expected XPath fn:abs(xs:double("-INF")) to resolve to INF, but instead got Infinity
K2-ABSFunc-49;Expected XPath fn:abs(xs:float("INF")) to resolve to INF, but instead got Infinity
K2-ABSFunc-50;Expected XPath fn:abs(xs:double("INF")) to resolve to INF, but instead got Infinity
K2-ancestor-or-selfAxis-1;PRSC Error: Failed to parse query '<out>{1, <element/>/ancestor-or-self::node(), 1}</out>'
K2-ancestor-or-selfAxis-2;PRSC Error: Failed to parse query '<out>{1, <?target data?>/ancestor-or-self::node(), 1}</out>'
K2-ancestor-or-selfAxis-3;PRSC Error: Failed to parse query 'deep-equal((1, (attribute name {"content"}/ancestor-or-self::node() instance of attribute(name)), 1), (1, true(), 1))'
K2-ancestor-or-selfAxis-4;PRSC Error: Failed to parse query '<out>{1, <!-- content -->/ancestor-or-self::node(), 1}</out>'
K2-ancestor-or-selfAxis-5;PRSC Error: Failed to parse query 'let $result := (1, document {()}/ancestor-or-self::node(), 1) return $result[1] eq 1'
K2-ancestor-or-selfAxis-6;PRSC Error: Failed to parse query 'let $result := (1, text {""}/ancestor-or-self::node(), 1) return $result[1] eq 1'
K2-ancestor-or-selfAxis-7;PRSC Error: Failed to parse query 'count(<a> <b c=""> <c/> </b> <d/> </a>/b/c/(ancestor-or-self::*)) = 3'
K2-ancestor-or-selfAxis-8;PRSC Error: Failed to parse query '<a> <b c=""> <c/> </b> <d/> </a>//count(ancestor-or-self::*)'
K2-ancestor-or-selfAxis-9;PRSC Error: Failed to parse query '<r> <a> <b> <c/> </b> </a> </r>/a/b/c/(ancestor-or-self::*[1], ancestor-or-self::*[2], ancestor-or-self::*[last()], ancestor-or-self::*[10])'
K2-ancestorAxis-1;Expected executing the XPath 'empty(<?target data?>/ancestor::node())' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'empty(<?target data?>/ancestor::node())'
K2-ancestorAxis-10;PRSC Error: Failed to parse query 'empty(<element/>/ancestor::node())'
K2-ancestorAxis-11;PRSC Error: Failed to parse query '<a> <b c=""> <c/> </b> <d/> </a>/b/c/ancestor::*[fn:last()]'
K2-ancestorAxis-12;PRSC Error: Failed to parse query '<a> <b c=""> <c/> </b> <d/> </a>/b/c/(ancestor::*)[last()]'
K2-ancestorAxis-13;PRSC Error: Failed to parse query '1, <element/>/ancestor::node(), 1'
K2-ancestorAxis-14;PRSC Error: Failed to parse query '1, <?target data?>/ancestor::node(), 1'
K2-ancestorAxis-15;PRSC Error: Failed to parse query '1, attribute name {"content"}/ancestor::node(), 1'
K2-ancestorAxis-16;PRSC Error: Failed to parse query '1, <!-- content -->/ancestor::node(), 1'
K2-ancestorAxis-17;Expected executing the XPath 'document {()}/ancestor::node(), count(document {()}/ancestor::node()), 1' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'document {()}/ancestor::node(), count(document {()}/ancestor::node()), 1'
K2-ancestorAxis-18;PRSC Error: Failed to parse query '1, text {""}/ancestor::node(), 1'
K2-ancestorAxis-19;PRSC Error: Failed to parse query 'count(<a> <b c=""> <c/> </b> <d/> </a>/b/c/(ancestor::*))'
K2-ancestorAxis-2;Expected executing the XPath 'empty(<!-- content -->/ancestor::node())' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'empty(<!-- content -->/ancestor::node())'
K2-ancestorAxis-20;PRSC Error: Failed to parse query '<a> <b c=""> <c/> </b> <d/> </a>//count(ancestor::*)'
K2-ancestorAxis-21;PRSC Error: Failed to parse query '<r> <a> <b> <c/> </b> </a> </r>/a/b/c/(ancestor::*[1], ancestor::*[2], ancestor::*[last()], ancestor::*[10])'
K2-ancestorAxis-3;Expected executing the XPath 'empty(<anElement/>/ancestor::node())' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'empty(<anElement/>/ancestor::node())'
K2-ancestorAxis-4;Expected executing the XPath 'empty(attribute name {"content"}/ancestor::node())' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'empty(attribute name {"content"}/ancestor::node())'
K2-ancestorAxis-5;Expected executing the XPath 'empty(document {()}/ancestor::node())' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'empty(document {()}/ancestor::node())'
K2-ancestorAxis-6;Expected executing the XPath 'empty(document {<e><f/><f/>text</e>}/ancestor::node())' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'empty(document {<e><f/><f/>text</e>}/ancestor::node())'
K2-ancestorAxis-7;PRSC Error: Failed to parse query '<a> <b c=""> <c/> </b> <d/> </a>/b/c/ancestor::*'
K2-ancestorAxis-8;PRSC Error: Failed to parse query '<a> <b c=""> <c/> </b> <d/> </a>/b/c/ancestor::*[1]'
K2-ancestorAxis-9;PRSC Error: Failed to parse query '<a> <b c=""> <c/> </b> <d/> </a>/b/c/(ancestor::*)[1]'
K2-AnyURIEqual-1;Type casting to XsAnyUri has not been implemented yet.
K2-AnyURIEqual-10;Type casting to XsAnyUri has not been implemented yet.
K2-AnyURIEqual-11;Type casting to XsAnyUri has not been implemented yet.
K2-AnyURIEqual-12;Type casting to XsAnyUri has not been implemented yet.
K2-AnyURIEqual-2;Type casting to XsAnyUri has not been implemented yet.
K2-AnyURIEqual-3;Type casting to XsAnyUri has not been implemented yet.
K2-AnyURIEqual-4;Type casting to XsAnyUri has not been implemented yet.
K2-AnyURIEqual-5;Type casting to XsAnyUri has not been implemented yet.
K2-AnyURIEqual-6;Type casting to XsAnyUri has not been implemented yet.
K2-AnyURIEqual-7;Type casting to XsAnyUri has not been implemented yet.
K2-AnyURIEqual-8;Type casting to XsAnyUri has not been implemented yet.
K2-AnyURIEqual-9;Type casting to XsAnyUri has not been implemented yet.
K2-AnyURILeGe-1;Type casting to XsAnyUri has not been implemented yet.
K2-AnyURILeGe-10;Type casting to XsAnyUri has not been implemented yet.
K2-AnyURILeGe-2;Type casting to XsAnyUri has not been implemented yet.
K2-AnyURILeGe-3;Type casting to XsAnyUri has not been implemented yet.
K2-AnyURILeGe-4;Type casting to XsAnyUri has not been implemented yet.
K2-AnyURILeGe-5;Type casting to XsAnyUri has not been implemented yet.
K2-AnyURILeGe-6;Type casting to XsAnyUri has not been implemented yet.
K2-AnyURILeGe-7;Type casting to XsAnyUri has not been implemented yet.
K2-AnyURILeGe-8;Type casting to XsAnyUri has not been implemented yet.
K2-AnyURILeGe-9;Type casting to XsAnyUri has not been implemented yet.
K2-AnyURILtGt-1;Type casting to XsAnyUri has not been implemented yet.
K2-AnyURILtGt-2;Type casting to XsAnyUri has not been implemented yet.
K2-AnyURILtGt-3;Type casting to XsAnyUri has not been implemented yet.
K2-AnyURILtGt-4;Type casting to XsAnyUri has not been implemented yet.
K2-AnyURILtGt-5;Type casting to XsAnyUri has not been implemented yet.
K2-AnyURILtGt-6;Type casting to XsAnyUri has not been implemented yet.
K2-AnyURILtGt-7;Type casting to XsAnyUri has not been implemented yet.
K2-AnyURILtGt-8;Type casting to XsAnyUri has not been implemented yet.
K2-Axes-1;PRSC Error: Failed to parse query 'declare variable $var := document{<e><f>f's value</f></e>}; $var/(/)/(/)//f'
K2-Axes-100;Expected executing the XPath 'empty(<a> <b/> <c/> </a>[self::b][last()])' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'empty(<a> <b/> <c/> </a>[self::b][last()])'
K2-Axes-101;Expected executing the XPath '<b/>[self::b][last()]' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '<b/>[self::b][last()]'
K2-Axes-102;PRSC Error: Failed to parse query '\n        for $a in (/) return \n        for $b in $a/child::site return \n        for $c in $b/child::people return \n        for $d in $c/child::person return \n            if ((some $id in $d/attribute::id satisfies \n                    typeswitch ($id)\n                     case $n as node() return $id = "person0"\n                     default $d return ())) \n            then $d/child::name \n            else (), \n        for $b in /site/people/person where $b/@id="person0" return $b/name, \n        /site/people/person[@id eq "person0"]/name'
K2-Axes-103;PRSC Error: Failed to parse query '\n        declare function local:isComplexType($typeID) { string($typeID) }; \n        "|", //*/local:isComplexType(@type), "|"'
K2-Axes-104;PRSC Error: Failed to parse query '<a/>/<b>{.}</b>'
K2-Axes-105;PRSC Error: Failed to parse query 'let $result := (\n         let $x := document{<a><b/></a>}, $a := $x/a, $b := $a/b\n         return <out p="{exists($x/self::document-node())}" \n                     q="{exists($x/document-node())}" \n                     r="{exists($a/parent::document-node())}"\n                     s="{exists($b/ancestor::document-node())}"\n                     t="{exists($b/parent::document-node())}"\n                     u="{exists($b/preceding::document-node())}"/>) return $result/self::out/@p = 'true''
K2-Axes-106;Expected XPath string-join(//item ! ('[' || position() || ',' || not(*) || ',' || descendant::foo/@id, ']')) to resolve to [1,true,][2,false,foo1][3,true,][4,false,foo2], but instead got [1,True,][2,False,foo1][3,True,][4,False,foo2]
K2-Axes-18;PRSC Error: Failed to parse query 'empty(text {"some text"}/..)'
K2-Axes-19;PRSC Error: Failed to parse query 'empty(processing-instruction theName {"some text"}/..)'
K2-Axes-2;Expected error code: XPDY0050. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $var := <e><f>f's value</f></e>; $var/(/)/(/)//f'
K2-Axes-20;PRSC Error: Failed to parse query 'empty(attribute theName {"some text"}/..)'
K2-Axes-21;PRSC Error: Failed to parse query 'empty(element theName {"some text"}/..)'
K2-Axes-22;PRSC Error: Failed to parse query 'empty(comment {"some text"}/..)'
K2-Axes-23;PRSC Error: Failed to parse query 'empty(<elem/>/..)'
K2-Axes-24;PRSC Error: Failed to parse query '<e>some text</e>/text()/..'
K2-Axes-25;PRSC Error: Failed to parse query '<e><b/></e>/b/..'
K2-Axes-26;PRSC Error: Failed to parse query '<e attr="c"/>/@attr/..'
K2-Axes-27;PRSC Error: Failed to parse query '<e><?name data?></e>/processing-instruction()/..'
K2-Axes-28;PRSC Error: Failed to parse query '<e><!--data --></e>/comment()/..'
K2-Axes-3;PRSC Error: Failed to parse query 'declare variable $v := <a><b/><b/><b/></a>; deep-equal($v//45, (45, 45, 45, 45))'
K2-Axes-30;Expected executing the XPath 'empty(fn:root(<e/>)/..)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'empty(fn:root(<e/>)/..)'
K2-Axes-31;Expected executing the XPath 'empty(<e/>/..)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'empty(<e/>/..)'
K2-Axes-32;Expected executing the XPath 'declare variable $myVar := <e/>; empty(fn:root($myVar/(/)/..))' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare variable $myVar := <e/>; empty(fn:root($myVar/(/)/..))'
K2-Axes-33;Expected executing the XPath 'declare variable $myVar := document { <e/>}; empty($myVar/(/)/..)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare variable $myVar := document { <e/>}; empty($myVar/(/)/..)'
K2-Axes-4;PRSC Error: Failed to parse query 'declare variable $v := <a><b/><b/><b/></a>; $v//45'
K2-Axes-40;Expected error code: XPTY0020. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '(1, <e/>)[..]'
K2-Axes-41;Expected error code: XPTY0020. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '(<e/>, 1)[..]'
K2-Axes-42;PRSC Error: Failed to parse query 'empty(<e/>[parent::node()])'
K2-Axes-43;Expected executing the XPath '(1, 5 * /)[1]' to resolve to one of the expected results, but got System.FormatException: Input string was not in a correct format.
K2-Axes-47;PRSC Error: Failed to parse query 'declare variable $myVar := <e/>; empty($myVar/descendant-or-self::text())'
K2-Axes-48;PRSC Error: Failed to parse query 'declare variable $myVar := <e/>; $myVar/(<a/>, <b/>, <?d ?>, <!-- e-->, attribute name {}, document {()})/3'
K2-Axes-49;PRSC Error: Failed to parse query 'declare variable $myVar := <e/>; $myVar/(<a/>, <b/>, <?d ?>, <!-- e-->, attribute name {}, document {()})/number()'
K2-Axes-51;Expected error code: XPTY0019. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'string(<e/>)/3'
K2-Axes-52;Expected executing the XPath 'declare variable $myVar := <e/>; \n        empty($myVar/preceding-sibling::comment()/a/b/c/1/@*)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n        declare variable $myVar := <e/>; \n        empty($myVar/preceding-sibling::comment()/a/b/c/1/@*)'
K2-Axes-57;PRSC Error: Failed to parse query 'declare variable $var := <a> <b/> <c/> <d/> </a>; ($var/*, $var/*)/.'
K2-Axes-58;PRSC Error: Failed to parse query 'declare variable $var := <a> <b/> <c/> <d/> </a>; ($var/*, $var/*)'
K2-Axes-59;Expected executing the XPath 'declare variable $i := <root> <child/> <child/> <child> <child2> <child3> <leaf/> </child3> </child2> </child> </root>; 1, root($i)//leaf/child::node(), 1' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare variable $i := <root> <child/> <child/> <child> <child2> <child3> <leaf/> </child3> </child2> </child> </root>; 1, root($i)//leaf/child::node(), 1'
K2-Axes-60;Expected executing the XPath 'empty(<element attr="foo" attr2="foo"/>/*)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'empty(<element attr="foo" attr2="foo"/>/*)'
K2-Axes-61;Expected executing the XPath 'empty(<element attr="foo" attr2="foo"/>/*)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'empty(<element attr="foo" attr2="foo"/>/*)'
K2-Axes-62;PRSC Error: Failed to parse query '<e> <b attr="fo"/> <b/> </e>/descendant-or-self::node()'
K2-Axes-63;PRSC Error: Failed to parse query '1, <b attr="fo"/>/child::node(), 1'
K2-Axes-64;PRSC Error: Failed to parse query '<e> <b/> <b a=""/> </e>/b'
K2-Axes-65;PRSC Error: Failed to parse query '<e> <b a=""/> <b/> </e>/b'
K2-Axes-66;PRSC Error: Failed to parse query '<e> <!-- comment --> <?PA ?>text<b/> <?PB ?> <b/> <?PC ?> </e>/child::node()'
K2-Axes-67;PRSC Error: Failed to parse query '1, <e/>/descendant::node(), 1'
K2-Axes-68;PRSC Error: Failed to parse query '<out>{1, <e/>/descendant-or-self::node(), 1}</out>'
K2-Axes-69;PRSC Error: Failed to parse query '1, <e attr=""/>/descendant::node(), 1'
K2-Axes-70;PRSC Error: Failed to parse query '<out>{1, <e attr=""/>/descendant-or-self::node(), 1}</out>'
K2-Axes-71;PRSC Error: Failed to parse query 'empty(<e/>/descendant::node())'
K2-Axes-72;PRSC Error: Failed to parse query 'empty(<e/>/descendant-or-self::node())'
K2-Axes-73;PRSC Error: Failed to parse query 'empty(<e attr=""/>/descendant::node())'
K2-Axes-74;PRSC Error: Failed to parse query 'empty(<e attr=""/>/descendant-or-self::node())'
K2-Axes-75;PRSC Error: Failed to parse query '<a> <b c=""/> <d/> </a>/descendant-or-self::node()[last()]/ancestor::*'
K2-Axes-76;PRSC Error: Failed to parse query '<a> <b c=""/> <d/> </a>/descendant-or-self::node()[last()]'
K2-Axes-78;PRSC Error: Failed to parse query '<a> <b c=""/> <d/> </a>//node()/../count(.) = 1'
K2-Axes-79;PRSC Error: Failed to parse query 'count(<a> <b c=""/> <d/> </a>//node()) = 2'
K2-Axes-80;PRSC Error: Failed to parse query 'count(<a> <b c=""/> <d/> </a>/descendant-or-self::node()) = 3'
K2-Axes-81;PRSC Error: Failed to parse query '<a> <b id="person0"> <c/> </b> </a>/*[attribute::id eq "person0"]/c'
K2-Axes-82;PRSC Error: Failed to parse query '<a> <b id="person0"> <c/> </b> </a>/*[@id eq "person0"]/c'
K2-Axes-83;PRSC Error: Failed to parse query 'empty(<e/>/attribute::attribute())'
K2-Axes-84;Expected error code: XPST0008. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<e/>/attribute::schema-attribute(foo)'
K2-Axes-86;Expected executing the XPath 'declare variable $root as document-node() := . treat as document-node();\n        <out>\n        <empty> { (: attribute axis, and all other axes that inference can assert might produce attributes. \n             These are placed first, so we don't raise XQTY0024. :) \n             $root/foo/child::attribute(foo), \n             $root//element()/self::attribute(), \n             $root//text()/self::attribute(), \n             $root/self::attribute(), \n             $root/foo/descendant::attribute(foo), \n             $root//processing-instruction()/self::attribute(), \n             $root/attribute(foo), $root/attribute(), \n             $root/attribute::attribute(), \n             $root//parent::attribute(), \n             $root//document-node()/self::attribute(), \n             $root/@*, $root/*/@*[self::*], \n             $root//comment()/descendant-or-self::attribute(), \n             $root//processing-instruction()/descendant-or-self::attribute(), \n             $root//text()/descendant-or-self::attribute(), \n             $root//document-node()/descendant-or-self::attribute(), \n             $root//parent::attribute(), \n             $root//ancestor::attribute(), \n             $root//ancestor-or-self::attribute(), \n             $root/self::attribute(), \n             $root//attribute()/child::node(), \n             $root//attribute::text(), \n             $root//attribute::comment(), \n             $root//attribute::processing-instruction(), \n             $root//attribute::document-node(), \n             $root//attribute::document-node(element(foo)),\n             $root//attribute()/self::text(),\n             $root//attribute()/self::processing-instruction(), \n             $root//attribute()/self::element(), \n             $root//attribute()/self::document-node(), \n             $root//attribute()/self::comment(), \n             $root//*/attribute()//node(), \n             $root//*/attribute()/descendant::node(), \n             $root//attribute::element(), \n             $root//comment()/child::node(), \n             $root//processing-instruction()/child::node(), \n             $root//text()/child::node(),\n             $root//attribute()/descendant::node(), \n             $root//comment()/descendant::node(), \n             $root//text()/descendant::node(), \n             $root//processing-instruction()/descendant::node(), \n             $root//comment()/descendant-or-self::text(), \n             $root//comment()/descendant-or-self::processing-instruction(), \n             $root//comment()/descendant-or-self::element(), \n             $root//comment()/descendant-or-self::document-node(), \n             $root//processing-instruction()/descendant-or-self::text(), \n             $root//processing-instruction()/descendant-or-self::comment(), \n             $root//processing-instruction()/descendant-or-self::element(), \n             $root//processing-instruction()/descendant-or-self::document-node(), \n             $root//text()/descendant-or-self::processing-instruction(), \n             $root//text()/descendant-or-self::comment(), \n             $root//text()/descendant-or-self::element(), \n             $root//text()/descendant-or-self::document-node(), \n             $root//attribute()/descendant-or-self::processing-instruction(), \n             $root//attribute()/descendant-or-self::text(), \n             $root//attribute()/descendant-or-self::comment(), \n             $root//attribute()/descendant-or-self::element(), \n             $root//attribute()/descendant-or-self::document-node(), \n             $root/.., $root//parent::comment(), \n             $root//parent::processing-instruction(), \n             $root//parent::text(), \n             $root//ancestor::comment(), \n             $root//ancestor::processing-instruction(), \n             $root//ancestor::text(), \n             $root/self::comment(), \n             $root/self::processing-instruction(), \n             $root/self::text(), \n             $root/self::element(), \n             $root//element()/self::text(), \n             $root//element()/self::processing-instruction(), \n             $root//element()/self::document-node(), \n             $root//element()/self::comment(), \n             $root//processing-instruction()/self::text(), \n             $root//processing-instruction()/self::element(), \n             $root//processing-instruction()/self::document-node(), \n             $root//processing-instruction()/self::comment(), \n             $root//text()/self::processing-instruction(), \n             $root//text()/self::element(), \n             $root//text()/self::document-node(), \n             $root//text()/self::comment(), \n             $root//document-node()/self::processing-instruction(), \n             $root//document-node()/self::element(), \n             $root//document-node()/self::text(), \n             $root//document-node()/self::comment() } </empty><ex>{exists($root//*/attribute()/descendant-or-self::node())}</ex></out>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n        declare variable $root as document-node() := . treat as document-node();\n        <out>\n        <empty> { (: attribute axis, and all other axes that inference can assert might produce attributes. \n             These are placed first, so we don't raise XQTY0024. :) \n             $root/foo/child::attribute(foo), \n             $root//element()/self::attribute(), \n             $root//text()/self::attribute(), \n             $root/self::attribute(), \n             $root/foo/descendant::attribute(foo), \n             $root//processing-instruction()/self::attribute(), \n             $root/attribute(foo), $root/attribute(), \n             $root/attribute::attribute(), \n             $root//parent::attribute(), \n             $root//document-node()/self::attribute(), \n             $root/@*, $root/*/@*[self::*], \n             $root//comment()/descendant-or-self::attribute(), \n             $root//processing-instruction()/descendant-or-self::attribute(), \n             $root//text()/descendant-or-self::attribute(), \n             $root//document-node()/descendant-or-self::attribute(), \n             $root//parent::attribute(), \n             $root//ancestor::attribute(), \n             $root//ancestor-or-self::attribute(), \n             $root/self::attribute(), \n             $root//attribute()/child::node(), \n             $root//attribute::text(), \n             $root//attribute::comment(), \n             $root//attribute::processing-instruction(), \n             $root//attribute::document-node(), \n             $root//attribute::document-node(element(foo)),\n             $root//attribute()/self::text(),\n             $root//attribute()/self::processing-instruction(), \n             $root//attribute()/self::element(), \n             $root//attribute()/self::document-node(), \n             $root//attribute()/self::comment(), \n             $root//*/attribute()//node(), \n             $root//*/attribute()/descendant::node(), \n             $root//attribute::element(), \n             $root//comment()/child::node(), \n             $root//processing-instruction()/child::node(), \n             $root//text()/child::node(),\n             $root//attribute()/descendant::node(), \n             $root//comment()/descendant::node(), \n             $root//text()/descendant::node(), \n             $root//processing-instruction()/descendant::node(), \n             $root//comment()/descendant-or-self::text(), \n             $root//comment()/descendant-or-self::processing-instruction(), \n             $root//comment()/descendant-or-self::element(), \n             $root//comment()/descendant-or-self::document-node(), \n             $root//processing-instruction()/descendant-or-self::text(), \n             $root//processing-instruction()/descendant-or-self::comment(), \n             $root//processing-instruction()/descendant-or-self::element(), \n             $root//processing-instruction()/descendant-or-self::document-node(), \n             $root//text()/descendant-or-self::processing-instruction(), \n             $root//text()/descendant-or-self::comment(), \n             $root//text()/descendant-or-self::element(), \n             $root//text()/descendant-or-self::document-node(), \n             $root//attribute()/descendant-or-self::processing-instruction(), \n             $root//attribute()/descendant-or-self::text(), \n             $root//attribute()/descendant-or-self::comment(), \n             $root//attribute()/descendant-or-self::element(), \n             $root//attribute()/descendant-or-self::document-node(), \n             $root/.., $root//parent::comment(), \n             $root//parent::processing-instruction(), \n             $root//parent::text(), \n             $root//ancestor::comment(), \n             $root//ancestor::processing-instruction(), \n             $root//ancestor::text(), \n             $root/self::comment(), \n             $root/self::processing-instruction(), \n             $root/self::text(), \n             $root/self::element(), \n             $root//element()/self::text(), \n             $root//element()/self::processing-instruction(), \n             $root//element()/self::document-node(), \n             $root//element()/self::comment(), \n             $root//processing-instruction()/self::text(), \n             $root//processing-instruction()/self::element(), \n             $root//processing-instruction()/self::document-node(), \n             $root//processing-instruction()/self::comment(), \n             $root//text()/self::processing-instruction(), \n             $root//text()/self::element(), \n             $root//text()/self::document-node(), \n             $root//text()/self::comment(), \n             $root//document-node()/self::processing-instruction(), \n             $root//document-node()/self::element(), \n             $root//document-node()/self::text(), \n             $root//document-node()/self::comment() } </empty><ex>{exists($root//*/attribute()/descendant-or-self::node())}</ex></out>'
K2-Axes-87;PRSC Error: Failed to parse query '<result> { <e> <a>1</a> <b>2</b> </e>/(b, a)/. } </result>'
K2-Axes-88;PRSC Error: Failed to parse query 'declare variable $i := <e> <a>1</a> <b>2</b> </e>; <result> { ($i/b, $i/a)/. } </result>'
K2-Axes-89;PRSC Error: Failed to parse query 'declare default element namespace "http://typedecl"; <r> { <e attr="foo"/>/@attr } </r>'
K2-Axes-92;Expected executing the XPath 'empty(<e/>/(gt gt gt))' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'empty(<e/>/(gt gt gt))'
K2-Axes-94;Expected error code: XPDY0002. Query succeeded with result: 
K2-Axes-98;Expected error code: XPDY0002. Query succeeded with result: 
K2-Axes-99;Expected executing the XPath 'declare function foo() external; 1' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XQST0045. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function foo() external; 1'
K2-BooleanEqual-1;Expected error code: XPTY0004. Query succeeded with result: True
K2-BooleanEqual-2;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<name>true</name> eq true()'
K2-BooleanEqual-3;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'true() eq <name>true</name>'
K2-CodepointEqual-1;The function current-time with arity 0 is not registered.
K2-CodepointEqual-2;The function current-time with arity 0 is not registered.
K2-CodepointEqual-3;The function current-time with arity 0 is not registered.
K2-CodepointEqual-4;The function current-time with arity 0 is not registered.
K2-CodepointEqual-5;The function current-time with arity 0 is not registered.
K2-CodepointEqual-6;The function current-time with arity 0 is not registered.
K2-ComputeConAttr-10;PRSC Error: Failed to parse query '<a> <?target content?> {<b>{attribute name{"content"}}</b>} </a>'
K2-ComputeConAttr-11;PRSC Error: Failed to parse query '<a>{(<?target content?>, attribute name{"content"})[2]} </a>'
K2-ComputeConAttr-12;Expected error code: XQTY0024. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<a> <!-- content --> {attribute name{"content"}} </a>'
K2-ComputeConAttr-13;Expected error code: XQTY0024. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<foo > <doo/> {attribute name {"content"}} </foo>'
K2-ComputeConAttr-14;Expected error code: XQTY0024. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:myFunc() { <a/> }; <b> {local:myFunc()} {attribute name {"content"}} </b>'
K2-ComputeConAttr-15;Expected error code: XQTY0024. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:myFunc() { comment {"content"} }; <b> {local:myFunc()} {attribute name {"content"}} </b>'
K2-ComputeConAttr-16;Expected error code: XQTY0024. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:myFunc() as element()+ { <a/> }; <b> {local:myFunc()} {attribute name {"content"}} </b>'
K2-ComputeConAttr-17;Expected error code: XQTY0024. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:myFunc() as item() { <a/> }; <b> {local:myFunc()} {attribute name {"content"}} </b>'
K2-ComputeConAttr-18;Expected error code: XQTY0024. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:myFunc() as item() { <a/> }; <b> {local:myFunc()} {attribute name {"content"}} </b>'
K2-ComputeConAttr-19;Expected error code: XQTY0024. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:myFunc($recurse as xs:integer) { <nested> { if ($recurse = 0) then () else local:myFunc($recurse - 1) } </nested> }; <b> {local:myFunc(3)} {attribute name {"content"}} </b>'
K2-ComputeConAttr-2;Expected error code: XQTY0024. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<elem> <?target content ?> {attribute name {"content"}} </elem>'
K2-ComputeConAttr-20;Expected error code: XQTY0024. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:myFunc($recurse as xs:integer) as item() { <nested> { if ($recurse = 0) then () else local:myFunc($recurse - 1) } </nested> }; <b> {local:myFunc(3)} {attribute name {"content"}} </b>'
K2-ComputeConAttr-21;Expected error code: XQTY0024. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:myFunc() { <elem/>, attribute name {"content"} }; <b> {local:myFunc()} </b>'
K2-ComputeConAttr-22;Expected error code: XQTY0024. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $myVar := (<elem/>, attribute name {"content"}); <b> {$myVar} </b>'
K2-ComputeConAttr-23;PRSC Error: Failed to parse query 'declare variable $myVar := (<elem/>, attribute name {"content"}); <b> {$myVar[2]} </b>'
K2-ComputeConAttr-24;PRSC Error: Failed to parse query 'declare variable $myVar := (attribute name {"content"}, <elem/>); <b> {$myVar[2]} </b>'
K2-ComputeConAttr-25;PRSC Error: Failed to parse query 'declare function local:myFunc($recurse as xs:integer) { attribute {concat("name", $recurse)} {"content"} , if ($recurse = 0) then () else local:myFunc($recurse - 1) }; <b> {local:myFunc(2)} {attribute name {"content"}} </b>'
K2-ComputeConAttr-26;PRSC Error: Failed to parse query 'declare function local:myFunc() { attribute name {"content"}, <elem/> }; <b> {local:myFunc()} </b>'
K2-ComputeConAttr-27;PRSC Error: Failed to parse query 'declare function local:myFunc() { <elem/>, attribute name {"content"} }; <b> {local:myFunc()[2]} </b>'
K2-ComputeConAttr-28;Expected error code: XQTY0024. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $local:myVar := <a/>; <b> {$local:myVar} {attribute name {"content"}} </b>'
K2-ComputeConAttr-29;Expected error code: XQTY0024. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $local:myVar as item() := <a/>; <b> {$local:myVar} {attribute name {"content"}} </b>'
K2-ComputeConAttr-3;Expected error code: XQTY0024. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<elem> {"a string", attribute name {"content"}} </elem>'
K2-ComputeConAttr-30;PRSC Error: Failed to parse query 'declare variable $local:myVar := attribute n2 {"content"}; <b> {$local:myVar} {attribute name {"content"}} </b>'
K2-ComputeConAttr-31;PRSC Error: Failed to parse query 'declare function local:myFunc() { attribute n2 {"content"} }; <b> {local:myFunc()} {attribute name {"content"}} </b>'
K2-ComputeConAttr-32;PRSC Error: Failed to parse query '<e> { attribute name {<anElement/>}, attribute name2 {"content"} } </e>'
K2-ComputeConAttr-33;PRSC Error: Failed to parse query '<e> { attribute name {"content"}, attribute name2 {"content"} } </e>'
K2-ComputeConAttr-34;PRSC Error: Failed to parse query '<e> { attribute name {xs:hexBinary("ff")}, attribute name2 {"content"} } </e>'
K2-ComputeConAttr-35;PRSC Error: Failed to parse query '<elem><![CDATA[]]>{attribute name {"content"}}<alem/> </elem>'
K2-ComputeConAttr-36;PRSC Error: Failed to parse query 'count(<elem><![CDATA[]]></elem>/text()) = 0'
K2-ComputeConAttr-37;Expected error code: XPST0081. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'attribute xmlns:localName {"content"}'
K2-ComputeConAttr-38;Expected executing the XPath 'attribute {"xmlns:localName"} {"content"}' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XQDY0044. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'attribute {"xmlns:localName"} {"content"}'
K2-ComputeConAttr-39;Expected error code: XPST0081. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'attribute aPrefix:localName {"content"}'
K2-ComputeConAttr-4;Expected error code: XQTY0024. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<elem> {"a string", attribute name {"content"}} </elem>'
K2-ComputeConAttr-40;Expected error code: XQDY0074. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'attribute {"aPrefix:localName"} {"content"}'
K2-ComputeConAttr-41;Expected error code: XQDY0074. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'attribute {xs:untypedAtomic("aPrefix::localName")} {"content"}'
K2-ComputeConAttr-42;Expected error code: XQST0070. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare namespace prefix = "http://www.w3.org/2000/xmlns/"; \n        <e>{attribute prefix:localName {"content"}}</e>'
K2-ComputeConAttr-43;Expected error code: XQST0070. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace prefix = "http://www.w3.org/2000/xmlns/"; <e>{attribute {"prefix:localName"} {"content"}}</e>'
K2-ComputeConAttr-44;Expected error code: XQDY0044. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'attribute {"xmlns"} {"content"}'
K2-ComputeConAttr-45;Expected error code: XQDY0044. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'attribute xmlns {"content"}'
K2-ComputeConAttr-46;Expected error code: XQDY0044. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare default element namespace "http://www.example.com/"; <e>{attribute xmlns {"content"}}</e>'
K2-ComputeConAttr-47;PRSC Error: Failed to parse query 'data(attribute foo {"content"}) instance of xs:untypedAtomic'
K2-ComputeConAttr-48;Expected executing the XPath 'string(attribute xml:id {" ab c d "})' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'string(attribute xml:id {" ab c d "})'
K2-ComputeConAttr-49;Expected error code: XQDY0025. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace a = "http://example.com/A"; declare namespace b = "http://example.com/A"; <e> { attribute a:localName {()}, attribute b:localName {()} } </e>'
K2-ComputeConAttr-5;Expected error code: XQTY0024. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<elem> <![CDATA[]]> {attribute name {"content"}} </elem>'
K2-ComputeConAttr-50;Expected error code: XQDY0025. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<e> { attribute {QName("http://example.com/", "attr")} {()}, attribute {QName("http://example.com/", "attr")} {()} } </e>'
K2-ComputeConAttr-51;PRSC Error: Failed to parse query '(<e> { attribute {QName("http://example.com/", "attr")} {()} } </e>) instance of $element(e)'
K2-ComputeConAttr-52;Expected error code: XQDY0025. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<e xmlns:p="http://example.com/" p:attr=""> { attribute {QName("http://example.com/", "p:attr")} {()} } </e>'
K2-ComputeConAttr-53;PRSC Error: Failed to parse query '(<e> { attribute {QName("http://example.com/", "attr")} {()} } </e>) instance of $element(e)'
K2-ComputeConAttr-54;PRSC Error: Failed to parse query 'string-length(xs:NCName(prefix-from-QName(node-name(attribute {QName("http://example.com/", "attr")} {()})))) > 0'
K2-ComputeConAttr-55;PRSC Error: Failed to parse query 'prefix-from-QName(node-name(attribute {QName("http://www.w3.org/XML/1998/namespace", "attr")} {()}))'
K2-ComputeConAttr-56;PRSC Error: Failed to parse query '<e> { attribute {QName("http://www.w3.org/XML/1998/namespace", "space")} {"default"} } </e>'
K2-ComputeConAttr-57;Expected error code: XQDY0044. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<e> { attribute {QName("http://www.w3.org/2000/xmlns/", "space")} {"default"} } </e>'
K2-ComputeConAttr-58;PRSC Error: Failed to parse query '<e xmlns:p="http://example.com/" p:attr1="value"> { attribute {QName("http://example.com/", "attr2")} {()} } </e>'
K2-ComputeConAttr-59;Expected executing the XPath '<a> { attribute xml:id {"1"} } </a>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '<a> { attribute xml:id {"1"} } </a>'
K2-ComputeConAttr-6;Expected error code: XQTY0024. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<elem> <![CDATA[content]]> {attribute name {"content"}} </elem>'
K2-ComputeConAttr-60;'DEFAULT' is an invalid xml:space value. Line 1, position 9.
K2-ComputeConAttr-61;Expected error code: XQTY0024. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'let $x := ( attribute a { "a" }, element b { "b" }, attribute c { "c" } ) return <foo> { $x } </foo>'
K2-ComputeConAttr-7;Expected error code: XQTY0024. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<elem> <!-- content --> {attribute name {"content"}} </elem>'
K2-ComputeConAttr-8;Expected error code: XQTY0024. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<elem> <!-- comment --> { "a string", 999, attribute name {"content"}, xs:hexBinary("FF") } </elem>'
K2-ComputeConAttr-9;Expected error code: XQTY0024. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<elem> <!-- comment --> { "a string", 999, ("another string", attribute name {"content"}, 383), xs:hexBinary("FF") } </elem>'
K2-ComputeConComment-3;PRSC Error: Failed to parse query 'comment {()}'
K2-ComputeConComment-4a;PRSC Error: Failed to parse query 'let $result := (comment{}) return count($result) = 1'
K2-ComputeConComment-5;PRSC Error: Failed to parse query 'data(comment {"content"}) instance of xs:string'
K2-ComputeConElem-10;PRSC Error: Failed to parse query 'declare construction strip; element e {"content"} instance of element(*, xs:untyped)'
K2-ComputeConElem-11;PRSC Error: Failed to parse query 'element e {"content"} instance of element(a, xs:anyType)'
K2-ComputeConElem-12;PRSC Error: Failed to parse query 'declare construction strip; element e {"content"} instance of element(b, xs:untyped)'
K2-ComputeConElem-13;PRSC Error: Failed to parse query 'element e {element b{()}}'
K2-ComputeConElem-14;PRSC Error: Failed to parse query '\n        declare function local:addNamespace($argElement as element(), $argPrefix as xs:string, $namespaceURI as xs:string) as element() { \n            element { QName($namespaceURI, concat($argPrefix, ":x")) }{$argElement}/* \n        }; \n        local:addNamespace(<a><b/></a>, "prefix", "http://example.com/")\n      '
K2-ComputeConElem-15;PRSC Error: Failed to parse query '\n        declare default element namespace "http://example.com/NS"; \n        element {exactly-one((//*)[3])} {}'
K2-ComputeConElem-2;PRSC Error: Failed to parse query '<elem>{"", "", <e/>, <b></b>}</elem>'
K2-ComputeConElem-3;PRSC Error: Failed to parse query '<elem>{<e/>, <b></b>, "", ""}</elem>'
K2-ComputeConElem-4;Expected error code: XQDY0074. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'element {"aPrefix:localName"} {"content"}'
K2-ComputeConElem-5;Expected error code: XQDY0074. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'element {xs:untypedAtomic("aPrefix::localName")} {"content"}'
K2-ComputeConElem-6;PRSC Error: Failed to parse query 'data(element foo {"dsa"}) instance of xs:untypedAtomic'
K2-ComputeConElem-7;PRSC Error: Failed to parse query 'data(element foo {"dsa"})'
K2-ComputeConElem-8;PRSC Error: Failed to parse query 'element e {"content"} instance of element(*, xs:anyType)'
K2-ComputeConElem-9;Expected executing the XPath 'element e {"content"} instance of element(*, xs:untyped)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'element e {"content"} instance of element(*, xs:untyped)'
K2-ComputeConPI-10;PRSC Error: Failed to parse query 'processing-instruction name {" "} eq ""'
K2-ComputeConPI-11;PRSC Error: Failed to parse query 'data(processing-instruction name {"content"}) instance of xs:string'
K2-ComputeConPI-2;Expected error code: XQDY0064. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'processing-instruction {"xml"} {"content"}'
K2-ComputeConPI-3;Expected error code: XQDY0064. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'processing-instruction {" xmL "} {"content"}'
K2-ComputeConPI-4;PRSC Error: Failed to parse query 'local-name(processing-instruction {" name "} {"content"})'
K2-ComputeConPI-5;PRSC Error: Failed to parse query 'local-name(processing-instruction {" XmLnaMe "} {"content"})'
K2-ComputeConPI-6;Expected error code: XQDY0041. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'processing-instruction {"1.das "} {"content"}'
K2-ComputeConPI-7;Expected error code: XQDY0026. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'processing-instruction {"thename"} {"asdas?>"}'
K2-ComputeConPI-8;PRSC Error: Failed to parse query 'string(processing-instruction {"thename"} {"asdas? >"})'
K2-ComputeConPI-9;PRSC Error: Failed to parse query 'string(processing-instruction {"thename"} {"content {1+ } {"})'
K2-CondExpr-1;Expected executing the XPath 'empty(if(<e>{current-time()}</e>) then () else ())' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'empty(if(<e>{current-time()}</e>) then () else ())'
K2-CondExpr-2;PRSC Error: Failed to parse query 'empty(if(<e>{current-time()}</e>) then 1 else 1)'
K2-CondExpr-3;PRSC Error: Failed to parse query 'declare default function namespace "http://www.example.com/"; declare function unordered() { 1 }; unordered() = 1'
K2-ConDocNode-10;PRSC Error: Failed to parse query 'document{<a/>, <b/>, <c/>}'
K2-ConDocNode-11;PRSC Error: Failed to parse query '<a>{data(document{<a/>, <b/>, <c/>})}</a>'
K2-ConDocNode-12;PRSC Error: Failed to parse query '<a>{string(document{<a/>, <b/>, <c/>})}</a>'
K2-ConDocNode-13;PRSC Error: Failed to parse query '<a>{string(document{<a/>, <b/>, <c/>})}</a>'
K2-ConDocNode-14;PRSC Error: Failed to parse query 'string(document{"abc"})'
K2-ConDocNode-15;PRSC Error: Failed to parse query 'data(document {"content"}) instance of xs:untypedAtomic'
K2-ConDocNode-16;PRSC Error: Failed to parse query 'document {"content"} is document{"content"}'
K2-ConDocNode-17;PRSC Error: Failed to parse query 'string(document{"string", <e>more<a>even more</a><b attr="thisIsIgnored"/><![CDATA[ButNotThis]]><?target butThisIs?> content</e>})'
K2-ConDocNode-18;PRSC Error: Failed to parse query 'string(document{ text {"data"}, processing-instruction name {"data"}, processing-instruction name {"data"}, text {"data"}, processing-instruction name {"data"}, processing-instruction name1 {"data"}, comment {"content"}, comment {"content"}, text {"data"}, processing-instruction name2 {"data"}, comment {"content"}, text {"data"} })'
K2-ConDocNode-19;PRSC Error: Failed to parse query 'count(document{document{document{document{()}}}}/child::node()) = 0'
K2-ConDocNode-20;PRSC Error: Failed to parse query '1, document{document{document{document{()}}}}/child::node(), 1'
K2-ConDocNode-21;PRSC Error: Failed to parse query 'document{document{document{document{<e/>}}}}/child::node()'
K2-ConDocNode-22;PRSC Error: Failed to parse query 'document{document{document{document{<e/>, document{()}, <e>{document{()}}</e>}}}}//child::node()'
K2-ConDocNode-23;PRSC Error: Failed to parse query 'string(document{ text {"data"}, text {"data"}, text {"data"}, text {"data"} })'
K2-ConDocNode-24;PRSC Error: Failed to parse query 'count(document{ text {"data"}, text {"data"}, <e/>, text {"data"}, text {"data"} }/child::node()) = 3'
K2-ConDocNode-25;PRSC Error: Failed to parse query 'count(document{ text {"data"}, text {"data"}, text {"data"}, text {"data"} }/child::node()) = 1'
K2-ConDocNode-26;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<doo> { document { attribute name {"content"} } } </doo>'
K2-ConDocNode-27;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<doo> { document { <e/>, attribute name {"content"} } } </doo>'
K2-ConDocNode-28;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<doo> { document { <e> <b/> <b/> <b/> <c> <d/> </c> </e>, attribute name {"content"} } } </doo>'
K2-ConDocNode-29;Expected error code: XQTY0024. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<doo> { document { <e> { <?target data?>, attribute name {"content"} } </e> } } </doo>'
K2-ConDocNode-3;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'document{"some text", <e/>, attribute name {"content"}}'
K2-ConDocNode-30;PRSC Error: Failed to parse query 'count(<a>{document {text{'a'}}}b</a>/node()) = 1'
K2-ConDocNode-31;PRSC Error: Failed to parse query 'string(document {1, document {2, document {document {()}, 3, document {4}}, 5}, 6})'
K2-ConDocNode-32;PRSC Error: Failed to parse query 'document {1, document {2, document {document {()}, 3, document {4}}, 5}, 6}'
K2-ConDocNode-33;PRSC Error: Failed to parse query 'let $result := (document {}) return $result instance of document-node()'
K2-ConDocNode-4;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'document{<e/>, attribute name {"content"}, "some text"}'
K2-ConDocNode-5;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'document{attribute name {"content"}, <e/>, "some text"}'
K2-ConDocNode-6;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'string(document{"some text", <e/>, attribute name {"content"}})'
K2-ConDocNode-7;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'string(document{<e/>, attribute name {"content"}, "some text"})'
K2-ConDocNode-8;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'string(document{attribute name {"content"}, <e/>, "some text"})'
K2-ConDocNode-9;PRSC Error: Failed to parse query 'document{<a/>, <b/>, <c/>}'
K2-ConInScopeNamespace-1;PRSC Error: Failed to parse query 'let $i := document{<e1/>, <e2/>, <e3/>, <e4/>} return (in-scope-prefixes($i/e1), in-scope-prefixes($i/e2), in-scope-prefixes($i/e3), in-scope-prefixes($i/e4))'
K2-ConstructionProlog-1;Expected error code: XPDY0002. Query succeeded with result: 
K2-ContainsFunc-1;TreatExpr AST to Expression not yet implemented
K2-ContainsFunc-2;TreatExpr AST to Expression not yet implemented
K2-ContainsFunc-3;TreatExpr AST to Expression not yet implemented
K2-ContainsFunc-4;TreatExpr AST to Expression not yet implemented
K2-ContainsFunc-5;TreatExpr AST to Expression not yet implemented
K2-ContainsFunc-6;TreatExpr AST to Expression not yet implemented
K2-ConText-10;PRSC Error: Failed to parse query '<e><![CDATA[]]]]]]></e>'
K2-ConText-14;PRSC Error: Failed to parse query '<elem>{1}{text{""}}{2}</elem>'
K2-ConText-15;PRSC Error: Failed to parse query 'string(<elem>{1}{text{""}}{2}</elem>)'
K2-ConText-16;PRSC Error: Failed to parse query 'let $t := text { <_/>[text()] }\n                     return count(data($t)) = 0'
K2-ConText-17;PRSC Error: Failed to parse query 'count(data(text { <_/>[text()] })) = 0'
K2-ConText-18;PRSC Error: Failed to parse query 'count(string(text { })) = 1'
K2-ConText-3;PRSC Error: Failed to parse query 'string(text {""}) eq ""'
K2-ConText-4;PRSC Error: Failed to parse query '<a>{text{()}}</a>'
K2-ConText-5a;PRSC Error: Failed to parse query '(text{}) => empty()'
K2-ConText-6;PRSC Error: Failed to parse query 'data(text {"content"}) instance of xs:untypedAtomic'
K2-ConText-7;PRSC Error: Failed to parse query '<e><![CDATA[content]]]></e>'
K2-ConText-8;PRSC Error: Failed to parse query '<e><![CDATA[content]]]]]]></e>'
K2-ConText-9;PRSC Error: Failed to parse query '<e><![CDATA[]]]></e>'
K2-DataFunc-3;PRSC Error: Failed to parse query '\n      	let $x := <e><f>1</f></e>\n      	return $x/data()\n      '
K2-DataFunc-4;Expected error code: XPDY0002. Query succeeded with result: 
K2-DataFunc-6;Expected error code: FOTY0012. Query succeeded with result: ns:barns:bar2ns:barDerivurn1test1test2
K2-DateTimeFunc-1;The function dateTime with arity 2 is not registered.
K2-DayTimeDurationSubtract-1;The function current-time with arity 0 is not registered.
K2-DayTimeDurationSubtract-2;The function current-dateTime with arity 0 is not registered.
K2-DefaultOrderingProlog-1;Expected error code: XPDY0002. Query succeeded with result: 
K2-DefaultOrderingProlog-2;Expected error code: XPDY0002. Query succeeded with result: 
K2-DirectConElem-1;PRSC Error: Failed to parse query 'string(<pi>{<?pi x?>}</pi>) eq ""'
K2-DirectConElem-15;Expected error code: XQST0118. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<f><c></f></c>'
K2-DirectConElem-2;PRSC Error: Failed to parse query 'string(<a attr="content"><!-- NOTINC -->1<b>2<c><!-- NOTINC -->34</c><!-- NOTINC --><d/>56</b>7</a>) eq "1234567"'
K2-DirectConElem-28;PRSC Error: Failed to parse query '<a></a>'
K2-DirectConElem-29;PRSC Error: Failed to parse query '<e>a</e>, <e>b</e>, <e>c</e>'
K2-DirectConElem-30;PRSC Error: Failed to parse query '<elem>some text<node/>some text</elem>'
K2-DirectConElem-31;PRSC Error: Failed to parse query '<foo > <doo/> </foo>'
K2-DirectConElem-32;PRSC Error: Failed to parse query '<foo><doo/></foo>'
K2-DirectConElem-33;PRSC Error: Failed to parse query '<foo><doo/> </foo>'
K2-DirectConElem-34;PRSC Error: Failed to parse query '<foo > {attribute name {"content"}} <doo/> </foo>'
K2-DirectConElem-35;Expected error code: XQST0070. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<e xmlns:aPrefixOtherThanXml="http://www.w3.org/XML/1998/namespace"/>'
K2-DirectConElem-36;Expected error code: XQST0070. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<e xmlns="http://www.w3.org/XML/1998/namespace"/>'
K2-DirectConElem-37;Expected error code: XQST0070. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<e xmlns:XML="http://www.w3.org/XML/1998/namespace"/>'
K2-DirectConElem-38;PRSC Error: Failed to parse query '<e xmlns:xml="http://www.w3.org/XML/1998/namespace"/>'
K2-DirectConElem-39;Expected error code: XQST0070. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<e xmlns:xmlns="http://www.w3.org/XML/1998/namespace"/>'
K2-DirectConElem-40;Expected error code: XQST0070. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<e xmlns:xmlns="http://www.w3.org/2000/xmlns/"/>'
K2-DirectConElem-41;Expected error code: XQST0070. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<e xmlns:xmlns="http://www.example.com/"/>'
K2-DirectConElem-42;PRSC Error: Failed to parse query '<e> { document{()}/(/) } </e>'
K2-DirectConElem-43;PRSC Error: Failed to parse query '<e> { document{()} } </e>'
K2-DirectConElem-44;PRSC Error: Failed to parse query 'string(<e>text</e>)'
K2-DirectConElem-45;PRSC Error: Failed to parse query 'data(<e>text</e>)'
K2-DirectConElem-46;PRSC Error: Failed to parse query 'declare namespace p = "http://www.example.com/"; <p:e/>'
K2-DirectConElem-47;Expected executing the XPath 'let $in := <r> <e xmlns="http://example.com/&lt;&gt;&quot;&apos;"""/> <e xmlns='http://example.com/&lt;&gt;&quot;&apos;'''/> <p:e xmlns:p="http://example.com/&lt;&gt;&quot;&apos;"""/> <p:e xmlns:p='http://example.com/&lt;&gt;&quot;&apos;'''/> </r> return <r>{for $n in $in/*/namespace-uri(.) return <e ns="{$n}"/>}</r>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'let $in := <r> <e xmlns="http://example.com/&lt;&gt;&quot;&apos;"""/> <e xmlns='http://example.com/&lt;&gt;&quot;&apos;'''/> <p:e xmlns:p="http://example.com/&lt;&gt;&quot;&apos;"""/> <p:e xmlns:p='http://example.com/&lt;&gt;&quot;&apos;'''/> </r> return <r>{for $n in $in/*/namespace-uri(.) return <e ns="{$n}"/>}</r>'
K2-DirectConElem-48;PRSC Error: Failed to parse query '<e>]]></e>'
K2-DirectConElem-49;PRSC Error: Failed to parse query '<e attr="]]>"/>'
K2-DirectConElem-51;PRSC Error: Failed to parse query '<e xml:id=" fo"/>'
K2-DirectConElem-52;PRSC Error: Failed to parse query '<a>&#223;</a>'
K2-DirectConElem-53a;PRSC Error: Failed to parse query '(namespace {"p"} {"abc"}) instance of $namespace-node()'
K2-DirectConElemAttr-29;PRSC Error: Failed to parse query 'string(<foo attr=""""/>/@attr)'
K2-DirectConElemAttr-30;PRSC Error: Failed to parse query 'string(<foo attr='""'/>/@attr)'
K2-DirectConElemAttr-31;PRSC Error: Failed to parse query 'string(<foo attr="''"/>/@attr)'
K2-DirectConElemAttr-32;PRSC Error: Failed to parse query 'string(<foo attr=''''/>/@attr)'
K2-DirectConElemAttr-33;PRSC Error: Failed to parse query '<e attr="x{<e>a</e>, <e>b</e>, <e>c</e>, 1, 2, 3}y"/>'
K2-DirectConElemAttr-34;PRSC Error: Failed to parse query 'string(<elem attr="{comment {" content "}}"/>/@attr)'
K2-DirectConElemAttr-35;PRSC Error: Failed to parse query 'local-name(<elem attr="{comment {" content "}}"/>/@attr)'
K2-DirectConElemAttr-36;PRSC Error: Failed to parse query 'string(<elem attr="{processing-instruction name {" content "}}"/>/@attr)'
K2-DirectConElemAttr-37;PRSC Error: Failed to parse query 'local-name(<elem attr="{processing-instruction name {" content "}}"/>/@attr)'
K2-DirectConElemAttr-38;PRSC Error: Failed to parse query 'local-name(<elem attr="{attribute name {" content "}}"/>/@attr)'
K2-DirectConElemAttr-39;PRSC Error: Failed to parse query 'string(<elem attr="{attribute name {" content "}}"/>/@attr)'
K2-DirectConElemAttr-4;Expected error code: *. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<ncname></ncname (:a misplaced comment:)>'
K2-DirectConElemAttr-40;PRSC Error: Failed to parse query '<elem attr1="""" attr2='''' attr3="''" attr4='""' attr5="'" attr6='"'/>'
K2-DirectConElemAttr-41;PRSC Error: Failed to parse query '<foo attr="{<foo attr="foo"/>}"/>'
K2-DirectConElemAttr-42;PRSC Error: Failed to parse query '<foo attr="{<!-- comment -->}"/>'
K2-DirectConElemAttr-43;PRSC Error: Failed to parse query '<foo attr="{<?target dat a ?>}"/>'
K2-DirectConElemAttr-44;PRSC Error: Failed to parse query 'declare base-uri "http://example.com/level/file.ext"; <e xml:base="../">{ static-base-uri()}</e>'
K2-DirectConElemAttr-45;PRSC Error: Failed to parse query 'declare base-uri "http://example.com/level/file.ext"; <e xml:base="http://example.com/2/2">{ static-base-uri()}</e>'
K2-DirectConElemAttr-46;PRSC Error: Failed to parse query '<e> { <b attr="fo" a="bo"/>/@* } </e>'
K2-DirectConElemAttr-47;PRSC Error: Failed to parse query 'data(<e foo="content"/>/@*) instance of xs:untypedAtomic'
K2-DirectConElemAttr-49;PRSC Error: Failed to parse query '<a b="1" c="1"/>'
K2-DirectConElemAttr-5;PRSC Error: Failed to parse query '<ncname>content</ncname > = 'content''
K2-DirectConElemAttr-50;PRSC Error: Failed to parse query '<a b="1" c="1"/>'
K2-DirectConElemAttr-52;PRSC Error: Failed to parse query '<a b='1' c='1'/>'
K2-DirectConElemAttr-6;Expected error code: *. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<ncname></ncnameNOTBALANCED>'
K2-DirectConElemAttr-68;Expected error code: XQST0071. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<e xmlns="" xmlns=""/>'
K2-DirectConElemAttr-69;Expected error code: XQST0071. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<e xmlns:xml="http://www.w3.org/XML/1998/namespace" xmlns:xml="http://www.w3.org/XML/1998/namespace"/>'
K2-DirectConElemAttr-6a;Expected error code: XQST0118. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<ncname></ncnameNOTBALANCED>'
K2-DirectConElemAttr-70;PRSC Error: Failed to parse query 'declare default element namespace "http://typedecl"; namespace-uri-from-QName(node-name(exactly-one(<e attr="foo"/>/@attr))) eq ""'
K2-DirectConElemAttr-71;PRSC Error: Failed to parse query 'declare default element namespace "http://typedecl"; namespace-uri-from-QName(node-name(exactly-one(<e>{attribute attr {()} }/</e>/@attr))) eq ""'
K2-DirectConElemAttr-72;PRSC Error: Failed to parse query 'namespace-uri-from-QName(node-name(exactly-one(<e xmlns="http://example.com/">{attribute attr {()} }/</e>/@attr))) eq ""'
K2-DirectConElemAttr-73;PRSC Error: Failed to parse query 'declare default element namespace "http://example.com/"; namespace-uri-from-QName(node-name(attribute e {()})) eq ""'
K2-DirectConElemAttr-74;PRSC Error: Failed to parse query '<e attr="{1}&#86;{1}&#86;"/>'
K2-DirectConElemAttr-76;PRSC Error: Failed to parse query '\n        declare function local:t() { text{""}, text{"["}, text{"3"}, text{"]"}, text{""} }; \n        declare variable $var := (text{""}, text{"["}, text{"3"}, text{"]"}, text{""}); \n        <out fromFunction="{local:t()}" fromVariable="{$var}"/>\n      '
K2-DirectConElemContent-10;PRSC Error: Failed to parse query 'not(data(<!-- a comment -->) instance of xs:untypedAtomic)'
K2-DirectConElemContent-11;PRSC Error: Failed to parse query '<!-- a comment --> instance of comment()'
K2-DirectConElemContent-12;PRSC Error: Failed to parse query 'not(<!-- a comment --> instance of xs:untypedAtomic)'
K2-DirectConElemContent-13;PRSC Error: Failed to parse query 'not(<!-- a comment --> instance of xs:string)'
K2-DirectConElemContent-14;PRSC Error: Failed to parse query 'data(<?target content?>) instance of xs:string'
K2-DirectConElemContent-15;PRSC Error: Failed to parse query 'not(data(<?target content?>) instance of xs:untypedAtomic)'
K2-DirectConElemContent-16;PRSC Error: Failed to parse query '<?target content?> instance of processing-instruction()'
K2-DirectConElemContent-17;PRSC Error: Failed to parse query 'not(<?target content?> instance of xs:untypedAtomic)'
K2-DirectConElemContent-25;PRSC Error: Failed to parse query 'string(<eg> (: an (:example:) </eg>)'
K2-DirectConElemContent-26a;PRSC Error: Failed to parse query '<elem>content{}content</elem>'
K2-DirectConElemContent-26b;PRSC Error: Failed to parse query '<elem>content{(:comment:)}content</elem>'
K2-DirectConElemContent-27;PRSC Error: Failed to parse query 'string(<elem><![CDATA[str]]>str<![CDATA[str]]><![CDATA[str]]><![CDATA[str]]>strstr{ "str", "str", "strstr", "str"}strstr<![CDATA[str]]>s<?target str?>tr</elem>) eq "strstrstrstrstrstrstrstr str strstr strstrstrstrstr"'
K2-DirectConElemContent-28;PRSC Error: Failed to parse query 'string(<elem><![CDATA[con<<< ]] >""'*"*">>tent]]&#00;&#x12;&amp;&quot;&notrecognized;&apos]]></elem>) eq "con&lt;&lt;&lt; ]] &gt;""""'*""*""&gt;&gt;tent]]&amp;#00;&amp;#x12;&amp;amp;&amp;quot;&amp;notrecognized;&amp;apos"'
K2-DirectConElemContent-29;PRSC Error: Failed to parse query 'data(text{"content"}) instance of xs:untypedAtomic'
K2-DirectConElemContent-30;PRSC Error: Failed to parse query '<e>{1}A{1}</e>'
K2-DirectConElemContent-31;PRSC Error: Failed to parse query 'string(<e>{1}A{1}</e>)'
K2-DirectConElemContent-32;PRSC Error: Failed to parse query 'data(<e>dsa</e>) instance of xs:untypedAtomic'
K2-DirectConElemContent-33;PRSC Error: Failed to parse query 'data(<e>dsa</e>)'
K2-DirectConElemContent-34;PRSC Error: Failed to parse query '<e/> instance of element(*, xs:anyType)'
K2-DirectConElemContent-35;PRSC Error: Failed to parse query '<e/> instance of element(*, xs:untyped)'
K2-DirectConElemContent-35a;PRSC Error: Failed to parse query '<e/> instance of element(*, xs:untyped)'
K2-DirectConElemContent-35b;PRSC Error: Failed to parse query '<e/> instance of element(*, xs:untyped)'
K2-DirectConElemContent-36;PRSC Error: Failed to parse query 'declare construction strip; <e/> instance of element(*, xs:untyped)'
K2-DirectConElemContent-37;PRSC Error: Failed to parse query '<e/> instance of element(a, xs:anyType)'
K2-DirectConElemContent-38;PRSC Error: Failed to parse query 'declare construction strip; <e/> instance of element(b, xs:untyped)'
K2-DirectConElemContent-39;PRSC Error: Failed to parse query '<elem>{1}{2}{3}{4}{5}</elem>'
K2-DirectConElemContent-40;PRSC Error: Failed to parse query '<elem>{1}{2}{3}{4}</elem>'
K2-DirectConElemContent-41;PRSC Error: Failed to parse query '<elem>{1}{2}{3}</elem>'
K2-DirectConElemContent-42;PRSC Error: Failed to parse query '<elem>{1}{2}</elem>'
K2-DirectConElemContent-43;PRSC Error: Failed to parse query '<a> <![CDATA[ ]]> {"abc"}</a>'
K2-DirectConElemContent-46;PRSC Error: Failed to parse query '<e>{1}{text{()}}{2}</e>'
K2-DirectConElemContent-47;PRSC Error: Failed to parse query '<e>{1}{text{""}}{2}</e>'
K2-DirectConElemContent-48;PRSC Error: Failed to parse query 'document{\n      	<e xmlns="http://www.example.com/"> <a xmlns=""/> </e>, \n      	<e xmlns="http://www.example.com/"> <a xmlns=""/> </e>/count(in-scope-prefixes(a)), \n      	<e xmlns="http://www.example.com/"> <a xmlns=""> <b xmlns=""/> </a> </e>\n      }'
K2-DirectConElemContent-5;PRSC Error: Failed to parse query 'data(<name>some text</name>) instance of xs:untypedAtomic'
K2-DirectConElemContent-6;PRSC Error: Failed to parse query 'not(data(<name>some text</name>) instance of xs:string)'
K2-DirectConElemContent-7;PRSC Error: Failed to parse query '<name>some, if(1) then else</name> instance of element()'
K2-DirectConElemContent-8;PRSC Error: Failed to parse query 'not(<name>some text</name> instance of xs:untypedAtomic)'
K2-DirectConElemContent-9;PRSC Error: Failed to parse query 'data(<!-- a comment -->) instance of xs:string'
K2-DirectConElemNamespace-1;Expected error code: XPST0081. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<name xmlns:ns="http://example.com/NS"/>, ns:nametest'
K2-DirectConElemNamespace-10;Expected error code: XPST0017. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare default function namespace "http://example.com"; <e xmlns:p="http://www.w3.org/2001/XMLSchema" a="{p:count()}"/>'
K2-DirectConElemNamespace-11;Expected error code: XPDY0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare default function namespace "http://example.com"; <e xmlns="http://www.w3.org/2001/XMLSchema" a="{nametest}"/>'
K2-DirectConElemNamespace-12;Expected error code: XPDY0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare default function namespace "http://example.com"; <e a="{nametest}" xmlns="http://www.w3.org/2001/XMLSchema"/>'
K2-DirectConElemNamespace-13;Expected error code: XPDY0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare default function namespace "http://example.com"; <e xmlns:p="http://www.w3.org/2001/XMLSchema" p:p="{p:nametest}"/>'
K2-DirectConElemNamespace-14;Expected error code: XPDY0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare default function namespace "http://example.com"; <e p:p="{p:nametest}" xmlns:p="http://www.w3.org/2001/XMLSchema"/>'
K2-DirectConElemNamespace-15;Expected error code: XQST0022. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<e xmlns="content{{ {'1'}"/>'
K2-DirectConElemNamespace-16;Expected error code: XQST0022. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<e xmlns:p="content{{ {'1'}"/>'
K2-DirectConElemNamespace-17;Expected error code: XQST0022. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<e xmlns="content{()}"/>'
K2-DirectConElemNamespace-18;Expected error code: XQST0022. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<e xmlns:p="content{()}"/>'
K2-DirectConElemNamespace-19;PRSC Error: Failed to parse query '<e a="{1 instance of integer}" xmlns="http://www.w3.org/2001/XMLSchema"/>'
K2-DirectConElemNamespace-2;Expected error code: XQST0118. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<a:elem xmlns:a="http://example.com/NS" xmlns:b="http://example.com/NS"></b:elem>'
K2-DirectConElemNamespace-20;PRSC Error: Failed to parse query '<e a="{1 treat as integer}" xmlns="http://www.w3.org/2001/XMLSchema"/>'
K2-DirectConElemNamespace-21;PRSC Error: Failed to parse query '<e a="{1 cast as string}" xmlns="http://www.w3.org/2001/XMLSchema"/>'
K2-DirectConElemNamespace-22;PRSC Error: Failed to parse query '<e a="{1 castable as string}" xmlns="http://www.w3.org/2001/XMLSchema"/>'
K2-DirectConElemNamespace-23;PRSC Error: Failed to parse query '<e a="{<e><b>data</b></e>/b}" xmlns="http://www.example.com/"/>'
K2-DirectConElemNamespace-24;PRSC Error: Failed to parse query '<e a="{<e b="data"/>/@b}" xmlns="http://www.example.com/"/>'
K2-DirectConElemNamespace-25;Expected executing the XPath 'declare namespace b = "http://www.example.com/"; empty(<e xmlns="http://www.example.com/"><d xmlns=""><b/></d></e>/b:d/b:b)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare namespace b = "http://www.example.com/"; empty(<e xmlns="http://www.example.com/"><d xmlns=""><b/></d></e>/b:d/b:b)'
K2-DirectConElemNamespace-26;Expected error code: XPST0081. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<e xmlns:d="http://www.example.com/"/>, d:d'
K2-DirectConElemNamespace-27;PRSC Error: Failed to parse query '<e xmlns:p="http://www.w3.org/2001/XMLSchema"> <b xmlns:p="http://www.w3.org/2001/XMLSchema"/> {p:integer(1)} </e>'
K2-DirectConElemNamespace-28;PRSC Error: Failed to parse query '<e xmlns:p="http://www.w3.org/2005/xpath-functions"> <b xmlns:p="http://www.w3.org/2001/XMLSchema"/> {fn:count(0)} </e>'
K2-DirectConElemNamespace-29;PRSC Error: Failed to parse query '<e a="{1 instance of p:integer}" xmlns:p="http://www.w3.org/2001/XMLSchema"/>'
K2-DirectConElemNamespace-3;Expected error code: XQST0118. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<a:elem xmlns:a="http://example.com/NS" xmlns:b="http://example.com/NS"></b:elem>'
K2-DirectConElemNamespace-30;PRSC Error: Failed to parse query '<e a="{1 treat as p:integer}" xmlns:p="http://www.w3.org/2001/XMLSchema"/>'
K2-DirectConElemNamespace-31;PRSC Error: Failed to parse query '<e a="{1 cast as p:string}" xmlns:p="http://www.w3.org/2001/XMLSchema"/>'
K2-DirectConElemNamespace-32;PRSC Error: Failed to parse query '<e a="{1 castable as p:string}" xmlns:p="http://www.w3.org/2001/XMLSchema"/>'
K2-DirectConElemNamespace-33;PRSC Error: Failed to parse query '<a attr="{let $p:name := 3 return $p:name}" xmlns:p="http://www.example.com/"/>'
K2-DirectConElemNamespace-34;Expected error code: XQST0022. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<e xmlns="http://{exa}mple.com/"/>/@xmlns'
K2-DirectConElemNamespace-35;Expected error code: XQST0022. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<e xmlns="{1}"/>/@xmlns'
K2-DirectConElemNamespace-36;Expected error code: XQST0022. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<e xmlns="{xs:anyURI("http://www.example.com/")}"/>/@xmlns'
K2-DirectConElemNamespace-37;Expected error code: XQST0022. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<e xmlns="{xs:untypedAtomic("http://www.example.com/")}"/>/@xmlns'
K2-DirectConElemNamespace-39;PRSC Error: Failed to parse query '\n         declare namespace p = "http://example.com/"; \n         document{<p:e xmlns=""/>, count(in-scope-prefixes(<p:e xmlns=""/>))}\n      '
K2-DirectConElemNamespace-4;Expected executing the XPath 'declare namespace p = "http://example.com/QuiteWeirdNamespace"; empty(p:e[1])' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare namespace p = "http://example.com/QuiteWeirdNamespace"; empty(p:e[1])'
K2-DirectConElemNamespace-40;PRSC Error: Failed to parse query 'declare namespace p = "http://www.example.com/A"; <e xmlns="http://www.example.com/A" xmlns:A="http://www.example.com/C"> <b xmlns:B="http://www.example.com/C"/> </e>/p:b'
K2-DirectConElemNamespace-41;PRSC Error: Failed to parse query 'declare namespace p = "http://www.example.com/A"; "START", for $i in in-scope-prefixes(<e xmlns="http://www.example.com/A" xmlns:A="http://www.example.com/C"> <b xmlns:B="http://www.example.com/C" /> </e>/p:b) order by $i return $i, "END"'
K2-DirectConElemNamespace-42;PRSC Error: Failed to parse query '<e xmlns:p="http://www.example.com/"> <e xmlns:p="http://www.example.com/"/> </e>'
K2-DirectConElemNamespace-43;PRSC Error: Failed to parse query '<e xmlns="http://www.example.com/"> <e xmlns="http://www.example.com/"/> </e>'
K2-DirectConElemNamespace-45;PRSC Error: Failed to parse query 'let $i := <e xmlns:p="http://example.com" p:anAttribute="attrValue"/> return <a>{$i/@*}</a>'
K2-DirectConElemNamespace-46;PRSC Error: Failed to parse query 'let $i := <e xml:space="preserve"/> return <a>{$i/@*}</a>'
K2-DirectConElemNamespace-47;PRSC Error: Failed to parse query '<e xmlns=""/>'
K2-DirectConElemNamespace-48;PRSC Error: Failed to parse query '<e xmlns:p="http://example.com"/>'
K2-DirectConElemNamespace-49;PRSC Error: Failed to parse query 'declare default element namespace "http://www.example.com/A"; <anElement xmlns="http://www.example.com/B"/>'
K2-DirectConElemNamespace-5;PRSC Error: Failed to parse query 'count(in-scope-prefixes(<e/>)[. eq "xml"]) = 1'
K2-DirectConElemNamespace-50;Expected executing the XPath '<e xmlns="http://www.example.com/A" xmlns:A="http://www.example.com/C"> <b xmlns:B="http://www.example.com/C" xmlns=""/> </e>/b' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '<e xmlns="http://www.example.com/A" xmlns:A="http://www.example.com/C"> <b xmlns:B="http://www.example.com/C" xmlns=""/> </e>/b'
K2-DirectConElemNamespace-51;PRSC Error: Failed to parse query 'declare default element namespace "http://example.com"; <e xmlns=""/>'
K2-DirectConElemNamespace-52;PRSC Error: Failed to parse query 'declare default element namespace "http://example.com/"; <a> <e xmlns=""/> </a>'
K2-DirectConElemNamespace-53;PRSC Error: Failed to parse query 'count(in-scope-prefixes(<a xmlns="http://example.com/"> <e xmlns=""/> </a>/e)) = 1'
K2-DirectConElemNamespace-54;PRSC Error: Failed to parse query 'count(<e xmlns="http://example.com/"><a xmlns=""/></e>/namespace-uri(exactly-one(*))) = 1'
K2-DirectConElemNamespace-55;PRSC Error: Failed to parse query '<e xmlns="http://example.com/"> <b xmlns=""> { attribute {QName("http://example.com/2", "p:attr")} {()} } </b> </e>'
K2-DirectConElemNamespace-56;PRSC Error: Failed to parse query 'declare default element namespace "http://example.com/"; <r xmlns:p="http://example.com/"> { <e p:att=""/>/(@att, attribute::att) } </r>'
K2-DirectConElemNamespace-57;PRSC Error: Failed to parse query 'declare default element namespace "http://example.com/"; declare namespace p = "http://example.com/"; <r> { <e p:att=""/>/(@att) } </r>'
K2-DirectConElemNamespace-58;PRSC Error: Failed to parse query '<r> <xs:element/> <local:element/> <fn:element/> <xml:element/> </r>'
K2-DirectConElemNamespace-59;Expected executing the XPath 'namespace-uri(<p:e xmlns:p="http://example.com/{{{{{{}}}}}}asd"/>)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'namespace-uri(<p:e xmlns:p="http://example.com/{{{{{{}}}}}}asd"/>)'
K2-DirectConElemNamespace-6;PRSC Error: Failed to parse query 'count(in-scope-prefixes(element e{})[. eq "xml"]) = 1'
K2-DirectConElemNamespace-65;Expected executing the XPath 'namespace-uri-for-prefix("p", <e xmlns:p="http://example.com/{{}}{{{{}}}}"/>)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'namespace-uri-for-prefix("p", <e xmlns:p="http://example.com/{{}}{{{{}}}}"/>)'
K2-DirectConElemNamespace-7;Expected error code: XPST0017. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare default function namespace "http://example.com"; <e a="{count()}" xmlns="http://www.w3.org/2001/XMLSchema"/>'
K2-DirectConElemNamespace-71;Expected error code: XQST0022. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<e xmlns:p="{"http://example.com/"}"/>'
K2-DirectConElemNamespace-72;Expected error code: XQST0022. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<e xmlns="{"http://example.com/"}"/>'
K2-DirectConElemNamespace-73;Expected error code: XQST0022. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<e xmlns:p="{()}"/>'
K2-DirectConElemNamespace-74;Expected error code: XQST0022. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<e xmlns="{()}"/>'
K2-DirectConElemNamespace-75;Expected executing the XPath 'namespace-uri(<e xmlns="http://example.com/{{1}}"/>)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'namespace-uri(<e xmlns="http://example.com/{{1}}"/>)'
K2-DirectConElemNamespace-76;Expected executing the XPath '<e xmlns:p="http://example.com/{{1}}"/>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '<e xmlns:p="http://example.com/{{1}}"/>'
K2-DirectConElemNamespace-77;PRSC Error: Failed to parse query 'declare namespace t = "http://example.com/2"; <p:a xmlns:p="http://example.com/"> <p:e xmlns:p="http://example.com/2"/> </p:a>//t:e'
K2-DirectConElemNamespace-78;PRSC Error: Failed to parse query 'let $e := document{(<X1:L xmlns:X1="http://example.com/URL1">1</X1:L>, <X2:L xmlns:X2="http://example.com/URL2">2</X2:L>)} return <outer xmlns:P="http://example.com/URL1"> { let $outer as element(P:L) := $e/element(P:L) return <inner xmlns:P="http://example.com/URL2"> { let $inner as element(P:L) := $e/element(P:L) return ($outer, $inner) } </inner> } </outer>'
K2-DirectConElemNamespace-79;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'let $e := document{(<X1:L xmlns:X1="http://ns.example.com/URL1">1</X1:L>, <X2:L xmlns:X2="http://ns.example.com/URL2">2</X2:L>)} return <outer xmlns:P="http://ns.example.com/URL1"> { let $outer as element(P:L) := $e/element(P:L) return <inner xmlns:P="http://ns.example.com/URL2"> { let $inner as element(P:L) := $outer return $inner } </inner> } </outer>'
K2-DirectConElemNamespace-8;Expected error code: XPST0017. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare default function namespace "http://example.com"; <e a="{p:count()}" xmlns:p="http://www.w3.org/2001/XMLSchema"/>'
K2-DirectConElemNamespace-9;Expected error code: XPST0017. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare default function namespace "http://example.com"; <e xmlns="http://www.w3.org/2001/XMLSchema" a="{count()}"/>'
K2-DirectConElemWhitespace-1;PRSC Error: Failed to parse query 'declare boundary-space preserve; string(<e> <b/> </e>)'
K2-DirectConElemWhitespace-10;PRSC Error: Failed to parse query 'string(<e> &#32; </e>)'
K2-DirectConElemWhitespace-11;PRSC Error: Failed to parse query 'string(<e> <![CDATA[ ]]> </e>)'
K2-DirectConElemWhitespace-12;PRSC Error: Failed to parse query 'string(<e>123<b>XX</b>abc</e>)'
K2-DirectConElemWhitespace-13;PRSC Error: Failed to parse query 'string(<e>123<!-- a comment -->ab<!-- another comment -->c</e>)'
K2-DirectConElemWhitespace-14;PRSC Error: Failed to parse query 'string(<e>123<?target content ?>ab<?target2 content?>c</e>)'
K2-DirectConElemWhitespace-15;PRSC Error: Failed to parse query 'count(<elem>str{""}asdas{"asd", "asd", "''", ""}{''}asd{''}{''}</elem>/text()) = 1'
K2-DirectConElemWhitespace-16;PRSC Error: Failed to parse query 'count(<a></a>/node()) = 0'
K2-DirectConElemWhitespace-17;PRSC Error: Failed to parse query 'count(<a/>/node()) = 0'
K2-DirectConElemWhitespace-18;PRSC Error: Failed to parse query 'string(<elem> <![CDATA[]]> </elem>)'
K2-DirectConElemWhitespace-19;PRSC Error: Failed to parse query 'string(<e>e<b>ddd</b></e>)'
K2-DirectConElemWhitespace-2;PRSC Error: Failed to parse query '<elem>{""}</elem>'
K2-DirectConElemWhitespace-20;PRSC Error: Failed to parse query '<e>{1}{1}{1}<e/></e>'
K2-DirectConElemWhitespace-21;PRSC Error: Failed to parse query '<e><e/>{1}{1}{1}</e>'
K2-DirectConElemWhitespace-22;PRSC Error: Failed to parse query 'string(<e>]]></e>)'
K2-DirectConElemWhitespace-23;PRSC Error: Failed to parse query 'string(<elem><![CDATA[cdat]]><!-- a comment --><?target content?></elem>)'
K2-DirectConElemWhitespace-24;PRSC Error: Failed to parse query 'string(<elem> content <![CDATA[ content ]]> content </elem>)'
K2-DirectConElemWhitespace-25;PRSC Error: Failed to parse query 'string(<elem><![CDATA[cdata&<>'"< ]]>asda <?target content?>asdad</elem>) eq "cdata&amp;<>'""&lt;&#x20;asda asdad"'
K2-DirectConElemWhitespace-26;PRSC Error: Failed to parse query 'string(<a> {1} <b> {1} </b> </a>)'
K2-DirectConElemWhitespace-3;PRSC Error: Failed to parse query 'string(<a>aaaa<b/>aaaa</a>)'
K2-DirectConElemWhitespace-4;PRSC Error: Failed to parse query 'declare boundary-space preserve; <e> <b/>  </e>'
K2-DirectConElemWhitespace-5;PRSC Error: Failed to parse query 'declare boundary-space strip; string(<e xml:space="preserve"> </e>) eq ""'
K2-DirectConElemWhitespace-6;PRSC Error: Failed to parse query 'declare boundary-space strip; <e xml:space="preserve"> </e>'
K2-DirectConElemWhitespace-7;PRSC Error: Failed to parse query 'declare boundary-space preserve; string(<e xml:space="default"> </e>) eq " "'
K2-DirectConElemWhitespace-8;PRSC Error: Failed to parse query 'declare boundary-space preserve; <e xml:space="preserve"> </e>'
K2-DirectConElemWhitespace-9;PRSC Error: Failed to parse query 'string(<e>'a''a'''a"a""a"""a"</e>) eq "'a''a'''a""a""""a""""""a"""'
K2-DirectConOther-1;PRSC Error: Failed to parse query 'string(<?target ""''content&amp;amp;ss&amp;#00; &amp;#x2014;?>) eq """""''content&amp;amp;amp;ss&amp;amp;#00; &amp;amp;#x2014;"'
K2-DirectConOther-29;PRSC Error: Failed to parse query 'local-name(<?xmlSUFFIX content?>)'
K2-DirectConOther-30;PRSC Error: Failed to parse query 'local-name(<?PREFIXxml content?>)'
K2-DirectConOther-31;PRSC Error: Failed to parse query 'local-name(<?PREFIXxmlSUFFIX content?>)'
K2-DirectConOther-32;PRSC Error: Failed to parse query '<?validchar ???<<???? <? >?hm???> eq "???<<???? <? >?hm??"'
K2-DirectConOther-33;PRSC Error: Failed to parse query '<?validchar content ?> eq "content "'
K2-DirectConOther-34;PRSC Error: Failed to parse query '<?validchar content a b c asdada dad ?> eq "content a b c asdada dad "'
K2-DirectConOther-35;PRSC Error: Failed to parse query '<!-- some - - - - content - - - >>>>> << >>><>& ;& --> eq " some - - - - content - - - >>>>> << >>><>&amp; ;&amp; "'
K2-DirectConOther-36;PRSC Error: Failed to parse query '<!-- - - - - - - - - - - - - - - - - --> eq " - - - - - - - - - - - - - - - - "'
K2-DirectConOther-37;PRSC Error: Failed to parse query '<?target {1 + 1}?>'
K2-DirectConOther-38;PRSC Error: Failed to parse query 'string(<?target content ?>) eq "content "'
K2-DirectConOther-39;PRSC Error: Failed to parse query '<e>a<!--data tar-->b</e>'
K2-DirectConOther-40;PRSC Error: Failed to parse query 'string(<e>a<!--data tar-->b</e>)'
K2-DirectConOther-41;PRSC Error: Failed to parse query 'string(<!-- content&amp;amp;ss&amp;amp;#00; &amp;#x2014;-->) eq " content&amp;amp;amp;ss&amp;amp;amp;#00; &amp;amp;#x2014;"'
K2-DirectConOther-44;PRSC Error: Failed to parse query 'data(<?target data?>) instance of xs:string'
K2-DirectConOther-45;PRSC Error: Failed to parse query 'data(<!-- a comment -->) instance of xs:string'
K2-DirectConOther-46;PRSC Error: Failed to parse query '<!-- <<<>><&%(/?=(=)&entity;-]]> -->'
K2-DirectConOther-47;PRSC Error: Failed to parse query '<?target ]]>?>'
K2-DirectConOther-48;Expected executing the XPath 'string(exactly-one(<e xml:id=" ab c d "/>/@*))' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'string(exactly-one(<e xml:id=" ab c d "/>/@*))'
K2-DirectConOther-57;Expected error code: XPST0003. Query succeeded with result: 
K2-DirectConOther-58;PRSC Error: Failed to parse query '<e attr="   a"/>'
K2-DirectConOther-59;PRSC Error: Failed to parse query '<elem attr='\n                            \n                    \n                    \n                    \n\n                 '/>'
K2-DirectConOther-60;PRSC Error: Failed to parse query '<e attr="    "/>'
K2-DirectConOther-63;Expected executing the XPath '<a xml:id="1"/>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '<a xml:id="1"/>'
K2-DirectConOther-64;'PRESERVE' is an invalid xml:space value. Line 1, position 9.
K2-DirectConOther-65;Expected executing the XPath '<a xml:space="   preserve"/>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '<a xml:space="   preserve"/>'
K2-DirectConOther-66;PRSC Error: Failed to parse query 'declare namespace a="http://example.com/NotThis"; declare namespace g="http://example.com/NotThis2"; <a xmlns:a="http://example.com/NotThis" xmlns:b="http://example.com"> <b xmlns:a="http://example.com/" xmlns:c="http://example.com/c"> <c xmlns:d="http://example.com/d"/> { for $i in in-scope-prefixes(<e/>) order by $i return $i, "|", for $i in in-scope-prefixes(element e {()}) order by $i return $i } <d xmlns:e="http://example.com/d"/> </b> </a>'
K2-DirectConOther-67;PRSC Error: Failed to parse query '<e xmlns="http://example.com/3">{namespace-uri-from-QName(node-name(<e/>)), namespace-uri-from-QName(node-name(element e2 {()}))}</e>'
K2-DirectConOther-68;PRSC Error: Failed to parse query '<c b="a \n\n\n \nstring literal \n"/>'
K2-DirectConOther-69;PRSC Error: Failed to parse query '<c b="a \n\n\n \nstring literal \n"/>'
K2-DirectConOther-70;PRSC Error: Failed to parse query 'string-to-codepoints(<a>\n\n\n \n|&#xD; &#xD;&#xA;</a>)'
K2-DirectConOther-71;PRSC Error: Failed to parse query '<a xmlns:p="urn:abbrev:NS"><b p:c="" p:d=""/></a>'
K2-EndsWithFunc-1;TreatExpr AST to Expression not yet implemented
K2-EndsWithFunc-2;TreatExpr AST to Expression not yet implemented
K2-EndsWithFunc-3;TreatExpr AST to Expression not yet implemented
K2-EndsWithFunc-4;TreatExpr AST to Expression not yet implemented
K2-EndsWithFunc-5;TreatExpr AST to Expression not yet implemented
K2-EndsWithFunc-6;TreatExpr AST to Expression not yet implemented
K2-ErrorFunc-1;Expected executing the XPath '(1, 2, error())[2]' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function error with arity 0 is not registered.
K2-ErrorFunc-2;Expected error code: *. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare default element namespace ""; fn:error(xs:QName("onlyAnNCName"))'
K2-ErrorFunc-3;Expected error code: *. Found error code: XPST0017 with error message: The function error with arity 2 is not registered.
K2-ExternalVariablesWith-1;Expected error code: XQST0049. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $input-context as item()* external; declare variable $input-context external; 1'
K2-ExternalVariablesWith-10;Expected executing the XPath 'declare namespace e = "http://example.com/ANamespace"; declare variable $e:exampleComThisVarIsNotRecognized as element(*) external; 1' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare namespace e = "http://example.com/ANamespace"; declare variable $e:exampleComThisVarIsNotRecognized as element(*) external; 1 = 1'
K2-ExternalVariablesWith-12;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $i as xs:integer := xs:untypedAtomic("1"); $i'
K2-ExternalVariablesWith-13;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $i as xs:float := 1.1 ; $i'
K2-ExternalVariablesWith-14;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $i as xs:double := 1.1 ; $i'
K2-ExternalVariablesWith-15;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $i as xs:float := 1 ; $i'
K2-ExternalVariablesWith-16;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $i as xs:double := 1 ; $i'
K2-ExternalVariablesWith-17;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $i as xs:double := xs:float(3) ; $i'
K2-ExternalVariablesWith-18;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $i as xs:string := xs:untypedAtomic("a string") ; $i'
K2-ExternalVariablesWith-19;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $i as xs:string := xs:anyURI("http://www.example.com/") ; $i'
K2-ExternalVariablesWith-2;Expected error code: XQST0049. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $input-context external; declare variable $input-context as item()* external; 1'
K2-ExternalVariablesWith-20;Expected error code: XQST0049. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $input-context1 external; declare variable $input-context1 := 1; 1'
K2-ExternalVariablesWith-21;Expected error code: XQST0049. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $input-context1 external; declare variable $input-context1 := 1; 1'
K2-ExternalVariablesWith-22;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $v as element(*, xs:untyped?)+ := <e/>; exists($v/*)'
K2-ExternalVariablesWith-22a;PRSC Error: Failed to parse query 'declare variable $v as element(*, xs:untyped?)+ := <e/>; exists($v/*)'
K2-ExternalVariablesWith-23;PRSC Error: Failed to parse query 'declare variable $v as element(elementName, xs:anyType?)+ := <elementName/>; 1 = 1'
K2-ExternalVariablesWith-3;Expected error code: XQST0049. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $input-context as item()* external ; declare variable $input-context as item()*external ; 1'
K2-ExternalVariablesWith-4;Expected error code: XQST0049. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $input-context as item()* external ; declare variable $input-context as item()*external ; $input-context'
K2-ExternalVariablesWith-5;Expected error code: XQST0049. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $input-context as item()* external; declare variable $input-context as item()*external; 1'
K2-ExternalVariablesWith-6;Expected error code: XQST0049. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $input-context as xs:string* external; declare variable $input-context as item()*external; 1'
K2-ExternalVariablesWith-7;Expected error code: XPDY0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $exampleComThisVarIsNotRecognized as xs:string *external; $exampleComThisVarIsNotRecognized'
K2-ExternalVariablesWith-8;Expected error code: XPDY0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace e = "http://example.com/ANamespace"; declare variable $e:exampleComThisVarIsNotRecognized as comment() *external; $e:exampleComThisVarIsNotRecognized'
K2-ExternalVariablesWith-9;Expected executing the XPath 'declare variable $exampleComThisVarIsNotRecognized as processing-instruction()? external; 1' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare variable $exampleComThisVarIsNotRecognized as processing-instruction()? external; 1 = 1'
K2-ExternalVariablesWithout-1;Expected error code: XQST0049. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $input-context external; declare variable $input-context external; 1'
K2-ExternalVariablesWithout-10;PRSC Error: Failed to parse query 'declare variable $e := <e> <a/> </e>; declare variable $f := $e; <r> { $e is $e, $f is $e, $e, $f } </r>'
K2-ExternalVariablesWithout-11;PRSC Error: Failed to parse query 'declare variable $a as attribute()* := (attribute name1 {()}, attribute name2 {()}, attribute name3 {()}); declare variable $b as attribute()* := (attribute name1 {()}, attribute name2 {()}, attribute name3 {()}); $a/(let $p := position() return . is $b[$p])'
K2-ExternalVariablesWithout-12;PRSC Error: Failed to parse query 'declare variable $a as attribute()* := (attribute name1 {()}, attribute name2 {()}, attribute name3 {()}); <r> <e> { $a } </e> <e> { $a } </e> </r>'
K2-ExternalVariablesWithout-13;PRSC Error: Failed to parse query 'declare variable $e := <e>{current-time()}</e>/(string-length(.) > 0); $e, if($e) then "SUCCESS" else "FAILURE"'
K2-ExternalVariablesWithout-16;Expected error code: XPDY0002. Query succeeded with result: 
K2-ExternalVariablesWithout-17;Expected error code: XPDY0002. Query succeeded with result: 
K2-ExternalVariablesWithout-18b;PRSC Error: Failed to parse query 'declare variable $var external := 1; 1 = 1'
K2-ExternalVariablesWithout-19;Expected error code: XPDY0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $global := count(*); <e/>/$global'
K2-ExternalVariablesWithout-2;Expected error code: XQST0049. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $input-context external; declare variable $input-context external; $input-context'
K2-ExternalVariablesWithout-20;Expected error code: XPDY0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare variable $global := count(*); \n        <e/>/($global, $global)'
K2-ExternalVariablesWithout-21;PRSC Error: Failed to parse query 'declare variable $global := count(*); $global, <wrongFocus> <e1/> <e2/> </wrongFocus>/$global, $global'
K2-ExternalVariablesWithout-22;PRSC Error: Failed to parse query 'declare variable $global := count(*); <wrongFocus> <e1/> <e2/> </wrongFocus>/$global = 1'
K2-ExternalVariablesWithout-3;Expected error code: XPST0081. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare default element namespace ""; \n        declare namespace prefix = ""; \n        declare variable $prefix:input-context external; 1'
K2-ExternalVariablesWithout-4;Expected error code: XPDY0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        \n        declare variable $exampleComThisVarIsNotRecognized external; $exampleComThisVarIsNotRecognized'
K2-ExternalVariablesWithout-5;Expected error code: XPDY0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare namespace e = "http://example.com/ANamespace"; \n        declare variable $e:exampleComThisVarIsNotRecognized external; \n        $e:exampleComThisVarIsNotRecognized'
K2-ExternalVariablesWithout-6;Expected executing the XPath 'declare variable $exampleComThisVarIsNotRecognized external; 1' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare variable $exampleComThisVarIsNotRecognized external; 1 = 1'
K2-ExternalVariablesWithout-7;Expected executing the XPath 'declare namespace e = "http://example.com/ANamespace"; declare variable $e:exampleComThisVarIsNotRecognized external; 1' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare namespace e = "http://example.com/ANamespace"; declare variable $e:exampleComThisVarIsNotRecognized external; 1 = 1'
K2-ExternalVariablesWithout-8;PRSC Error: Failed to parse query 'declare variable $ name := 3; $ name = 3'
K2-ExternalVariablesWithout-9;PRSC Error: Failed to parse query 'declare variable $e := current-time(); let $i := ($e, 1 to 50000, $e) return $i[1] = $i[last()]'
K2-FilterExpr-1;PRSC Error: Failed to parse query 'declare variable $var := (for $i in 1 to 100 return <e>{$i}</e>); $var[last()]'
K2-FilterExpr-2;PRSC Error: Failed to parse query 'declare variable $var := (for $i in 1 to 100 return <e>{$i}</e>); $var[5]'
K2-FilterExpr-4;Expected executing the XPath 'empty(<e><a/></e>//a[3.4])' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'empty(<e><a/></e>//a[3.4])'
K2-FilterExpr-5;Expected executing the XPath 'let $d := document {<root><child type=""/></root>} \n         return document{$d//*[let $i := @type return $d//*[$i]], (1, 2, 3)[true()], (4, 5, 6)[false()]}' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n         let $d := document {<root><child type=""/></root>} \n         return document{$d//*[let $i := @type return $d//*[$i]], (1, 2, 3)[true()], (4, 5, 6)[false()]}\n       '
K2-FilterExpr-6;PRSC Error: Failed to parse query 'let $d := document { <root><child type=""/></root> } return $d//*[let $i := @type return $d//*[$i]]'
K2-FilterExpr-7;PRSC Error: Failed to parse query '(<x/>, <?y?>)[self::processing-instruction()]'
K2-FilterExpr-8;Expected error code: XPDY0050. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '(<?z?>, <?y?>)[self::processing-instruction(y)] treat as empty-sequence()'
K2-following-siblingAxis-1;PRSC Error: Failed to parse query '<root> <child/> <child/> <child/> </root>/child[1]/following-sibling::node()'
K2-following-siblingAxis-10;PRSC Error: Failed to parse query '<result> { <a><b/></a>/*/following::*[2] } </result>'
K2-following-siblingAxis-2;PRSC Error: Failed to parse query '<root> <child/> <child/> <child attr="foo" attr2="foo"/> </root>/child[1]/following-sibling::node()'
K2-following-siblingAxis-3;PRSC Error: Failed to parse query 'count(<root> <child/> <child/> <child attr="foo" attr2="foo"/> </root>/child[1]/following-sibling::node()) = 2'
K2-following-siblingAxis-4;PRSC Error: Failed to parse query '\n        declare variable $i := <root> <child/> <child/> <child> <child2> <child3> <leaf/> </child3> </child2> </child> </root>; \n        root($i)//count(following-sibling::node())\n      '
K2-following-siblingAxis-5;PRSC Error: Failed to parse query '\n        declare variable $i := <root> <child/> <child/> <child> <child2> <child3> <leaf/> </child3> </child2> </child> </root>; \n        root($i)//following-sibling::node()\n      '
K2-following-siblingAxis-6;Expected error code: XPTY0018. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare variable $i := <root> <child/> <child/> <child> <child2> <child3> <leaf/> </child3> </child2> </child> </root>; \n        root($i)//(following-sibling::node(), "BOO")\n      '
K2-following-siblingAxis-7;PRSC Error: Failed to parse query 'count(<root> <child/> </root>/following-sibling::node()) = 0'
K2-following-siblingAxis-8;PRSC Error: Failed to parse query '1, <root> <child/> </root>/following-sibling::node(), 1'
K2-following-siblingAxis-9;PRSC Error: Failed to parse query '1, <root/>/following-sibling::node(), 1'
K2-followingAxis-1;PRSC Error: Failed to parse query '\n        let $i := <html> <head/> <body> <p attr="foo"> </p> <p attr="boo"> </p> <p> </p> <p> </p> <p> </p> </body> </html> \n        return $i//p[1]/following::*\n      '
K2-followingAxis-2;PRSC Error: Failed to parse query '\n        declare variable $i := <root> <child/> <child/> <child> <child2> <child3> <leaf/> </child3> </child2> </child> </root>;\n         1, root($i)//leaf/following::node(), 1\n      '
K2-followingAxis-3;PRSC Error: Failed to parse query '\n        declare variable $i := <root> <child/> <child/> <child> <child2> <child3> <leaf/> </child3> </child2> </child> </root>; \n        empty(root($i)/following::node())\n      '
K2-followingAxis-4;PRSC Error: Failed to parse query '\n        declare variable $i := <root> <child/> <child/> <child> <child2> <child3> <leaf/> </child3> </child2> </child> </root>; \n        root($i)//count(following::node())\n      '
K2-ForExprPositionalVar-2;Expected executing the XPath 'let $tree := <e> <a id="1"/> <a id="2"/> <a id="3"/> </e> for $i at $pos in ("a", "b", "c") return ($tree/@id eq $pos, $pos)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'let $tree := <e> <a id="1"/> <a id="2"/> <a id="3"/> </e> for $i at $pos in ("a", "b", "c") return ($tree/@id eq $pos, $pos)'
K2-ForExprPositionalVar-3;PRSC Error: Failed to parse query 'let $tree := <e> <a id="1"/> <a id="2"/> <a id="3"/> </e> for $i at $pos in ("a", "b", "c") return ($tree/a/@id = $pos, $pos)'
K2-ForExprPositionalVar-4;PRSC Error: Failed to parse query 'for $i at $pos in (3 to 6) let $let := $pos + 1 return ($let, $let - 1)'
K2-ForExprWith-1;Expected error code: XPTY0004. Query succeeded with result: input
K2-ForExprWithout-10;Expected executing the XPath 'for $a in (3, 2, 1) \n        for $b in (6, 5, 4) \n        let $c := $a + $b \n        let $d := $a - $b \n        let $e := () stable order by $a ascending, $b descending, $d empty greatest, $e empty least, $c descending empty greatest, $d ascending empty greatest, $e descending empty least, $b ascending empty least \n        return $a' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n        for $a in (3, 2, 1) \n        for $b in (6, 5, 4) \n        let $c := $a + $b \n        let $d := $a - $b \n        let $e := () stable order by $a ascending, $b descending, $d empty greatest, $e empty least, $c descending empty greatest, $d ascending empty greatest, $e descending empty least, $b ascending empty least \n        return $a'
K2-ForExprWithout-11;Use of XQuery FLWOR expressions in XPath is not allowed
K2-ForExprWithout-12;Use of XQuery FLWOR expressions in XPath is not allowed
K2-ForExprWithout-13;PRSC Error: Failed to parse query '<e/>/(for $i in self::node() return $i)'
K2-ForExprWithout-14;PRSC Error: Failed to parse query '<e/>/(for $i in 1, $b in self::node() return $b)'
K2-ForExprWithout-15;PRSC Error: Failed to parse query 'declare function local:func($arg as element()* ) as element()* { for $n in $arg/element return $n }; 1 = 1'
K2-ForExprWithout-16;PRSC Error: Failed to parse query 'declare function local:func($arg as element()* ) as element()* { for $n in $arg/document return $n }; 1 = 1'
K2-ForExprWithout-17;PRSC Error: Failed to parse query 'declare function local:func($arg as element()* ) as element()* { for $n in $arg/document-node return $n }; 1 = 1'
K2-ForExprWithout-18;PRSC Error: Failed to parse query 'declare function local:func($arg as element()* ) as element()* { for $n in $arg/attribute return $n }; 1 = 1'
K2-ForExprWithout-19;PRSC Error: Failed to parse query 'declare function local:func($arg as element()* ) as element()* { for $n in $arg/comment return $n }; 1 = 1'
K2-ForExprWithout-2;Expected error code: XPDY0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:myFunc() { for $i in (1, 2, 3) return position() }; \n        local:myFunc()'
K2-ForExprWithout-20;PRSC Error: Failed to parse query 'declare function local:func($arg as element()* ) as element()* { for $n in $arg/processing-instruction return $n }; 1 = 1'
K2-ForExprWithout-21;PRSC Error: Failed to parse query 'declare function local:func($arg as element()* ) as element()* { for $n in $arg/processing-instruction return $n }; 1 = 1'
K2-ForExprWithout-22;PRSC Error: Failed to parse query 'declare function local:func($arg as element()* ) as element()* { for $n in $arg/text return $n }; 1 = 1'
K2-ForExprWithout-23;PRSC Error: Failed to parse query 'declare function local:func($arg as element()* ) as element()* { for $n in $arg/typeswitch return $n }; 1 = 1'
K2-ForExprWithout-24;PRSC Error: Failed to parse query 'declare function local:func($arg as element()* ) as element()* { for $n in $arg/if return $n }; 1 = 1'
K2-ForExprWithout-25;PRSC Error: Failed to parse query 'declare function local:func($arg as element()* ) as element()* { for $n in $arg/for return $n }; 1 = 1'
K2-ForExprWithout-26;PRSC Error: Failed to parse query 'declare function local:func($arg as element()* ) as element()* { for $n in $arg/let return $n }; 1 = 1'
K2-ForExprWithout-27;PRSC Error: Failed to parse query 'declare function local:func($arg as element()* ) as element()* { for $n in $arg/declare return $n }; 1 = 1'
K2-ForExprWithout-28;PRSC Error: Failed to parse query 'declare function local:func($arg as element()* ) as element()* { for $n in $arg/some return $n }; 1 = 1'
K2-ForExprWithout-29;PRSC Error: Failed to parse query 'declare function local:func($arg as element()* ) as element()* { for $n in $arg/child return $n }; 1 = 1'
K2-ForExprWithout-3;Expected executing the XPath 'declare function local:myFunc() { for $i in (1, 2, 3) return position() }; 1' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare function local:myFunc() { for $i in (1, 2, 3) return position() }; 1 = 1'
K2-ForExprWithout-30;PRSC Error: Failed to parse query 'declare function local:func($arg as element()* ) as element()* { for $n in $arg/ordered return $n }; 1 = 1'
K2-ForExprWithout-31;PRSC Error: Failed to parse query 'declare function local:func($arg as element()* ) as element()* { for $n in $arg/unordered return $n }; 1 = 1'
K2-ForExprWithout-32;PRSC Error: Failed to parse query 'declare function local:func($arg as element()* ) as element()* { for $n in $arg/schema-attribute return $n }; 1 = 1'
K2-ForExprWithout-33;PRSC Error: Failed to parse query 'declare function local:func($arg as element()* ) as element()* { for $n in $arg/schema-element return $n }; 1 = 1'
K2-ForExprWithout-34;PRSC Error: Failed to parse query 'declare function local:func($arg as element()* ) as element()* { for $n in $arg/item return $n }; 1 = 1'
K2-ForExprWithout-35;PRSC Error: Failed to parse query 'declare function local:func($arg as element()* ) as element()* { for $n in $arg/following-sibling return $n }; 1 = 1'
K2-ForExprWithout-36;PRSC Error: Failed to parse query 'declare function local:func($arg as element()* ) as element()* { for $n in $arg/validate return $n }; 1 = 1'
K2-ForExprWithout-37;PRSC Error: Failed to parse query 'declare function local:func($arg as element()* ) as element()* { for $n in $arg/instance return $n }; 1 = 1'
K2-ForExprWithout-38;PRSC Error: Failed to parse query 'declare function local:func($arg as element()* ) as element()* { for $n in $arg/castable return $n }; 1 = 1'
K2-ForExprWithout-39;PRSC Error: Failed to parse query 'declare function local:func($arg as element()* ) as element()* { for $n in $arg/import return $n }; 1 = 1'
K2-ForExprWithout-4;Expected error code: XPDY0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:myFunc() { for $i at $p in (1, 2, 3) return position() }; local:myFunc()'
K2-ForExprWithout-40;Expected error code: XPDY0002. Query succeeded with result: 
K2-ForExprWithout-41;Expected error code: XPDY0002. Query succeeded with result: 
K2-ForExprWithout-42;PRSC Error: Failed to parse query 'for $n in attribute return {()} return 1 = 1'
K2-ForExprWithout-43;PRSC Error: Failed to parse query 'for $n in element return {()} return 1 = 1'
K2-ForExprWithout-44;PRSC Error: Failed to parse query 'for $n in processing-instruction return {()} return 1 = 1'
K2-ForExprWithout-45;Expected executing the XPath 'for $n in attribute return 1' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPath for $n in attribute return 1 to resolve to 1
K2-ForExprWithout-5;Expected executing the XPath 'declare function local:myFunc() { for $i at $p in (1, 2, 3) return position() }; 1' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare function local:myFunc() { for $i at $p in (1, 2, 3) return position() }; 1 = 1'
K2-ForExprWithout-6;PRSC Error: Failed to parse query 'for $ti in <ti><rangeDate><initDate>17880505</initDate><terminatingDate>19550505</terminatingDate></rangeDate></ti> return <result> { fn:min(if ($ti/singleDate) then let $tmp:=$ti/singleDate/compute return xs:date(fn:concat(fn:substring($tmp, 1, 4), "-", fn:substring($tmp, 5, 2), "-", fn:substring($tmp, 7, 2))) else let $tmp:=$ti/rangeDate/initDate return xs:date(fn:concat(fn:substring($tmp, 1, 4), "-", fn:substring($tmp, 5, 2), "-", fn:substring($tmp, 7, 2)))) } </result>'
K2-ForExprWithout-7;Expected error code: XPDY0002. Query succeeded with result: 
K2-ForExprWithout-8;PRSC Error: Failed to parse query '(for $d in <people> <person id="person0"> <name>First</name> </person> <person> <name>Second</name> </person> </people>/person return if (some $id in 1 satisfies typeswitch ($d/@id) case $n as node() return $d/@id = "person0" default $d return ()) then $d/name else ())'
K2-FunctionCallExpr-1;PRSC Error: Failed to parse query '\n        declare function local:bar($c, $d, $e, $f, $g, $h, $i, $j, $a, $b) { 1 }; \n        declare function local:moo($k) { $k }; \n        local:moo(1) = 1'
K2-FunctionCallExpr-10;PRSC Error: Failed to parse query '\n        declare variable $a := <a/>; \n        declare function local:testSingleNodeIdentity($node as node()) { $node is $node }; \n        declare function local:testDoubleNodeIdentity($a as node(), $b as node()) { $a is $b }; \n        local:testSingleNodeIdentity(<a/>), local:testDoubleNodeIdentity(<a/>, <b/>), local:testDoubleNodeIdentity($a, $a)\n      '
K2-FunctionCallExpr-11;PRSC Error: Failed to parse query '\n        declare function local:compare($arg1 as xs:string, $arg2 as xs:string) { \n            let $cps1 := string-to-codepoints($arg1), \n            $cps2 := string-to-codepoints($arg2) \n            return abs(count($cps1) - count($cps2)) + sum(for $x in 1 to min((count($cps1), count($cps2))) \n                                                          return if ($cps1[$x] ne $cps2[$x]) then 1 else ()) }; \n        local:compare("", ""), \n        local:compare("a", ""), \n        local:compare("", "a"), \n        local:compare("a", "a"), \n        local:compare("", "aa"), \n        local:compare("aa", "ab"), \n        local:compare("ba", "ba"), \n        local:compare("bab", "bbb"), \n        local:compare("aba", "bab")\n     '
K2-FunctionCallExpr-12;PRSC Error: Failed to parse query '\n        declare function local:func1() { if(local:func2('b')) then 3 else local:func1() }; \n        declare function local:func2($a) { if(matches("",$a)) then () else 4 }; \n        local:func1() = 3'
K2-FunctionCallExpr-13;PRSC Error: Failed to parse query 'declare function local:foo($arg) { local:foo(local:foo(1)) }; 1 = 1'
K2-FunctionProlog-1;PRSC Error: Failed to parse query '\n        declare function local:myFunction($arg as xs:integer) as xs:integer { ((if($arg eq 1) then 1 else $arg - 1), current-time())[1] treat as xs:integer };\n        local:myFunction(1) eq local:myFunction(2)'
K2-FunctionProlog-10;PRSC Error: Failed to parse query 'declare default function namespace "http://example.com";\n        declare function _() { 1 };\n        _() = 1'
K2-FunctionProlog-11;PRSC Error: Failed to parse query '\n        declare function local:_() { 1 };\n        local:_() = 1'
K2-FunctionProlog-12;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:_($arg as node()) { $arg };\n        local:_(1)'
K2-FunctionProlog-13;Expected executing the XPath 'declare function local:_($arg as attribute()?) { 1 };\n        local:_(1)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n        declare function local:_($arg as attribute()?) { 1 };\n        local:_(1) = 1'
K2-FunctionProlog-14;Expected executing the XPath 'declare function local:myFunc() { e };\n        <e/>/local:myFunc()/1' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XPDY0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '       declare function local:myFunc() { e };\n        <e/>/local:myFunc()/1'
K2-FunctionProlog-15;PRSC Error: Failed to parse query 'declare variable $var1 := let $var1 := 1 return 1;\n        $var1 eq 1'
K2-FunctionProlog-16;Expected executing the XPath 'declare function local:myFunction() as item()* {***};\n        1' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n        declare function local:myFunction() as item()* {***};\n        1 = 1'
K2-FunctionProlog-17;PRSC Error: Failed to parse query '       declare function local:func() as xs:integer { <e>1</e> };\n        local:func() = 1'
K2-FunctionProlog-18;PRSC Error: Failed to parse query '\n        declare function local:func() as xs:integer { attribute name {"1"} };\n        local:func() = 1'
K2-FunctionProlog-19;PRSC Error: Failed to parse query '\n        declare function local:func() as xs:integer { document {"1"} };\n        local:func() = 1'
K2-FunctionProlog-2;PRSC Error: Failed to parse query '\n        declare function local:myFunction($arg as xs:integer) as xs:integer { ((if($arg eq 1) then 1 else $arg - 1), current-time())[1] treat as xs:integer };\n        not(local:myFunction(1) ne local:myFunction(2))'
K2-FunctionProlog-20;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '       declare function local:func() as xs:integer { <!--1--> };\n        local:func()'
K2-FunctionProlog-21;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '       declare function local:func() as xs:integer { <?target 1?> };\n        local:func()'
K2-FunctionProlog-22;PRSC Error: Failed to parse query '\n        declare function local:func() as xs:integer? { text {"1"} };\n        local:func() = 1'
K2-FunctionProlog-23;PRSC Error: Failed to parse query '\n        declare function local:recursiveFunction($i as xs:integer) as xs:integer { if($i eq 5) then $i else local:recursiveFunction($i + 1) };\n        declare function local:proxy() as xs:integer { local:recursiveFunction(0) + 3 };\n        local:proxy() = 8'
K2-FunctionProlog-24;Expected error code: FORG0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '       declare function local:distinct-nodes-stable ($arg as node()*) as xs:boolean* { for $a in $arg return $a };\n        local:distinct-nodes-stable((<element1/>,<element2/>))'
K2-FunctionProlog-25;PRSC Error: Failed to parse query '       declare function local:myFunc($recurse as xs:integer) { attribute {concat("name", $recurse)} {()} , if ($recurse = 0) then () else local:myFunc($recurse - 1) };\n        <e> { local:myFunc((2, current-time())[1] treat as xs:integer) } </e>'
K2-FunctionProlog-26;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '       declare function local:myFunc() as element(foo) { <bar/> };\n        local:myFunc()'
K2-FunctionProlog-27;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '       declare function local:myFunc() as attribute(foo) { <foo/> };\n        local:myFunc()'
K2-FunctionProlog-28;PRSC Error: Failed to parse query '\n        declare function local:levenshtein($arg1 as xs:string, $arg2 as xs:string) as xs:decimal { if(string-length($arg1) = 0) then string-length($arg2) else if(string-length($arg2) = 0) then string-length($arg1) else min((local:levenshtein(substring($arg1, 2), $arg2) + 1, local:levenshtein($arg1, substring($arg2, 2)) + 1, local:levenshtein(substring($arg1, 2), substring($arg2, 2)) + (if(substring($arg1, 1, 1) = substring($arg2, 1, 1)) then 0 else 1))) };\n        local:levenshtein("a", "a"), local:levenshtein("aa", "aa"), local:levenshtein("aaa", "aaa"), local:levenshtein("aa a", "aa a"), local:levenshtein("a a a", "aaa"), local:levenshtein("aaa", "a a a"), local:levenshtein("aaa", "aaab"), local:levenshtein("978", "abc")'
K2-FunctionProlog-29;Expected error code: XPDY0002. Query succeeded with result: 
K2-FunctionProlog-3;PRSC Error: Failed to parse query '\n        declare function local:myFunction($arg as xs:integer) as xs:integer { ((if($arg eq 1) then 1 else $arg - 1), current-time())[1] treat as xs:integer };\n        local:myFunction(1) = local:myFunction(2)'
K2-FunctionProlog-30;Expected executing the XPath 'declare function local:foo($arg) as xs:boolean { $arg };\n        local:foo(<e/>)' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: FORG0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '       declare function local:foo($arg) as xs:boolean { $arg };\n        local:foo(<e/>)'
K2-FunctionProlog-31;PRSC Error: Failed to parse query '       declare function local:foo($arg) as xs:boolean* { $arg };\n        local:foo((<e>true</e>, true(), xs:untypedAtomic("false"), false(), <e> true </e>))'
K2-FunctionProlog-32;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:foo($arg ) as xs:boolean* { $arg };\n        local:foo(current-date())'
K2-FunctionProlog-33;PRSC Error: Failed to parse query '       declare function local:foo($arg ) as xs:boolean* { $arg };\n        local:foo((<e>true</e>, true(), xs:untypedAtomic("false"), false(), <e> true </e>))'
K2-FunctionProlog-34;PRSC Error: Failed to parse query '\n        declare function local:foo($arg) as xs:boolean* { $arg };\n        local:foo((true(), xs:untypedAtomic("false"))), local:foo((false(), xs:untypedAtomic("false")))'
K2-FunctionProlog-35;PRSC Error: Failed to parse query '\n        declare function local:foo($arg) as xs:boolean* { $arg };\n        local:foo(xs:untypedAtomic("false"))'
K2-FunctionProlog-36;PRSC Error: Failed to parse query '\n        declare function local:foo($arg) as xs:boolean { $arg };\n        local:foo(xs:untypedAtomic("false"))'
K2-FunctionProlog-37;PRSC Error: Failed to parse query '       declare function local:foo($arg ) as xs:boolean* { $arg };\n        local:foo((<e>true</e>, true(), xs:untypedAtomic("false"), false(), <e> true </e>))'
K2-FunctionProlog-38;Expected error code: XPST0017. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:foo() as xs:boolean { text {local:doesNotExist()} };\n        1'
K2-FunctionProlog-39;PRSC Error: Failed to parse query '\n        declare variable $A:=(<A>{local:functionA()}</A>);\n        declare function local:functionA() as element() { <input>testing ...</input> };\n        declare function local:functionB ( ) as xs:string { xs:string($A) };\n        local:functionB()'
K2-FunctionProlog-4;PRSC Error: Failed to parse query '\n        declare function local:myFunction($arg as xs:integer) as xs:integer { ((if($arg eq 1) then 1 else $arg - 1), current-time())[1] treat as xs:integer };\n        not(local:myFunction(1) != local:myFunction(2))'
K2-FunctionProlog-40;PRSC Error: Failed to parse query '\n        declare variable $A:=(<A>{local:functionA()}</A>);\n        declare function local:functionA() as element() { <input>testing ...</input> };\n        declare function local:functionB ( ) as xs:string { $A };\n        local:functionB()'
K2-FunctionProlog-5;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:myFunction($arg as xs:integer) { $arg };\n        local:myFunction(1.0)'
K2-FunctionProlog-6;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:myFunction() as xs:integer { 1.0 };\n        local:myFunction()'
K2-FunctionProlog-7;PRSC Error: Failed to parse query '\n        declare function local:myFunction() as xs:float { 4.0 };\n        (current-time(), 1, 2, "a string", local:myFunction(), 4.0, xs:double("NaN"), current-date())[5] instance of xs:float\n      '
K2-FunctionProlog-8;PRSC Error: Failed to parse query '\n        declare function local:myFunction($arg as xs:integer) as xs:integer { if($arg eq 1) then $arg else local:myFunction3($arg - 1) };\n        declare function local:myFunction2($arg as xs:integer) as xs:integer { local:myFunction($arg) };\n        declare function local:myFunction3($arg as xs:integer) as xs:integer { local:myFunction2($arg) };\n        local:myFunction3(3) eq 1'
K2-FunctionProlog-9;PRSC Error: Failed to parse query '\n        declare function local:multiplySequence($input as xs:integer*) as xs:integer { if (empty($input)) then 1 else $input[1] * local:multiplySequence($input[position() != 1]) };\n        local:multiplySequence((1, 2, 3, 4, 5)) = 120'
K2-GenCompEq-1;PRSC Error: Failed to parse query '\n         declare variable $vA as xs:string := ("B STRING", current-time(), string(<e>content</e>))[1] treat as xs:string; \n         declare variable $vB as xs:string := ("b string", current-time(), string(<e>content</e>))[1] treat as xs:string; \n         (lower-case($vA) = lower-case($vB))'
K2-GenCompEq-2;PRSC Error: Failed to parse query '\n         declare variable $vA as xs:string := ("B STRING", current-time(), string(<e>content</e>))[1] treat as xs:string; \n         declare variable $vB as xs:string := ("b string", current-time(), string(<e>content</e>))[1] treat as xs:string; \n         (upper-case($vA) = upper-case($vB))'
K2-GenCompEq-3;PRSC Error: Failed to parse query '\n         declare variable $vA as xs:string := ("B STRING", current-time(), string(<e>content</e>))[1] treat as xs:string; \n         declare variable $vB as xs:string := ("no match", current-time(), string(<e>content</e>))[1] treat as xs:string; \n         (lower-case($vA) = lower-case($vB))'
K2-GenCompEq-4;PRSC Error: Failed to parse query '\n         declare variable $vA as xs:string := ("B STRING", current-time(), string(<e>content</e>))[1] treat as xs:string; \n         declare variable $vB as xs:string := ("no match", current-time(), string(<e>content</e>))[1] treat as xs:string; \n         (upper-case($vA) = upper-case($vB))'
K2-GenCompEq-5;PRSC Error: Failed to parse query '\n         declare variable $vA as xs:string := ("B STRING", current-time(), string(<e>content</e>))[1] treat as xs:string; \n         declare variable $vB as xs:string := ("b string", current-time(), string(<e>content</e>))[1] treat as xs:string; \n         (upper-case($vA) = lower-case($vB))'
K2-GenCompEq-6;PRSC Error: Failed to parse query '\n         declare variable $vA as xs:string := ("B STRING", current-time(), string(<e>content</e>))[1] treat as xs:string; \n         declare variable $vB as xs:string := ("b string", current-time(), string(<e>content</e>))[1] treat as xs:string; \n         (lower-case($vA) = upper-case($vB))'
K2-GenCompEq-8;Expected executing the XPath 'empty(for $b in <e/> where $b/@id="person0" return ())' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'empty(for $b in <e/> where $b/@id="person0" return ())'
K2-GenCompLT-1;PRSC Error: Failed to parse query '<e>1.1</e> < 3'
K2-GenCompLT-2;PRSC Error: Failed to parse query '3. < <e>1.1</e>'
K2-GenCompLT-3;PRSC Error: Failed to parse query '<e>1.1</e> < 3.'
K2-GenCompLT-4;PRSC Error: Failed to parse query '3 < <e>1.1</e>'
K2-GenCompLT-5;PRSC Error: Failed to parse query '<e>1.1</e> < 3e3'
K2-GenCompLT-6;PRSC Error: Failed to parse query '3e3 < <e>1.1</e>'
K2-GenCompLT-7;PRSC Error: Failed to parse query '<e>1.1</e> < xs:float(3e3)'
K2-GenCompLT-8;PRSC Error: Failed to parse query 'xs:float(3e3) < <e>1.1</e>'
K2-InternalVariablesWith-1;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $var1 as xs:string := 1 treat as item(); $var1'
K2-InternalVariablesWithout-1;Expected error code: XQST0054. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare variable $local:myVar := local:myFunction(); \n        declare function local:myFunction() { local:myFunction(), 1, $local:myVar }; \n        $local:myVar\n      '
K2-InternalVariablesWithout-10;PRSC Error: Failed to parse query 'declare variable $local:myVar := local:myFunc(3); declare function local:myFunc($local:myVar) { $local:myVar }; local:myFunc(6) = 6'
K2-InternalVariablesWithout-11;Expected executing the XPath 'declare variable $local:myVar := local:thisFunctionDoesNotExist(); 1' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare variable $local:myVar := local:thisFunctionDoesNotExist(); 1 = 1'
K2-InternalVariablesWithout-12;Expected error code: XPST0017. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $local:myVar := local:thisFunctionDoesNotExist(); $local:myVar'
K2-InternalVariablesWithout-13;PRSC Error: Failed to parse query 'declare variable $local:var1 := 1; declare variable $local:var2 := 2; declare variable $local:var3 := 3; declare variable $local:var4 := 4; declare variable $local:var5 := 5; declare variable $local:var6 := 6; declare variable $local:var7 := 7; declare variable $local:var8 := 8; declare variable $local:var9 := 9; declare variable $local:var10 := 10; declare variable $local:var11 := 11; declare variable $local:var12 := 12; declare variable $local:var13 := 13; declare variable $local:var14 := 14; declare variable $local:var15 := 15; declare variable $local:var16 := 16; declare variable $local:var17 := 17; declare variable $local:var18 := 18; declare variable $local:var19 := 19; declare variable $local:var20 := 20; deep-equal((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20), ($local:var1, $local:var2, $local:var3, $local:var4, $local:var5, $local:var6, $local:var7, $local:var8, $local:var9, $local:var10, $local:var11, $local:var12, $local:var13, $local:var14, $local:var15, $local:var16, $local:var17, $local:var18, $local:var19, $local:var20))'
K2-InternalVariablesWithout-14;Expected error code: XPDY0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $myVar := <e>{nametest}</e>; <e/>/$myVar'
K2-InternalVariablesWithout-1a;Expected error code: XQDY0054. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare variable $local:myVar := local:myFunction();\n        declare function local:myFunction() {\n            if (current-date() lt xs:date('1990-01-01')) then local:myFunction() else (), 1, $local:myVar\n                                             };\n        $local:myVar\n      '
K2-InternalVariablesWithout-1b;PRSC Error: Failed to parse query '\n         declare variable $local:myVar := local:myFunction();\n         declare function local:myFunction() {\n           if (current-date() lt xs:date('1990-01-01')) then $local:myVar + 1 else 22\n         };\n         $local:myVar\n       = 22'
K2-InternalVariablesWithout-1c;Expected error code: XQDY0054. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         declare variable $local:myVar := local:myFunction();\n         declare function local:myFunction() {\n         if (current-date() gt xs:date('1990-01-01')) then $local:myVar + 1 else 22\n         };\n         $local:myVar\n      '
K2-InternalVariablesWithout-2;Expected error code: XQST0054. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare variable $local:myVar := local:myFunction(); \n        declare function local:myFunction() { $local:myVar, 1, local:myFunction() }; \n        $local:myVar\n      '
K2-InternalVariablesWithout-2a;Expected error code: XQDY0054. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare variable $local:myVar := local:myFunction();\n        declare function local:myFunction() { $local:myVar, 1, local:myFunction() };\n        $local:myVar\n      '
K2-InternalVariablesWithout-3;Expected error code: XQST0054. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $local:myVar := local:myFunction(); declare function local:myFunction() { $local:myVar, 1, local:myFunction() }; $local:myVar'
K2-InternalVariablesWithout-3a;Expected error code: XQDY0054. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $local:myVar := local:myFunction(); declare function local:myFunction() { $local:myVar, 1, local:myFunction() }; $local:myVar'
K2-InternalVariablesWithout-4;Expected error code: XQST0054. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $local:myVar := local:myFunction(); declare function local:myFunction() { $local:myVar, 1, local:myFunction() }; $local:myVar'
K2-InternalVariablesWithout-4a;Expected error code: XQDY0054. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $local:myVar := local:myFunction(); declare function local:myFunction() { $local:myVar, 1, local:myFunction() }; $local:myVar'
K2-InternalVariablesWithout-5;Expected error code: XQST0054. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $local:myVar := local:myFunction(); declare function local:myFunction2() { $local:myVar, 1, local:myFunction() }; declare function local:myFunction() { local:myFunction2() }; $local:myVar'
K2-InternalVariablesWithout-5a;Expected error code: XQDY0054. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $local:myVar := local:myFunction(); declare function local:myFunction2() { $local:myVar, 1, local:myFunction() }; declare function local:myFunction() { local:myFunction2() }; $local:myVar'
K2-InternalVariablesWithout-6;Expected error code: XQST0054. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $local:myVar := local:myFunction(); declare function local:myFunction2() { local:myFunction(), $local:myVar }; declare function local:myFunction() { local:myFunction2() }; local:myFunction()'
K2-InternalVariablesWithout-6a;Expected error code: XQDY0054. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $local:myVar := local:myFunction();\n\n         declare function local:myFunction2() {\n            if (current-date() lt xs:date('1990-01-01')) then local:myFunction() else (), $local:myVar };\n\n         declare function local:myFunction() {\n         local:myFunction2() };\n\n         local:myFunction()'
K2-InternalVariablesWithout-7;Expected error code: XQST0054. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $local:myVar := local:myFunction(); declare function local:myFunction2() { local:myFunction(), $local:myVar }; declare function local:myFunction4() { local:myFunction2() }; declare function local:myFunction3() { local:myFunction4() }; declare function local:myFunction() { local:myFunction3() }; local:myFunction()'
K2-InternalVariablesWithout-7a;Expected error code: XQDY0054. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $local:myVar := local:myFunction();\n         declare function local:myFunction2() {\n         if (current-date() lt xs:date('1990-01-01')) then local:myFunction() else (), $local:myVar };\n\n         declare function local:myFunction4() {\n            local:myFunction2() };\n\n         declare function local:myFunction3() {\n            local:myFunction4() };\n\n         declare function local:myFunction() {\n            local:myFunction3() };\n\n         local:myFunction()'
K2-InternalVariablesWithout-8;Expected error code: XQST0054. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $local:myVar := local:myFunction(); declare function local:myFunction2() { local:myFunction4() }; declare function local:myFunction4() { local:myFunction2(), $local:myVar }; declare function local:myFunction3() { local:myFunction4() }; declare function local:myFunction() { local:myFunction3() }; local:myFunction()'
K2-InternalVariablesWithout-8a;Expected error code: XQDY0054. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $local:myVar := local:myFunction();\n\n         declare function local:myFunction2() { local:myFunction4() };\n\n         declare function local:myFunction4() {\n         if (current-date() lt xs:date('1990-01-01')) then local:myFunction2() else (), $local:myVar };\n\n         declare function local:myFunction3() { local:myFunction4() };\n\n         declare function local:myFunction() { local:myFunction3() };\n\n         local:myFunction()'
K2-InternalVariablesWithout-9;Expected error code: XQST0054. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $local:myVar := local:myFunc(3); declare function local:myFunc($arg) { local:myFunc($local:myVar) }; $local:myVar'
K2-InternalVariablesWithout-9a;Expected error code: XQDY0054. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $local:myVar := local:myFunc(3); declare function local:myFunc($arg) { local:myFunc($local:myVar) }; $local:myVar'
K2-IRIToURIfunc-5;Type casting to XsAnyUri has not been implemented yet.
K2-LetExprWithout-1;PRSC Error: Failed to parse query 'deep-equal((<b/>, <b/>, <b/>, <b/>), (for $v1 in (1, 2, 3, 4) let $v2 := <b/> return ($v2))/.)'
K2-LetExprWithout-10;Expected error code: XPTY0004. Query succeeded with result: 1.1
K2-LetExprWithout-11;Expected error code: XPTY0004. Query succeeded with result: 1
K2-LetExprWithout-12;Expected error code: XPTY0004. Query succeeded with result: 1
K2-LetExprWithout-13;Expected error code: XPTY0004. Query succeeded with result: 3
K2-LetExprWithout-14;Expected error code: XPTY0004. Query succeeded with result: a string
K2-LetExprWithout-15;Expected XPathException with code XPTY0004, but got Type casting to XsAnyUri has not been implemented yet.
K2-LetExprWithout-16;PRSC Error: Failed to parse query 'declare variable $e := <e/>; for $i in (<a/>, $e, <c/>) return $i is $e'
K2-LetExprWithout-17;Expected executing the XPath 'declare function local:function() { let $b := (i/a) return () }; empty(local:function())' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare function local:function() { let $b := (i/a) return () }; empty(local:function())'
K2-LetExprWithout-18;PRSC Error: Failed to parse query 'declare function local:foo($a as xs:integer) { if($a = 3) then $a else let $a := $a return local:foo($a + 1) }; local:foo(1) = 3'
K2-LetExprWithout-2;PRSC Error: Failed to parse query 'deep-equal((<b/>, <b/>, <b/>, <b/>), (for $v1 in (1, 2, 3, 4) let $v2 := <b/> return ($v2)))'
K2-LetExprWithout-20;PRSC Error: Failed to parse query '\n        let $emps := //employee[location = "Denver"] \n        for $d in distinct-values($emps/deptno) \n        let $e := $emps[deptno = $d] \n        return <dept> <deptno>{$d}</deptno> <headcount> {count($e)} </headcount> <payroll> {sum($e/salary)} </payroll> </dept>\n      '
K2-LetExprWithout-21;PRSC Error: Failed to parse query '<e/>/(for $b in 1, $i in self::node() return $i)'
K2-LetExprWithout-22;PRSC Error: Failed to parse query '<e/>/(for $i in self::node() return $i)'
K2-LetExprWithout-23;PRSC Error: Failed to parse query 'count(<e/>/(let $i := . return (string($i), data($i)))) = 2'
K2-LetExprWithout-24;Expected executing the XPath 'declare function local:function() { let $b := (i/a) return 1 }; local:function()' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare function local:function() { let $b := (i/a) return 1 }; local:function() = 1'
K2-LetExprWithout-26;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'let $e := <element/>, $outer as element() := $e/element() return $outer'
K2-LetExprWithout-3;Expected error code: XPDY0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:myFunc() { let $v := . return $v }; local:myFunc()'
K2-LetExprWithout-4;Expected error code: XPDY0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:myFunc($arg as node()) { let $v := . return $arg/$v }; local:myFunc(<e/>)'
K2-LetExprWithout-5;Expected error code: XPDY0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:myFunc($arg as node()) { let $v := aNameTest return $arg/$v }; local:myFunc(<e/>)'
K2-LetExprWithout-6;Expected executing the XPath 'declare function local:myFunc($arg as node()) { let $v := aNameTest return $arg/$v }; 1' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare function local:myFunc($arg as node()) { let $v := aNameTest return $arg/$v }; 1 = 1'
K2-LetExprWithout-7;Expected error code: XPTY0004. Query succeeded with result: 1
K2-LetExprWithout-9;Expected error code: XPTY0004. Query succeeded with result: 1.1
K2-Literals-1;Expected error code: XQST0090. Query succeeded with result: &#x00;
K2-Literals-10;Expected executing the XPathe10' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse querye10'
K2-Literals-12;Expected XPath 0e0 to resolve to 0, but instead got -0
K2-Literals-13;Value was either too large or too small for a Decimal.
K2-Literals-14;Expected XPath 0.0 to resolve to 0, but instead got 0.0
K2-Literals-16;Expected error code: XQST0090. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<p>FA&#xFF000000F6;IL</p>'
K2-Literals-17;Expected error code: XQST0090. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<p>FA&#4294967542;IL</p>'
K2-Literals-18;Expected error code: XQST0090. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<p>FA&#xFFFFFFFF000000F6;IL</p>'
K2-Literals-19;Expected error code: XQST0090. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<p>FA&#18446744073709551862;IL</p>'
K2-Literals-2;Expected error code: XPST0003. Query succeeded with result: &
K2-Literals-22;Expected error code: XPST0003. Query succeeded with result: &#x-20;
K2-Literals-23;Expected error code: XPST0003. Query succeeded with result: &#-20;
K2-Literals-24;Expected error code: XPST0003. Query succeeded with result: &#x+20;
K2-Literals-25;Expected error code: XPST0003. Query succeeded with result: &#+20;
K2-Literals-26;Expected error code: XPST0003. Query succeeded with result: &#2A0;
K2-Literals-27;Expected error code: XPST0003. Query succeeded with result: &#xW20;
K2-Literals-29;Expected error code: XPST0003. Query succeeded with result: &#0xA;
K2-Literals-3;Expected XPath "&#0000045;" to resolve to -, but instead got &#0000045;
K2-Literals-35;Expected executing the XPath 'module namespace prefix = "http://example.com"; declare function prefix:myFunction() { 1 };' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'let $result := (module namespace prefix = "http://example.com"; declare function prefix:myFunction() { 1 };) return true()'
K2-Literals-36;Expected executing the XPath 'module namespace prefix = "http://www.example.com/";' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'let $result := (module namespace prefix = "http://www.example.com/";) return true()'
K2-Literals-37;Expected error code: XPDY0002. Query succeeded with result: 
K2-Literals-38;Expected error code: XPDY0002. Query succeeded with result: 
K2-Literals-4;Expected executing the XPath '999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: Overflow when creating a Int64 from 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.
K2-Literals-5;Expected executing the XPath '-999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: Overflow when creating a Int64 from 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.
K2-Literals-6;Expected executing the XPath '999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.1' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: Overflow when creating a Decimal from 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.1.
K2-Literals-8;Expected executing the XPath '999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999E100000000000000000000000000000000000000000000000000000000' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPath 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999E100000000000000000000000000000000000000000000000000000000 to resolve to INF, but instead got Infinity
K2-Literals-9;Expected executing the XPath '-999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999E100000000000000000000000000000000000000000000000000000000' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPath -999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999E100000000000000000000000000000000000000000000000000000000 to resolve to -INF, but instead got -Infinity
K2-MatchesFunc-1;The function fn:matches with arity 3 is not registered.
K2-MatchesFunc-10;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
K2-MatchesFunc-11;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
K2-MatchesFunc-12;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
K2-MatchesFunc-13;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
K2-MatchesFunc-14;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
K2-MatchesFunc-15;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
K2-MatchesFunc-16;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
K2-MatchesFunc-16a;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
K2-MatchesFunc-17;The function matches with arity 3 is not registered.
K2-MatchesFunc-2;The function fn:matches with arity 3 is not registered.
K2-MatchesFunc-3;The function fn:matches with arity 3 is not registered.
K2-MatchesFunc-4;The function fn:matches with arity 3 is not registered.
K2-MatchesFunc-5;The function fn:matches with arity 3 is not registered.
K2-MatchesFunc-6;The function fn:matches with arity 3 is not registered.
K2-MatchesFunc-7;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
K2-MatchesFunc-8;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
K2-MatchesFunc-9;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
K2-NamespaceProlog-1;Expected error code: XQST0033. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace myPrefix = "http://example.com/"; declare namespace myPrefix = ""; 1'
K2-NamespaceProlog-10;Expected error code: XPST0081. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace local = ""; local:untypedAtomic("string")'
K2-NamespaceProlog-11;Expected error code: XPST0081. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace fn = ""; fn:untypedAtomic("string")'
K2-NamespaceProlog-12;Expected error code: XPST0081. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace xsi = ""; xsi:untypedAtomic("string")'
K2-NamespaceProlog-13;PRSC Error: Failed to parse query '<e/>/<e a="{p:asd}" xmlns:p="http://example.com/asd"/>'
K2-NamespaceProlog-15;Expected error code: XQST0070. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace xml = "http://example.com/"; 1'
K2-NamespaceProlog-2;Expected error code: XQST0033. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace myPrefix = ""; declare namespace myPrefix = "http://example.com/"; 1'
K2-NamespaceProlog-3;Expected error code: XQST0033. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace myPrefix = "http://example.com/"; declare namespace myPrefix = "http://example.com/TheSecondOne"; declare namespace myPrefix = ""; 1'
K2-NamespaceProlog-4;Expected error code: XPST0081. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace xs = ""; xs:integer(1)'
K2-NamespaceProlog-5;PRSC Error: Failed to parse query 'declare namespace thisPrefixIsNotBoundExampleCom = ""; true()'
K2-NamespaceProlog-6;Expected error code: XQST0070. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace xml = ""; 1'
K2-NamespaceProlog-7;Expected error code: XQST0070. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace xmlns = ""; 1'
K2-NamespaceProlog-8;Expected error code: XPST0081. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace xdt = ""; xdt:untypedAtomic("string")'
K2-NamespaceProlog-9;Expected error code: XPST0081. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace xs = ""; xs:untypedAtomic("string")'
K2-NamespaceURIFromQNameFunc-1;PRSC Error: Failed to parse query '\n        declare namespace ns = "http://example.com/ANamespace"; \n        string(<name xmlns:ns="http://example.com/BNamespace">{namespace-uri-from-QName("ns:foo" cast as xs:QName)}</name>)\n      '
K2-NamespaceURIFromQNameFunc-2;PRSC Error: Failed to parse query '\n        <e xmlns="http://example.com/"> {namespace-uri-from-QName(node-name(element anElement{"text"}))} </e>/string()\n      '
K2-NamespaceURIFromQNameFunc-3;PRSC Error: Failed to parse query '\n        declare default element namespace "http://example.com/"; \n        <e xmlns="">{namespace-uri-from-QName(xs:QName("l"))}</e>/string()\n       = ""'
K2-NamespaceURIFromQNameFunc-4;PRSC Error: Failed to parse query '\n        declare default element namespace "http://example.com/"; \n        declare namespace p = "http://example.com/2"; \n        <e xmlns="" xmlns:p="http://example.com/3">[{namespace-uri-from-QName(xs:QName("n1"))}|{namespace-uri-from-QName(xs:QName("p:n2"))}]</e>/text()\n      '
K2-NameTest-11;Expected error code: XPST0081. Query succeeded with result: 
K2-NameTest-12;PRSC Error: Failed to parse query 'declare variable $var := <elem xml:space="default"/>; $var/@xml:space eq "default"'
K2-NameTest-13;PRSC Error: Failed to parse query 'declare variable $var := <elem xml:space="preserve"/>; string(($var/@xml:*)[1])'
K2-NameTest-14;PRSC Error: Failed to parse query 'declare variable $var := <elem>text<a/><!-- a comment --><b/><?target data?><c/><![CDATA[more text]]></elem>; $var/child::*'
K2-NameTest-15;PRSC Error: Failed to parse query 'declare variable $e := <a b ="content"><?b asd?><b/><c b="content"/></a>; $e/b'
K2-NameTest-16;PRSC Error: Failed to parse query 'declare variable $e := <a b ="content"><?b asd?><b/></a>; $e/*'
K2-NameTest-17;PRSC Error: Failed to parse query 'declare variable $e := <a b ="content"><?b asd?><b/></a>; <a>{$e/@b}</a>'
K2-NameTest-18;PRSC Error: Failed to parse query 'declare variable $e := <a b ="content"><?b asd?><b/></a>; <a>{$e/@*}</a>'
K2-NameTest-19;PRSC Error: Failed to parse query 'declare variable $e := <a b ="content"><?b asd?><b/></a>; $e/processing-instruction(b)'
K2-NameTest-20;PRSC Error: Failed to parse query 'declare variable $e := <a b ="content"><?b asd?><b/></a>; <a>{$e/processing-instruction()}</a>'
K2-NameTest-21;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'empty(let $e := <a b ="content"><?b asd?><b/></a> return $e/processing-instruction("123ncname"))'
K2-NameTest-22;PRSC Error: Failed to parse query 'empty(let $e := <a b ="content"><?b asd?><b/></a> return $e/processing-instruction("b "))'
K2-NameTest-23;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'empty(let $e := <a b ="content"><?b asd?><b/></a> return $e/processing-instruction("prefix:b"))'
K2-NameTest-30;PRSC Error: Failed to parse query 'let $result := (\n      	declare namespace a = "http://example.com/1"; \n      	declare namespace b = "http://example.com/2"; \n      	let $e := <e a:n1="content" b:n1="content"> \n      	            <a:n1/> \n      	            <b:n1/> \n      	            <?n1 ?> \n      	            <n1/> \n      	          </e> \n      	return $e/*:n1) return count($result) = 3'
K2-NameTest-31;PRSC Error: Failed to parse query 'let $result := (\n      	declare namespace a = "http://example.com/1"; \n      	declare namespace b = "http://example.com/2"; \n      	let $e := <e a:n1="content" b:n1="content"> \n      				<a:n1/> \n      				<b:n1/> \n      				<?n1 ?> \n      				<n1/> \n      			  </e> \n      	return $e/a:*) return count($result) = 1'
K2-NameTest-32;PRSC Error: Failed to parse query '<a>{<e foo="content2" bar="content1"/>/attribute(foo)}</a>'
K2-NameTest-35;Expected XPathException with code XPST0081, but got No test found in path expression axis
K2-NameTest-36;Expected XPathException with code XPST0081, but got SchemaAttributeTest AST to Expression not yet implemented
K2-NameTest-37;Expected XPathException with code XPST0008, but got No test found in path expression axis
K2-NameTest-38;Expected XPathException with code XPST0008, but got SchemaAttributeTest AST to Expression not yet implemented
K2-NameTest-39;Expected error code: XPST0008. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace e = "http://www.example.com/"; schema-element(e:thisTypeDoesNotExistExample.Com)'
K2-NameTest-40;Expected error code: XPST0008. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace e = "http://www.example.com/"; schema-attribute(e:thisTypeDoesNotExistExample.Com)'
K2-NameTest-41;Expected error code: XPST0081. Query succeeded with result: 
K2-NameTest-42;Expected error code: XPST0081. Query succeeded with result: 
K2-NameTest-43;Expected error code: XPST0081. Query succeeded with result: 
K2-NameTest-44;Expected error code: XPST0081. Query succeeded with result: 
K2-NameTest-45;Expected error code: XPST0081. Query succeeded with result: 
K2-NameTest-46;Expected error code: XPST0081. Query succeeded with result: 
K2-NameTest-47;PRSC Error: Failed to parse query 'declare variable $i := <e > <xmlns/> <xmlns/> <xmlns/> <xmlns/> </e>; $i/xmlns'
K2-NameTest-48;PRSC Error: Failed to parse query 'declare variable $i := <e xmlns="http://example.com/"/>; empty($i/@xmlns)'
K2-NameTest-49;Expected executing the XPath 'declare namespace p = "http://example.com/"; <a>{<e p:a="1" p:b="2" p:c="3"/>/attribute::*/p:*}</a>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare namespace p = "http://example.com/"; <a>{<e p:a="1" p:b="2" p:c="3"/>/attribute::*/p:*}</a>'
K2-NameTest-5;Expected executing the XPath 'declare namespace namespace = "http://example.com"; declare union <union>for gibberish { for $for in for return <for>***div div</for> }</union>, if(if) then then else else- +-++-**-* instance of element(*)* * * **---++div- div -div' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace namespace = "http://example.com"; declare union <union>for gibberish { for $for in for return <for>***div div</for> }</union>, if(if) then then else else- +-++-**-* instance of element(*)* * * **---++div- div -div'
K2-NameTest-50;Expected executing the XPath 'declare namespace p = "http://example.com/"; <a>{document {<p:e/>}/@p:*}</a>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare namespace p = "http://example.com/"; <a>{document {<p:e/>}/@p:*}</a>'
K2-NameTest-51;Expected executing the XPath '<a>{attribute name{"content"}/*}</a>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '<a>{attribute name{"content"}/*}</a>'
K2-NameTest-52;Expected executing the XPath '<a>{comment {"content"}/*}</a>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '<a>{comment {"content"}/*}</a>'
K2-NameTest-53;Expected executing the XPath '<a>{<!-- a comment -->/*}</a>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '<a>{<!-- a comment -->/*}</a>'
K2-NameTest-54;Expected executing the XPath '<a>{processing-instruction name {"content"}/*}</a>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '<a>{processing-instruction name {"content"}/*}</a>'
K2-NameTest-55;Expected executing the XPath '<a>{<?target data?>/*}</a>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '<a>{<?target data?>/*}</a>'
K2-NameTest-56;Expected executing the XPath 'declare variable $a := <e><a/><b/><c/></e>; <a>{$a/*:ncname eq 1}</a>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare variable $a := <e><a/><b/><c/></e>; <a>{$a/*:ncname eq 1}</a>'
K2-NameTest-57;Expected executing the XPath 'declare variable $a := <e><a/><b/><c/></e>; <a>{$a/*:ncname eq 1}</a>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare variable $a := <e><a/><b/><c/></e>; <a>{$a/*:ncname eq 1}</a>'
K2-NameTest-58;Expected executing the XPath 'declare namespace prefix = "http://example.com/"; declare variable $a := <e><a/><b/><c/></e>; <a>{$a/prefix:* eq 1}</a>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare namespace prefix = "http://example.com/"; declare variable $a := <e><a/><b/><c/></e>; <a>{$a/prefix:* eq 1}</a>'
K2-NameTest-59;Expected executing the XPath 'declare namespace prefix = "http://example.com/"; declare variable $a := <e><a/><b/><c/></e>; <a>{$a/@prefix:* eq 1}</a>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare namespace prefix = "http://example.com/"; declare variable $a := <e><a/><b/><c/></e>; <a>{$a/@prefix:* eq 1}</a>'
K2-NameTest-60;Expected executing the XPath 'declare variable $input := <e/>; \n        empty(for $PI as processing-instruction() in $input//processing-instruction() return $PI)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n        declare variable $input := <e/>; \n        empty(for $PI as processing-instruction() in $input//processing-instruction() return $PI)'
K2-NameTest-61;Expected executing the XPath '<e>{for $PI in ()/processing-instruction() return ()}</e>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '<e>{for $PI in ()/processing-instruction() return ()}</e>'
K2-NameTest-62;Expected executing the XPath '<e>{for $PI in <e/>/processing-instruction() return ()}</e>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '<e>{for $PI in <e/>/processing-instruction() return ()}</e>'
K2-NameTest-63;PRSC Error: Failed to parse query '<x> <x> <y id="0"/> </x> <y id="1"/> </x>/descendant-or-self::x/child::y'
K2-NameTest-64;PRSC Error: Failed to parse query '<e>{<e foo="asd"/>/attribute(*, xs:untypedAtomic)}</e>'
K2-NameTest-65;PRSC Error: Failed to parse query '<e>{<e foo="asd"/>/attribute(foo, xs:untypedAtomic)}</e>'
K2-NameTest-66;Expected error code: XPST0081. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<e>{<e foo="asd"/>/attribute(notBound:foo, xs:untypedAtomic)}</e>'
K2-NameTest-67;Expected error code: XPST0081. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<e>{<e foo="asd"/>/attribute(foo, notBound:untypedAtomic)}</e>'
K2-NameTest-68;Expected executing the XPath '<e>{<e foo="1"/>/attribute(foo, xs:integer)}</e>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '<e>{<e foo="1"/>/attribute(foo, xs:integer)}</e>'
K2-NameTest-69;Expected error code: XPST0008. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<e>{<e foo="1"/>/attribute(foo, doesNotExistExampleCom)}</e>'
K2-NameTest-70;Expected error code: XPST0008. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<e>{<e foo="1"/>/attribute(foo, xs:doesNotExistExampleCom)}</e>'
K2-NameTest-71;PRSC Error: Failed to parse query '<e>{<b foo="1"/>/attribute(foo, xs:anyType)}</e>'
K2-NameTest-72;Expected error code: XPST0081. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<e>{<e><b/></e>/element(p:foo)}</e>'
K2-NameTest-73;Expected error code: XPST0081. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<e>{<e><b/></e>/element(foo, notBound:type)}</e>'
K2-NameTest-74;Expected error code: XPST0008. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<e>{<e><b/></e>/element(foo, xs:doesNotExist)}</e>'
K2-NameTest-75;Expected error code: XPST0008. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<e>{<e><b/></e>/element(foo, doesNotExist)}</e>'
K2-NameTest-76;PRSC Error: Failed to parse query '<e><b/></e>/element(b, xs:anyType)'
K2-NameTest-77;PRSC Error: Failed to parse query '<e><b/></e>/element(b, xs:anyType)'
K2-NameTest-78;Expected error code: XPDY0002. Query succeeded with result: 
K2-NameTest-79;Expected error code: XPDY0002. Query succeeded with result: 
K2-NameTest-80;Expected error code: XPDY0002. Query succeeded with result: 
K2-NameTest-81;Expected error code: XPDY0002. Query succeeded with result: 
K2-NameTest-83;Expected error code: XPDY0002. Query succeeded with result: 
K2-NameTest-85;Expected error code: XPDY0002. Query succeeded with result: 
K2-NameTest-86;Expected error code: XPDY0002. Query succeeded with result: 
K2-NameTest-87;Expected error code: XPST0008. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<e>{<e foo="1"/>/attribute(*, doesNotExistExampleCom)}</e>'
K2-NameTest-88;Expected error code: XPST0008. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<e>{<e foo="1"/>/attribute(*, xs:doesNotExistExampleCom)}</e>'
K2-NameTest-89;Expected error code: XPST0008. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<e>{<e foo="1"/>/attribute(*, doesNotExistExampleCom)}</e>'
K2-NameTest-90;Expected error code: XPST0008. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<e>{<e foo="1"/>/attribute(*, xs:doesNotExistExampleCom)}</e>'
K2-NodeRootFunc-1;PRSC Error: Failed to parse query 'fn:root(<e/>)'
K2-NodeRootFunc-2;PRSC Error: Failed to parse query 'empty(fn:root(<e/>/..))'
K2-NodeRootFunc-3;PRSC Error: Failed to parse query 'fn:root(<!-- comment -->)'
K2-NodeRootFunc-4;PRSC Error: Failed to parse query '<e>{fn:root(attribute name {"value"})}</e>'
K2-NodeRootFunc-5;PRSC Error: Failed to parse query 'fn:root(<?target data?>)'
K2-NodeRootFunc-6;PRSC Error: Failed to parse query 'fn:root(text{"text node"})'
K2-NodeRootFunc-7;PRSC Error: Failed to parse query 'fn:root(text{"text node"})'
K2-NodeRootFunc-8;PRSC Error: Failed to parse query 'root(document {()}) instance of document-node()'
K2-NodeSame-1;PRSC Error: Failed to parse query 'declare variable $var := <elem/>; <a>{$var}</a>/elem[1] is $var'
K2-NodeSame-2;PRSC Error: Failed to parse query 'declare variable $var := <elem/>; $var is $var'
K2-NodeSame-3;PRSC Error: Failed to parse query 'declare variable $var := <elem/>; not($var is <elem/>)'
K2-NodeSame-4;PRSC Error: Failed to parse query 'declare variable $e := attribute name {()}; $e is $e, <is/> is <is/>'
K2-NodeSame-5;Expected executing the XPath 'empty(exactly-one(<e/>/*) is exactly-one(<e/>/*))' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'empty(exactly-one(<e/>/*) is exactly-one(<e/>/*))'
K2-NodeSame-6;PRSC Error: Failed to parse query 'empty(zero-or-one(<e/>/*) is zero-or-one(<e/>/*))'
K2-NodeTest-1;Expected executing the XPath 'count(<a></a>/node())' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'count(<a></a>/node()) = 0'
K2-NodeTest-19;Expected error code: XPST0008. Query succeeded with result: 
K2-NodeTest-2;PRSC Error: Failed to parse query 'count(<a/>/node()) = 0'
K2-NodeTest-20;Expected error code: XPST0008. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         declare namespace ex = "http://www.example.com/"; \n         document-node(schema-element(ex:thisTypeIsNotRecognizedExample.Com))'
K2-NodeTest-21;Expected executing the XPath 'declare namespace ex = "http://www.example.com/"; \n         declare function local:userFunction() { document-node(element(local:ncname)) }; 1' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n         declare namespace ex = "http://www.example.com/"; \n         declare function local:userFunction() { document-node(element(local:ncname)) }; 1 = 1'
K2-NodeTest-22;Expected error code: XPST0081. Query succeeded with result: 
K2-NodeTest-23;Expected error code: XPST0081. Query succeeded with result: 
K2-NodeTest-24;Expected error code: XPST0081. Query succeeded with result: 
K2-NodeTest-25;Expected error code: XPST0081. Query succeeded with result: 
K2-NodeTest-26;Expected XPathException with code XPST0081, but got No test found in path expression axis
K2-NodeTest-27;Expected XPathException with code XPST0081, but got SchemaAttributeTest AST to Expression not yet implemented
K2-NodeTest-28;Expected error code: XPDY0050. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<e/>/(/)//f'
K2-NodeTest-29;Expected error code: XPDY0002. Query succeeded with result: 
K2-NodeTest-30;Expected error code: XPDY0002. Query succeeded with result: 
K2-NodeTest-31;Expected error code: XPTY0018. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:aFunction() { <e/>/(1, <e/>) }; 1, local:aFunction()'
K2-NodeTest-32;PRSC Error: Failed to parse query '<e> <a/> <b/> </e>/(if(position() = 10) then (<e/>, .) else 4) = 4'
K2-NodeTest-33;Expected error code: XPTY0018. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $myVariable := <e/>/(1, <e/>); $myVariable'
K2-NodeTest-34;Expected error code: XPTY0018. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $myVariable := <e/>/(<e/>, 2); $myVariable'
K2-NodeTest-35;Expected error code: XPTY0018. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:aFunction() { <e/>/(<e/>, 2) }; 1, local:aFunction()'
K2-NodeTest-36;Expected error code: XPTY0018. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:aFunction() { (1, 2, 3, (4, <e/>/(<e/>, 2))) }; 1, local:aFunction()'
K2-NodeTest-37;Expected error code: XPTY0018. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:aFunction() { (<e/>/., <e/>/((<e/>, 2), 1, 2)) }; 1, local:aFunction()'
K2-NodeTest-38;Expected error code: XPTY0018. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:aFunction() { (<e/>/(., 4, 5, <e/>/((<e/>, 2)))) }; 1, local:aFunction()'
K2-NodeTest-39;Expected error code: XPTY0018. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'let $i := <e/>/(., 4, 5, <e/>/((<e/>, 2))) return ($i, $i)'
K2-NodeTest-40;Expected error code: XPTY0018. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'for $i in <e/>/(., 4, 5, <e/>/((<e/>, 2))) return ($i, $i)'
K2-NodeTest-41;PRSC Error: Failed to parse query '<a><b name="C"/><b name= "D"/></a>//b[@name="D"][last() = 1]'
K2-NumericAdd-2;PRSC Error: Failed to parse query '<a>1</a> + <b>2</b> = 3'
K2-NumericAdd-3;PRSC Error: Failed to parse query '<a foo="1"/>/@foo + <b foo="2"/>/@foo = 3'
K2-NumericDivide-1;Expected error code: FOAR0001. Found error code: FOCA0001 with error message: Overflow when creating a Decimal from Infinity.
K2-NumericDivide-10;Expected XPath +0e0 div +0e0 to resolve to NaN, but instead got Infinity
K2-NumericDivide-11;Expected XPath -0e0 div -0e0 to resolve to NaN, but instead got Infinity
K2-NumericDivide-12;Expected XPath -0e0 div +0e0 to resolve to NaN, but instead got Infinity
K2-NumericDivide-13;Expected XPath +3 div +0e0 to resolve to INF, but instead got Infinity
K2-NumericDivide-14;Expected XPath -3 div +0e0 to resolve to -INF, but instead got -Infinity
K2-NumericDivide-15;Expected XPath +3 div -0e0 to resolve to -INF, but instead got -Infinity
K2-NumericDivide-16;Expected XPath -3 div -0e0 to resolve to INF, but instead got Infinity
K2-NumericDivide-17;PRSC Error: Failed to parse query 'empty(<e/>/(div div div))'
K2-NumericDivide-2;Expected error code: FOAR0001. Found error code: FOCA0001 with error message: Overflow when creating a Decimal from Infinity.
K2-NumericDivide-3;Expected error code: FOAR0001. Found error code: FOCA0001 with error message: Overflow when creating a Decimal from Infinity.
K2-NumericDivide-4;Expected error code: FOAR0001. Query succeeded with result: Infinity
K2-NumericDivide-5;Expected XPath 1 div 0e0 to resolve to INF, but instead got Infinity
K2-NumericDivide-6;Expected XPath -1 div 0e0 to resolve to -INF, but instead got -Infinity
K2-NumericDivide-7;Expected XPath 1 div xs:float(0) to resolve to INF, but instead got Infinity
K2-NumericDivide-8;Expected XPath -1 div xs:float(0) to resolve to -INF, but instead got -Infinity
K2-NumericDivide-9;Expected XPath +0e0 div -0e0 to resolve to NaN, but instead got Infinity
K2-NumericEqual-1;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '1 eq <?target 1?>'
K2-NumericEqual-2;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<?target 1?> eq 1'
K2-NumericEqual-3;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '1 eq <!--1-->'
K2-NumericEqual-4;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<!--1--> eq 1'
K2-NumericEqual-5;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '1 eq text {"1"}'
K2-NumericEqual-6;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'text {"1"} eq 1'
K2-NumericGT-1;Overflow when creating a Int64 from 18446744073709551615.
K2-NumericGT-2;Overflow when creating a Int64 from 18446744073709551615.
K2-NumericGT-3;Expected XPath xs:double("3") gt xs:double("NaN") to resolve to false
K2-NumericIntegerDivide-4;Expected error code: FOAR0001. Found error code: FOAR0002 with error message: One of the operands of idiv is NaN or the first operand is (-)INF
K2-NumericLT-1;Overflow when creating a Int64 from 18446744073709551615.
K2-NumericLT-2;Overflow when creating a Int64 from 18446744073709551615.
K2-NumericMod-10;Expected XPath 3 mod xs:float("NaN") to resolve to NaN, but instead got Infinity
K2-NumericMod-11;Expected XPath xs:float("NaN") mod xs:float("NaN") to resolve to NaN, but instead got Infinity
K2-NumericMod-12;Expected XPath xs:double("NaN") mod 3 to resolve to NaN, but instead got Infinity
K2-NumericMod-13;Expected XPath 3 mod xs:double("NaN") to resolve to NaN, but instead got Infinity
K2-NumericMod-14;Expected XPath xs:double("NaN") mod xs:double("NaN") to resolve to NaN, but instead got Infinity
K2-NumericMod-15;Expected XPath xs:double("INF") mod 3 to resolve to NaN, but instead got Infinity
K2-NumericMod-17;Expected XPath xs:double("INF") mod xs:double("INF") to resolve to NaN, but instead got Infinity
K2-NumericMod-18;Expected XPath xs:double("-INF") mod 3 to resolve to NaN, but instead got Infinity
K2-NumericMod-2;Value was either too large or too small for a Decimal.
K2-NumericMod-20;Expected XPath xs:double("-INF") mod xs:double("-INF") to resolve to NaN, but instead got Infinity
K2-NumericMod-22;Expected XPath 3 mod xs:double("0") to resolve to NaN, but instead got Infinity
K2-NumericMod-25;Expected XPath 3 mod xs:double("-0") to resolve to NaN, but instead got Infinity
K2-NumericMod-26;Expected XPath xs:double("-0") mod xs:double("-0") to resolve to NaN, but instead got Infinity
K2-NumericMod-27;Expected XPath xs:float("INF") mod 3 to resolve to NaN, but instead got Infinity
K2-NumericMod-29;Expected XPath xs:float("INF") mod xs:float("INF") to resolve to NaN, but instead got Infinity
K2-NumericMod-3;PRSC Error: Failed to parse query '-1.0e0 mod -1.0e0 = -0'
K2-NumericMod-30;Expected XPath xs:float("-INF") mod 3 to resolve to NaN, but instead got Infinity
K2-NumericMod-32;Expected XPath xs:float("-INF") mod xs:float("-INF") to resolve to NaN, but instead got Infinity
K2-NumericMod-34;Expected XPath 3 mod xs:float("0") to resolve to NaN, but instead got Infinity
K2-NumericMod-37;Expected XPath 3 mod xs:float("-0") to resolve to NaN, but instead got Infinity
K2-NumericMod-38;Expected XPath xs:float("-0") mod xs:float("-0") to resolve to NaN, but instead got Infinity
K2-NumericMod-4;PRSC Error: Failed to parse query '-1.0e0 mod xs:float(-1.0e0) = -0'
K2-NumericMod-5;Expected executing the XPath '-1 mod -9223372036854775808' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: Overflow when creating a Int64 from 9223372036854775808.
K2-NumericMod-59;Expected error code: FOAR0001. Found error code: FOCA0001 with error message: Overflow when creating a Int64 from NaN.
K2-NumericMod-6;Value was either too large or too small for a Decimal.
K2-NumericMod-60;Expected error code: FOAR0001. Found error code: FOCA0001 with error message: Overflow when creating a Decimal from NaN.
K2-NumericMod-61;Expected error code: FOAR0001. Found error code: FOCA0001 with error message: Overflow when creating a Decimal from NaN.
K2-NumericMod-62;PRSC Error: Failed to parse query 'empty(<e/>/(mod mod mod))'
K2-NumericMod-7;Expected executing the XPath '-1.0e0 mod xs:double(-9223372036854775808)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '-1.0e0 mod xs:double(-9223372036854775808) = -1'
K2-NumericMod-8;Expected executing the XPath 'xs:float(-1.0e0) mod xs:float(-9223372036854775808)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'xs:float(-1.0e0) mod xs:float(-9223372036854775808) = -1'
K2-NumericMod-9;Expected XPath xs:float("NaN") mod 3 to resolve to NaN, but instead got Infinity
K2-NumericUnaryMinus-10;PRSC Error: Failed to parse query '-((<n>1</n> | ())[1]) = -1'
K2-NumericUnaryMinus-3;Value was either too large or too small for a Decimal.
K2-NumericUnaryMinus-5;Value was either too large or too small for a Decimal.
K2-NumericUnaryMinus-6;Value was either too large or too small for a Decimal.
K2-NumericUnaryMinus-7;Value was either too large or too small for a Decimal.
K2-NumericUnaryMinus-8;PRSC Error: Failed to parse query 'empty(document{()}/(-element()))'
K2-NumericUnaryPlus-1;PRSC Error: Failed to parse query 'empty(document{()}/(+element()))'
K2-OrderbyExprWithout-1;PRSC Error: Failed to parse query 'declare base-uri "http://www.w3.org/2005/xpath-functions/"; let $i as xs:integer* := (1, 2, 3) order by 1 collation "collation/codepoint" return $i'
K2-OrderbyExprWithout-10;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'for $a in (1, 4, 2) let $i := (1, $a, 2) order by $i return $i'
K2-OrderbyExprWithout-11;PRSC Error: Failed to parse query 'for $a in (1, 4, 2) let $i := (1, 3, 2) order by $a return $i'
K2-OrderbyExprWithout-12;Use of XQuery FLWOR expressions in XPath is not allowed
K2-OrderbyExprWithout-13;Use of XQuery FLWOR expressions in XPath is not allowed
K2-OrderbyExprWithout-14;PRSC Error: Failed to parse query 'declare variable $e := <e> <a>3</a> <a>2</a> <a>1</a> </e>; <result> { avg(for $i in $e/a order by $i return $i) } </result>'
K2-OrderbyExprWithout-15;Expected error code: FORG0005. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $e := <e> <a>3</a> <a>2</a> <a>1</a> </e>; exactly-one(for $i in $e/a order by $i return $i)'
K2-OrderbyExprWithout-16;Use of XQuery FLWOR expressions in XPath is not allowed
K2-OrderbyExprWithout-17;Use of XQuery FLWOR expressions in XPath is not allowed
K2-OrderbyExprWithout-18;Use of XQuery FLWOR expressions in XPath is not allowed
K2-OrderbyExprWithout-19;Expected executing the XPath 'let $i := (1, 3, 2) order by $i return $i' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: Use of XQuery FLWOR expressions in XPath is not allowed
K2-OrderbyExprWithout-2;Expected error code: XQST0076. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare base-uri "http://www.w3.org/2005/xpath-functions/"; let $i as xs:integer* := (1, 2, 3) order by 1 collation "collation/" return $i'
K2-OrderbyExprWithout-20;Expected executing the XPath 'let $i := (<e>1</e>, <e>3</e>, <e>2</e>) order by $i return $i' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'let $i := (<e>1</e>, <e>3</e>, <e>2</e>) order by $i return $i'
K2-OrderbyExprWithout-21;PRSC Error: Failed to parse query 'let $i := (<e>1</e>, <e>3</e>, <e>2</e>) order by 1 return $i'
K2-OrderbyExprWithout-22;Expected executing the XPath 'for $i in (1, 3, 2) let $c := 3 stable order by () return $i' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'for $i in (1, 3, 2) let $c := 3 stable order by () return $i'
K2-OrderbyExprWithout-23;Expected executing the XPath 'let $i := (1, 3, 2) stable order by $i return $i' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: Use of XQuery FLWOR expressions in XPath is not allowed
K2-OrderbyExprWithout-24;Expected executing the XPath 'let $i := (<e>1</e>, <e>3</e>, <e>2</e>) stable order by $i return $i' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'let $i := (<e>1</e>, <e>3</e>, <e>2</e>) stable order by $i return $i'
K2-OrderbyExprWithout-25;Expected executing the XPath 'let $i := (xs:hexBinary("FF"), xs:hexBinary("FF")) stable order by $i return $i' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: Use of XQuery FLWOR expressions in XPath is not allowed
K2-OrderbyExprWithout-26;Expected executing the XPath 'let $i := (xs:hexBinary("FF"), xs:hexBinary("FF")) order by $i return $i' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: Use of XQuery FLWOR expressions in XPath is not allowed
K2-OrderbyExprWithout-27;Expected executing the XPath 'let $i := (xs:date("2001-02-03"), xs:time("01:02:03Z")) stable order by $i return $i' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: Use of XQuery FLWOR expressions in XPath is not allowed
K2-OrderbyExprWithout-28;Expected executing the XPath 'let $i := (xs:date("2001-02-03"), xs:time("01:02:03Z")) order by $i return $i' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: Use of XQuery FLWOR expressions in XPath is not allowed
K2-OrderbyExprWithout-29;Expected executing the XPath '<r> { for $i in attribute name {()} order by () return () } </r>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '<r> { for $i in attribute name {()} order by () return () } </r>'
K2-OrderbyExprWithout-3;Expected error code: XQST0076. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare base-uri "http://www.w3.org/2005/xpath-functions/"; let $i as xs:integer* := (1, 2, 3) order by 1 collation "collation/" return $i'
K2-OrderbyExprWithout-30;Expected executing the XPath '<r> { for $i in 1 order by () return () } </r>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '<r> { for $i in 1 order by () return () } </r>'
K2-OrderbyExprWithout-31;Expected executing the XPath 'let $i := (1, 2, 3) order by $i return $i' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: Use of XQuery FLWOR expressions in XPath is not allowed
K2-OrderbyExprWithout-32;Expected executing the XPath 'let $i := (1, 2, 3) stable order by $i return $i' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: Use of XQuery FLWOR expressions in XPath is not allowed
K2-OrderbyExprWithout-33;Expected executing the XPath 'let $i := (xs:hexBinary("FF"), xs:hexBinary("FF")) stable order by $i[1] return $i' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: Use of XQuery FLWOR expressions in XPath is not allowed
K2-OrderbyExprWithout-34;Expected executing the XPath 'let $i := (xs:hexBinary("FF"), xs:hexBinary("FF")) order by $i[1] return $i' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: Use of XQuery FLWOR expressions in XPath is not allowed
K2-OrderbyExprWithout-35;Expected executing the XPath 'let $i := (xs:hexBinary("FF"), xs:time("03:03:03Z"), xs:hexBinary("FF")) stable order by $i[1] return $i' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: Use of XQuery FLWOR expressions in XPath is not allowed
K2-OrderbyExprWithout-36;Expected executing the XPath 'let $i := (xs:hexBinary("FF"), xs:time("03:03:03Z"), xs:hexBinary("FF")) order by $i[1] return $i' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: Use of XQuery FLWOR expressions in XPath is not allowed
K2-OrderbyExprWithout-37;Expected executing the XPath 'for $i in (1, 3, 2) stable order by () return $i' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: Use of XQuery FLWOR expressions in XPath is not allowed
K2-OrderbyExprWithout-38;Use of XQuery FLWOR expressions in XPath is not allowed
K2-OrderbyExprWithout-39;Expected executing the XPath 'for $a in (1, 4, 2) let $i := (1, 3, 2) order by $i return 1' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'for $a in (1, 4, 2) let $i := (1, 3, 2) order by $i return 1'
K2-OrderbyExprWithout-40;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'for $a in (3, 2, 1) let $a := ($a, 1), $b := (2, 1), $c := (2, 1), $d:= (2, 1) order by $a return $a'
K2-OrderbyExprWithout-41;PRSC Error: Failed to parse query 'for $a in (3, 2, 1) let $b := (2, 1), $c := (2, 1), $d := (2, 1), $e := (2, 1) order by $a return $a'
K2-OrderbyExprWithout-42;Use of XQuery FLWOR expressions in XPath is not allowed
K2-OrderbyExprWithout-43;PRSC Error: Failed to parse query 'if(for $i in <e> <a id="3"/> <b id="2"/> <c id="1"/> </e>/* order by xs:integer($i/@id) return $i) then 4 else 9 = 4'
K2-OrderbyExprWithout-44;PRSC Error: Failed to parse query 'for $a in (2, 1) let $b := 1 where true() order by $a return $a'
K2-OrderbyExprWithout-45;Use of XQuery FLWOR expressions in XPath is not allowed
K2-OrderbyExprWithout-46;Use of XQuery FLWOR expressions in XPath is not allowed
K2-OrderbyExprWithout-47;Use of XQuery FLWOR expressions in XPath is not allowed
K2-OrderbyExprWithout-48;PRSC Error: Failed to parse query 'let $numbers := (<e>NaN</e>, <e/>, <e/>, <e>NaN</e>, <e>NaN</e>, <e>INF</e>, <e>NaN</e>, <e/>, <e>3</e>, comment{"3"}) return (for $i in $numbers order by xs:double($i/text()) empty least return xs:double($i/text()), "SEP", for $i in $numbers order by xs:double($i/text()) empty greatest return xs:double($i/text()))'
K2-OrderbyExprWithout-49;PRSC Error: Failed to parse query 'let $numbers := (<e>NaN</e>, <e/>, <e/>, <e>NaN</e>, <e>NaN</e>, <e>INF</e>, <e>NaN</e>, <e/>, <e>3</e>, comment{"3"}) return (for $i in $numbers stable order by xs:double($i/text()) empty least return xs:double($i/text()), "SEP", for $i in $numbers stable order by xs:double($i/text()) empty greatest return xs:double($i/text()))'
K2-OrderbyExprWithout-5;Use of XQuery FLWOR expressions in XPath is not allowed
K2-OrderbyExprWithout-6;Use of XQuery FLWOR expressions in XPath is not allowed
K2-OrderbyExprWithout-8;Expected executing the XPath 'let $i := (1, 3, 2) order by $i return $i' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: Use of XQuery FLWOR expressions in XPath is not allowed
K2-OrderbyExprWithout-9;Expected executing the XPath 'let $i := (1, 3, 2), $b := (4, 6, 5) order by $b return $b' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: Use of XQuery FLWOR expressions in XPath is not allowed
K2-preceding-siblingAxis-1;PRSC Error: Failed to parse query 'declare variable $i := <root> <child> <preceding2/> <child2> <preceding1/> <child3> <leaf/> </child3> <following/> </child2> <following/> </child> <following/> </root>; empty(root($i)/preceding-sibling::node())'
K2-preceding-siblingAxis-2;PRSC Error: Failed to parse query 'declare variable $i := <root> <child> <preceding2/> <child2> <preceding1/> <child3> <leaf/> </child3> <following/> </child2> <following/> </child> <following/> </root>; empty(root($i)/preceding::node())'
K2-preceding-siblingAxis-3;PRSC Error: Failed to parse query 'declare variable $i := <root> <child> <preceding2/> <child2> <preceding1/> <child3> <leaf/> </child3> <following/> </child2> <following/> </child> <following/> </root>; count(root($i)/preceding::node()) = 0'
K2-preceding-siblingAxis-4;PRSC Error: Failed to parse query 'declare variable $i := <root> <child> <preceding2/> <child2> <preceding1/> <child3> <leaf/> </child3> <following/> </child2> <following/> </child> <following/> </root>; count(root($i)//leaf/preceding::node()) = 2'
K2-preceding-siblingAxis-5;PRSC Error: Failed to parse query 'declare variable $i := <root> <child> <preceding2/> <child2> <preceding1/> <child3> <leaf/> </child3> <following/> </child2> <following/> </child> <following/> </root>; root($i)//count(preceding-sibling::node())'
K2-precedingAxis-1;PRSC Error: Failed to parse query 'declare variable $i := <root> <child/> <child/> <child> <child2> <child3> <leaf/> </child3> </child2> </child> </root>; empty(root($i)/preceding::node())'
K2-precedingAxis-2;PRSC Error: Failed to parse query 'declare variable $i := <root> <child> <child2> <child3> <leaf/> </child3> <following/> </child2> <following/> </child> <following/> </root>; empty(root($i)//leaf/preceding::node())'
K2-precedingAxis-3;PRSC Error: Failed to parse query 'declare variable $i := <root> <child> <preceding2/> <child2> <preceding1/> <child3> <leaf/> </child3> <following/> </child2> <following/> </child> <following/> </root>; root($i)//leaf/preceding::node()[1]'
K2-precedingAxis-4;PRSC Error: Failed to parse query 'declare variable $i := <root> <child> <preceding2/> <child2> <preceding1/> <child3> <leaf/> </child3> <following/> </child2> <following/> </child> <following/> </root>; root($i)//leaf/(preceding::node())[1]'
K2-precedingAxis-5;PRSC Error: Failed to parse query 'declare variable $i := <root> <child> <preceding2/> <child2> <preceding1/> <child3> <leaf/> </child3> <following/> </child2> <following/> </child> <following/> </root>; root($i)//leaf/(preceding::node())[last()]'
K2-precedingAxis-6;PRSC Error: Failed to parse query 'declare variable $i := <root> <child> <preceding2/> <child2> <preceding1/> <child3> <leaf/> </child3> <following/> </child2> <following/> </child> <following/> </root>; root($i)//leaf/preceding::node()[last()]'
K2-precedingAxis-7;PRSC Error: Failed to parse query 'declare variable $i := <root> <child> <preceding2/> <child2> <preceding1/> <child3> <leaf/> </child3> <following/> </child2> <following/> </child> <following/> </root>; count(root($i)//leaf/preceding::node()) = 2'
K2-precedingAxis-8;PRSC Error: Failed to parse query 'declare variable $i := <root> <child> <preceding2/> <child2> <preceding1/> <child3> <leaf/> </child3> <following/> </child2> <following/> </child> <following/> </root>; root($i)//count(preceding::*)'
K2-Predicates-1;TreatExpr AST to Expression not yet implemented
K2-Predicates-2;PRSC Error: Failed to parse query 'declare variable $myvar := <elem> <a/> <b/> <c/></elem>; $myvar/*[last()]'
K2-Predicates-3;PRSC Error: Failed to parse query 'declare variable $myvar := <elem> <a/> <b/> <c/></elem>; $myvar/*[last() - 1]'
K2-Predicates-4;PRSC Error: Failed to parse query 'declare variable $myvar := <elem> <a/> <b/> <c/></elem>; $myvar/*[1]'
K2-Predicates-5;PRSC Error: Failed to parse query '(<a/>, <b/>, <c/>)[1][1]'
K2-Predicates-6;PRSC Error: Failed to parse query '<b attr="f"/>[1]'
K2-Predicates-7;PRSC Error: Failed to parse query '<r>{<e xml:lang="ene"/>/(ancestor-or-self::*/@xml:lang)[last()]}</r>'
K2-Predicates-8;PRSC Error: Failed to parse query 'declare function local:foo($arg as item()) { $arg[@arg] }; local:foo(<e arg="">result</e>)'
K2-Predicates-9;PRSC Error: Failed to parse query 'declare function local:foo($arg as item()) { string($arg/@arg) }; local:foo(<e arg="result"/>)'
K2-QuantExprWithout-3;PRSC Error: Failed to parse query '<people id=""/>/(some $id in @id satisfies true())'
K2-QuantExprWithout-4;Expected error code: XPDY0002. Query succeeded with result: 
K2-QuantExprWithout-5;PRSC Error: Failed to parse query '<e/>/(some $v in self::node() satisfies $v)'
K2-QuantExprWithout-6;PRSC Error: Failed to parse query '<e/>/(every $v in self::node() satisfies $v)'
K2-QuantExprWithout-7;PRSC Error: Failed to parse query '<e/>/(every $b in 1, $v in self::node() satisfies $v)'
K2-QuantExprWithout-8;PRSC Error: Failed to parse query '<e/>/(some $b in 1, $v in self::node() satisfies $v)'
K2-QuantExprWithout-9;PRSC Error: Failed to parse query 'let $firstSeq := (<a/>, <b/>, <e><c/></e>) let $secondSeq := (<a attr=""/>, <b>text</b>, <e><c/></e>) return some $i in $firstSeq satisfies $secondSeq[deep-equal(.,$i)]'
K2-RangeExpr-4;PRSC Error: Failed to parse query '1 to <value>5</value>, 5 to <value>5</value>, <value>1</value> to 5, <value>1</value> to <value>5</value>, let $i := <e>5</e> return $i to $i, count(5 to 10), count(1000 to 2000), count(<e>5</e> to 10), count(3 to <e>10</e>), count(<e>3</e> to <e>10</e>), count(<e>5</e> to 10), count(3 to <e>10</e>), count(<e>3</e> to <e>10</e>), count(4294967295 to 4294967298)'
K2-ReplaceFunc-1;Expected error code: FORX0004. Query succeeded with result: replacment: \1replacment: \1replacment: \1
K2-ReplaceFunc-2;Expected error code: FORX0004. Query succeeded with result: replacment: \1replacment: \1replacment: \1
K2-ReplaceFunc-3;Expected error code: FORX0002. Query succeeded with result: abcd
K2-ReplaceFunc-4;Expected error code: FORX0002. Query succeeded with result: abcd
K2-ReplaceFunc-5;Expected error code: FORX0002. Query succeeded with result: abcd
K2-ReplaceFunc-6;Expected error code: FORX0002. Query succeeded with result: abcd
K2-ReplaceFunc-7;Expected error code: FORX0002. Query succeeded with result: abcd
K2-ReplaceFunc-8;PRSC Error: Failed to parse query 'let $result := (\n         declare function local:doReplace($input as xs:string?, $pattern as xs:string, $replacement as xs:string) as xs:string { \n            fn:replace($input, $pattern, $replacement) \n         }; \n         <result> <para>{fn:replace("ThiY Ybcd.", "Y", "Q")}</para> <para>{local:doReplace("ThiY iY a abYY.", "Y", "Q")}</para> </result>, \n         fn:replace("ThiY abcdY.", "Y", "Q"), \n         local:doReplace("ThiY iY a abYY.", "Y", "Q")\n      ) return $result[1]/para[1] = "ThiQ Qbcd."'
K2-RoundEvenFunc-11;Expected XPath round-half-to-even(xs:double("NaN")) to resolve to NaN, but instead got Infinity
K2-RoundEvenFunc-12;Expected XPath round-half-to-even(xs:float("NaN")) to resolve to NaN, but instead got Infinity
K2-RoundEvenFunc-13;Expected XPath round-half-to-even(xs:double("-INF")) to resolve to -INF, but instead got -Infinity
K2-RoundEvenFunc-14;Expected XPath round-half-to-even(xs:float("-INF")) to resolve to -INF, but instead got -Infinity
K2-RoundEvenFunc-15;Expected XPath round-half-to-even(xs:double("INF")) to resolve to INF, but instead got Infinity
K2-RoundEvenFunc-16;Expected XPath round-half-to-even(xs:float("INF")) to resolve to INF, but instead got Infinity
K2-RoundEvenFunc-6;PRSC Error: Failed to parse query 'round-half-to-even(3.567812E+3, 2) eq 3567.81E0'
K2-RoundEvenFunc-7;PRSC Error: Failed to parse query 'round-half-to-even(4.7564E-3, 2) eq 0.0E0'
K2-RoundFunc-115;Expected XPath fn:round(xs:float("0.50")) to resolve to 1
K2-RoundFunc-116;Expected XPath fn:round(xs:double("0.50")) to resolve to 1
K2-RoundFunc-13;Expected XPath round(xs:double("INF")) to resolve to INF, but instead got Infinity
K2-RoundFunc-14;Expected XPath round(xs:double("-INF")) to resolve to -INF, but instead got -Infinity
K2-RoundFunc-15;Expected XPath round(xs:double("0")) to resolve to 0, but instead got -0
K2-RoundFunc-168;Expected XPath fn:round(xs:double("0.101")) to resolve to 0, but instead got -0
K2-RoundFunc-17;Expected XPath round(xs:float("INF")) to resolve to INF, but instead got Infinity
K2-RoundFunc-171;Expected XPath fn:round(xs:float("0.104")) to resolve to 0, but instead got -0
K2-RoundFunc-172;Expected XPath fn:round(xs:double("0.104")) to resolve to 0, but instead got -0
K2-RoundFunc-175;Expected XPath fn:round(xs:float("0.105")) to resolve to 0, but instead got -0
K2-RoundFunc-176;Expected XPath fn:round(xs:double("0.105")) to resolve to 0, but instead got -0
K2-RoundFunc-179;Expected XPath fn:round(xs:float("0.106")) to resolve to 0, but instead got -0
K2-RoundFunc-18;Expected XPath round(xs:float("-INF")) to resolve to -INF, but instead got -Infinity
K2-RoundFunc-180;Expected XPath fn:round(xs:double("0.106")) to resolve to 0, but instead got -0
K2-RoundFunc-183;Expected XPath fn:round(xs:float("0.109")) to resolve to 0, but instead got -0
K2-RoundFunc-184;Expected XPath fn:round(xs:double("0.109")) to resolve to 0, but instead got -0
K2-RoundFunc-187;Expected XPath fn:round(xs:float("0.100")) to resolve to 0, but instead got -0
K2-RoundFunc-188;Expected XPath fn:round(xs:double("0.100")) to resolve to 0, but instead got -0
K2-RoundFunc-19;Expected XPath round(xs:float("0")) to resolve to 0, but instead got -0
K2-RoundFunc-21;Expected XPath fn:round(xs:float("NaN")) to resolve to NaN, but instead got Infinity
K2-RoundFunc-22;Expected XPath fn:round(xs:double("NaN")) to resolve to NaN, but instead got Infinity
K2-RoundFunc-27;Expected XPath fn:round(xs:float("0.04")) to resolve to 0, but instead got -0
K2-RoundFunc-28;Expected XPath fn:round(xs:double("0.04")) to resolve to 0, but instead got -0
K2-RoundFunc-31;Expected XPath fn:round(xs:float("0.05")) to resolve to 0, but instead got -0
K2-RoundFunc-32;Expected XPath fn:round(xs:double("0.05")) to resolve to 0, but instead got -0
K2-RoundFunc-35;Expected XPath fn:round(xs:float("0.06")) to resolve to 0, but instead got -0
K2-RoundFunc-36;Expected XPath fn:round(xs:double("0.06")) to resolve to 0, but instead got -0
K2-RoundFunc-39;Expected XPath fn:round(xs:float("0.09")) to resolve to 0, but instead got -0
K2-RoundFunc-40;Expected XPath fn:round(xs:double("0.09")) to resolve to 0, but instead got -0
K2-RoundFunc-43;Expected XPath fn:round(xs:float("0.00")) to resolve to 0, but instead got -0
K2-RoundFunc-44;Expected XPath fn:round(xs:double("0.00")) to resolve to 0, but instead got -0
K2-RoundFunc-47;Expected XPath fn:round(xs:float("0.11")) to resolve to 0, but instead got -0
K2-RoundFunc-48;Expected XPath fn:round(xs:double("0.11")) to resolve to 0, but instead got -0
K2-RoundFunc-51;Expected XPath fn:round(xs:float("0.14")) to resolve to 0, but instead got -0
K2-RoundFunc-52;Expected XPath fn:round(xs:double("0.14")) to resolve to 0, but instead got -0
K2-RoundFunc-54;PRSC Error: Failed to parse query '(fn:round(xs:double("-0.14"))) instance of $xs:double'
K2-RoundFunc-55;Expected XPath fn:round(xs:float("0.15")) to resolve to 0, but instead got -0
K2-RoundFunc-56;Expected XPath fn:round(xs:double("0.15")) to resolve to 0, but instead got -0
K2-RoundFunc-59;Expected XPath fn:round(xs:float("0.16")) to resolve to 0, but instead got -0
K2-RoundFunc-60;Expected XPath fn:round(xs:double("0.16")) to resolve to 0, but instead got -0
K2-RoundFunc-63;Expected XPath fn:round(xs:float("0.19")) to resolve to 0, but instead got -0
K2-RoundFunc-64;Expected XPath fn:round(xs:double("0.19")) to resolve to 0, but instead got -0
K2-RoundFunc-67;Expected XPath fn:round(xs:float("0.10")) to resolve to 0, but instead got -0
K2-RoundFunc-68;Expected XPath fn:round(xs:double("0.10")) to resolve to 0, but instead got -0
K2-RoundFunc-71;Expected XPath fn:round(xs:float("0.41")) to resolve to 0, but instead got -0
K2-RoundFunc-72;Expected XPath fn:round(xs:double("0.41")) to resolve to 0, but instead got -0
K2-RoundFunc-75;Expected XPath fn:round(xs:float("0.44")) to resolve to 0, but instead got -0
K2-RoundFunc-76;Expected XPath fn:round(xs:double("0.44")) to resolve to 0, but instead got -0
K2-RoundFunc-79;Expected XPath fn:round(xs:float("0.45")) to resolve to 0, but instead got -0
K2-RoundFunc-80;Expected XPath fn:round(xs:double("0.45")) to resolve to 0, but instead got -0
K2-RoundFunc-83;Expected XPath fn:round(xs:float("0.46")) to resolve to 0, but instead got -0
K2-RoundFunc-84;Expected XPath fn:round(xs:double("0.46")) to resolve to 0, but instead got -0
K2-RoundFunc-87;Expected XPath fn:round(xs:float("0.49")) to resolve to 0, but instead got -0
K2-RoundFunc-88;Expected XPath fn:round(xs:double("0.49")) to resolve to 0, but instead got -0
K2-RoundFunc-91;Expected XPath fn:round(xs:float("0.40")) to resolve to 0, but instead got -0
K2-RoundFunc-92;Expected XPath fn:round(xs:double("0.40")) to resolve to 0, but instead got -0
K2-SeqDeepEqualFunc-1;The function current-time with arity 0 is not registered.
K2-SeqDeepEqualFunc-10;PRSC Error: Failed to parse query 'deep-equal((<a/>, <b/>, <c/>), (<a/>, <b/>, <c/>))'
K2-SeqDeepEqualFunc-11;PRSC Error: Failed to parse query 'deep-equal((<a/>, <b/>, <c/>), (<a/>, <b/>, <a/>))'
K2-SeqDeepEqualFunc-12;PRSC Error: Failed to parse query 'deep-equal((<a/>, <b/>), (<a/>, <b/>, <c/>))'
K2-SeqDeepEqualFunc-13;PRSC Error: Failed to parse query 'deep-equal((<a/>, <b/>, <c/>), (<a/>, <b/>))'
K2-SeqDeepEqualFunc-14;PRSC Error: Failed to parse query 'declare variable $d1 := document { <?target data?>, text{"some text"}}; declare variable $d2 := document {text{"some text"}}; deep-equal($d1, $d2)'
K2-SeqDeepEqualFunc-15;PRSC Error: Failed to parse query 'declare variable $d1 := document {()}; declare variable $d2 := document {<?target data?>}; deep-equal($d1, $d2)'
K2-SeqDeepEqualFunc-16;PRSC Error: Failed to parse query 'declare variable $d1 := document { <?target data?>, text{"some text"}}; declare variable $d2 := document {text{"some text"}}; deep-equal($d1, $d2)'
K2-SeqDeepEqualFunc-17;PRSC Error: Failed to parse query 'declare variable $d1 := document {()}; declare variable $d2 := document {<?target data?>}; deep-equal($d1, $d2)'
K2-SeqDeepEqualFunc-18;PRSC Error: Failed to parse query 'deep-equal(<e>1</e>, 1)'
K2-SeqDeepEqualFunc-19;PRSC Error: Failed to parse query 'deep-equal(1, <e>1</e>)'
K2-SeqDeepEqualFunc-2;PRSC Error: Failed to parse query 'deep-equal(current-time(), <e/>)'
K2-SeqDeepEqualFunc-20;PRSC Error: Failed to parse query 'declare variable $d1 := <e a="1" b="2">te<?target data?>xt</e>; declare variable $d2 := <e b="2" a="1">text</e>; deep-equal($d1, $d2), deep-equal($d2, $d1)'
K2-SeqDeepEqualFunc-21;PRSC Error: Failed to parse query 'declare variable $d1 := <e a="1" b="2"><?target data?>text</e>; declare variable $d2 := <e b="2" a="1">text</e>; deep-equal($d1, $d2), deep-equal($d2, $d1)'
K2-SeqDeepEqualFunc-22;PRSC Error: Failed to parse query 'declare variable $d1 := <e a="1" b="2">te<!-- content -->xt</e>; declare variable $d2 := <e b="2" a="1">text</e>; deep-equal($d1, $d2), deep-equal($d2, $d1)'
K2-SeqDeepEqualFunc-23;PRSC Error: Failed to parse query 'declare variable $d1 := <e a="1" b="2"><!-- content -->text</e>; declare variable $d2 := <e b="2" a="1">text</e>; deep-equal($d1, $d2), deep-equal($d2, $d1)'
K2-SeqDeepEqualFunc-24;PRSC Error: Failed to parse query 'deep-equal(attribute name {"content"}, attribute name {"content"})'
K2-SeqDeepEqualFunc-25;PRSC Error: Failed to parse query 'deep-equal((attribute name2 {"content"}, attribute name {"content"}), (attribute name {"content"}, attribute name2 {"content"}))'
K2-SeqDeepEqualFunc-26;PRSC Error: Failed to parse query 'deep-equal((attribute name {"content"}, attribute name {"content"}), (attribute name {"content"}))'
K2-SeqDeepEqualFunc-27;PRSC Error: Failed to parse query 'deep-equal((attribute name {"content"}, attribute name {"content"}), attribute name {"content"})'
K2-SeqDeepEqualFunc-28;PRSC Error: Failed to parse query 'deep-equal(attribute name {}, attribute name {})'
K2-SeqDeepEqualFunc-29;PRSC Error: Failed to parse query 'deep-equal(attribute name {"content"}, attribute name {"content"})'
K2-SeqDeepEqualFunc-3;PRSC Error: Failed to parse query 'deep-equal(<e/>, current-time())'
K2-SeqDeepEqualFunc-30;PRSC Error: Failed to parse query 'deep-equal(attribute name {"content"}, attribute name {})'
K2-SeqDeepEqualFunc-31;PRSC Error: Failed to parse query 'deep-equal(attribute name {}, attribute name2 {})'
K2-SeqDeepEqualFunc-32;PRSC Error: Failed to parse query 'deep-equal(attribute name {"content "}, attribute name2 {"content "})'
K2-SeqDeepEqualFunc-33;PRSC Error: Failed to parse query '\n        deep-equal(<e xmlns="http://www.example.com/ns"/>, <p:e xmlns:p="http://www.example.com/ns"/>)\n      '
K2-SeqDeepEqualFunc-34;PRSC Error: Failed to parse query '\n        deep-equal(<e><a>12</a></e>/*, <f><a>12</a></f>/*)\n      '
K2-SeqDeepEqualFunc-35;Atomic Value for XsNcName is not implemented yet.
K2-SeqDeepEqualFunc-36;PRSC Error: Failed to parse query '\n        deep-equal(validate type xs:integer {<e>2012</e>}, validate type xs:gYear{<e>2012</e>})\n      '
K2-SeqDeepEqualFunc-37;PRSC Error: Failed to parse query '\n        deep-equal(validate type xs:integer {<e>2012</e>}, validate type xs:decimal{<e>2012</e>})\n      '
K2-SeqDeepEqualFunc-38;PRSC Error: Failed to parse query '\n        import schema namespace p = "http://www.w3.org/XQueryTest/perversity";\n        let $v := validate strict {<p:elementOnly><p:e/></p:elementOnly>}\n        let $w := validate strict {<p:mixed><p:e/></p:mixed>}\n        let $x := validate strict {<p:empty><p:e/></p:empty>}\n        let $y := validate strict {<p:simple><p:e/></p:simple>}\n        return deep-equal($v/p:e, $w/p:e) or deep-equal($w/p:e, $x/p:e) \n        	or deep-equal($v/p:e, $x/p:e) or deep-equal($x/p:e, $y/p:e)\n      '
K2-SeqDeepEqualFunc-39;PRSC Error: Failed to parse query '\n        import schema namespace p = "http://www.w3.org/XQueryTest/perversity";\n        let $w := validate strict {<p:mixed><p:e>fraternity</p:e></p:mixed>}\n        let $y := validate strict {<p:simple><p:e>fraternity</p:e></p:simple>}\n        return deep-equal($w/p:e, $y/p:e)\n      '
K2-SeqDeepEqualFunc-4;The function current-time with arity 0 is not registered.
K2-SeqDeepEqualFunc-40;The function implicit-timezone with arity 0 is not registered.
K2-SeqDeepEqualFunc-41;PRSC Error: Failed to parse query '\n        import schema namespace p = "http://www.w3.org/XQueryTest/perversity";\n        let $w := validate strict {<p:list><p:e>12</p:e></p:list>}\n        let $y := validate strict {<p:union><p:e>12</p:e></p:union>}\n        return deep-equal($w/p:e, $y/p:e)\n      '
K2-SeqDeepEqualFunc-42;PRSC Error: Failed to parse query '\n        import schema namespace p = "http://www.w3.org/XQueryTest/perversity";\n        let $w := validate strict {<p:list><p:e></p:e></p:list>}\n        let $y := validate strict {<p:union><p:e></p:e></p:union>}\n        return deep-equal($w/p:e, $y/p:e)\n      '
K2-SeqDeepEqualFunc-43;Expected executing the XPath 'deep-equal((0 to year-from-date(current-date()))!(10 idiv .), 11 to 22)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function year-from-date with arity 1 is not registered.
K2-SeqDeepEqualFunc-5;PRSC Error: Failed to parse query 'deep-equal((1, <e/>, 2), (1, <e/>, 2))'
K2-SeqDeepEqualFunc-6;PRSC Error: Failed to parse query 'deep-equal((1, <a/>, 2), (1, <b/>, 2))'
K2-SeqDeepEqualFunc-7;PRSC Error: Failed to parse query 'deep-equal((<a/>, <b/>, 4), (<a/>, <b/>, 2))'
K2-SeqExcept-10;PRSC Error: Failed to parse query 'empty(<e/>/(author except document))'
K2-SeqExcept-11;PRSC Error: Failed to parse query 'empty(<e/>/(author except if))'
K2-SeqExcept-12;PRSC Error: Failed to parse query 'empty(<e/>/(author except then))'
K2-SeqExcept-13;PRSC Error: Failed to parse query 'empty(<e/>/(author except mod))'
K2-SeqExcept-14;PRSC Error: Failed to parse query 'empty(<e/>/(author except div))'
K2-SeqExcept-15;PRSC Error: Failed to parse query 'empty(<e/>/(author except empty-sequence))'
K2-SeqExcept-16;PRSC Error: Failed to parse query 'empty(<e/>/(author except schema-attribute))'
K2-SeqExcept-17;PRSC Error: Failed to parse query 'empty(<e/>/(author except schema-element))'
K2-SeqExcept-18;PRSC Error: Failed to parse query 'count(<e/>/(a except attribute {"name"} {()}))'
K2-SeqExcept-19;PRSC Error: Failed to parse query 'count(<e/>/(a except attribute name {()}))'
K2-SeqExcept-2;PRSC Error: Failed to parse query 'empty(<e/>/(author except text))'
K2-SeqExcept-20;Expected executing the XPath 'count(<e/>/(a except element {"name"} {()}))' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'count(<e/>/(a except element {"name"} {()}))'
K2-SeqExcept-21;Expected executing the XPath 'count(<e/>/(a except element name {()}))' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'count(<e/>/(a except element name {()}))'
K2-SeqExcept-22;PRSC Error: Failed to parse query 'count(<e/>/(a except processing-instruction {"name"} {()}))'
K2-SeqExcept-23;PRSC Error: Failed to parse query 'count(<e/>/(a except processing-instruction name {}))'
K2-SeqExcept-24;PRSC Error: Failed to parse query 'count(<e/>/(a except comment {()}))'
K2-SeqExcept-25;PRSC Error: Failed to parse query 'count(<e/>/(a except text {()}))'
K2-SeqExcept-26;PRSC Error: Failed to parse query 'empty(<e/>/(a except descendant))'
K2-SeqExcept-27;PRSC Error: Failed to parse query 'empty(<e/>/(a except attribute))'
K2-SeqExcept-28;PRSC Error: Failed to parse query 'empty(<e/>/(a except self))'
K2-SeqExcept-29;PRSC Error: Failed to parse query 'empty(<e/>/(a except descendant-or-self))'
K2-SeqExcept-3;PRSC Error: Failed to parse query 'empty(<e/>/(author except node))'
K2-SeqExcept-30;PRSC Error: Failed to parse query 'empty(<e/>/(a except following-sibling))'
K2-SeqExcept-31;PRSC Error: Failed to parse query 'empty(<e/>/(a except following))'
K2-SeqExcept-32;PRSC Error: Failed to parse query 'empty(<e/>/(a except preceding-sibling))'
K2-SeqExcept-33;PRSC Error: Failed to parse query 'empty(<e/>/(a except preceding))'
K2-SeqExcept-34;PRSC Error: Failed to parse query 'empty(<e/>/(a except parent))'
K2-SeqExcept-35;PRSC Error: Failed to parse query 'empty(<e/>/(a except ancestor))'
K2-SeqExcept-36;PRSC Error: Failed to parse query 'empty(<e/>/(a except ancestor))'
K2-SeqExcept-37;PRSC Error: Failed to parse query 'empty(<e/>/(a except ancestor-or-self))'
K2-SeqExcept-38;PRSC Error: Failed to parse query 'empty(<e/>/(a except declare))'
K2-SeqExcept-4;PRSC Error: Failed to parse query 'empty(<e/>/(author except element))'
K2-SeqExcept-40;PRSC Error: Failed to parse query '<r> { //(employee[location = "Denver"] except //employee[last()])/./location } </r>'
K2-SeqExcept-41;PRSC Error: Failed to parse query '<a/> except <b/>'
K2-SeqExcept-42;PRSC Error: Failed to parse query '<r> { let $i := <e> <a/> <b/> <c/> </e>/a , $t := $i/following-sibling::b return (($i except ($i, $i)), (($t, $t) except $t)) } </r>'
K2-SeqExcept-5;PRSC Error: Failed to parse query 'empty(<e/>/(author except attribute))'
K2-SeqExcept-6;PRSC Error: Failed to parse query 'empty(<e/>/(author except document-node))'
K2-SeqExcept-7;PRSC Error: Failed to parse query 'empty(<e/>/(author except comment))'
K2-SeqExcept-8;PRSC Error: Failed to parse query 'empty(<e/>/(author except processing-instruction))'
K2-SeqExcept-9;PRSC Error: Failed to parse query 'empty(<e/>/(author except item))'
K2-SeqExprCast-1;Type casting to XsQName has not been implemented yet.
K2-SeqExprCast-106;Expected error code: FORG0001. Query succeeded with result: -3
K2-SeqExprCast-107;Expected error code: FORG0001. Query succeeded with result: -3
K2-SeqExprCast-108;Expected error code: FORG0001. Query succeeded with result: 3
K2-SeqExprCast-109;Expected error code: FORG0001. Query succeeded with result: 3
K2-SeqExprCast-110;Expected error code: FORG0001. Query succeeded with result: 3
K2-SeqExprCast-111;Expected error code: FORG0001. Query succeeded with result: 3
K2-SeqExprCast-112;Expected error code: FORG0001. Query succeeded with result: 3
K2-SeqExprCast-113;Expected error code: FORG0001. Query succeeded with result: 3
K2-SeqExprCast-114;Expected error code: FORG0001. Query succeeded with result: 3
K2-SeqExprCast-115;Expected error code: FORG0001. Query succeeded with result: 3
K2-SeqExprCast-116;Expected error code: FORG0001. Query succeeded with result: 3
K2-SeqExprCast-117;Expected error code: FORG0001. Query succeeded with result: 3
K2-SeqExprCast-157;Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprCast-158;Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprCast-159;Expected XPathException with code FORG0001, but got Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprCast-160;Expected XPathException with code FORG0001, but got Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprCast-161;Expected XPathException with code FORG0001, but got Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprCast-162;Expected XPathException with code FORG0001, but got Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprCast-163;Expected XPathException with code FORG0001, but got Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprCast-164;Expected XPathException with code FORG0001, but got Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprCast-165;Expected XPathException with code FORG0001, but got Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprCast-166;Expected XPathException with code FORG0001, but got Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprCast-167;Expected XPathException with code FORG0001, but got Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprCast-168;Expected XPathException with code FORG0001, but got Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprCast-169;Expected XPathException with code FORG0001, but got Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprCast-17;Expected executing the XPath 'xs:long("-9223372036854775808")' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: Overflow when creating a Int64 from 9223372036854775808.
K2-SeqExprCast-170;Expected XPathException with code FORG0001, but got Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprCast-171;Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprCast-172;Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprCast-173;Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprCast-174;Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprCast-175;Expected XPathException with code FORG0001, but got Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprCast-176;Expected XPathException with code FORG0001, but got Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprCast-177;Expected error code: FORG0001. Found error code: XPST0017 with error message: The function current-date with arity 0 is not registered.
K2-SeqExprCast-178;Expected error code: FORG0001. Found error code: XPST0017 with error message: The function current-time with arity 0 is not registered.
K2-SeqExprCast-179;Expected error code: FORG0001. Found error code: XPST0017 with error message: The function current-dateTime with arity 0 is not registered.
K2-SeqExprCast-181;Expected XPathException with code FORG0001, but got Atomic Value for XsName is not implemented yet.
K2-SeqExprCast-182;Expected XPathException with code FORG0001, but got Atomic Value for XsName is not implemented yet.
K2-SeqExprCast-183;Expected XPathException with code FORG0001, but got Atomic Value for XsName is not implemented yet.
K2-SeqExprCast-184;Expected XPathException with code FORG0001, but got Atomic Value for XsName is not implemented yet.
K2-SeqExprCast-185;Expected XPathException with code FORG0001, but got Atomic Value for XsName is not implemented yet.
K2-SeqExprCast-186;Atomic Value for XsName is not implemented yet.
K2-SeqExprCast-187;Atomic Value for XsName is not implemented yet.
K2-SeqExprCast-188;Atomic Value for XsName is not implemented yet.
K2-SeqExprCast-189;Atomic Value for XsName is not implemented yet.
K2-SeqExprCast-190;Atomic Value for XsName is not implemented yet.
K2-SeqExprCast-191;Atomic Value for XsName is not implemented yet.
K2-SeqExprCast-192;Atomic Value for XsNormalizedString is not implemented yet.
K2-SeqExprCast-193;Atomic Value for XsToken is not implemented yet.
K2-SeqExprCast-194;Expected XPathException with code FORG0001, but got Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprCast-195;Expected XPathException with code FORG0001, but got Atomic Value for XsNmToken is not implemented yet.
K2-SeqExprCast-196;Expected XPathException with code FORG0001, but got Atomic Value for XsName is not implemented yet.
K2-SeqExprCast-197;Expected XPathException with code FORG0001, but got Atomic Value for XsNcName is not implemented yet.
K2-SeqExprCast-198;Expected XPathException with code FORG0001, but got Atomic Value for XsId is not implemented yet.
K2-SeqExprCast-199;Expected XPathException with code FORG0001, but got Atomic Value for XsIdRef is not implemented yet.
K2-SeqExprCast-200;Expected XPathException with code FORG0001, but got Atomic Value for XsEntity is not implemented yet.
K2-SeqExprCast-201;The function namespace-uri-from-QName with arity 1 is not registered.
K2-SeqExprCast-202;Atomic Value for XsNmToken is not implemented yet.
K2-SeqExprCast-203;Expected XPathException with code FORG0001, but got Atomic Value for XsNmToken is not implemented yet.
K2-SeqExprCast-204;Expected XPathException with code FORG0001, but got Atomic Value for XsNmToken is not implemented yet.
K2-SeqExprCast-205;Expected XPathException with code FORG0001, but got Atomic Value for XsNmToken is not implemented yet.
K2-SeqExprCast-206;Expected XPathException with code FORG0001, but got Atomic Value for XsNmToken is not implemented yet.
K2-SeqExprCast-207;Expected executing the XPath 'xs:anyURI("http:\\invalid>URI\someURI")' to resolve to one of the expected results, but got System.NotImplementedException: Type casting to XsAnyUri has not been implemented yet.
K2-SeqExprCast-208;Type casting to XsAnyUri has not been implemented yet.
K2-SeqExprCast-209;Type casting to XsAnyUri has not been implemented yet.
K2-SeqExprCast-210;Expected XPathException with code FORG0001, but got Type casting to XsAnyUri has not been implemented yet.
K2-SeqExprCast-214;Expected XPath xs:double(xs:int("-1873914410")) to resolve to -1.87391441E9, but instead got -1873914410
K2-SeqExprCast-215;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K2-SeqExprCast-216;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K2-SeqExprCast-217;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K2-SeqExprCast-218;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K2-SeqExprCast-219;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K2-SeqExprCast-22;Expected executing the XPath 'xs:unsignedLong("18446744073709551615")' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: Overflow when creating a Int64 from 18446744073709551615.
K2-SeqExprCast-220;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K2-SeqExprCast-221;Expected XPath xs:float(" NaN ") to resolve to NaN, but instead got Infinity
K2-SeqExprCast-222;Expected XPath xs:double(" NaN ") to resolve to NaN, but instead got Infinity
K2-SeqExprCast-223;Expected XPath xs:float(" INF ") to resolve to INF, but instead got Infinity
K2-SeqExprCast-224;Expected XPath xs:double(" INF ") to resolve to INF, but instead got Infinity
K2-SeqExprCast-227;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K2-SeqExprCast-228;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K2-SeqExprCast-229;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K2-SeqExprCast-230;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K2-SeqExprCast-231;Expected error code: FORG0001. Query succeeded with result: Infinity
K2-SeqExprCast-231a;Expected XPath xs:double("+INF") to resolve to INF, but instead got Infinity
K2-SeqExprCast-232;Expected error code: FORG0001. Query succeeded with result: Infinity
K2-SeqExprCast-232a;Expected XPath xs:float("+INF") to resolve to INF, but instead got Infinity
K2-SeqExprCast-233;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K2-SeqExprCast-234;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K2-SeqExprCast-235;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K2-SeqExprCast-236;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K2-SeqExprCast-237;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K2-SeqExprCast-238;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K2-SeqExprCast-239;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K2-SeqExprCast-240;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K2-SeqExprCast-241;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K2-SeqExprCast-28;Expected error code: FORG0001. Query succeeded with result: 1
K2-SeqExprCast-29;Expected error code: FORG0001. Query succeeded with result: 0
K2-SeqExprCast-30;Expected error code: FORG0001. Query succeeded with result: 1
K2-SeqExprCast-393;Atomic Value for XsNormalizedString is not implemented yet.
K2-SeqExprCast-394;Atomic Value for XsToken is not implemented yet.
K2-SeqExprCast-395;Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprCast-396;Atomic Value for XsNmToken is not implemented yet.
K2-SeqExprCast-397;Atomic Value for XsName is not implemented yet.
K2-SeqExprCast-398;Atomic Value for XsNcName is not implemented yet.
K2-SeqExprCast-399;Atomic Value for XsId is not implemented yet.
K2-SeqExprCast-400;Atomic Value for XsIdRef is not implemented yet.
K2-SeqExprCast-401;Atomic Value for XsEntity is not implemented yet.
K2-SeqExprCast-402;Atomic Value for XsNormalizedString is not implemented yet.
K2-SeqExprCast-403;Atomic Value for XsToken is not implemented yet.
K2-SeqExprCast-404;Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprCast-405;Atomic Value for XsNmToken is not implemented yet.
K2-SeqExprCast-406;Atomic Value for XsName is not implemented yet.
K2-SeqExprCast-407;Atomic Value for XsNcName is not implemented yet.
K2-SeqExprCast-408;Atomic Value for XsId is not implemented yet.
K2-SeqExprCast-409;Atomic Value for XsIdRef is not implemented yet.
K2-SeqExprCast-410;Atomic Value for XsEntity is not implemented yet.
K2-SeqExprCast-411;Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprCast-412;Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprCast-413;Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprCast-414;Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprCast-415;Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprCast-416;Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprCast-417;Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprCast-418;Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprCast-419;Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprCast-420;Type casting to XsAnyUri has not been implemented yet.
K2-SeqExprCast-421;Expected executing the XPath 'xs:anyURI("foo://")' to resolve to one of the expected results, but got System.NotImplementedException: Type casting to XsAnyUri has not been implemented yet.
K2-SeqExprCast-422;Expected XPathException with code FORG0001, but got Type casting to XsAnyUri has not been implemented yet.
K2-SeqExprCast-423;Expected XPathException with code FORG0001, but got Type casting to XsAnyUri has not been implemented yet.
K2-SeqExprCast-424;Expected XPathException with code FORG0001, but got Type casting to XsAnyUri has not been implemented yet.
K2-SeqExprCast-425;Haven't implemented Qnames from: localName:prefix
K2-SeqExprCast-426;Haven't implemented Qnames from: localName:prefix
K2-SeqExprCast-427;Type casting to XsAnyUri has not been implemented yet.
K2-SeqExprCast-428;Expected error code: FORG0001. Query succeeded with result: -9876
K2-SeqExprCast-429;Expected XPathException with code FORG0001, but got The string '11:-1:11' is not a valid AllXsd value.
K2-SeqExprCast-430;Expected XPathException with code FORG0001, but got The string '11:+1:11' is not a valid AllXsd value.
K2-SeqExprCast-431;Expected XPathException with code FORG0001, but got The string '11: 1:11' is not a valid AllXsd value.
K2-SeqExprCast-432;Expected XPathException with code FORG0001, but got The string '11:11:-1' is not a valid AllXsd value.
K2-SeqExprCast-433;Expected XPathException with code FORG0001, but got The string '11:11:-1' is not a valid AllXsd value.
K2-SeqExprCast-434;Expected XPathException with code FORG0001, but got The string '11:11:+1' is not a valid AllXsd value.
K2-SeqExprCast-435;Expected XPathException with code FORG0001, but got The string '11:11: 1' is not a valid AllXsd value.
K2-SeqExprCast-436;Expected XPathException with code FORG0001, but got The string '-1:11:11' is not a valid AllXsd value.
K2-SeqExprCast-437;Expected XPathException with code FORG0001, but got The string '+1:11:11' is not a valid AllXsd value.
K2-SeqExprCast-438;Expected XPathException with code FORG0001, but got The string '+1:11:11' is not a valid AllXsd value.
K2-SeqExprCast-439;Expected XPathException with code FORG0001, but got The string '11:11:1e0' is not a valid AllXsd value.
K2-SeqExprCast-440;Expected XPathException with code FORG0001, but got The string '11:11:1E0' is not a valid AllXsd value.
K2-SeqExprCast-441;Expected XPathException with code FORG0001, but got The string '11:11:1b0' is not a valid AllXsd value.
K2-SeqExprCast-442;Expected XPathException with code FORG0001, but got The string '11:11: 10' is not a valid AllXsd value.
K2-SeqExprCast-443;Expected XPathException with code FORG0001, but got The string '11:11:11b33' is not a valid AllXsd value.
K2-SeqExprCast-444;Expected XPathException with code FORG0001, but got The string '11:11:111' is not a valid AllXsd value.
K2-SeqExprCast-445;Expected XPathException with code FORG0001, but got The string '11:11:11.+11' is not a valid AllXsd value.
K2-SeqExprCast-446;Expected XPathException with code FORG0001, but got The string '11:11:11.-11' is not a valid AllXsd value.
K2-SeqExprCast-447;Expected XPathException with code FORG0001, but got The string '11:11:11. 11' is not a valid AllXsd value.
K2-SeqExprCast-448;Expected XPathException with code FORG0001, but got The string '24:00:00.1' is not a valid AllXsd value.
K2-SeqExprCast-449;Expected XPathException with code FORG0001, but got The string '24:01:00' is not a valid AllXsd value.
K2-SeqExprCast-450;Expected XPathException with code FORG0001, but got The string '24:00:01' is not a valid AllXsd value.
K2-SeqExprCast-451;Expected XPathException with code FORG0001, but got The string '11:11:11++1:11' is not a valid AllXsd value.
K2-SeqExprCast-452;Expected XPathException with code FORG0001, but got The string '11:11:11+-1:11' is not a valid AllXsd value.
K2-SeqExprCast-453;Expected XPathException with code FORG0001, but got The string '11:11:11+ 1:11' is not a valid AllXsd value.
K2-SeqExprCast-454;Expected XPathException with code FORG0001, but got The string '11:11:11+11:+1' is not a valid AllXsd value.
K2-SeqExprCast-455;Expected XPathException with code FORG0001, but got The string '11:11:11+11:-1' is not a valid AllXsd value.
K2-SeqExprCast-456;Expected XPathException with code FORG0001, but got The string '11:11:11+11: 1' is not a valid AllXsd value.
K2-SeqExprCast-457;Expected XPathException with code FORG0001, but got The string '11' is not a valid AllXsd value.
K2-SeqExprCast-458;Expected XPathException with code FORG0001, but got The string '1 :11:11' is not a valid AllXsd value.
K2-SeqExprCast-459;Expected XPathException with code FORG0001, but got The string '11:11:1' is not a valid AllXsd value.
K2-SeqExprCast-460;Expected XPathException with code FORG0001, but got The string '+2002-12-11' is not a valid AllXsd value.
K2-SeqExprCast-461;Expected XPathException with code FORG0001, but got The string '111-11-11' is not a valid AllXsd value.
K2-SeqExprCast-462;Expected XPathException with code FORG0001, but got The string '+11-11-11' is not a valid AllXsd value.
K2-SeqExprCast-463;Expected XPathException with code FORG0001, but got The string '1111- 1-11' is not a valid AllXsd value.
K2-SeqExprCast-464;Expected XPathException with code FORG0001, but got The string '-111-11-11' is not a valid AllXsd value.
K2-SeqExprCast-465;Expected XPathException with code FORG0001, but got The string '+111-11-11' is not a valid AllXsd value.
K2-SeqExprCast-466;Expected XPathException with code FORG0001, but got The string '1111-11- 1' is not a valid AllXsd value.
K2-SeqExprCast-467;Expected XPathException with code FORG0001, but got The string '1111-+1-11' is not a valid AllXsd value.
K2-SeqExprCast-468;Expected XPathException with code FORG0001, but got The string '1111-11-+1' is not a valid AllXsd value.
K2-SeqExprCast-469;Expected XPathException with code FORG0001, but got The string '1111--1-11' is not a valid AllXsd value.
K2-SeqExprCast-470;Expected XPathException with code FORG0001, but got The string '1111-11--1' is not a valid AllXsd value.
K2-SeqExprCast-471;Expected XPathException with code FORG0001, but got The string '1111-11-1F' is not a valid AllXsd value.
K2-SeqExprCast-472;Expected XPathException with code FORG0001, but got The string '0x10-11-11' is not a valid AllXsd value.
K2-SeqExprCast-473;Expected XPathException with code FORG0001, but got The string '111 -11-11' is not a valid AllXsd value.
K2-SeqExprCast-474;Expected XPathException with code FORG0001, but got The string '1111-1 -11' is not a valid AllXsd value.
K2-SeqExprCast-475;Expected XPathException with code FORG0001, but got The string '1111-11-1' is not a valid AllXsd value.
K2-SeqExprCast-476;Expected error code: FORG0001. Query succeeded with result: 2002-11-23T00:00:00
K2-SeqExprCast-479;PRSC Error: Failed to parse query '<e xmlns:prefix="http://example.com/"> { xs:QName("prefix:localName") } </e>'
K2-SeqExprCast-480;Type casting to XsBase64Binary has not been implemented yet.
K2-SeqExprCast-481;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K2-SeqExprCast-482;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K2-SeqExprCast-483;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K2-SeqExprCast-484;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K2-SeqExprCast-485;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K2-SeqExprCast-486;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K2-SeqExprCast-487;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K2-SeqExprCast-488;Expected XPathException with code FORG0001, but got Haven't implemented Qnames from: localName:p
K2-SeqExprCast-489;Expected XPathException with code FORG0001, but got Type casting to XsBase64Binary has not been implemented yet.
K2-SeqExprCast-49;Expected error code: FORG0001. Query succeeded with result: 0
K2-SeqExprCast-490;Expected XPathException with code FORG0001, but got Type casting to XsHexBinary has not been implemented yet.
K2-SeqExprCast-491;Expected XPathException with code FORG0001, but got Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprCast-492;Expected XPathException with code FORG0001, but got Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprCast-493;Expected XPathException with code FORG0001, but got Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprCast-494;Expected XPathException with code FORG0001, but got Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprCast-495;Expected XPathException with code FORG0001, but got Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprCast-496;Expected XPathException with code FORG0001, but got Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprCast-497;Expected XPathException with code FORG0001, but got Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprCast-498;Expected XPathException with code FORG0001, but got Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprCast-499;Expected error code: FORG0001. Found error code: XPST0017 with error message: The function current-time with arity 0 is not registered.
K2-SeqExprCast-500;Expected error code: FORG0001. Found error code: XPST0017 with error message: The function current-date with arity 0 is not registered.
K2-SeqExprCast-501;Expected XPathException with code FORG0001, but got Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprCast-502;Expected XPathException with code FORG0001, but got Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprCast-503;Expected XPathException with code FORG0001, but got Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprCast-504;Atomic Value for XsNcName is not implemented yet.
K2-SeqExprCast-505;Expected XPathException with code FORG0001, but got Type casting to XsAnyUri has not been implemented yet.
K2-SeqExprCast-506;Expected error code: FORG0001. Query succeeded with result: --02
K2-SeqExprCast-507;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K2-SeqExprCast-508;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K2-SeqExprCast-509;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K2-SeqExprCast-51;Expected error code: FORG0001. Query succeeded with result: 0
K2-SeqExprCast-510;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K2-SeqExprCast-511;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K2-SeqExprCast-512;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K2-SeqExprCast-513;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K2-SeqExprCast-514;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K2-SeqExprCast-515;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K2-SeqExprCast-516;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K2-SeqExprCast-517;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K2-SeqExprCast-518;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K2-SeqExprCast-519;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K2-SeqExprCast-520;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K2-SeqExprCast-521;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K2-SeqExprCast-524;Expected XPathException with code FORG0001, but got Input string was not in a correct format.
K2-SeqExprCast-56;Expected error code: FORG0001. Query succeeded with result: 0
K2-SeqExprCast-57;Expected error code: FORG0001. Query succeeded with result: -1
K2-SeqExprCast-62;Expected error code: FORG0001. Query succeeded with result: 0
K2-SeqExprCast-63;Expected error code: FORG0001. Query succeeded with result: 1
K2-SeqExprCast-78;Expected executing the XPath 'xs:long("-9223372036854775809")' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: FORG0001. Found error code: FOCA0001 with error message: Overflow when creating a Int64 from -9223372036854775809.
K2-SeqExprCast-79;Expected error code: FORG0001. Query succeeded with result: -2147483649
K2-SeqExprCast-80;Expected error code: FORG0001. Query succeeded with result: -32769
K2-SeqExprCast-81;Expected error code: FORG0001. Query succeeded with result: -129
K2-SeqExprCast-82;Expected error code: FORG0001. Query succeeded with result: -1
K2-SeqExprCast-83;Expected error code: FORG0001. Query succeeded with result: -1
K2-SeqExprCast-84;Expected error code: FORG0001. Query succeeded with result: -1
K2-SeqExprCast-85;Expected error code: FORG0001. Query succeeded with result: -1
K2-SeqExprCast-86;Expected error code: FORG0001. Query succeeded with result: -1
K2-SeqExprCast-87;Expected error code: FORG0001. Query succeeded with result: -1
K2-SeqExprCast-88;Expected error code: FORG0001. Query succeeded with result: 1
K2-SeqExprCast-89;Expected error code: FORG0001. Query succeeded with result: 0
K2-SeqExprCast-90;Expected executing the XPath 'xs:long("9223372036854775808")' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: FORG0001. Found error code: FOCA0001 with error message: Overflow when creating a Int64 from 9223372036854775808.
K2-SeqExprCast-91;Expected error code: FORG0001. Query succeeded with result: 2147483648
K2-SeqExprCast-92;Expected error code: FORG0001. Query succeeded with result: 32768
K2-SeqExprCast-93;Expected error code: FORG0001. Query succeeded with result: 128
K2-SeqExprCastable-1;PRSC Error: Failed to parse query '(QName("http://example.com/ANamespace", "ncname"), QName("http://example.com/ANamespace", "ncname2"), QName("http://example.com/ANamespace", "ncname3")) castable as xs:QName'
K2-SeqExprCastable-2;PRSC Error: Failed to parse query '(QName("http://example.com/ANamespace", "ncname"), QName("http://example.com/ANamespace", "ncname2"), QName("http://example.com/ANamespace", "ncname3")) castable as xs:QName?'
K2-SeqExprCastable-3;Expected executing the XPath '(1 div 0) castable as xs:string' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '(1 div 0) castable as xs:string'
K2-SeqExprCastable-4;Expected error code: FOAR0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'concat("2007-01-3", 1 div 0) castable as xs:date'
K2-SeqExprCastable-5;PRSC Error: Failed to parse query 'xs:positiveInteger("52") castable as xs:double'
K2-SeqExprCastable-6;PRSC Error: Failed to parse query '"%" castable as xs:anyURI'
K2-SeqExprCastable-7;PRSC Error: Failed to parse query 'xs:untypedAtomic("%") castable as xs:anyURI'
K2-SeqExprCastable-8;Expected executing the XPath '("http:\\invalid>URI\someURI") castable as xs:anyURI' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '("http:\\invalid>URI\someURI") castable as xs:anyURI'
K2-SeqExprInstanceOf-1;PRSC Error: Failed to parse query '<e/> instance of element()'
K2-SeqExprInstanceOf-10;PRSC Error: Failed to parse query 'attribute e{"content"} instance of attribute(*)'
K2-SeqExprInstanceOf-100;PRSC Error: Failed to parse query '<a><b/></a>/(b instance of element(), * instance of element())'
K2-SeqExprInstanceOf-11;PRSC Error: Failed to parse query 'attribute e{"content"} instance of element(e)'
K2-SeqExprInstanceOf-12;PRSC Error: Failed to parse query 'attribute e{"content"} instance of element()'
K2-SeqExprInstanceOf-13;PRSC Error: Failed to parse query 'attribute e{"content"} instance of element(*)'
K2-SeqExprInstanceOf-14;PRSC Error: Failed to parse query 'attribute e{"content"} instance of attribute(name)'
K2-SeqExprInstanceOf-2;PRSC Error: Failed to parse query '<e/> instance of element(*)'
K2-SeqExprInstanceOf-28;Atomic Value for XsNormalizedString is not implemented yet.
K2-SeqExprInstanceOf-29;Atomic Value for XsToken is not implemented yet.
K2-SeqExprInstanceOf-3;PRSC Error: Failed to parse query '<e/> instance of element(e)'
K2-SeqExprInstanceOf-30;Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprInstanceOf-31;Atomic Value for XsNmToken is not implemented yet.
K2-SeqExprInstanceOf-32;Atomic Value for XsName is not implemented yet.
K2-SeqExprInstanceOf-33;Atomic Value for XsNcName is not implemented yet.
K2-SeqExprInstanceOf-34;Atomic Value for XsId is not implemented yet.
K2-SeqExprInstanceOf-35;Atomic Value for XsIdRef is not implemented yet.
K2-SeqExprInstanceOf-36;Atomic Value for XsEntity is not implemented yet.
K2-SeqExprInstanceOf-37;Atomic Value for XsNormalizedString is not implemented yet.
K2-SeqExprInstanceOf-38;Atomic Value for XsToken is not implemented yet.
K2-SeqExprInstanceOf-39;Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprInstanceOf-4;PRSC Error: Failed to parse query '<e/> instance of element(name)'
K2-SeqExprInstanceOf-40;Atomic Value for XsNmToken is not implemented yet.
K2-SeqExprInstanceOf-41;Atomic Value for XsName is not implemented yet.
K2-SeqExprInstanceOf-42;Atomic Value for XsNcName is not implemented yet.
K2-SeqExprInstanceOf-43;Atomic Value for XsId is not implemented yet.
K2-SeqExprInstanceOf-44;Atomic Value for XsIdRef is not implemented yet.
K2-SeqExprInstanceOf-45;Atomic Value for XsEntity is not implemented yet.
K2-SeqExprInstanceOf-5;PRSC Error: Failed to parse query '<e/> instance of attribute()'
K2-SeqExprInstanceOf-6;PRSC Error: Failed to parse query '<e/> instance of attribute(*)'
K2-SeqExprInstanceOf-66;Atomic Value for XsToken is not implemented yet.
K2-SeqExprInstanceOf-67;Atomic Value for XsId is not implemented yet.
K2-SeqExprInstanceOf-68;Atomic Value for XsEntity is not implemented yet.
K2-SeqExprInstanceOf-69;Atomic Value for XsLanguage is not implemented yet.
K2-SeqExprInstanceOf-7;PRSC Error: Failed to parse query '<e/> instance of attribute(e)'
K2-SeqExprInstanceOf-70;Atomic Value for XsName is not implemented yet.
K2-SeqExprInstanceOf-71;Atomic Value for XsNormalizedString is not implemented yet.
K2-SeqExprInstanceOf-72;PRSC Error: Failed to parse query '<e a=""/>/attribute::a instance of attribute(a)'
K2-SeqExprInstanceOf-73;PRSC Error: Failed to parse query '<e a=""/>/@a instance of attribute(a)'
K2-SeqExprInstanceOf-8;PRSC Error: Failed to parse query 'attribute e{"content"} instance of attribute(e)'
K2-SeqExprInstanceOf-9;PRSC Error: Failed to parse query 'attribute e{"content"} instance of attribute()'
K2-SeqExprInstanceOf-98;PRSC Error: Failed to parse query 'node-name(text {""}) instance of empty-sequence()'
K2-SeqExprInstanceOf-99;PRSC Error: Failed to parse query '<e attr=""/>/(@attr instance of attribute(), @* instance of attribute())'
K2-SeqIDFunc-1;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function id with arity 2 is not registered.
K2-SeqIDFunc-10;The function id with arity 1 is not registered.
K2-SeqIDFunc-11;The function id with arity 2 is not registered.
K2-SeqIDFunc-12;The function id with arity 2 is not registered.
K2-SeqIDFunc-13;The function fn:id with arity 1 is not registered.
K2-SeqIDFunc-14;The function id with arity 1 is not registered.
K2-SeqIDFunc-15;The function fn:id with arity 1 is not registered.
K2-SeqIDFunc-2;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function id with arity 2 is not registered.
K2-SeqIDFunc-3;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function id with arity 1 is not registered.
K2-SeqIDFunc-4;Expected error code: FODC0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        import module namespace copy="http://www.w3.org/QT3/copy";\n        id("id", copy:copy((//comment())[1]))\n      '
K2-SeqIDFunc-5;Expected error code: FODC0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        import module namespace copy="http://www.w3.org/QT3/copy";\n        id("id", copy:copy((//processing-instruction())[1]))\n      '
K2-SeqIDFunc-6;Expected error code: FODC0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        import module namespace copy="http://www.w3.org/QT3/copy";\n        id("id", copy:copy(/*))\n      '
K2-SeqIDFunc-7;Expected error code: FODC0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        import module namespace copy="http://www.w3.org/QT3/copy";\n        id("id", (copy:copy(/*)//*:NegativeComments)[last()])\n      '
K2-SeqIDFunc-8;Expected error code: FODC0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'let $i := <e><e/><e/><e/><e/><e/><e/><e/><b xml:id="foo"/><e/></e>return id("foo", $i)'
K2-SeqIDFunc-9;PRSC Error: Failed to parse query 'let $i := document {<e> <e/> <e/> <e/> <e/> <e/> <e/> <e/> <b xml:id="foo"/> <e/> </e>} return id("foo", $i)/name()'
K2-SeqIDREFFunc-1;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function idref with arity 2 is not registered.
K2-SeqIDREFFunc-2;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function idref with arity 2 is not registered.
K2-SeqIDREFFunc-3;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function idref with arity 1 is not registered.
K2-SeqIntersect-10;PRSC Error: Failed to parse query 'empty(<e/>/(author intersect document))'
K2-SeqIntersect-11;PRSC Error: Failed to parse query 'empty(<e/>/(author intersect if))'
K2-SeqIntersect-12;PRSC Error: Failed to parse query 'empty(<e/>/(author intersect then))'
K2-SeqIntersect-13;PRSC Error: Failed to parse query 'empty(<e/>/(author intersect mod))'
K2-SeqIntersect-14;PRSC Error: Failed to parse query 'empty(<e/>/(author intersect div))'
K2-SeqIntersect-15;PRSC Error: Failed to parse query 'empty(<e/>/(author intersect empty-sequence))'
K2-SeqIntersect-16;PRSC Error: Failed to parse query 'empty(<e/>/(author intersect schema-attribute))'
K2-SeqIntersect-17;PRSC Error: Failed to parse query 'empty(<e/>/(author intersect schema-element))'
K2-SeqIntersect-18;PRSC Error: Failed to parse query 'empty(<e/>/(a intersect attribute {"name"} {()}))'
K2-SeqIntersect-19;PRSC Error: Failed to parse query 'empty(<e/>/(a intersect attribute name {()}))'
K2-SeqIntersect-2;PRSC Error: Failed to parse query 'empty(<e/>/(author intersect text))'
K2-SeqIntersect-20;Expected executing the XPath 'empty(<e/>/(a intersect element {"name"} {()}))' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'empty(<e/>/(a intersect element {"name"} {()}))'
K2-SeqIntersect-21;Expected executing the XPath 'empty(<e/>/(a intersect element name {()}))' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'empty(<e/>/(a intersect element name {()}))'
K2-SeqIntersect-22;PRSC Error: Failed to parse query 'empty(<e/>/(a intersect processing-instruction {"name"} {()}))'
K2-SeqIntersect-23;PRSC Error: Failed to parse query 'empty(<e/>/(a intersect processing-instruction name {}))'
K2-SeqIntersect-24;PRSC Error: Failed to parse query 'empty(<e/>/(a intersect comment {()}))'
K2-SeqIntersect-25;PRSC Error: Failed to parse query 'empty(<e/>/(a intersect text {()}))'
K2-SeqIntersect-26;PRSC Error: Failed to parse query 'empty(<e/>/(a intersect descendant))'
K2-SeqIntersect-27;PRSC Error: Failed to parse query 'empty(<e/>/(a intersect attribute))'
K2-SeqIntersect-28;PRSC Error: Failed to parse query 'empty(<e/>/(a intersect self))'
K2-SeqIntersect-29;PRSC Error: Failed to parse query 'empty(<e/>/(a intersect descendant-or-self))'
K2-SeqIntersect-3;PRSC Error: Failed to parse query 'empty(<e/>/(author intersect node))'
K2-SeqIntersect-30;PRSC Error: Failed to parse query 'empty(<e/>/(a intersect following-sibling))'
K2-SeqIntersect-31;PRSC Error: Failed to parse query 'empty(<e/>/(a intersect following))'
K2-SeqIntersect-32;PRSC Error: Failed to parse query 'empty(<e/>/(a intersect preceding-sibling))'
K2-SeqIntersect-33;PRSC Error: Failed to parse query 'empty(<e/>/(a intersect preceding))'
K2-SeqIntersect-34;PRSC Error: Failed to parse query 'empty(<e/>/(a intersect parent))'
K2-SeqIntersect-35;PRSC Error: Failed to parse query 'empty(<e/>/(a intersect ancestor))'
K2-SeqIntersect-36;PRSC Error: Failed to parse query 'empty(<e/>/(a intersect ancestor))'
K2-SeqIntersect-37;PRSC Error: Failed to parse query 'empty(<e/>/(a intersect ancestor-or-self))'
K2-SeqIntersect-38;PRSC Error: Failed to parse query 'empty(<e/>/(a intersect declare))'
K2-SeqIntersect-4;PRSC Error: Failed to parse query 'empty(<e/>/(author intersect element))'
K2-SeqIntersect-41;PRSC Error: Failed to parse query '<r> { let $i := <e> <a/> <b/> <c/> </e>/a , $t := $i/following-sibling::b return (($i intersect ($i, $i)), (($t, $t) intersect $t)) } </r>'
K2-SeqIntersect-42;PRSC Error: Failed to parse query '\n         declare function local:function ($c as node()) { $c intersect $c }; \n         empty(local:function(document{()}))\n      '
K2-SeqIntersect-5;PRSC Error: Failed to parse query 'empty(<e/>/(author intersect attribute))'
K2-SeqIntersect-6;PRSC Error: Failed to parse query 'empty(<e/>/(author intersect document-node))'
K2-SeqIntersect-7;PRSC Error: Failed to parse query 'empty(<e/>/(author intersect comment))'
K2-SeqIntersect-8;PRSC Error: Failed to parse query 'empty(<e/>/(author intersect processing-instruction))'
K2-SeqIntersect-9;PRSC Error: Failed to parse query 'empty(<e/>/(author intersect item))'
K2-SeqMAXFunc-1;Type casting to XsAnyUri has not been implemented yet.
K2-SeqMAXFunc-2;Type casting to XsAnyUri has not been implemented yet.
K2-SeqMAXFunc-3;Type casting to XsAnyUri has not been implemented yet.
K2-SeqMAXFunc-6;Expected executing the XPath 'max(xs:anyURI("str1"), "max://example.com/UNSUPPORTED_COLLATION")' to resolve to one of the expected results, but got System.NotImplementedException: Type casting to XsAnyUri has not been implemented yet.
K2-SeqMINFunc-1;Type casting to XsAnyUri has not been implemented yet.
K2-SeqMINFunc-10;PRSC Error: Failed to parse query 'min((5.0e0, 3)) instance of xs:double'
K2-SeqMINFunc-11;Expected XPath min((1, 1, 1, 1, 1.0)) instance of xs:decimal to resolve to true
K2-SeqMINFunc-12;Expected XPath min((1.0, 1, 1, 1, 1)) instance of xs:decimal to resolve to true
K2-SeqMINFunc-13;Expected XPath min((1.0, 1, 1.0, 1, 1)) instance of xs:decimal to resolve to true
K2-SeqMINFunc-14;Input string was not in a correct format.
K2-SeqMINFunc-2;Type casting to XsAnyUri has not been implemented yet.
K2-SeqMINFunc-3;Type casting to XsAnyUri has not been implemented yet.
K2-SeqMINFunc-5;Expected executing the XPath 'min(xs:anyURI("str1"), "http://example.com/UNSUPPORTED_COLLATION")' to resolve to one of the expected results, but got System.NotImplementedException: Type casting to XsAnyUri has not been implemented yet.
K2-SeqMINFunc-7;PRSC Error: Failed to parse query 'min((5, 5.0e0)) instance of xs:double'
K2-SeqMINFunc-8;PRSC Error: Failed to parse query 'min((5.0e0, 5)) instance of xs:double'
K2-SeqMINFunc-9;PRSC Error: Failed to parse query 'min((3, 5.0e0)) instance of xs:double'
K2-SeqReverseFunc-1;PRSC Error: Failed to parse query 'reverse((<a> <b> <c/> <d/> </b> <e/> </a> , <f/>))'
K2-SeqReverseFunc-2;PRSC Error: Failed to parse query 'declare variable $myVar := unordered{ordered{unordered{fn:reverse((<a/>, <b/>))}}}; deep-equal($myVar, (<a/>, <b/>)) or deep-equal($myVar, (<b/>, <a/>))'
K2-SeqReverseFunc-3;PRSC Error: Failed to parse query 'declare variable $myVar := unordered(fn:reverse((<a/>, <b/>))); deep-equal($myVar, (<a/>, <b/>)) or deep-equal($myVar, (<b/>, <a/>))'
K2-SeqReverseFunc-6;PRSC Error: Failed to parse query 'deep-equal((declare ordering unordered; reverse((1, 2))), (2, 1))'
K2-SeqSubsequenceFunc-1;TreatExpr AST to Expression not yet implemented
K2-SeqSUMFunc-4;Expected XPath sum(xs:unsignedShort("1")) instance of xs:unsignedShort to resolve to true
K2-sequenceExprTypeswitch-1;PRSC Error: Failed to parse query 'boolean(typeswitch (current-time(), 1, 3e3, "foo") case node() return 0 case xs:integer return 3 case xs:anyAtomicType return true() default return -1)'
K2-sequenceExprTypeswitch-10;Expected error code: XPST0008. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'typeswitch (1, 2, 3) case node() return <e/> case $i as xs:integer return 3 default return 1, $i'
K2-sequenceExprTypeswitch-11;Expected error code: XPST0008. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'typeswitch (1, 2, 3) case node() return <e/> default $i return 1 , typeswitch (1, 2, 3) case xs:integer* return $i default return 1'
K2-sequenceExprTypeswitch-12;PRSC Error: Failed to parse query '\n         declare variable $i := (attribute name {"content"}, <a attr="content"/>, <e/>, 1, "str", <!-- a comment -->); \n         <d> { \n            typeswitch(\n               typeswitch($i) \n                  case $b as element(e) return concat("Found an element by name ", $b) \n                  case $b as element() return comment{concat("Found: ", $b)} \n                  case $c as attribute(doesntMatch) return $c/.. \n                  default $def return $def) \n               case $str as xs:string return "A string" \n               case $attr as attribute() return string($attr) \n               default $def return $def \n          } </d>'
K2-sequenceExprTypeswitch-13;Expected error code: XQTY0024. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $i := (<e/>, attribute name {"content"}, <a attr="content"/>, <e/>, 1, "str", <!-- a comment -->); <d> { typeswitch(typeswitch($i) case $b as element(e) return concat("Found an element by name ", $b) case $b as element() return comment{concat("Found: ", $b)} case $c as attribute(doesntMatch) return $c/.. default $def return $def) case $str as xs:string return "A string" case $attr as attribute() return string($attr) default $def return $def } </d>'
K2-sequenceExprTypeswitch-14;PRSC Error: Failed to parse query '<e/>/(typeswitch (self::node()) case $i as node() return . default return 1)'
K2-sequenceExprTypeswitch-15;PRSC Error: Failed to parse query '<e/>/(typeswitch (self::node()) case $i as xs:integer return $i default $v return $v)'
K2-sequenceExprTypeswitch-16;PRSC Error: Failed to parse query 'typeswitch(<e/>, <e/>) case $b as element() return concat("", $b treat as element()) default return 1 = 1'
K2-sequenceExprTypeswitch-4;Expected error code: XPST0008. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'typeswitch (1, 2, 3) case $i as node() return <e/> case xs:integer* return $i default return true()'
K2-sequenceExprTypeswitch-5;Expected error code: XPST0008. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'typeswitch (1, 2, 3) case node() return $i case $i as xs:integer return 1 default return true()'
K2-sequenceExprTypeswitch-6;Expected error code: XPST0008. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'typeswitch (1, 2, 3) case node() return <e/> case $i as xs:integer return 1 default return $i'
K2-sequenceExprTypeswitch-7;Expected error code: XPST0008. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'typeswitch (1, 2, 3) case node() return <e/> case xs:integer* return $i default $i return 1'
K2-sequenceExprTypeswitch-9;Expected error code: XPST0008. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'typeswitch (1, 2, 3) case node() return <e/> case xs:integer return 3 default $i return 1, $i'
K2-SeqUnion-1;PRSC Error: Failed to parse query '<r> { let $i := <e> <a/> <b/> </e> return ($i/b, $i/a, $i/b, $i/a) | () } </r>'
K2-SeqUnion-10;PRSC Error: Failed to parse query 'empty(<e/>/(author union document-node))'
K2-SeqUnion-11;PRSC Error: Failed to parse query 'empty(<e/>/(author union comment))'
K2-SeqUnion-12;PRSC Error: Failed to parse query 'empty(<e/>/(author union processing-instruction))'
K2-SeqUnion-13;PRSC Error: Failed to parse query 'empty(<e/>/(author union item))'
K2-SeqUnion-14;PRSC Error: Failed to parse query 'empty(<e/>/(author union document))'
K2-SeqUnion-15;PRSC Error: Failed to parse query 'empty(<e/>/(author union if))'
K2-SeqUnion-16;PRSC Error: Failed to parse query 'empty(<e/>/(author union then))'
K2-SeqUnion-17;PRSC Error: Failed to parse query 'empty(<e/>/(author union mod))'
K2-SeqUnion-18;PRSC Error: Failed to parse query 'empty(<e/>/(author union div))'
K2-SeqUnion-19;PRSC Error: Failed to parse query 'empty(<e/>/(author union empty-sequence))'
K2-SeqUnion-2;PRSC Error: Failed to parse query '<r> { let $i := <e> <a/> <b/> </e> return () | ($i/b, $i/a, $i/b, $i/a) } </r>'
K2-SeqUnion-20;PRSC Error: Failed to parse query 'empty(<e/>/(author union schema-attribute))'
K2-SeqUnion-21;PRSC Error: Failed to parse query 'empty(<e/>/(author union schema-element))'
K2-SeqUnion-22;PRSC Error: Failed to parse query 'empty(<e/>/(a union attribute {"name"} {()}))'
K2-SeqUnion-23;PRSC Error: Failed to parse query 'empty(<e/>/(a union attribute name {()}))'
K2-SeqUnion-24;Expected executing the XPath 'empty(<e/>/(a union element {"name"} {()}))' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'empty(<e/>/(a union element {"name"} {()}))'
K2-SeqUnion-25;Expected executing the XPath 'empty(<e/>/(a union element name {()}))' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'empty(<e/>/(a union element name {()}))'
K2-SeqUnion-26;PRSC Error: Failed to parse query 'empty(<e/>/(a union processing-instruction {"name"} {()}))'
K2-SeqUnion-27;PRSC Error: Failed to parse query 'empty(<e/>/(a union processing-instruction name {}))'
K2-SeqUnion-28;PRSC Error: Failed to parse query 'empty(<e/>/(a union comment {()}))'
K2-SeqUnion-29;PRSC Error: Failed to parse query 'empty(<e/>/(a union text {()}))'
K2-SeqUnion-3;PRSC Error: Failed to parse query 'empty(<e/>/(author union comment))'
K2-SeqUnion-30;PRSC Error: Failed to parse query 'empty(<e/>/(a union descendant))'
K2-SeqUnion-31;PRSC Error: Failed to parse query 'empty(<e/>/(a union attribute))'
K2-SeqUnion-32;PRSC Error: Failed to parse query 'empty(<e/>/(a union self))'
K2-SeqUnion-33;PRSC Error: Failed to parse query 'empty(<e/>/(a union descendant-or-self))'
K2-SeqUnion-34;PRSC Error: Failed to parse query 'empty(<e/>/(a union following-sibling))'
K2-SeqUnion-35;PRSC Error: Failed to parse query 'empty(<e/>/(a union following))'
K2-SeqUnion-36;PRSC Error: Failed to parse query 'empty(<e/>/(a union preceding-sibling))'
K2-SeqUnion-37;PRSC Error: Failed to parse query 'empty(<e/>/(a union preceding))'
K2-SeqUnion-38;PRSC Error: Failed to parse query 'empty(<e/>/(a union parent))'
K2-SeqUnion-39;PRSC Error: Failed to parse query 'empty(<e/>/(a union ancestor))'
K2-SeqUnion-4;PRSC Error: Failed to parse query 'let $i := <e> <a/> <b/> <c/> </e>/a , $t := $i/following-sibling::b return (($i union ($i, $i)), (($t, $t) union $t))'
K2-SeqUnion-40;PRSC Error: Failed to parse query 'empty(<e/>/(a union ancestor))'
K2-SeqUnion-41;PRSC Error: Failed to parse query 'empty(<e/>/(a union ancestor-or-self))'
K2-SeqUnion-42;PRSC Error: Failed to parse query 'empty(<e/>/(a union declare))'
K2-SeqUnion-45;PRSC Error: Failed to parse query ' <r> { //(employee[location = "Denver"] union //employee[last()])/./location } </r>'
K2-SeqUnion-6;PRSC Error: Failed to parse query 'empty(<e/>/(author union text))'
K2-SeqUnion-7;PRSC Error: Failed to parse query 'empty(<e/>/(author union node))'
K2-SeqUnion-8;PRSC Error: Failed to parse query 'empty(<e/>/(author union element))'
K2-SeqUnion-9;PRSC Error: Failed to parse query 'empty(<e/>/(author union attribute))'
K2-StartsWithFunc-1;TreatExpr AST to Expression not yet implemented
K2-StartsWithFunc-2;TreatExpr AST to Expression not yet implemented
K2-StartsWithFunc-3;TreatExpr AST to Expression not yet implemented
K2-StartsWithFunc-4;TreatExpr AST to Expression not yet implemented
K2-StartsWithFunc-5;TreatExpr AST to Expression not yet implemented
K2-StartsWithFunc-6;TreatExpr AST to Expression not yet implemented
K2-Steps-1;Expected error code: XPDY0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:myFunc() { e[1] }; local:myFunc()'
K2-Steps-10;Expected error code: XPTY0018. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $myVar := <e>text</e>; $myVar/text()/(<e/>, (), 1, <e/>)'
K2-Steps-12;Expected executing the XPath 'declare variable $e := ()/.; declare variable $b := <b/>/.; $e, <b/>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare variable $e := ()/.; declare variable $b := <b/>/.; $e, <b/>'
K2-Steps-13;PRSC Error: Failed to parse query 'empty(<e/>/(for $i in e return $i))'
K2-Steps-14;Expected executing the XPath '<r> { let $i := <e> <a/> <b/> </e> let $b := ($i/b, $i/a, $i/b, $i/a) return ()/$b } </r>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '<r> { let $i := <e> <a/> <b/> </e> let $b := ($i/b, $i/a, $i/b, $i/a) return ()/$b } </r>'
K2-Steps-15;PRSC Error: Failed to parse query '<r> { let $i := <e> <a/> <b/> </e> let $b := ($i/b, $i/a, $i/b, $i/a) return <e/>/$b } </r>'
K2-Steps-16;PRSC Error: Failed to parse query '<r> { let $i := <e> <a/> <b/> </e> let $b := ($i/b, $i/a, $i/b, $i/a) return <e/>/./$b } </r>'
K2-Steps-17;PRSC Error: Failed to parse query '<r> { let $i := <e> <a/> <b/> </e> let $b := ($i/b, $i/a, $i/b, $i/a) return $b/. } </r>'
K2-Steps-18;PRSC Error: Failed to parse query '<e> <a/> </e>/*/(., .)/.'
K2-Steps-19;PRSC Error: Failed to parse query '<e> <a/> </e>/(., .)/.'
K2-Steps-2;Expected executing the XPath 'declare function local:myFunc() { e[928] }; local:myFunc()' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XPDY0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:myFunc() { e[928] }; local:myFunc()'
K2-Steps-20;PRSC Error: Failed to parse query '<e> <a/> <b/> </e>/((b, a)/., (.), (*, *))'
K2-Steps-21;PRSC Error: Failed to parse query 'declare variable $root := <a> <b e="B"/> <c e="B"/> </a>; declare function local:function($arg) { $root["B" eq $arg/@e] }; $root/local:function(c)'
K2-Steps-22;PRSC Error: Failed to parse query 'declare variable $root := <a> <b e="B"/> <c e="B"/> </a>; declare function local:function($arg) { $root[exactly-one($arg/@e)] }; $root/local:function(c)'
K2-Steps-23;PRSC Error: Failed to parse query 'declare variable $root := <a><c e=""/></a>; declare function local:function($arg) { $root[$arg/@e] }; $root/local:function(c)'
K2-Steps-24;PRSC Error: Failed to parse query 'declare variable $root := <root> <b d=""/> <c> <c d=""/> <c/> </c> </root>; declare function local:function($object) { $root/b[@d = $object/@d] }; $root/c/c/local:function(.)'
K2-Steps-25;PRSC Error: Failed to parse query '\n        declare variable $root := <root> <b d=""/> <c> <c d=""/> <c/> </c> </root>; \n        declare function local:function($object) { $root/b[@d = $object/@d] }; \n        $root//local:function(c)'
K2-Steps-26;PRSC Error: Failed to parse query 'declare variable $root := <root> <b d=""/> <c> <c d=""/> <c/> </c> </root>; declare function local:function($object) { $root/b[$object/@d] }; $root//local:function(c)'
K2-Steps-27;PRSC Error: Failed to parse query 'declare variable $root := <root> <b d=""/> <c> <c d=""/> <c/> </c> </root>; declare function local:function($object) { $root[$object/@d] }; $root//local:function(c)'
K2-Steps-28;PRSC Error: Failed to parse query 'declare variable $root := <root> <b d=""/> <c d=""/> </root>; declare function local:function($object) { $root[$object/@d] }; $root//local:function(c)'
K2-Steps-29;PRSC Error: Failed to parse query 'declare variable $root := <root> <c d=""/> </root>; declare function local:function($object) { $root[$object/@d] }; $root//local:function(c)'
K2-Steps-3;Expected executing the XPath 'declare function local:myFunc() { e[true()] }; local:myFunc()' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XPDY0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:myFunc() { e[true()] }; local:myFunc()'
K2-Steps-30;PRSC Error: Failed to parse query 'declare variable $root := <root> <c d=""/> </root>; declare function local:function($object) { $root[$object] }; $root//local:function(c)'
K2-Steps-31;PRSC Error: Failed to parse query 'declare variable $root := <root><c/></root>; declare function local:function($arg) { $root[$arg] }; $root//local:function(.)'
K2-Steps-32;PRSC Error: Failed to parse query 'declare variable $root := <root/>; declare function local:function($arg, $count as xs:integer) { $arg, $root, if($count eq 2) then $root else local:function($arg, $count + 1) }; $root/local:function(., 1)'
K2-Steps-33;PRSC Error: Failed to parse query 'declare variable $root := ( <b d=""/>, <c> <c d=""/> </c> ); declare function local:function($object) { $root[@d eq $object/@d] }; $root/local:function(c)'
K2-Steps-34;PRSC Error: Failed to parse query '\n        declare variable $root := ( <b d=""/>, <c d=""> <c d=""/> </c> ); \n        declare function local:function($object) { $root[@d eq $object/@d] }; \n        $root!local:function(c)\n      '
K2-Steps-35;PRSC Error: Failed to parse query '(<e/>[1]/text{string-join(., " ")}, 1) => count()'
K2-Steps-4;Expected error code: XPDY0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:myFunc() { e[last()] }; local:myFunc()'
K2-Steps-5;PRSC Error: Failed to parse query 'empty(<a/>/a)'
K2-Steps-6;PRSC Error: Failed to parse query '<a/>/.'
K2-Steps-7;PRSC Error: Failed to parse query 'count((<a/>, <!--comment-->)/3) = 2'
K2-StringEqual-1;PRSC Error: Failed to parse query 'declare variable $vA as xs:string := ("B STRING", current-time(), string(<e>content</e>))[1] treat as xs:string; declare variable $vB as xs:string := ("b string", current-time(), string(<e>content</e>))[1] treat as xs:string; (lower-case($vA) eq lower-case($vB))'
K2-StringEqual-2;PRSC Error: Failed to parse query 'declare variable $vA as xs:string := ("B STRING", current-time(), string(<e>content</e>))[1] treat as xs:string; declare variable $vB as xs:string := ("b string", current-time(), string(<e>content</e>))[1] treat as xs:string; (upper-case($vA) eq upper-case($vB))'
K2-StringEqual-3;PRSC Error: Failed to parse query 'declare variable $vA as xs:string := ("B STRING", current-time(), string(<e>content</e>))[1] treat as xs:string; declare variable $vB as xs:string := ("no match", current-time(), string(<e>content</e>))[1] treat as xs:string; (lower-case($vA) eq lower-case($vB))'
K2-StringEqual-4;PRSC Error: Failed to parse query 'declare variable $vA as xs:string := ("B STRING", current-time(), string(<e>content</e>))[1] treat as xs:string; declare variable $vB as xs:string := ("no match", current-time(), string(<e>content</e>))[1] treat as xs:string; (upper-case($vA) eq upper-case($vB))'
K2-StringEqual-5;PRSC Error: Failed to parse query 'declare variable $vA as xs:string := ("B STRING", current-time(), string(<e>content</e>))[1] treat as xs:string; declare variable $vB as xs:string := ("b string", current-time(), string(<e>content</e>))[1] treat as xs:string; (upper-case($vA) eq lower-case($vB))'
K2-StringEqual-6;PRSC Error: Failed to parse query '\n        declare variable $vA as xs:string := ("B STRING", current-time(), string(<e>content</e>))[1] treat as xs:string; \n        declare variable $vB as xs:string := ("b string", current-time(), string(<e>content</e>))[1] treat as xs:string; \n        (lower-case($vA) eq upper-case($vB))\n      '
K2-StringLT-1;Expected XPath "" lt "𑅰" to resolve to true
K2-TokenizeFunc-1;TreatExpr AST to Expression not yet implemented
K2-TokenizeFunc-2;TreatExpr AST to Expression not yet implemented
K2-TokenizeFunc-3;TreatExpr AST to Expression not yet implemented
K2-TokenizeFunc-4;TreatExpr AST to Expression not yet implemented
K2-TokenizeFunc-5;Expected XPath deep-equal(fn:tokenize("The cat sat on the mat", "\s+"), ("The", "cat", "sat", "on", "the", "mat")), count(fn:tokenize("The cat sat on the mat", "\s+")), count(fn:tokenize(" The cat sat on the mat ", "\s+")), fn:tokenize("The cat sat on the mat", "\s+") to resolve to true 6 8 The cat sat on the mat, but instead got False 5 7          
K2-TokenizeFunc-7;Expected XPath count(tokenize("a b", " ")), count(tokenize("a b", "\s")), string-join(tokenize("a b", " "), '|'), string-join(tokenize("a b", "\s"), '|'), tokenize("a b", " "), tokenize("a b", "\s") to resolve to 2 2 a|b a|b a b a b, but instead got 1 1        
K2-VersionProlog-3-v4;PRSC Error: Failed to parse query 'xquery version '1&#x2e;0' encoding 'UTF-8'; true()'
K2-VersionProlog-5;Expected error code: XPDY0002. Query succeeded with result: 
K2-VersionProlog-6;PRSC Error: Failed to parse query 'xquery version '1.0' encoding 'UTF&#x2d;8'; true()'
K2-WhereExpr-1b;Use of XQuery FLWOR expressions in XPath is not allowed
K2-XQueryComment-3;PRSC Error: Failed to parse query '(:*******************************************************:)\n(: Test: K2-XQueryComment-3                              :)\n(: Written by: Frans Englich                             :)\n(: Date: 2007-11-22T11:31:21+01:00                       :)\n(: Purpose: Have a computed comment constructor as a last step. :)\n(:*******************************************************:)\nlet $i := <e>\n                                            <b/>\n                                            <b/>\n                                            <b/>\n                                        </e>\n                                        return $i/b/comment(: some : content (:some content:):){"content"}  '
K2-XQueryComment-4;PRSC Error: Failed to parse query '(:*******************************************************:)\n(: Test: K2-XQueryComment-4                              :)\n(: Written by: Frans Englich                             :)\n(: Date: 2007-11-22T11:31:21+01:00                       :)\n(: Purpose: Have a direct comment constructor as a last step. :)\n(:*******************************************************:)\nlet $i := <e>\n                                            <b/>\n                                            <b/>\n                                            <b/>\n                                        </e>\n                                        return $i/(: some : content (:some content:):)<!--content-->  '
K2-XQueryComment-5;PRSC Error: Failed to parse query '(:*******************************************************:)\n(: Test: K2-XQueryComment-5                              :)\n(: Written by: Frans Englich                             :)\n(: Date: 2007-11-22T11:31:21+01:00                       :)\n(: Purpose: Have a direct comment constructor as a last step(#2). :)\n(:*******************************************************:)\nlet $i := <e>\n                                            <b/>\n                                            <b/>\n                                            <b/>\n                                        </e>\n                                        return $i/b/(: some : content (:some content:):)<!--content-->  '
K3-NodeNameFunc-2;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'node-name( (<a/>, <b/>))'
K3-NodeNameFunc-3;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'node-name( (<a/>, "mystring"))'
K3-NodeNameFunc-4;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'node-name( node-name(<a/>))'
last-2;Expected error code: XPDY0002. Query succeeded with result: 1
last-25;/works/employee/*/last()
last-7;Expected XPath for $h in (/works) return $h/employee[last()] is $h/employee[last()] to resolve to true
lessthaneqonanyuri-1;Type casting to XsAnyUri has not been implemented yet.
lessthanonanyuri-1;Type casting to XsAnyUri has not been implemented yet.
LetExpr003;Expected XPath let $x := 92233720368547758+1 return $x to resolve to 92233720368547759
LetExpr005;Expected XPath let $x := xs:long("-92233720368547758")+1 return $x to resolve to -92233720368547757
LetExpr006;Expected XPath let $x := xs:double("1.7976931348623157E308") return $x to resolve to 1.7976931348623157E308, but instead got 1.7976931348623157E+308
LetExpr007;PRSC Error: Failed to parse query 'let $x:=<a>{1+1}</a> return $x'
LetExpr009;PRSC Error: Failed to parse query 'let $x:=1, $y:=<a>{$x+1}</a> return $y'
LetExpr015;PRSC Error: Failed to parse query 'let $x := (0,0.1e-1,2.0,'a',"cat",'',true()) return $x'
LetExpr016;PRSC Error: Failed to parse query 'let $a := (<elem1/>, <elem2/>, <elem3 att="test"/>) return <root>{$a}</root>'
LetExpr017;PRSC Error: Failed to parse query 'let $x := (<a> <b> <c> 123 </c> </b> </a>) return $x'
LetExpr018;Expected error code: XPTY0019. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'let $x := (0,0.1e-1,2.0,'a',"cat",'',true(), ('<a> <b> <c> 123 </c> </b> </a>')/a/b) return $x'
LetExpr019;PRSC Error: Failed to parse query 'let $a := <elem/> let $b := <elem2/> return ($a,$b)'
LetExpr020;PRSC Error: Failed to parse query 'let $a := 1 let $b := $a let $c := $a+$b return ($c) = 2'
letexprwith-21;Expected XPath let $var as xs:string := xs:string(fn:true()) return $var to resolve to true, but instead got True
letexprwith-24;PRSC Error: Failed to parse query 'let $var as xs:string := typeswitch(fn:true()) case $i as xs:boolean return "Test Passed" default return "Test failed" return $var'
liam-contains-001;No collations are supported
liam-contains-002;No collations are supported
liam-contains-003;No collations are supported
liam-contains-004;No collations are supported
line-ending-Q002;Expected XPath deep-equal(string-to-codepoints('\n'), (10)) to resolve to true
line-ending-Q003;Expected XPath deep-equal(string-to-codepoints('\n \n \n\n'), (10, 32, 10, 32, 10, 10)) to resolve to true
line-ending-Q004;Expected XPath deep-equal(string-to-codepoints('\n\n'), (10)) to resolve to true
line-ending-Q005;Expected XPath deep-equal(string-to-codepoints(' \n '), (32, 10, 32)) to resolve to true
line-ending-Q006;Expected XPath deep-equal(string-to-codepoints(' \n '), (32, 10, 32)) to resolve to true
line-ending-Q007;Expected XPath deep-equal(string-to-codepoints('\n\n'), (10, 133)) to resolve to true
Literals005;PRSC Error: Failed to parse query '<result>{ ("test1", "test2") }</result>'
Literals014;Expected XPath -.65535032 to resolve to -0.65535032, but instead got Infinity
Literals016;Expected XPath 65535032e2 to resolve to 6.5535032E9, but instead got 6553503200
Literals017;PRSC Error: Failed to parse query '65535.032e2'
Literals021;PRSC Error: Failed to parse query '65535.032e-2'
Literals025;PRSC Error: Failed to parse query '-65535.032e2'
Literals026;PRSC Error: Failed to parse query '-65535.032e-2'
Literals027;Expected XPath 65535032E2 to resolve to 6.5535032E9, but instead got 6553503200
Literals028;PRSC Error: Failed to parse query '65535.032E2'
Literals032;PRSC Error: Failed to parse query '65535.032E-2'
Literals056;Expected XPath "&amp;" to resolve to &, but instead got &amp;
Literals057;Expected XPath "&quot;" to resolve to ", but instead got &quot;
Literals058;Expected XPath "&apos;" to resolve to ', but instead got &apos;
Literals059;Expected XPath "&lt;" to resolve to <, but instead got &lt;
Literals060;Expected XPath "&gt;" to resolve to >, but instead got &gt;
Literals061;Expected XPath "&#8364;" to resolve to €, but instead got &#8364;
Literals066;PRSC Error: Failed to parse query '<test>{ 'He said, "I don''t like it."' }</test>'
Literals067;PRSC Error: Failed to parse query '<test check='He said, "I don''t like it."' />'
Literals068;PRSC Error: Failed to parse query 'text{ 'He said, "I don''t like it."' }'
Literals069;PRSC Error: Failed to parse query 'text{ "He said, ""I don't like it.""" }'
LocalNameFromQNameFunc001;The function fn:local-name-from-QName with arity 1 is not registered.
LocalNameFromQNameFunc002;The function fn:local-name-from-QName with arity 1 is not registered.
LocalNameFromQNameFunc003;The function fn:local-name-from-QName with arity 1 is not registered.
LocalNameFromQNameFunc004;The function fn:local-name-from-QName with arity 1 is not registered.
LocalNameFromQNameFunc005;The function fn:local-name-from-QName with arity 1 is not registered.
LocalNameFromQNameFunc006;The function fn:local-name-from-QName with arity 1 is not registered.
LocalNameFromQNameFunc007;The function fn:local-name-from-QName with arity 1 is not registered.
LocalNameFromQNameFunc009;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function fn:local-name-from-QName with arity 1 is not registered.
LocalNameFromQNameFunc010;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function fn:local-name-from-QName with arity 1 is not registered.
LocalNameFromQNameFunc015;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function fn:local-name-from-QName with arity 1 is not registered.
LocalNameFromQNameFunc015a;Expected error code: XPTY0117. Found error code: XPST0017 with error message: The function fn:local-name-from-QName with arity 1 is not registered.
LocalNameFromQNameFunc016;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function fn:local-name-from-QName with arity 1 is not registered.
LocalNameFromQNameFunc017;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function fn:local-name-from-QName with arity 1 is not registered.
LocalNameFromQNameFunc018;The function fn:local-name-from-QName with arity 1 is not registered.
LocalNameFromQNameFunc019;The function fn:local-name-from-QName with arity 1 is not registered.
LocalNameFromQNameFunc020;The function fn:local-name-from-QName with arity 1 is not registered.
LocalNameFromQNameFunc021;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function fn:local-name-from-QName with arity 1 is not registered.
Lookup-001;PRSC Error: Failed to parse query 'deep-equal(((['a', 'b'], ['c', 'd'])[.?1 eq 'c']), (['c', 'd']))'
Lookup-002;PRSC Error: Failed to parse query 'deep-equal((let $i := 1 return (['a', 'b'], ['c', 'd'])[.?($i) eq 'c']), (['c', 'd']))'
Lookup-003;PRSC Error: Failed to parse query 'deep-equal(((['a', 'b'], ['c', 'd'])[ .? 001 eq 'c']), (['c', 'd']))'
Lookup-005;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '(['a', 'b'], ['c', 'd'])[ .?0 eq 'c']'
Lookup-006;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '(['a', 'b'], ['c', 'd'], ['e'])[ .?2 eq 'b']'
Lookup-007;PRSC Error: Failed to parse query 'deep-equal(((['a', 'b', 'c'], ['b', 'c', 'd'], ['e', 'f', 'b'])[ .?(1 to 2) = 'b']), (['a', 'b', 'c'], ['b', 'c', 'd']))'
Lookup-008;PRSC Error: Failed to parse query 'deep-equal((let $i := (1, 3) return (['a', 'b', 'c'], ['b', 'c', 'd'], ['e', 'f', 'b'])[ .?($i) = 'b']), (['b', 'c', 'd'], ['e', 'f', 'b']))'
Lookup-009;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '(['a', 'b', 'c'], ['b', 'c', 'd'], ['e', 'f', 'b'])[ .?first = 'b']'
Lookup-010;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'let $d := current-date() return (['a', 'b', 'c'], ['b', 'c', 'd'], ['e', 'f', 'b'])[ .?($d) = 'b']'
Lookup-011;Expected XPathException with code XPDY0002, but got CompileAstToExpression.CompilePathExpression lookup postfix expression not implemented yet.
Lookup-012;Expected XPathException with code XPTY0004, but got CompileAstToExpression.CompilePathExpression lookup postfix expression not implemented yet.
Lookup-013;Expected XPathException with code XPTY0004, but got CompileAstToExpression.CompilePathExpression lookup postfix expression not implemented yet.
Lookup-014;PRSC Error: Failed to parse query 'deep-equal(((['a', 'b', 'c'], ['b', 'c', 'd'], ['e', 'f', 'b'])[ .?* = 'c']), (['a', 'b', 'c'], ['b', 'c', 'd']))'
Lookup-015;PRSC Error: Failed to parse query 'deep-equal((([1, [2], [3]], [[2], 2, [4]])[ .?1 = .?2 ]), ([[2], 2, [4]]))'
Lookup-016;PRSC Error: Failed to parse query 'deep-equal(((['a', 'b', 'c'], ['b', 'c', 'd'], ['e', 'f', 'b'])[contains(.?1, ?, 'http://www.w3.org/2005/xpath-functions/collation/codepoint')('a')]), (['a', 'b', 'c']))'
Lookup-017;PRSC Error: Failed to parse query 'deep-equal(((['a', 'b', 'c'], ['b', 'c', 'd'], ['e', 'f', 'b'])[contains(.?1, ?)('a')]), (['a', 'b', 'c']))'
Lookup-019;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '(['a', 'b', 'c'], ['b', 'c', 'd'], ['e', 'f', 'b'])[.?(1.0) = 'a']'
Lookup-020;PRSC Error: Failed to parse query 'deep-equal((\n        let $x := (validate type xs:integer {<x>1</x>}, validate type xs:integer {<y>2</y>}) return\n        (['a', 'b', 'c'], ['b', 'c', 'd'], ['e', 'f', 'b'])[.?($x) = 'b']\n      ), ((['a', 'b', 'c'], ['b', 'c', 'd'])))'
Lookup-021;PRSC Error: Failed to parse query 'deep-equal((\n        let $x := (<x>1</x>, <y>2</y>) return\n        (['a', 'b', 'c'], ['b', 'c', 'd'], ['e', 'f', 'b'])[.?($x) = 'b']\n      ), ((['a', 'b', 'c'], ['b', 'c', 'd'])))'
Lookup-022;PRSC Error: Failed to parse query 'deep-equal(([['a', 'b', 'c'], ['b', 'c', 'd'], ['e', 'f', 'b']]?*[.?1 = 'a']), (['a', 'b', 'c']))'
Lookup-023;PRSC Error: Failed to parse query 'deep-equal(([['a', 'b', 'c'], ['b', 'c', 'd'], ['e', 'f', 'b']]!.?*!.?1), ('a', 'b', 'e'))'
Lookup-024;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        let $x := (<x>1</x>, <y>2</y>) return $x / .?1\n      '
Lookup-025;PRSC Error: Failed to parse query '((['a', 'b', 'c'], ['b', 'c', 'd'], ['e', 'f', 'b'])[exists(.?())]) => empty()'
Lookup-040;PRSC Error: Failed to parse query 'deep-equal(((map{'a':1, 'b':2, 'c':3},  map{'a':2, 'b':3, 'c':4})[.?b eq 3]), (map{'a':2, 'b':3, 'c':4}))'
Lookup-041;PRSC Error: Failed to parse query 'deep-equal(((map{1:1, 2:2, 3:3},  map{1:2, 2:3, 3:4})[.?2 eq 3]), (map{1:2, 2:3, 3:4}))'
Lookup-042;PRSC Error: Failed to parse query 'deep-equal(((map{1:1, 2:2, 3:3},  map{1:2, 2:3, 3:4})[.?(1 to 2) = 3]), (map{1:2, 2:3, 3:4}))'
Lookup-043;PRSC Error: Failed to parse query 'deep-equal(((map{'a-1':1, 'b-1':2, 'c-1':3},  map{'a-1':2, 'b-1':3, 'c-1':4})[.?b-1 eq 3]), (map{'a-1':2, 'b-1':3, 'c-1':4}))'
Lookup-044;PRSC Error: Failed to parse query 'deep-equal(((map{'a-1':1, 'b-1':2, 'c-1':3},  map{'a-1':2, 'b-1':3, 'c-1':4})[.? (:confusing.?:) b-1 eq 3]), (map{'a-1':2, 'b-1':3, 'c-1':4}))'
Lookup-045;PRSC Error: Failed to parse query 'deep-equal(((map{1:1, 2:2, 3:3},  map{1:2, 2:3, 3:4})[.?* = 3]), (map{1:1, 2:2, 3:3},  map{1:2, 2:3, 3:4}))'
Lookup-046;PRSC Error: Failed to parse query '((map{1:1, 2:2, 3:3},  map{1:2, 2:3, 3:4})[exists(.?())]) => empty()'
Lookup-101;PRSC Error: Failed to parse query 'deep-equal(((['a', 'b'], ['c', 'd'])?1), ('a', 'c'))'
Lookup-102;PRSC Error: Failed to parse query 'deep-equal((let $i := 1 return (['a', 'b'], ['c', 'd'])?($i)), ('a', 'c'))'
Lookup-103;PRSC Error: Failed to parse query 'deep-equal(((['a', 'b'], ['c', 'd'])? 001), ('a', 'c'))'
Lookup-105;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '(['a', 'b'], ['c', 'd'])?0'
Lookup-106;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '(['a', 'b'], ['c', 'd'], ['e'])?2'
Lookup-107;PRSC Error: Failed to parse query 'deep-equal(((['a', 'b', 'c'], ['b', 'c', 'd'], ['e', 'f', 'b'])?(1 to 2)), ('a', 'b', 'b', 'c', 'e', 'f'))'
Lookup-108;PRSC Error: Failed to parse query 'deep-equal((let $i := (1, 3) return (['a', 'b', 'c'], ['b', 'c', 'd'], ['e', 'f', 'b'])?($i)), ('a', 'c', 'b', 'd', 'e', 'b'))'
Lookup-109;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '(['a', 'b', 'c'], ['b', 'c', 'd'], ['e', 'f', 'b']) ?first'
Lookup-110;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'let $d := current-date() return (['a', 'b', 'c'], ['b', 'c', 'd'], ['e', 'f', 'b'])?($d)'
Lookup-111;PRSC Error: Failed to parse query 'let $d := function($x) {$x?2} return $d([12, 13]) = 13'
Lookup-112;Expected XPathException with code XPTY0004, but got CompileAstToExpression.CompilePathExpression lookup postfix expression not implemented yet.
Lookup-113;Expected XPathException with code XPTY0004, but got CompileAstToExpression.CompilePathExpression lookup postfix expression not implemented yet.
Lookup-114;PRSC Error: Failed to parse query 'deep-equal(((['a', 'b', 'c'], ['b', 'c', 'd'], ['e', 'f', 'b'])?*), ('a', 'b', 'c', 'b', 'c', 'd', 'e', 'f', 'b'))'
Lookup-115;PRSC Error: Failed to parse query '([1, [2], [3]], [[2], 2, [4]])?3 = 3'
Lookup-119;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '(['a', 'b', 'c'], ['b', 'c', 'd'], ['e', 'f', 'b'])?(1.0) '
Lookup-120;PRSC Error: Failed to parse query 'deep-equal((\n        let $x := (validate type xs:integer {<x>1</x>}, validate type xs:integer {<y>2</y>}) return\n        (['a', 'b', 'c'], ['b', 'c', 'd'], ['e', 'f', 'b'])?($x)\n      ), ('a', 'b', 'b', 'c', 'e', 'f'))'
Lookup-121;PRSC Error: Failed to parse query 'deep-equal((\n        let $x := (<x>1</x>, <y>2</y>) return\n        (['a', 'b', 'c'], ['b', 'c', 'd'], ['e', 'f', 'b'])?($x)\n      ), ('a', 'b', 'b', 'c', 'e', 'f'))'
Lookup-122;PRSC Error: Failed to parse query 'deep-equal(([['a', 'b', 'c'], ['b', 'c', 'd'], ['e', 'f', 'b']]?*?*), ('a', 'b', 'c', 'b', 'c', 'd', 'e', 'f', 'b'))'
Lookup-123;PRSC Error: Failed to parse query '((['a', 'b', 'c'], ['b', 'c', 'd'], ['e', 'f', 'b'])?()) => empty()'
Lookup-140;PRSC Error: Failed to parse query 'deep-equal(((map{'a':1, 'b':2, 'c':3},  map{'a':2, 'b':3, 'c':4})?b), (2, 3))'
Lookup-141;PRSC Error: Failed to parse query 'deep-equal(((map{1:1, 2:2, 3:3},  map{1:2, 2:3, 3:4})?2), (2, 3))'
Lookup-142;PRSC Error: Failed to parse query 'deep-equal(((map{1:1, 2:2, 3:3},  map{2:3, 3:4, 4:5})?(1 to 2)), (1, 2, 3))'
Lookup-143;PRSC Error: Failed to parse query 'deep-equal(((map{'a-1':1, 'b-1':2, 'c-1':3},  map{'a-1':2, 'b-1':3, 'c-1':4})?c-1), (3, 4))'
Lookup-144;PRSC Error: Failed to parse query 'deep-equal(((map{'a-1':1, 'b-1':2, 'c-1':3},  map{'a-1':2, 'b-1':3, 'c-1':4})? (:confusing.?:) b-1), (2, 3))'
Lookup-145;Skipped test, it was a assert-permutation
Lookup-146;PRSC Error: Failed to parse query '((map{1:1, 2:2, 3:3},  map{1:2, 2:3, 3:4})?()) => empty()'
Lookup-147;CompileAstToExpression.CompilePathExpression lookup postfix expression not implemented yet.
Lookup-148;CompileAstToExpression.CompilePathExpression lookup postfix expression not implemented yet.
Lookup-149;CompileAstToExpression.CompilePathExpression lookup postfix expression not implemented yet.
Lookup-150;PRSC Error: Failed to parse query '[floor#1, ceiling#1, round#1, abs#1]?2(1.3) = 2.0'
Lookup-151;PRSC Error: Failed to parse query 'map{'f':floor#1, 'c':ceiling#1, 'r':round#1, 'a':abs#1}?c(1.3) = 2.0'
Lookup-152;PRSC Error: Failed to parse query 'map{'f':floor#1, 'c':ceiling#1, 'r':round#1, 'a':abs#1}?("c")(1.3) = 2.0'
Lookup-153;PRSC Error: Failed to parse query 'map{'f':floor#1, 'c':ceiling#1, 'r':round#1, 'a':abs#1}[1]?("c")(1.3) = 2.0'
Lookup-154;Skipped test, it was a assert-permutation
Lookup-155;PRSC Error: Failed to parse query 'map{'or':true(), 'and':true(), 'but':false()} ? or or 2 = 3'
Lookup-158;PRSC Error: Failed to parse query '[map{'decimal':true(), 'integer':true(), 'polygon':false()}, map{}] ?1?decimal'
Lookup-159;PRSC Error: Failed to parse query 'map{'decimal':true(), 'integer':true(), 'polygon':[11,22,33]}?polygon?2 = 22'
Lookup-160;PRSC Error: Failed to parse query 'some $x in map{'decimal':true(), 'integer':true(), 'polygon':false()}?* satisfies $x'
Lookup-161;PRSC Error: Failed to parse query 'count(map{'decimal':true(), 'integer':true(), 'polygon':false()}?*[.]) = 2'
Lookup-162;PRSC Error: Failed to parse query 'max(map{'decimal':12, 'integer':18, 'polygon':-4}?*) = 18'
Lookup-164;PRSC Error: Failed to parse query 'deep-equal(((map{1.1:1, 2.2:2, 3.3:3},  map{1.1:2, 2.2:3, 3.3:4})?(2.2) ), (2, 3))'
Lookup-165;PRSC Error: Failed to parse query 'let $x := map{"div":18} return $x?div = 18'
Lookup-166;PRSC Error: Failed to parse query 'let $x := map{"else":18} return exists($x[?else = 18])'
Lookup-167;PRSC Error: Failed to parse query 'let $x := map{"div":81, "div-2":18} return $x?div-2 = 18'
Lookup-168;PRSC Error: Failed to parse query 'let $x := map{"else":81, "else-2":18} return exists($x[?else-2 = 18])'
Lookup-211;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '[1, 2, 3](1.1)'
Lookup-212;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '[1, 2, 3]?0'
Lookup-213;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '[1, 2, 3]?4'
Lookup-214;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '[1, 2, 3](-1)'
Lookup-215;PRSC Error: Failed to parse query 'deep-equal((let $k := 2 to 3 return ['A', 'B', 'C']?($k)), (('B', 'C')))'
Lookup-216;PRSC Error: Failed to parse query 'deep-equal((['A', 'B', 'C']?(2 to 3)), (('B', 'C')))'
Lookup-217;PRSC Error: Failed to parse query 'deep-equal((['A', 'B', 'C']?*), (('A', 'B', 'C')))'
Lookup-218;PRSC Error: Failed to parse query 'deep-equal((fn:data([['A', 'B', 'C'], ['D', 'E'], []]?2)), (('D', 'E')))'
Lookup-219;PRSC Error: Failed to parse query '(fn:data([['A', 'B', 'C'], ['D', 'E'], []]?3)) => empty()'
Lookup-220;PRSC Error: Failed to parse query '[['A', 'B', 'C'], ['D', 'E'], []]?1?2 = 'B''
Lookup-221;PRSC Error: Failed to parse query 'deep-equal((fn:data([['A', 'B', 'C'], ['D', 'E'], []]?*?*)), (('A', 'B', 'C', 'D', 'E')))'
Lookup-222;PRSC Error: Failed to parse query '([]?*) => empty()'
Lookup-223;PRSC Error: Failed to parse query '([]?*?*) => empty()'
Lookup-224;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '[]?2'
Lookup-225;PRSC Error: Failed to parse query 'deep-equal(((['A', 'B', 'C'], ['D', 'E'])?2), (('B', 'E')))'
Lookup-226;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '(['A', 'B', 'C'], ['D', 'E'], [])?2'
Lookup-227;PRSC Error: Failed to parse query 'deep-equal(([[1, 2, 3], map:entry(3, 5)]?*?3), ((3, 5)))'
Lookup-228;CompileAstToExpression.CompilePathExpression lookup postfix expression not implemented yet.
Lookup-229;Star in Lookup is not implemented yet.
Lookup-230;PRSC Error: Failed to parse query ' [0]?(<_>1</_>)  = 0'
Lookup-231;Expected error code: XPDY0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'map{'a':1}?(*)'
Lookup-232;CompileAstToExpression.CompilePathExpression lookup postfix expression not implemented yet.
Lookup-233;CompileAstToExpression.CompilePathExpression lookup postfix expression not implemented yet.
Lookup-234;Expected XPathException with code FOAY0001, but got CompileAstToExpression.CompilePathExpression lookup postfix expression not implemented yet.
map-contains-001;PRSC Error: Failed to parse query 'map:contains(map{1:"Sunday",2:"Monday",3:"Tuesday",4:"Wednesday",5:"Thursday",6:"Friday",7:"Saturday"}, 4)'
map-contains-002;PRSC Error: Failed to parse query 'map:contains(map{1:"Sunday",2:"Monday",3:"Tuesday",4:"Wednesday",5:"Thursday",6:"Friday",7:"Saturday"}, 23)'
map-contains-003;PRSC Error: Failed to parse query 'map:contains(map{}, 23)'
map-contains-004;The function map:contains with arity 2 is not registered.
map-contains-005;The function map:contains with arity 2 is not registered.
map-contains-006;The function map:contains with arity 2 is not registered.
map-contains-007;The function map:contains with arity 2 is not registered.
map-contains-008;The function map:contains with arity 2 is not registered.
map-contains-009;The function map:contains with arity 2 is not registered.
map-contains-010;PRSC Error: Failed to parse query 'map:contains(map{1:"Sunday",2:"Monday",3:"Tuesday",4:"Wednesday",5:"Thursday",6:"Friday",7:"Saturday"}, 4.0e0)'
map-contains-011;PRSC Error: Failed to parse query 'map:contains(map{1:"Sunday",2:"Monday",3:"Tuesday",4.0e0:"Wednesday",5:"Thursday",6:"Friday",7:"Saturday"}, 4)'
map-contains-012;PRSC Error: Failed to parse query 'map:contains(map{1:"Sunday",2:"Monday",3:"Tuesday","urn:weds":"Wednesday",5:"Thursday",6:"Friday",7:"Saturday"}, xs:anyURI("urn:weds"))'
map-contains-013;PRSC Error: Failed to parse query 'map:contains(map{1:"Sunday",2:"Monday",3:"Tuesday",xs:anyURI("urn:weds"):"Wednesday",5:"Thursday",6:"Friday",7:"Saturday"}, "urn:weds")'
map-contains-014;PRSC Error: Failed to parse query 'map:contains(map{1:"Sunday",2:"Monday",3:"Tuesday",xs:anyURI("urn:weds"):"Wednesday",5:"Thursday",6:"Friday",7:"Saturday"}, number('NaN'))'
map-contains-015;PRSC Error: Failed to parse query 'map:contains(map{1:"Sunday",2:"Monday",3:"Tuesday",number('NaN'):"Wednesday",5:"Thursday",6:"Friday",7:"Saturday"}, number('NaN'))'
map-contains-016;The function map:contains with arity 2 is not registered.
map-contains-017;PRSC Error: Failed to parse query 'map:contains(map{1:"Sunday",2:"Monday",3:"Tuesday",xs:duration('P1Y'):"Wednesday",5:"Thursday",6:"Friday",7:"Saturday"}, xs:yearMonthDuration('P12M'))'
map-contains-018;PRSC Error: Failed to parse query 'map:contains(map{1:"Sunday",2:"Monday",3:"Tuesday",function-name(abs#1):"Wednesday",5:"Thursday",6:"Friday",7:"Saturday"}, xs:QName('fn:abs'))'
map-contains-019;PRSC Error: Failed to parse query 'map:contains(map{1:"Sunday",2:"Monday",3:"Tuesday",4:(),5:"Thursday",6:"Friday",7:"Saturday"}, 4)'
map-contains-020;PRSC Error: Failed to parse query 'map:contains(map{"su":"Sunday","mo":"Monday","tu":"Tuesday","we":"Wednesday","th":"Thursday","fr":"Friday","sa":"Saturday"}, "TH")'
map-contains-901;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'map:contains(map{1:"Sunday",2:"Monday",3:"Tuesday",number('NaN'):"Wednesday",5:"Thursday",6:"Friday",7:"Saturday"}, (1 to 5)[10])'
map-contains-902;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'map:contains(map{1:"Sunday",2:"Monday",3:"Tuesday",number('NaN'):"Wednesday",5:"Thursday",6:"Friday",7:"Saturday"}, (1 to 5)[. mod 2 = 0])'
map-contains-903;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function map:contains with arity 2 is not registered.
map-contains-904;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function map:contains with arity 2 is not registered.
map-contains-905;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function map:contains with arity 2 is not registered.
map-contains-906;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'map:contains((map{}, map{"a":"b"}), "a")'
map-entry-001-hof;The function map:entry with arity 2 is not registered.
map-entry-001;The function map:entry with arity 2 is not registered.
map-entry-002;The function map:entry with arity 2 is not registered.
map-entry-003;The function map:entry with arity 2 is not registered.
map-entry-004;PRSC Error: Failed to parse query '(map:entry(xs:untypedAtomic("foo"), map{})) => count()'
map-entry-005;The function map:entry with arity 2 is not registered.
map-entry-006;The function map:entry with arity 2 is not registered.
map-entry-007-hof;The function map:entry with arity 2 is not registered.
map-entry-007;The function map:entry with arity 2 is not registered.
map-for-each-001;PRSC Error: Failed to parse query '(map:for-each(map{}, concat#2)) => empty()'
map-for-each-002;The function map:for-each with arity 2 is not registered.
map-for-each-003;PRSC Error: Failed to parse query '(map:for-each(map{"a":1}, function($k,$v){$k})) => count()'
map-for-each-004;The function map:for-each with arity 2 is not registered.
map-for-each-005;The function map:for-each with arity 2 is not registered.
map-for-each-006;PRSC Error: Failed to parse query 'let $result := (map:for-each(map{"a":1, "b":2}, function($k,$v){$k})) return $result = "a"'
map-for-each-007;Expected error code: XQDY0137. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'map:for-each(map{"a":1, "a":2}, function($k,$v){$k})'
map-for-each-008;The function map:for-each with arity 2 is not registered.
map-for-each-009;PRSC Error: Failed to parse query '(map:for-each(map:remove(map{"a":1,"b":2}, "b"), function($k,$v){$k})) => count()'
map-for-each-010;The function map:for-each with arity 2 is not registered.
map-for-each-011;PRSC Error: Failed to parse query '(map:for-each(map:remove(map:remove(map{"a":1,"b":2},"b"),"a"), function($k,$v){$k})) => empty()'
map-for-each-012;PRSC Error: Failed to parse query '(map:for-each(map{number('NaN'):1,"b":2}, function($k,$v){$k})) => count()'
map-for-each-013;PRSC Error: Failed to parse query 'let $result := (map:for-each(map:remove(map{"a":1,"b":2}, "c"), function($k,$v){$k})) return $result = "a"'
map-for-each-014;The function map:for-each with arity 2 is not registered.
map-for-each-015;PRSC Error: Failed to parse query 'let $result := (map:for-each(map{"a":1, "b":2}, function($k,$v){$k||$v})) return $result = "a1"'
map-for-each-016;PRSC Error: Failed to parse query 'let $result := (map:merge(map:for-each(map{"a":1, "b":2}, function($k,$v){map{$v : $k}}))) return $result(1) eq "a"'
map-for-each-017;PRSC Error: Failed to parse query '<e>{map:for-each(map{"a":1, "b":2}, function($k,$v){attribute{$k}{$v}})}</e>'
map-get-001;PRSC Error: Failed to parse query 'map:get(map{1:"Sunday",2:"Monday",3:"Tuesday",4:"Wednesday",5:"Thursday",6:"Friday",7:"Saturday"}, 4)'
map-get-002;PRSC Error: Failed to parse query '(map:get(map{1:"Sunday",2:"Monday",3:"Tuesday",4:"Wednesday",5:"Thursday",6:"Friday",7:"Saturday"}, 23)) => empty()'
map-get-003;PRSC Error: Failed to parse query '(map:get(map{}, 23)) => empty()'
map-get-004;The function map:get with arity 2 is not registered.
map-get-005;The function map:get with arity 2 is not registered.
map-get-006;The function map:get with arity 2 is not registered.
map-get-007;The function map:get with arity 2 is not registered.
map-get-008;The function map:get with arity 2 is not registered.
map-get-009;The function map:get with arity 2 is not registered.
map-get-010;PRSC Error: Failed to parse query 'map:get(map{1:"Sunday",2:"Monday",3:"Tuesday",4:"Wednesday",5:"Thursday",6:"Friday",7:"Saturday"}, 4.0e0)'
map-get-011;PRSC Error: Failed to parse query 'map:get(map{1:"Sunday",2:"Monday",3:"Tuesday",4.0e0:"Wednesday",5:"Thursday",6:"Friday",7:"Saturday"}, 4)'
map-get-012;PRSC Error: Failed to parse query 'map:get(map{1:"Sunday",2:"Monday",3:"Tuesday","urn:weds":"Wednesday",5:"Thursday",6:"Friday",7:"Saturday"}, xs:anyURI("urn:weds"))'
map-get-013;PRSC Error: Failed to parse query 'map:get(map{1:"Sunday",2:"Monday",3:"Tuesday",xs:anyURI("urn:weds"):"Wednesday",5:"Thursday",6:"Friday",7:"Saturday"}, "urn:weds")'
map-get-014;PRSC Error: Failed to parse query '(map:get(map{1:"Sunday",2:"Monday",3:"Tuesday",xs:anyURI("urn:weds"):"Wednesday",5:"Thursday",6:"Friday",7:"Saturday"}, number('NaN'))) => empty()'
map-get-015;PRSC Error: Failed to parse query 'map:get(map{1:"Sunday",2:"Monday",3:"Tuesday",number('NaN'):"Wednesday",5:"Thursday",6:"Friday",7:"Saturday"}, number('NaN'))'
map-get-016;The function map:get with arity 2 is not registered.
map-get-017;PRSC Error: Failed to parse query 'map:get(map{1:"Sunday",2:"Monday",3:"Tuesday",xs:duration('P1Y'):"Wednesday",5:"Thursday",6:"Friday",7:"Saturday"}, xs:yearMonthDuration('P12M'))'
map-get-018;PRSC Error: Failed to parse query 'map:get(map{1:"Sunday",2:"Monday",3:"Tuesday",function-name(abs#1):"Wednesday",5:"Thursday",6:"Friday",7:"Saturday"}, xs:QName('fn:abs'))'
map-get-019;PRSC Error: Failed to parse query '(map:get(map{1:"Sunday",2:"Monday",3:"Tuesday",4:(),5:"Thursday",6:"Friday",7:"Saturday"}, 4)) => empty()'
map-get-020;PRSC Error: Failed to parse query '(map:get(map{"su":"Sunday","mo":"Monday","tu":"Tuesday","we":"Wednesday","th":"Thursday","fr":"Friday","sa":"Saturday"}, "TH")) => empty()'
map-get-021;PRSC Error: Failed to parse query 'map:get(map{"foo":"bar", "bar":"foo"}, xs:untypedAtomic("foo"))'
map-get-022;PRSC Error: Failed to parse query 'map:get(map{xs:untypedAtomic("foo"):"bar", xs:untypedAtomic("bar"):"foo"}, "foo")'
map-get-023;PRSC Error: Failed to parse query 'map:get(map{current-dateTime():100, current-dateTime()=>adjust-dateTime-to-timezone(()):101}, current-dateTime())'
map-get-024;PRSC Error: Failed to parse query '\n            map:get(map{current-date():100, current-date()=>adjust-date-to-timezone(()):101}, \n                    current-date()=>adjust-date-to-timezone(()))'
map-get-025;PRSC Error: Failed to parse query '\n            map:get(map{number('NaN'):100, 12e6:101}, xs:float('NaN')) = 100'
map-get-100;PRSC Error: Failed to parse query '(fn:for-each(("we", "th"),\n                map{"su":"Sunday","mo":"Monday","tu":"Tuesday","we":"Wednesday","th":"Thursday","fr":"Friday","sa":"Saturday"}\n            )) => count()'
map-get-901;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'map:get(map{1:"Sunday",2:"Monday",3:"Tuesday",number('NaN'):"Wednesday",5:"Thursday",6:"Friday",7:"Saturday"}, (1 to 5)[10])'
map-get-902;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'map:get(map{1:"Sunday",2:"Monday",3:"Tuesday",number('NaN'):"Wednesday",5:"Thursday",6:"Friday",7:"Saturday"}, (1 to 5)[. mod 2 = 0])'
map-get-903;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function map:get with arity 2 is not registered.
map-get-904;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function map:get with arity 2 is not registered.
map-get-905;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function map:get with arity 2 is not registered.
map-get-906;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'map:get((map{}, map{"a":"b"}), "a")'
map-keys-001;PRSC Error: Failed to parse query '(map:keys(map{})) => empty()'
map-keys-002;The function map:keys with arity 1 is not registered.
map-keys-003;PRSC Error: Failed to parse query '(map:keys(map{"a":1})) => count()'
map-keys-004;The function map:keys with arity 1 is not registered.
map-keys-005;The function map:keys with arity 1 is not registered.
map-keys-006;PRSC Error: Failed to parse query 'let $result := (map:keys(map{"a":1, "b":2})) return $result = "a"'
map-keys-007;Expected error code: XQDY0137. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'map:keys(map{"a":1, "a":2})'
map-keys-008;The function map:keys with arity 1 is not registered.
map-keys-009;PRSC Error: Failed to parse query '(map:keys(map:remove(map{"a":1,"b":2}, "b"))) => count()'
map-keys-010;The function map:keys with arity 1 is not registered.
map-keys-011;PRSC Error: Failed to parse query '(map:keys(map:remove(map:remove(map{"a":1,"b":2},"b"),"a"))) => empty()'
map-keys-012;PRSC Error: Failed to parse query '(map:keys(map{number('NaN'):1,"b":2})) => count()'
map-keys-013;PRSC Error: Failed to parse query 'let $result := (map:keys(map:remove(map{"a":1,"b":2}, "c"))) return $result = "a"'
map-keys-014;The function map:keys with arity 1 is not registered.
map-merge-002;The function map:merge with arity 1 is not registered.
map-merge-003-hof;The function map:merge with arity 1 is not registered.
map-merge-003;The function map:merge with arity 1 is not registered.
map-merge-004;The function map:merge with arity 1 is not registered.
map-merge-005;The function map:merge with arity 1 is not registered.
map-merge-006;PRSC Error: Failed to parse query '(map:merge((map:entry("foo", 3), map:entry("foo", 4)), map{"duplicates": "use-last"})) => count()'
map-merge-006b;PRSC Error: Failed to parse query '(map:merge((map:entry("foo", 3), map:entry("foo", 4)), map{"duplicates": "use-first"})) => count()'
map-merge-006c;PRSC Error: Failed to parse query '(map:merge((map:entry("foo", 3), map:entry("foo", 4)), map{"duplicates": "combine"})) => count()'
map-merge-006d;Expected executing the XPath 'map:merge((map:entry("foo", 3), map:entry("foo", 4)), map{"duplicates": "use-any"})' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'let $result := (map:merge((map:entry("foo", 3), map:entry("foo", 4)), map{"duplicates": "use-any"})) return deep-equal(map:get($result, "foo"), 3)'
map-merge-006e;Expected executing the XPath 'map:merge((map:entry("foo", 3), map:entry("foo", 4)))' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function map:merge with arity 1 is not registered.
map-merge-006f;Expected error code: FOJS0003. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'map:merge((map:entry("foo", 3), map:entry("foo", 4)), map{"duplicates": "reject"})'
map-merge-007;The function map:entry with arity 2 is not registered.
map-merge-008;The function map:merge with arity 1 is not registered.
map-merge-009;The function map:merge with arity 1 is not registered.
map-merge-010;The function map:merge with arity 1 is not registered.
map-merge-011;PRSC Error: Failed to parse query '(map:merge((map:entry(3, "three"), map:entry(3.0e0, "threeD"), map:entry(xs:float('3.0'), "threeF")),\n            map{"duplicates" : "use-last"})) => count()'
map-merge-012;The function map:merge with arity 1 is not registered.
map-merge-013;PRSC Error: Failed to parse query '(map:merge(for $n in 1 to 20 return map:entry($n, map{$n :string($n), $n+1:string($n+1), $n+2:string($n+2)}))) instance of $map(xs:integer, map(xs:integer, xs:string))'
map-merge-016;PRSC Error: Failed to parse query 'deep-equal(map{}, map:merge(()))'
map-merge-017;PRSC Error: Failed to parse query 'deep-equal(map{"a":1}, map:entry("a", 1))'
map-merge-018;PRSC Error: Failed to parse query 'deep-equal(map{"a":1,"b":2,"c":(3,4,5)}, map{"c":(3,4,5),"a":1,"b":2})'
map-merge-019;PRSC Error: Failed to parse query 'deep-equal(map{"a":1}, map:merge(()))'
map-merge-020;The function map:merge with arity 1 is not registered.
map-merge-021;PRSC Error: Failed to parse query 'deep-equal(map:merge(for $i in 1 to 1000 return map:entry($i, $i+1)),\n                         map:merge(((for $i in 1 to 1000 return map:entry($i, $i+1)), map:entry(400, 402)),\n                         map{"duplicates":"use-last"}))'
map-merge-022;The function map:merge with arity 1 is not registered.
map-merge-023;The function map:merge with arity 1 is not registered.
map-merge-024-hof;The function map:merge with arity 1 is not registered.
map-merge-024;The function map:merge with arity 1 is not registered.
map-merge-025;PRSC Error: Failed to parse query 'deep-equal((map:merge((1 to 2000)!map:entry('z', .), map{'duplicates':'combine'})?z), (1 to 2000))'
map-merge-026;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'map:merge((1 to 100)!map:entry('z', .), if (current-date() lt xs:date('1900-01-01')) then map{'duplicates':'combine'} else ())?z'
map-put-002-hof;PRSC Error: Failed to parse query '(map:put(map{}, "foo", 1 to 5)) => count()'
map-put-002;PRSC Error: Failed to parse query '(map:put(map{}, "foo", 1 to 5)) => count()'
map-put-003-hof;PRSC Error: Failed to parse query '(map:put(map{}, "foo", 1 to 5)) => count()'
map-put-003;PRSC Error: Failed to parse query '(map:put(map{}, "foo", 1 to 5)) => count()'
map-put-004;The function map:put with arity 3 is not registered.
map-put-006;The function map:put with arity 3 is not registered.
map-put-007;The function map:entry with arity 2 is not registered.
map-put-008;The function map:merge with arity 1 is not registered.
map-put-010;PRSC Error: Failed to parse query '(map:put(map{}, 1, 2)) => count()'
map-put-011;PRSC Error: Failed to parse query '(map:put(map{3 : "three"},  xs:float('3.0'), "threeF")) => count()'
map-put-012;The function map:put with arity 3 is not registered.
map-put-013;PRSC Error: Failed to parse query '(map:put(\n            map:merge(for $n in 1 to 20 return map:entry($n, map{$n : string($n), $n+1 : string($n+1), $n+2 : string($n+2)})),\n            21, map{21 : '21'})\n        ) instance of $map(xs:integer, map(xs:integer, xs:string))'
map-put-017;PRSC Error: Failed to parse query 'deep-equal(map{"a":1}, map:put(map{}, 'a', 1))'
map-put-018;PRSC Error: Failed to parse query 'deep-equal(map:put(map{"a":1,"b":2,"c":(3,4,5)}, "d", 6), map:put(map{"d":6,"c":(3,4,5),"a":1}, "b", 2))'
map-put-019;PRSC Error: Failed to parse query 'deep-equal(map{}, map:remove(map:put(map:merge(()), 1, 2), 1))'
map-put-020;The function map:put with arity 3 is not registered.
map-put-021;PRSC Error: Failed to parse query 'map{} => map:put(xs:double('NaN'), 10) => map:put(xs:float('NaN'), 20) => map:size() = 1'
map-put-022;PRSC Error: Failed to parse query 'deep-equal(map{xs:double('NaN'): 10}, map{xs:float('NaN'):10e0})'
map-put-023;PRSC Error: Failed to parse query '\n            map{xs:float('1.0'):0, xs:double('1.00000000001'):1} \n            => map:put(xs:decimal('1.0000000000100000000001'), 2) \n            => map:size()\n         = 3'
map-remove-001;PRSC Error: Failed to parse query 'let $result := (map:remove(map{}, 1)) return map:size($result) eq 0'
map-remove-002;The function map:remove with arity 2 is not registered.
map-remove-003;PRSC Error: Failed to parse query 'let $result := (map:remove(map{"a":1}, "a")) return map:size($result) eq 0'
map-remove-005;The function map:remove with arity 2 is not registered.
map-remove-006;The function map:remove with arity 2 is not registered.
map-remove-007;The function map:remove with arity 2 is not registered.
map-remove-008;The function map:remove with arity 2 is not registered.
map-remove-009;The function map:remove with arity 2 is not registered.
map-remove-010;PRSC Error: Failed to parse query '(map:remove(map{"a":1,"b":"xyz"}, "b")) instance of $map(xs:string, xs:integer)'
map-remove-011;PRSC Error: Failed to parse query '(map:remove(map{"a":1,12:"xyz"}, 12)) instance of $map(xs:string, xs:integer)'
map-remove-012;The function map:remove with arity 2 is not registered.
map-remove-013;PRSC Error: Failed to parse query 'deep-equal(map:remove(map{"a":1,"b":(2,3)}, "a"), map:entry("b", (2,3)))'
map-remove-014;PRSC Error: Failed to parse query '\n            map{current-dateTime():100, current-dateTime()=>adjust-dateTime-to-timezone(()):101} \n            => map:remove(current-dateTime()) \n            => map:get(current-dateTime()=>adjust-dateTime-to-timezone(()))\n         = 101'
map-remove-015;PRSC Error: Failed to parse query '\n            map{xs:double('1.25'):0}\n            => map:remove(xs:float('1.25')) \n            => map:size()\n         = 0'
map-remove-016;PRSC Error: Failed to parse query '\n            map{xs:float('1.0'):0, xs:double('1.00000000001'):1} \n            => map:remove(xs:decimal('1.0000000000100000000001')) \n            => map:size()\n         = 2'
map-remove-017;PRSC Error: Failed to parse query 'deep-equal(map:remove(map{"a":1,"b":(2,3), "c":1 to 5}, ("a", "c")), map:entry("b", (2,3)))'
map-remove-018;PRSC Error: Failed to parse query 'map:size(map:remove(map{"a":1,"b":(2,3), "c":1 to 5}, ())) = 3'
map-remove-019;PRSC Error: Failed to parse query 'deep-equal(map:remove(map{"a":1,"b":(2,3), "c":1 to 5}, ("a", "c", "d")), map:entry("b", (2,3)))'
map-size-001;PRSC Error: Failed to parse query 'map:size(map{}) = 0'
map-size-002;The function map:size with arity 1 is not registered.
map-size-003;PRSC Error: Failed to parse query 'map:size(map{"a":1}) = 1'
map-size-004;The function map:size with arity 1 is not registered.
map-size-005;The function map:size with arity 1 is not registered.
map-size-006;PRSC Error: Failed to parse query 'map:size(map{"a":1, "b":2}) = 2'
map-size-007;Expected error code: XQDY0137. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'map:size(map{"a":1, "a":2})'
map-size-008;The function map:size with arity 1 is not registered.
map-size-009;PRSC Error: Failed to parse query 'map:size(map:remove(map{"a":1,"b":2}, "b")) = 1'
map-size-010;The function map:size with arity 1 is not registered.
map-size-011;PRSC Error: Failed to parse query 'map:size(map:remove(map:remove(map{"a":1,"b":2},"b"),"a")) = 0'
map-size-012;PRSC Error: Failed to parse query 'map:size(map{number('NaN'):1,"b":2}) = 2'
map-size-013;PRSC Error: Failed to parse query 'map:size(map:remove(map{"a":1,"b":2}, "c")) = 2'
map-size-014;PRSC Error: Failed to parse query 'map{current-dateTime():100, current-dateTime()=>adjust-dateTime-to-timezone(()):101} => map:size() = 2'
map-size-015;PRSC Error: Failed to parse query '\n            map:merge(((1 to 20)!map{.: 0}, (10 to 30)!map{.: 0}), map{'duplicates':'combine'}) (:30:)\n            => map:remove((4, 8, 12)) (:27:)\n            => map:put(50, 0) (:28:)\n            => map:put(4, 0) (:29:)\n            => map:put(1, 0) (:29:)\n            => map:size()\n         = 29'
MapConstructor-001;PRSC Error: Failed to parse query 'map:size(map{}) = 0'
MapConstructor-002;PRSC Error: Failed to parse query 'map:size(map{     }) = 0'
MapConstructor-003;PRSC Error: Failed to parse query 'map:size(map {}) = 0'
MapConstructor-004;PRSC Error: Failed to parse query 'map:size(map{"a":2}) = 1'
MapConstructor-005;PRSC Error: Failed to parse query 'map:size(map{ "a" : 2 }) = 1'
MapConstructor-006;PRSC Error: Failed to parse query 'map:size(map{"a":2,"b":3}) = 2'
MapConstructor-007;PRSC Error: Failed to parse query 'map:size(map { "a" : 2 , "b" : 3 }) = 2'
MapConstructor-012;PRSC Error: Failed to parse query 'map:size(map {<a>x</a>:2}) = 1'
MapConstructor-013;PRSC Error: Failed to parse query 'map:size(map {2:<a>x</a>}) = 1'
MapConstructor-014;PRSC Error: Failed to parse query 'map:size(map {2:<a>x{25}y</a>}) = 1'
MapConstructor-015;PRSC Error: Failed to parse query 'map:size(<a><b>x</b></a>/map{b:2}) = 1'
MapConstructor-017;PRSC Error: Failed to parse query 'map:size(<a><b>x</b></a>/map{self::a: b}) = 1'
MapConstructor-019;PRSC Error: Failed to parse query 'map:size(<a><b>x</b></a>/map{*:b:b}) = 1'
MapConstructor-020;PRSC Error: Failed to parse query 'map:size(<a><b>x</b></a>/map{* :b}) = 1'
MapConstructor-021;PRSC Error: Failed to parse query 'map:size(<a><self>x</self></a>/map{self:2}) = 1'
MapConstructor-022;PRSC Error: Failed to parse query 'map:size(map{2:map{3:4}}) = 1'
MapConstructor-023;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'map:size(map{(1 to 5)[. gt year-from-date(current-date())]:93})'
MapConstructor-024;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'map:size(map{(1 to 5)[. lt year-from-date(current-date())]:93})'
MapConstructor-025;PRSC Error: Failed to parse query 'let $m := map{'a':1} return map:size(map{$m?a:true()}) = 1'
MapConstructor-026;PRSC Error: Failed to parse query 'declare namespace z = "http://z.com"; map:size(<a><z:b>x</z:b></a>/map{z:b:z:b}) = 1'
MapConstructor-027;PRSC Error: Failed to parse query '\n\n        declare namespace a = "http://example.com";\n\n        <dot>\n          <a:b>key</a:b>\n          <c>value</c>\n        </dot>\n        !\n        map{a:b:c}\n\n        =>\n        deep-equal(map{"key":<c>value</c>})\n      '
MapConstructor-028;PRSC Error: Failed to parse query '\n\n        declare namespace a = "http://example.com";\n\n        <dot>\n          <a:b>key</a:b>\n          <c>value</c>\n        </dot>\n        !\n        map{a:*:c}\n\n        =>\n        deep-equal(map{"key":<c>value</c>})\n\n      '
MapConstructor-029;PRSC Error: Failed to parse query '\n\n        declare namespace a = "http://example.com";\n\n        <dot>\n          <a:b>key</a:b>\n          <c>value</c>\n        </dot>\n        !\n        map{*:b:c}\n\n        =>\n        deep-equal(map{"key":<c>value</c>})\n      '
MapConstructor-030;PRSC Error: Failed to parse query '\n\n        declare namespace a = "http://example.com";\n\n        <dot>\n          <a:b>key</a:b>\n        </dot>\n        !\n        map{a:b:*}\n\n        =>\n        deep-equal(map{"key":<a:b xmlns:a="http://example.com">key</a:b>})\n      '
MapConstructor-031;PRSC Error: Failed to parse query '\n\n        declare namespace a = "http://example.com";\n\n        <dot>\n          <a:b>key</a:b>\n        </dot>\n        !\n        map{a:*:*}\n\n        =>\n        deep-equal(map{"key":<a:b xmlns:a="http://example.com">key</a:b>})\n      '
MapConstructor-032;PRSC Error: Failed to parse query '\n\n        declare namespace a = "http://example.com";\n\n        <dot>\n          <a:b>key</a:b>\n        </dot>\n        !\n        map{*:b:*}\n\n        => \n        deep-equal(map{"key":<a:b xmlns:a="http://example.com">key</a:b>})\n\n      '
MapConstructor-033;PRSC Error: Failed to parse query '\n        <e><f>foo</f></e> ! map{*:*}\n        =>\n        deep-equal(map{"foo":<f>foo</f>})\n      '
MapConstructor-034;PRSC Error: Failed to parse query '\n        <e><f>foo</f></e> ! map{*:f:*:f}\n        =>\n        deep-equal(map{"foo":<f>foo</f>})\n      '
MapConstructor-035;PRSC Error: Failed to parse query '\n         <e><f>4</f></e>!map{*:*div*,*||*:*}\n         =>\n         deep-equal(map{"44":<f>4</f>,"4":1})\n      '
MapConstructor-036;Expected error code: XQDY0137. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'map{2+2: "a", 5-1: "b"}'
MapConstructor-037;Expected error code: XQDY0137. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'map{xs:integer(2): 5, xs:float("2.0"): 8}'
MapConstructor-038;Expected error code: XQDY0137. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'map{xs:double("NaN"): true(), xs:float("NaN"): false()}'
MapConstructor-039;Expected error code: XQDY0137. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'map{xs:double("INF"): true(), xs:float("INF"): false()}'
MapConstructor-040;Expected error code: XQDY0137. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'map{xs:double("-INF"): true(), xs:float("-INF"): false()}'
MapConstructor-041;Expected error code: XQDY0137. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'map{xs:time("24:00:00"): true(), xs:time("00:00:00"): false()}'
MapConstructor-042;Expected error code: XQDY0137. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'map{xs:time("05:00:00+05:00"): true(), xs:time("00:00:00Z"): false()}'
math-acos-001;The function math:acos with arity 1 is not registered.
math-acos-002;PRSC Error: Failed to parse query 'let $result := (math:acos(0)) return abs($result - 1.5707963267948966e0) lt 1e-14'
math-acos-003;PRSC Error: Failed to parse query 'let $result := (math:acos(-0.0e0)) return abs($result - 1.5707963267948966e0) lt 1e-14'
math-acos-004;PRSC Error: Failed to parse query 'math:acos(1.0e0) = 0.0e0'
math-acos-005;PRSC Error: Failed to parse query 'math:acos(-1.0e0) = 3.141592653589793e0'
math-acos-006;PRSC Error: Failed to parse query 'math:acos(2.0e0)'
math-acos-007;The function math:acos with arity 1 is not registered.
math-acos-008;The function math:acos with arity 1 is not registered.
math-acos-009;The function math:acos with arity 1 is not registered.
math-asin-001;The function math:asin with arity 1 is not registered.
math-asin-002;PRSC Error: Failed to parse query 'math:asin(0) = 0.0e0'
math-asin-003;PRSC Error: Failed to parse query 'math:asin(-0.0e0) = -0.0e0'
math-asin-004;PRSC Error: Failed to parse query 'math:asin(1.0e0) = 1.5707963267948966e0'
math-asin-005;PRSC Error: Failed to parse query 'math:asin(-1.0e0) = -1.5707963267948966e0'
math-asin-006;PRSC Error: Failed to parse query 'math:asin(2.0e0)'
math-asin-007;The function math:asin with arity 1 is not registered.
math-asin-08;The function math:asin with arity 1 is not registered.
math-asin-09;The function math:asin with arity 1 is not registered.
math-atan-001;The function math:atan with arity 1 is not registered.
math-atan-002;PRSC Error: Failed to parse query 'math:atan(0) = 0.0e0'
math-atan-003;PRSC Error: Failed to parse query 'math:atan(-0.0e0) = -0.0e0'
math-atan-004;PRSC Error: Failed to parse query 'math:atan(1.0e0) = 0.7853981633974483e0'
math-atan-005;PRSC Error: Failed to parse query 'math:atan(-1.0e0) = -0.7853981633974483e0'
math-atan-006;PRSC Error: Failed to parse query 'math:atan(-1.0e0) = -0.7853981633974483e0'
math-atan-007;The function math:atan with arity 1 is not registered.
math-atan-008;PRSC Error: Failed to parse query 'math:atan(xs:double('INF')) = 1.5707963267948966e0'
math-atan-009;PRSC Error: Failed to parse query 'math:atan(xs:double('-INF')) = -1.5707963267948966e0'
math-atan2-001;PRSC Error: Failed to parse query 'math:atan2(+0.0e0, 0.0e0) = 0.0e0'
math-atan2-002;PRSC Error: Failed to parse query 'math:atan2(-0.0e0, 0.0e0) = -0.0e0'
math-atan2-003;PRSC Error: Failed to parse query 'let $result := (math:atan2(+0.0e0, -0.0e0)) return abs($result - 3.141592653589793e0) lt 1e-14'
math-atan2-004;PRSC Error: Failed to parse query 'let $result := (math:atan2(-0.0e0, -0.0e0)) return abs($result + 3.141592653589793e0) lt 1e-14'
math-atan2-005;PRSC Error: Failed to parse query 'let $result := (math:atan2(-1, -0.0e0)) return abs($result + 1.5707963267948966e0) lt 1e-14'
math-atan2-006;PRSC Error: Failed to parse query 'let $result := (math:atan2(+1, 0.0e0)) return abs($result - 1.5707963267948966e0) lt 1e-14'
math-atan2-007;PRSC Error: Failed to parse query 'let $result := (math:atan2(-0.0e0, -1)) return abs($result + 3.141592653589793e0) lt 1e-14'
math-atan2-008;PRSC Error: Failed to parse query 'let $result := (math:atan2(+0.0e0, -1)) return abs($result - 3.141592653589793e0) lt 1e-14'
math-atan2-009;PRSC Error: Failed to parse query 'math:atan2(-0.0e0, +1) = -0.0e0'
math-atan2-010;PRSC Error: Failed to parse query 'math:atan2(+0.0e0, +1) = +0.0e0'
math-cos-001;The function math:cos with arity 1 is not registered.
math-cos-002;PRSC Error: Failed to parse query 'math:cos(0) = 1.0e0'
math-cos-003;PRSC Error: Failed to parse query 'math:cos(-0.0e0) = 1.0e0'
math-cos-004;The function math:cos with arity 1 is not registered.
math-cos-005;The function math:cos with arity 1 is not registered.
math-cos-006;PRSC Error: Failed to parse query 'math:cos(math:pi()) = -1.0e0'
math-cos-007;The function math:cos with arity 1 is not registered.
math-cos-008;The function math:cos with arity 1 is not registered.
math-cos-009;The function math:cos with arity 1 is not registered.
math-exp-001;The function math:exp with arity 1 is not registered.
math-exp-002;PRSC Error: Failed to parse query 'math:exp(0) = 1.0e0'
math-exp-003;PRSC Error: Failed to parse query 'let $result := (math:exp(1)) return abs($result - 2.7182818284590456e0) lt 1e-15'
math-exp-004;PRSC Error: Failed to parse query 'math:exp(2) = 7.38905609893065e0'
math-exp-005;PRSC Error: Failed to parse query 'math:exp(-1) = 0.36787944117144233e0'
math-exp-006;PRSC Error: Failed to parse query 'math:exp(math:pi()) = 23.140692632779267e0'
math-exp-007;The function math:exp with arity 1 is not registered.
math-exp-008;The function math:exp with arity 1 is not registered.
math-exp-009;PRSC Error: Failed to parse query 'math:exp(xs:double('-INF')) = 0.0e0'
math-exp10-001;The function math:exp10 with arity 1 is not registered.
math-exp10-002;PRSC Error: Failed to parse query 'math:exp10(0) = 1.0e0'
math-exp10-003;PRSC Error: Failed to parse query 'math:exp10(1) = 1.0e1'
math-exp10-004;Expected executing the XPath 'math:exp10(0.5)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function math:exp10 with arity 1 is not registered.
math-exp10-005;PRSC Error: Failed to parse query 'math:exp10(-1) = 1.0e-1'
math-exp10-006;The function math:exp10 with arity 1 is not registered.
math-exp10-007;The function math:exp10 with arity 1 is not registered.
math-exp10-008;PRSC Error: Failed to parse query 'math:exp10(xs:double('-INF')) = 0.0e0'
math-log-001;The function math:log with arity 1 is not registered.
math-log-002;The function math:log with arity 1 is not registered.
math-log-003;PRSC Error: Failed to parse query 'math:log(math:exp(1)) = 1.0e0'
math-log-004;PRSC Error: Failed to parse query 'math:log(1.0e-3) = -6.907755278982137e0'
math-log-005;PRSC Error: Failed to parse query 'math:log(2) = 0.6931471805599453e0'
math-log-006;The function math:log with arity 1 is not registered.
math-log-007;The function math:log with arity 1 is not registered.
math-log-008;The function math:log with arity 1 is not registered.
math-log-009;The function math:log with arity 1 is not registered.
math-log10-001;The function math:log10 with arity 1 is not registered.
math-log10-002;The function math:log10 with arity 1 is not registered.
math-log10-003;PRSC Error: Failed to parse query 'math:log10(1.0e3) = 3.0e0'
math-log10-004;PRSC Error: Failed to parse query 'math:log10(1.0e-3) = -3.0e0'
math-log10-005;PRSC Error: Failed to parse query 'math:log10(2) = 0.3010299956639812e0'
math-log10-006;The function math:log10 with arity 1 is not registered.
math-log10-007;The function math:log10 with arity 1 is not registered.
math-log10-008;The function math:log10 with arity 1 is not registered.
math-log10-009;The function math:log10 with arity 1 is not registered.
math-pi-001;PRSC Error: Failed to parse query '2*math:pi() = 6.283185307179586e0'
math-pi-002;PRSC Error: Failed to parse query 'let $result := (60 * (math:pi() div 180)) return abs($result - 1.0471975511965976e0) lt 1e-14'
math-pi-003;PRSC Error: Failed to parse query 'math:pi() = 3.141592653589793e0'
math-pi-004;PRSC Error: Failed to parse query 'math:pi#0() = 3.141592653589793e0'
math-pi-005;PRSC Error: Failed to parse query 'function-lookup(xs:QName('math:pi'), 0)() = 3.141592653589793e0'
math-pow-001;The function math:pow with arity 2 is not registered.
math-pow-002;PRSC Error: Failed to parse query 'math:pow(2, 3) = 8.0e0'
math-pow-003;PRSC Error: Failed to parse query 'math:pow(-2, 3) = -8.0e0'
math-pow-004;PRSC Error: Failed to parse query 'math:pow(-2, -3) = -0.125e0'
math-pow-005;PRSC Error: Failed to parse query 'math:pow(2, 0) = 1.0e0'
math-pow-006;PRSC Error: Failed to parse query 'math:pow(0, 0) = 1.0e0'
math-pow-007;PRSC Error: Failed to parse query 'math:pow(xs:double('INF'), 0) = 1.0e0'
math-pow-008;PRSC Error: Failed to parse query 'math:pow(xs:double('NaN'), 0) = 1.0e0'
math-pow-009;PRSC Error: Failed to parse query 'math:pow(-math:pi(), 0) = 1.0e0'
math-pow-010;PRSC Error: Failed to parse query 'math:pow(0e0, 3) = 0.0e0'
math-pow-011;PRSC Error: Failed to parse query 'math:pow(0e0, 4) = 0.0e0'
math-pow-012;PRSC Error: Failed to parse query 'math:pow(-0e0, 3) = -0.0e0'
math-pow-013;PRSC Error: Failed to parse query 'math:pow(0, 4) = 0.0e0'
math-pow-014;The function math:pow with arity 2 is not registered.
math-pow-015;The function math:pow with arity 2 is not registered.
math-pow-016;The function math:pow with arity 2 is not registered.
math-pow-017;The function math:pow with arity 2 is not registered.
math-pow-018;PRSC Error: Failed to parse query 'math:pow(16, 0.5e0) = 4.0e0'
math-pow-019;PRSC Error: Failed to parse query 'math:pow(16, 0.25e0) = 2.0e0'
math-pow-020;PRSC Error: Failed to parse query 'math:pow(0e0, -3.0e0) = xs:double('INF')'
math-pow-021;PRSC Error: Failed to parse query 'math:pow(-0e0, -3.0e0) = xs:double('-INF')'
math-pow-022;PRSC Error: Failed to parse query 'math:pow(0e0, -3.1e0) = xs:double('INF')'
math-pow-023;PRSC Error: Failed to parse query 'math:pow(-0e0, -3.1e0) = xs:double('INF')'
math-pow-024;PRSC Error: Failed to parse query 'math:pow(0e0, 3.0e0) = 0.0e0'
math-pow-025;PRSC Error: Failed to parse query 'math:pow(-0e0, 3.0e0) = -0.0e0'
math-pow-026;PRSC Error: Failed to parse query 'math:pow(0e0, 3.1e0) = 0.0e0'
math-pow-027;PRSC Error: Failed to parse query 'math:pow(-0e0, 3.1e0) = 0.0e0'
math-pow-028;PRSC Error: Failed to parse query 'math:pow(-1, xs:double('INF')) = 1.0e0'
math-pow-029;PRSC Error: Failed to parse query 'math:pow(-1, xs:double('-INF')) = 1.0e0'
math-pow-030;PRSC Error: Failed to parse query 'math:pow(1, xs:double('INF')) = 1.0e0'
math-pow-031;PRSC Error: Failed to parse query 'math:pow(1, xs:double('-INF')) = 1.0e0'
math-pow-032;PRSC Error: Failed to parse query 'math:pow(1, xs:double('NaN')) = 1.0e0'
math-pow-033;PRSC Error: Failed to parse query 'math:pow(-2.5e0, 2.0e0) = 6.25e0'
math-pow-034;PRSC Error: Failed to parse query 'math:pow(-2.5e0, 2.00000001e0)'
math-sin-001;The function math:sin with arity 1 is not registered.
math-sin-002;PRSC Error: Failed to parse query 'math:sin(0) = 0.0e0'
math-sin-003;PRSC Error: Failed to parse query 'math:sin(-0.0e0) = -0.0e0'
math-sin-004;PRSC Error: Failed to parse query 'math:sin(math:pi() div 2) = 1.0e0'
math-sin-005;PRSC Error: Failed to parse query 'math:sin(-math:pi() div 2) = -1.0e0'
math-sin-006;The function math:sin with arity 1 is not registered.
math-sin-007;The function math:sin with arity 1 is not registered.
math-sin-008;The function math:sin with arity 1 is not registered.
math-sin-009;The function math:sin with arity 1 is not registered.
math-sqrt-001;The function math:sqrt with arity 1 is not registered.
math-sqrt-002;PRSC Error: Failed to parse query 'math:sqrt(0.0e0) = 0.0e0'
math-sqrt-003;PRSC Error: Failed to parse query 'math:sqrt(-0.0e0) = 0.0e0'
math-sqrt-004;PRSC Error: Failed to parse query 'math:sqrt(-0.0e0) = -0.0e0'
math-sqrt-005;PRSC Error: Failed to parse query 'math:sqrt(1.0e6) = 1.0e3'
math-sqrt-006;PRSC Error: Failed to parse query 'math:sqrt(2.0e0) = 1.4142135623730951e0'
math-sqrt-007;The function math:sqrt with arity 1 is not registered.
math-sqrt-008;The function math:sqrt with arity 1 is not registered.
math-sqrt-010;The function math:sqrt with arity 1 is not registered.
math-tan-001;The function math:tan with arity 1 is not registered.
math-tan-002;PRSC Error: Failed to parse query 'math:tan(0) = 0.0e0'
math-tan-003;PRSC Error: Failed to parse query 'math:tan(-0.0e0) = -0.0e0'
math-tan-004;PRSC Error: Failed to parse query 'let $result := (math:tan(math:pi() div 4)) return abs($result - 1.0e0) lt 0.0000001'
math-tan-005;PRSC Error: Failed to parse query 'let $result := (math:tan(-math:pi() div 4)) return abs($result - -1.0e0) lt 0.0000001'
math-tan-006;The function math:tan with arity 1 is not registered.
math-tan-007;The function math:tan with arity 1 is not registered.
math-tan-008;The function math:tan with arity 1 is not registered.
math-tan-009;The function math:tan with arity 1 is not registered.
math-tan-010;The function math:tan with arity 1 is not registered.
math-tan-011;The function math:tan with arity 1 is not registered.
named-function-ref-reserved-function-names-001;Expected error code: XPST0003. Found error code: XPST0017 with error message: The function attribute with arity 0 is not registered.
named-function-ref-reserved-function-names-002;Expected error code: XPST0003. Found error code: XPST0017 with error message: The function comment with arity 0 is not registered.
named-function-ref-reserved-function-names-003;Expected error code: XPST0003. Found error code: XPST0017 with error message: The function document-node with arity 0 is not registered.
named-function-ref-reserved-function-names-004;Expected error code: XPST0003. Found error code: XPST0017 with error message: The function element with arity 0 is not registered.
named-function-ref-reserved-function-names-005;Expected error code: XPST0003. Found error code: XPST0017 with error message: The function empty-sequence with arity 0 is not registered.
named-function-ref-reserved-function-names-006;Expected error code: XPST0003. Found error code: XPST0017 with error message: The function function with arity 0 is not registered.
named-function-ref-reserved-function-names-007;Expected error code: XPST0003. Found error code: XPST0017 with error message: The function if with arity 0 is not registered.
named-function-ref-reserved-function-names-008;Expected error code: XPST0003. Found error code: XPST0017 with error message: The function item with arity 0 is not registered.
named-function-ref-reserved-function-names-009;Expected error code: XPST0003. Found error code: XPST0017 with error message: The function namespace-node with arity 0 is not registered.
named-function-ref-reserved-function-names-010;Expected error code: XPST0003. Found error code: XPST0017 with error message: The function node with arity 0 is not registered.
named-function-ref-reserved-function-names-011;Expected error code: XPST0003. Found error code: XPST0017 with error message: The function processing-instruction with arity 0 is not registered.
named-function-ref-reserved-function-names-012;Expected error code: XPST0003. Found error code: XPST0017 with error message: The function schema-attribute with arity 0 is not registered.
named-function-ref-reserved-function-names-013;Expected error code: XPST0003. Found error code: XPST0017 with error message: The function schema-element with arity 0 is not registered.
named-function-ref-reserved-function-names-014;Expected error code: XPST0003. Found error code: XPST0017 with error message: The function switch with arity 0 is not registered.
named-function-ref-reserved-function-names-015;Expected error code: XPST0003. Found error code: XPST0017 with error message: The function text with arity 0 is not registered.
named-function-ref-reserved-function-names-016;Expected error code: XPST0003. Found error code: XPST0017 with error message: The function typeswitch with arity 0 is not registered.
named-function-ref-reserved-function-names-017;Expected error code: XPST0003. Found error code: XPST0017 with error message: The function array with arity 0 is not registered.
named-function-ref-reserved-function-names-018;Expected error code: XPST0003. Found error code: XPST0017 with error message: The function map with arity 0 is not registered.
namespaceDecl-1;Expected error code: XQST0033. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace foo = "http://www.example.com/examples"; declare namespace foo = "http://www.example.com/examples"; a'
namespaceDecl-10;PRSC Error: Failed to parse query 'declare namespace xsi = "http://www.example.com/examples"; let $var := <xsi:someElement>some context</xsi:someElement> return $var'
namespaceDecl-11;PRSC Error: Failed to parse query 'declare namespace fn = "http://www.example.com/examples"; let $var := <fn:someElement>some context</fn:someElement> return $var'
namespaceDecl-12;PRSC Error: Failed to parse query 'declare namespace xdt = "http://www.example.com/examples"; let $var := <xdt:someElement>some context</xdt:someElement> return $var'
namespaceDecl-13;PRSC Error: Failed to parse query 'declare namespace local = "http://www.example.com/examples"; let $var := <local:someElement>some context</local:someElement> return $var'
namespaceDecl-14;PRSC Error: Failed to parse query 'declare namespace XML = "http://www.example.com/examples"; let $var := <XML:someElement>some context</XML:someElement> return $var'
namespaceDecl-15;PRSC Error: Failed to parse query 'declare namespace XMLNS = "http://www.example.com/examples"; let $var := <XMLNS:someElement>some context</XMLNS:someElement> return $var'
namespaceDecl-16;PRSC Error: Failed to parse query 'declare namespace px = "http://www.example.com/examples"; let $var := <px:someElement xmlns:px = "http://www.examples.com/localexamples">some context</px:someElement> return $var'
namespaceDecl-17;PRSC Error: Failed to parse query 'declare namespace px = "http://www.example.com/abc"; let $var := <px:someElement>some context</px:someElement> return namespace-uri-from-QName(node-name($var)) eq xs:anyURI("http://www.example.com/abc")'
namespaceDecl-18;PRSC Error: Failed to parse query 'declare namespace px = "ftp://ftp.is.co.za/rfc/somefile.txt"; let $var := <px:someElement>some context</px:someElement> return $var'
namespaceDecl-19;PRSC Error: Failed to parse query 'declare namespace px1 = "http://www.example.com/examples"; declare namespace px2 = "http://www.example.com/examples"; let $var := <px1:someElement>some context</px1:someElement> return $var'
namespaceDecl-2;Expected error code: XPST0081. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'element foo:anElement {"Element content"}'
namespaceDecl-20;PRSC Error: Failed to parse query 'declare namespace xx = "http://www.example.com/abc123"; let $var := <xx:someElement>some content</xx:someElement> return namespace-uri-from-QName(node-name($var)) eq xs:anyURI("http://www.example.com/abc123")'
namespaceDecl-21;PRSC Error: Failed to parse query 'declare namespace abc = "http://www.example.com/abc"; let $var := <abc:someElement>some content</abc:someElement> return namespace-uri-from-QName(node-name($var)) eq xs:anyURI("http://www.example.com/abc")'
namespaceDecl-22;PRSC Error: Failed to parse query 'declare namespace abc = "gopher://spinaltap.micro.umn.edu/00/Weather/California/somefile"; <abc:someElement>some content</abc:someElement>'
namespaceDecl-23;PRSC Error: Failed to parse query 'declare namespace abc = "http://www.example.com/abc&amp;"; let $var := <abc:someElement>some content</abc:someElement> return namespace-uri-from-QName(node-name($var)) eq xs:anyURI("http://www.example.com/abc&amp;")'
namespaceDecl-24;PRSC Error: Failed to parse query 'declare namespace abc = "mailto:someuser@someserver.com"; <abc:someElement>some content</abc:someElement>'
namespaceDecl-3;Expected error code: XQST0070. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace xml = "http://www.w3.org/XML/1998/namespace"; "a"'
namespaceDecl-4;Expected error code: XQST0070. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace foo = "http://www.w3.org/XML/1998/namespace"; "a"'
namespaceDecl-5;Expected error code: XQST0070. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace xmlns = "http://example.com/examples"; "a"'
namespaceDecl-6;PRSC Error: Failed to parse query 'declare namespace foo = "http://example.org"; <foo:bar> Lentils </foo:bar>'
namespaceDecl-7;PRSC Error: Failed to parse query 'declare namespace xx = "http://example.org"; let $i := <foo:bar xmlns:foo = "http://example.org"> <foo:bing> Lentils </foo:bing> </foo:bar> return $i/xx:bing'
namespaceDecl-9;PRSC Error: Failed to parse query 'declare namespace xs = "http://www.example.com/examples"; let $var := <xs:someElement>some context</xs:someElement> return $var'
NamespaceURIFromQNameFunc001;The function fn:namespace-uri-from-QName with arity 1 is not registered.
NamespaceURIFromQNameFunc002;The function fn:namespace-uri-from-QName with arity 1 is not registered.
NamespaceURIFromQNameFunc003;The function fn:namespace-uri-from-QName with arity 1 is not registered.
NamespaceURIFromQNameFunc004;The function fn:namespace-uri-from-QName with arity 1 is not registered.
NamespaceURIFromQNameFunc005;The function fn:namespace-uri-from-QName with arity 1 is not registered.
NamespaceURIFromQNameFunc006;The function fn:namespace-uri-from-QName with arity 1 is not registered.
NamespaceURIFromQNameFunc007;The function fn:namespace-uri-from-QName with arity 1 is not registered.
NamespaceURIFromQNameFunc009;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function fn:namespace-uri-from-QName with arity 1 is not registered.
NamespaceURIFromQNameFunc010;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function fn:namespace-uri-from-QName with arity 1 is not registered.
NamespaceURIFromQNameFunc015;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function fn:namespace-uri-from-QName with arity 1 is not registered.
NamespaceURIFromQNameFunc015a;Expected error code: XPTY0117. Found error code: XPST0017 with error message: The function fn:namespace-uri-from-QName with arity 1 is not registered.
NamespaceURIFromQNameFunc016;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function fn:namespace-uri-from-QName with arity 1 is not registered.
NamespaceURIFromQNameFunc017;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function fn:namespace-uri-from-QName with arity 1 is not registered.
NamespaceURIFromQNameFunc018;The function fn:namespace-uri-from-QName with arity 1 is not registered.
NamespaceURIFromQNameFunc019;The function fn:namespace-uri-from-QName with arity 1 is not registered.
NamespaceURIFromQNameFunc020;The function fn:namespace-uri-from-QName with arity 1 is not registered.
NamespaceURIFromQNameFunc021;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function fn:namespace-uri-from-QName with arity 1 is not registered.
nametest-1;PRSC Error: Failed to parse query 'let $var := <a attr1 = "abc1"><b attr2 = "abc2">context2</b></a> return $var/child::*'
nametest-10;PRSC Error: Failed to parse query 'declare default element namespace "http://www.example.org/examples"; let $var := <a attr1 = "abc1"><b attr2 = "abc2">context2</b></a> return fn:namespace-uri(exactly-one($var/child::b))'
nametest-11;PRSC Error: Failed to parse query 'let $var := <a attr1 = "abc1"><b attr2 = "abc2">context2</b></a> return fn:count(fn:namespace-uri(exactly-one($var/child::b))) = 1'
nametest-18;PRSC Error: Failed to parse query 'declare namespace ns1 = "http://example.org"; let $var := <a attr1 = "abc1"><ns1:b attr2 = "abc2">context2</ns1:b></a> return $var/child::*:b'
nametest-19;PRSC Error: Failed to parse query '\n      let $e := <a attr1 = "abc1" xmlns="http://example.org/nametest-19"/> \n      return exists($e/self::Q{http://example.org/nametest-19}a)\n      '
nametest-2;PRSC Error: Failed to parse query 'let $var := <a attr1 = "abc1"><b attr2 = "abc2">context2</b></a> return $var/child::b'
nametest-20;PRSC Error: Failed to parse query '\n      let $e := <a attr1 = "abc1"/> \n      return exists($e/self::Q{}a)\n      '
nametest-21;PRSC Error: Failed to parse query '\n      let $e := <a attr1 = "abc1" xmlns="http://example.org/nametest-19"/> \n      return exists($e/self::Q{http://example.org/nametest-19}*)\n      '
nametest-22;PRSC Error: Failed to parse query '\n      let $e := <a attr1 = "abc1"/> \n      return exists($e/self::Q{}*)\n      '
nametest-3;Expected error code: XPST0081. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'let $var := <a attr1 = "abc1"><b attr2 = "abc2">context2</b></a> return $var/child::pr:b'
nametest-4;Expected error code: XPST0081. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'let $var := <a attr1 = "abc1"><b attr2 = "abc2">context2</b></a> return $var/child::pr:*'
nametest-5;PRSC Error: Failed to parse query 'let $var := <a attr1 = "abc1"><b attr2 = "abc2">context2</b></a> return $var/child::*:b'
nametest-6;PRSC Error: Failed to parse query 'declare namespace ns1 = "http://example.org"; let $var := <a attr1 = "abc1"><ns1:b attr2 = "abc2">context2</ns1:b></a> return $var/child::ns1:b'
nametest-7;PRSC Error: Failed to parse query 'let $var := <a attr1 = "abc1"><b attr2 = "abc2">context2</b></a> return $var/b'
nametest-8;PRSC Error: Failed to parse query 'let $var := <a attr1 = "abc1"><b attr2 = "abc2">context2</b></a> return fn:node-name(exactly-one($var/b))'
nametest-9;PRSC Error: Failed to parse query 'let $var := <a attr1 = "abc1"><b attr2 = "abc2">context2</b></a> return fn:count(($var/empty-node-list)[1]) = 0'
nodeexpression10;PRSC Error: Failed to parse query '/works[1]/employee[1]/empnum[1] is <a>50000</a>'
nodeexpression14;PRSC Error: Failed to parse query '(/staff[1]/employee[1]/empnum[1]) is <a>50000</a>'
nodeexpression18;Expected executing the XPath 'count(() << <a>50000</a>)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'count(() << <a>50000</a>) = 0'
nodeexpression2;Expected executing the XPath 'count(() is <a>50000</a>)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'count(() is <a>50000</a>) = 0'
nodeexpression21;Expected executing the XPath 'count(<a>50000</a> << ())' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'count(<a>50000</a> << ()) = 0'
nodeexpression22;Expected executing the XPath '<a>50000</a> << <a>50000</a>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '<a>50000</a> << <a>50000</a>'
nodeexpression23;Expected executing the XPath '<a>50000</a> << /works[1]/employee[1]/empnum[1]' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '<a>50000</a> << /works[1]/employee[1]/empnum[1]'
nodeexpression24;Expected executing the XPath '<a>50000</a> << (/staff[1]/employee[1]/empnum[1])' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '<a>50000</a> << (/staff[1]/employee[1]/empnum[1])'
nodeexpression26;Expected executing the XPath '/works[1]/employee[1]/empnum[1] << <a>50000</a>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '/works[1]/employee[1]/empnum[1] << <a>50000</a>'
nodeexpression30;Expected executing the XPath '(/staff[1]/employee[1]/empnum[1]) << <a>50000</a>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '(/staff[1]/employee[1]/empnum[1]) << <a>50000</a>'
nodeexpression34;Expected executing the XPath 'count(() >> <a>50000</a>)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'count(() >> <a>50000</a>) = 0'
nodeexpression37;Expected executing the XPath 'count(<a>50000</a> >> ())' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'count(<a>50000</a> >> ()) = 0'
nodeexpression38;Expected executing the XPath '<a>50000</a> >> <a>50000</a>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '<a>50000</a> >> <a>50000</a>'
nodeexpression39;Expected executing the XPath '<a>50000</a> >> /works[1]/employee[1]/empnum[1]' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '<a>50000</a> >> /works[1]/employee[1]/empnum[1]'
nodeexpression40;Expected executing the XPath '<a>50000</a> >> (/staff[1]/employee[1]/empnum[1])' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '<a>50000</a> >> (/staff[1]/employee[1]/empnum[1])'
nodeexpression42;Expected executing the XPath '/works[1]/employee[1]/empnum[1] >> <a>50000</a>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '/works[1]/employee[1]/empnum[1] >> <a>50000</a>'
nodeexpression46;Expected executing the XPath '(/staff[1]/employee[1]/empnum[1]) >> <a>50000</a>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '(/staff[1]/employee[1]/empnum[1]) >> <a>50000</a>'
nodeexpression5;Expected executing the XPath 'count(<a>50000</a> is ())' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'count(<a>50000</a> is ()) = 0'
nodeexpression6;PRSC Error: Failed to parse query '<a>50000</a> is <a>50000</a>'
nodeexpression7;PRSC Error: Failed to parse query '<a>50000</a> is /works[1]/employee[1]/empnum[1]'
nodeexpression8;PRSC Error: Failed to parse query '<a>50000</a> is (/staff[1]/employee[1]/empnum[1])'
nodeexpressionhc10;Expected XPath ((/staff[1]/employee[1]/empnum[1]) << (/staff[1]/employee[1]/empnum[1])) \n         le ((/staff[1]/employee[1]/empnum[1]) << (/staff[1]/employee[1]/empnum[1])) to resolve to true
nodeexpressionhc13;Expected XPath ((/staff[1]/employee[1]/empnum[1]) >> (/staff[1]/employee[1]/empnum[1])) \n         ge ((/staff[1]/employee[1]/empnum[1]) >> (/staff[1]/employee[1]/empnum[1])) to resolve to true
nodeexpressionhc15;Expected XPath ((/staff[1]/employee[1]/empnum[1]) >> (/staff[1]/employee[1]/empnum[1])) \n         le ((/staff[1]/employee[1]/empnum[1]) >> (/staff[1]/employee[1]/empnum[1])) to resolve to true
nodeexpressionhc3;Expected XPath ((/staff[1]/employee[1]/empnum[1]) is (/staff[1]/employee[1]/empnum[1])) ge ((/staff[1]/employee[1]/empnum[1]) is (/staff[1]/employee[1]/empnum[1])) to resolve to true
nodeexpressionhc5;Expected XPath ((/staff[1]/employee[1]/empnum[1]) is (/staff[1]/employee[1]/empnum[1])) le ((/staff[1]/employee[1]/empnum[1]) is (/staff[1]/employee[1]/empnum[1])) to resolve to true
nodeexpressionhc8;Expected XPath ((/staff[1]/employee[1]/empnum[1]) << (/staff[1]/employee[1]/empnum[1])) \n         ge\n         ((/staff[1]/employee[1]/empnum[1]) << (/staff[1]/employee[1]/empnum[1])) to resolve to true
NodeTest003;Haven't implemented Qnames from: Customers:
NodeTest004;PRSC Error: Failed to parse query '(/.) instance of $document-node(element(Root))'
NodeTest005;PRSC Error: Failed to parse query '(/*/.) instance of $element(Root)'
NodeTest006;PRSC Error: Failed to parse query '<result> {/bib/book/editor/affiliation/text()} </result>'
NodeTest007-1;PRSC Error: Failed to parse query '<out>{fn:count(//processing-instruction('a-pi'))}</out>'
NodeTest007-2;PRSC Error: Failed to parse query '<out>{fn:count(//processing-instruction('a-pi'))}</out>'
NodeTest008-1;PRSC Error: Failed to parse query '<out>{fn:count(//center/text())}</out>'
NodeTest008-2;PRSC Error: Failed to parse query '<out>{fn:count(//center/text())}</out>'
NodeTest009-1;PRSC Error: Failed to parse query '<out>{fn:count(//center/comment())}</out>'
NodeTest009-2;PRSC Error: Failed to parse query '<out>{fn:count(//center/comment())}</out>'
NodeTest010-1;PRSC Error: Failed to parse query '<out>{fn:count(//comment())}</out>'
NodeTest010-2;PRSC Error: Failed to parse query '<out>{fn:count(//comment())}</out>'
NodeTest011-1;PRSC Error: Failed to parse query '<out>{fn:count(//center/processing-instruction())}</out>'
NodeTest011-2;PRSC Error: Failed to parse query '<out>{fn:count(//center/processing-instruction())}</out>'
NodeTest012-1;PRSC Error: Failed to parse query '<out>{fn:count(//processing-instruction())}</out>'
NodeTest012-2;PRSC Error: Failed to parse query '<out>{fn:count(//processing-instruction())}</out>'
NodeTest013-1;PRSC Error: Failed to parse query '<out>{fn:count(//center/processing-instruction('a-pi'))}</out>'
NodeTest013-2;PRSC Error: Failed to parse query '<out>{fn:count(//center/processing-instruction('a&#x2d;pi'))}</out>'
NodeTesthc-1;PRSC Error: Failed to parse query '<result> {//text() and fn:true()} </result>'
NodeTesthc-2;PRSC Error: Failed to parse query '<result> {//text() or fn:true()} </result>'
NodeTesthc-3;PRSC Error: Failed to parse query '<result> {//text() and fn:false()} </result>'
NodeTesthc-4;PRSC Error: Failed to parse query '<result> {//text() or fn:false()} </result>'
NodeTesthc-5;PRSC Error: Failed to parse query '<result> {//overtime/node() or fn:false()} </result>'
NodeTesthc-6;PRSC Error: Failed to parse query '<result> {//overtime/node() or fn:true()} </result>'
NodeTesthc-7;PRSC Error: Failed to parse query '<result> {//overtime/node() and fn:false()} </result>'
NodeTesthc-8;PRSC Error: Failed to parse query '<result> {//overtime/node() and fn:true()} </result>'
notation-cast-2;Expected error code: XPST0080. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        import schema namespace myType = "http://www.w3.org/XQueryTest/userDefinedTypes"; \n        myType:NOTATIONBased("myType:value1") cast as xs:NOTATION'
notation-cast-3;PRSC Error: Failed to parse query '\n        import schema namespace myType = "http://www.w3.org/XQueryTest/userDefinedTypes"; \n        myType:NOTATIONBased("myType:value1") cast as myType:NOTATIONBased'
ns-queries-results-q1;Skipped test, it was a assert-permutation
ns-queries-results-q2;PRSC Error: Failed to parse query '\n        declare namespace music = "http://www.example.org/music/records"; \n        <Q2> { //music:title } </Q2>\n      '
ns-queries-results-q3;PRSC Error: Failed to parse query '\n        declare namespace dt = "http://www.w3.org/2001/XMLSchema"; \n        <Q3> { //*[@dt:*] } </Q3>'
ns-queries-results-q4;PRSC Error: Failed to parse query '\n        declare namespace xlink = "http://www.w3.org/1999/xlink"; \n        <Q4 xmlns:xlink="http://www.w3.org/1999/xlink"> { for $hr in //@xlink:href return <ns>{ $hr }</ns> } </Q4>\n      '
ns-queries-results-q5;PRSC Error: Failed to parse query '\n        declare namespace music = "http://www.example.org/music/records"; \n        <Q5 xmlns:music="http://www.example.org/music/records"> { //music:record[music:remark/@xml:lang = "de"] } </Q5>\n      '
ns-queries-results-q6;PRSC Error: Failed to parse query '\n        declare namespace ma = "http://www.example.com/AuctionWatch"; \n        declare namespace anyzone = "http://www.example.com/auctioneers#anyzone"; \n        <Q6 xmlns:ma="http://www.example.com/AuctionWatch"> { //ma:Auction[@anyzone:ID]/ma:Schedule/ma:Close } </Q6>\n      '
ns-queries-results-q7;PRSC Error: Failed to parse query '\n        declare namespace ma = "http://www.example.com/AuctionWatch"; \n        <Q7 xmlns:xlink="http://www.w3.org/1999/xlink"> { \n            for $a in //ma:Auction \n            let $seller_id := $a/ma:Trading_Partners/ma:Seller/*:ID, \n                $buyer_id := $a/ma:Trading_Partners/ma:High_Bidder/*:ID \n            where namespace-uri(exactly-one($seller_id)) = namespace-uri($buyer_id) \n            return $a/ma:AuctionHomepage } </Q7>\n      '
ns-queries-results-q8;PRSC Error: Failed to parse query '\n        declare namespace ma = "http://www.example.com/AuctionWatch"; \n        <Q8 xmlns:ma="http://www.example.com/AuctionWatch" \n            xmlns:eachbay="http://www.example.com/auctioneers#eachbay" \n            xmlns:xlink="http://www.w3.org/1999/xlink"> { \n                for $s in //ma:Trading_Partners/(ma:Seller | ma:High_Bidder) \n                where $s/*:NegativeComments = 0 \n                return $s } </Q8>\n      '
nscons-001;PRSC Error: Failed to parse query '\n        declare variable $s := "http://saxon.sf.net/"; \n        declare variable $xsl := "http://www.w3.org/1999/XSL/Transform"; \n        <e>{ namespace saxon {$s}, attribute a {23}, namespace xsl {$xsl} }</e>\n      '
nscons-002;PRSC Error: Failed to parse query '\n        declare variable $s := "saxon"; \n        declare variable $xsl := "xsl"; \n        <e>{ namespace {$s} {"http://saxon.sf.net/"}, \n             attribute a {23}, \n             namespace {$xsl} {"http://www.w3.org/1999/XSL/Transform"} }</e>\n      '
nscons-003;PRSC Error: Failed to parse query '\n        declare variable $s := "saxon"; \n        declare variable $xsl := "xsl"; \n        <out> <t:e xmlns:t="http://www.example.com/">{ \n            namespace {""} {"http://saxon.sf.net/"}, \n            attribute a {23}, \n            namespace {$xsl} {"http://www.w3.org/1999/XSL/Transform"}, <f/> }</t:e> </out>\n      '
nscons-004;PRSC Error: Failed to parse query '\n        declare variable $s := "saxon"; \n        declare variable $xml := "http://www.w3.org/XML/1998/namespace"; \n        <out> <t:e xmlns:t="http://www.example.com/" xml:space="preserve">{ \n            namespace xml {"http://www.w3.org/XML/1998/namespace"}, \n            attribute a {23}, <f/> }</t:e> </out>\n      '
nscons-005;PRSC Error: Failed to parse query '\n        declare variable $s := "http://saxon.sf.net/"; \n        declare variable $xsl := "http://www.w3.org/1999/XSL/Transform"; \n        element {QName("http://saxon.sf.net/", "saxon:extension")} { namespace saxon {$s}, attribute a {23}, namespace xsl {$xsl}, element f {42} }\n      '
nscons-006;PRSC Error: Failed to parse query '\n        declare variable $s := "http://saxon.sf.net/"; \n        declare variable $xsl := "http://www.w3.org/1999/XSL/Transform"; \n        element {QName("http://saxon.sf.net/", "saxon:extension")} \n                { namespace saxon {$s}, attribute a {23}, namespace xsl {$xsl}, namespace saxon {$s}, element f {42} }\n      '
nscons-007;Expected error code: XQDY0101. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare variable $s := "http://saxon.sf.net/"; \n        declare variable $xsl := "http://www.w3.org/1999/XSL/Transform"; \n        declare variable $xmlns := "xmlns"; \n        <e> { namespace saxon {$s}, attribute a {23}, namespace xsl {$xsl}, namespace xmlns {$s}, element f {42} }</e>\n      '
nscons-008;Expected error code: XQDY0101. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare variable $s := "http://saxon.sf.net/"; \n        declare variable $xsl := "http://www.w3.org/1999/XSL/Transform"; \n        declare variable $xmlns := "xml"; \n        <e> { namespace saxon {$s}, attribute a {23}, namespace xsl {$xsl}, namespace {$xmlns} {$s}, element f {42} }</e>\n      '
nscons-009;Expected error code: XQDY0102. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare variable $p1 := "http://example.com/one"; \n        declare variable $p2 := "http://example.com/two"; \n        <e> { namespace p {$p1}, namespace p {$p2}, element f {42} }</e>\n      '
nscons-010;PRSC Error: Failed to parse query '\n        declare variable $p1 := "http://example.com/one"; \n        declare variable $p2 := "http://example.com/two"; \n        declare variable $r := <e> { namespace p {$p1}, attribute {QName($p2, "p:att")} {93.7}, element f {42} }</e>; \n        <out> { exists($r/@*:att[prefix-from-QName(node-name(.))!='p']), exists(in-scope-prefixes($r)[.='p']) }</out>\n      '
nscons-011;PRSC Error: Failed to parse query '\n        declare variable $p1 := "http://example.com/one"; \n        declare variable $p2 := "http://example.com/two"; \n        declare variable $r := element {QName($p2, 'p:e')} { namespace p {$p1}, element f {42} }; \n        <out> { exists($r[prefix-from-QName(node-name(.))!='p']), exists(in-scope-prefixes($r)[.='p']) }</out>\n      '
nscons-012;PRSC Error: Failed to parse query '\n        declare variable $p1 := "http://example.com/one"; \n        declare variable $p2 := "http://example.com/two"; \n        declare function local:f($ns as namespace-node()) as element() { \n            <namespace name="{name($ns)}" local-name="{local-name($ns)}" \n                namespace-uri="{namespace-uri($ns)}" string-value="{string($ns)}" typed-value="{data($ns)}" \n                is-untyped="{data($ns) instance of xs:untypedAtomic}" parent-exists="{exists($ns/..)}" \n                is-namespace="{$ns instance of namespace-node()}" \n                is-node="{$ns instance of node()}" is-item="{$ns instance of item()}" \n                same-as-self="{$ns is $ns}"/> \n        }; \n        <out>{ \n            local:f(namespace p {"http://example.com/one"}), \n            local:f(namespace {""} {"http://example.com/two"}) }</out>\n      '
nscons-013;PRSC Error: Failed to parse query '\n        let $pre := <prefix>z</prefix>,\n            $uri := "http://www.zorba-xquery.com/"\n        return\n          <e>{ namespace { $pre } { $uri } }</e>\n      '
nscons-014;PRSC Error: Failed to parse query '\n        let $pre := "z",\n            $uri := "http://www.zorba-xquery.com/"\n        return\n          <e>{ namespace { $pre } { $uri } }</e>\n      '
nscons-015;PRSC Error: Failed to parse query '\n        declare namespace z="http://www.zorba-xquery.com/";\n        <z:e>{ namespace { <a/>/* } { "http://www.w3.org/" } }</z:e>\n      '
nscons-016;Expected error code: XQDY0074. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        let $pre := <prefix>z:z</prefix>,\n            $uri := "http://www.zorba-xquery.com/"\n        return\n          <e>{ namespace { $pre } { $uri } }</e>\n      '
nscons-017;Expected error code: XQDY0074. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        let $pre := "z z",\n            $uri := "http://www.zorba-xquery.com/"\n        return\n          <e>{ namespace { $pre } { $uri } }</e>\n      '
nscons-018;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        let $pre := 1,\n            $uri := "http://www.zorba-xquery.com/"\n        return\n          <e>{ namespace { $pre } { $uri } }</e>\n      '
nscons-019;Expected error code: XQDY0101. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        let $uri := "http://www.w3.org/XML/1998/namespace"\n        return\n          <e>{ namespace x { $uri } }</e>\n      '
nscons-020;Expected error code: XQDY0101. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        let $uri := "http://www.w3.org/2000/xmlns/"\n        return\n          <e>{ namespace x { $uri } }</e>\n      '
nscons-021;Expected error code: XQDY0101. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        <e>{ namespace x { "" } }</e>\n      '
nscons-022;PRSC Error: Failed to parse query '\n        let $elem := <e>{ namespace z { "http://www.zorba-xquery.com/" } }</e>\n        return\n          element { resolve-QName("z:f", $elem) } {}\n      '
nscons-023;Expected error code: XPST0081. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        <z:e>{ namespace z { "http://www.zorba-xquery.com/" } }</z:e>\n      '
nscons-024;Expected error code: XPST0081. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        <e>{ namespace z { "http://www.zorba-xquery.com/" }, element z:e {} }</e>\n      '
nscons-025;Expected error code: XPST0081. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        element e { attribute z:a {},  namespace z { "http://www.zorba-xquery.com/" } }\n      '
nscons-026;Expected error code: FONS0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        <e>{ namespace z { "http://www.zorba-xquery.com/" }, element { xs:QName("z:e") } { } }</e>\n      '
nscons-027;PRSC Error: Failed to parse query '\n        import module namespace mod1="http://www.w3.org/TestModules/cnc-module";\n        let $elem := <e>{ mod1:one() }</e>\n        return\n          element { resolve-QName("z:f", $elem) } {}\n      '
nscons-028;PRSC Error: Failed to parse query '\n        import module namespace mod1="http://www.w3.org/TestModules/cnc-module";\n        let $ns := mod1:one()\n        return ($ns is $ns, $ns is mod1:one())\n      '
nscons-029;Expected error code: SENR0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        serialize( namespace z { "http://www.zorba-xquery.com/" } )\n      '
nscons-030;PRSC Error: Failed to parse query 'let $result := (\n        serialize( element e { namespace z { "http://www.zorba-xquery.com/" } } )\n      ) return contains($result,'xmlns:z')'
nscons-031;PRSC Error: Failed to parse query '\n        declare copy-namespaces preserve, inherit;\n        let $nested := \n            element outer { \n              namespace out { "http://out.zorba-xquery.com/" },\n              element inner {\n                namespace in { "http://in.zorba-xquery.com/" }\n              } \n            },\n            $elem := element e { namespace new { "http://new.zorba-xquery.com/" }, $nested }\n        return\n          $elem/outer/inner\n      '
nscons-032;PRSC Error: Failed to parse query '\n        declare copy-namespaces preserve, no-inherit;\n        let $nested := \n            element outer { \n              namespace out { "http://out.zorba-xquery.com/" },\n              element inner { namespace in { "http://in.zorba-xquery.com/" } } \n            },\n            $elem := element e { namespace new { "http://new.zorba-xquery.com/" }, $nested }\n        return\n          $elem/outer/inner\n      '
nscons-033;PRSC Error: Failed to parse query '\n        declare copy-namespaces no-preserve, inherit;\n        let $nested := \n            element outer { \n              namespace out { "http://out.zorba-xquery.com/" },\n              element inner { namespace in { "http://in.zorba-xquery.com/" } } \n            },\n            $elem := element e { namespace new { "http://new.zorba-xquery.com/" }, $nested }\n        return\n          $elem/outer/inner\n      '
nscons-034;PRSC Error: Failed to parse query '\n        declare copy-namespaces no-preserve, no-inherit;\n        let $nested := \n            element outer { \n              namespace out { "http://out.zorba-xquery.com/" },\n              element inner { namespace in { "http://in.zorba-xquery.com/" } } \n            },\n            $elem := element e { namespace new { "http://new.zorba-xquery.com/" }, $nested }\n        return\n          $elem/outer/inner\n      '
nscons-035;PRSC Error: Failed to parse query '\n        import module namespace mod1="http://www.w3.org/TestModules/cnc-module";\n        declare copy-namespaces preserve, inherit;\n        let $nested := mod1:nested(),\n            $elem := element e { namespace new { "http://new.zorba-xquery.com/" }, $nested }\n        return\n          $elem/outer/inner\n      '
nscons-036;PRSC Error: Failed to parse query '\n        import module namespace mod1="http://www.w3.org/TestModules/cnc-module";\n        declare copy-namespaces preserve, no-inherit;\n        let $nested := mod1:nested(),\n            $elem := element e { namespace new { "http://new.zorba-xquery.com/" }, $nested }\n        return\n          $elem/outer/inner\n      '
nscons-037;PRSC Error: Failed to parse query '\n        import module namespace mod1="http://www.w3.org/TestModules/cnc-module";\n        declare copy-namespaces no-preserve, inherit;\n        let $nested := mod1:nested(),\n            $elem := element e { namespace new { "http://new.zorba-xquery.com/" }, $nested }\n        return\n          $elem/outer/inner\n      '
nscons-038;PRSC Error: Failed to parse query '\n        import module namespace mod1="http://www.w3.org/TestModules/cnc-module";\n        declare copy-namespaces no-preserve, no-inherit;\n        let $nested := mod1:nested(),\n            $elem := element e { namespace new { "http://new.zorba-xquery.com/" }, $nested }\n        return\n          $elem/outer/inner\n      '
nscons-039;PRSC Error: Failed to parse query '\n        declare copy-namespaces preserve, inherit;\n        \n        declare function local:rec-add($level as xs:integer) as element() {\n          if ($level > 0) then\n            element { concat("e", $level) } { \n              namespace { concat("pre", $level) } { concat("uri", $level) },\n              local:rec-add($level - 1)\n            }\n          else\n            element e0 {}       \n        };\n\n        local:rec-add(2)/e1/e0\n      '
nscons-040;Expected error code: XQDY0027. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        import schema namespace cnc="http://www.w3.org/TestSchemas/cnc";\n\n        validate { \n          <cnc:value xsi:type="xs:int" >{ 10 }</cnc:value>\n        }\n      '
nscons-041;PRSC Error: Failed to parse query '\n        import schema namespace cnc="http://www.w3.org/TestSchemas/cnc";\n\n        let $xs  := namespace xs { "http://www.w3.org/2001/XMLSchema" },\n            $val := validate { \n                      <cnc:value xsi:type="xs:int" >{ $xs, 10 }</cnc:value>\n                    }\n        return\n          data($val) instance of xs:int\n      '
nscons-042;Expected error code: XQDY0102. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        element e { namespace {''} {'http://example.com/uri'} }\n      '
nscons-043;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        let $pre := xs:anyURI('ns'),\n            $uri := "http://www.zorba-xquery.com/"\n        return\n          <e>{ namespace { $pre } { $uri } }</e>\n      '
nscons-044;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        let $pre := xs:duration('P1D'),\n            $uri := "http://www.zorba-xquery.com/"\n        return\n          <e>{ namespace { $pre } { $uri } }</e>\n      '
numeric-greater-than-101;PRSC Error: Failed to parse query 'deep-equal((\n   let $ex :=\n   <bla><n> -2 </n>\n      <n> -3.0e5 </n>\n      <n> +2345.6e0 </n>\n      <n>\n         +5678e0\n      </n>\n      <n>\n         1.2345e4\n      </n>\n      <n>\n         5.6789e+4\n      </n>\n      <n>\n         INF\n      </n>\n   </bla>\n   return\n   $ex//n[.>1000] ! xs:double(.)\n         ), ((2345.6, 5678, 12345, 56789, xs:double("INF"))))'
numeric-greater-than-102;PRSC Error: Failed to parse query 'deep-equal((\n   let $ex :=\n   <bla><n>10</n>\n      <n>123</n>\n      <n> 1234 </n>\n      <n> 2345.6 </n>\n      <n>\n         1555\n      </n>\n      <n> 12345 </n>\n   </bla>\n   return\n   $ex//n[.>1000] ! xs:decimal(.)\n         ), ((1234, 2345.6, 1555, 12345)))'
op-add-dayTimeDurations-1;Expected XPath xs:dayTimeDuration("P2DT12H5M") + xs:dayTimeDuration("P5DT12H") to resolve to P8DT5M, but instead got PT
op-add-dayTimeDurations-11;Attempted to divide by zero.
op-add-dayTimeDurations-13;Expected XPath (xs:dayTimeDuration("P23DT11H11M") + xs:dayTimeDuration("P23DT11H11M")) eq xs:dayTimeDuration("P23DT11H11M") to resolve to false
op-add-dayTimeDurations-14;Expected XPath (xs:dayTimeDuration("P21DT08H12M") + xs:dayTimeDuration("P08DT08H05M")) ne xs:dayTimeDuration("P08DT08H05M") to resolve to true
op-add-dayTimeDurations-15;Expected XPath (xs:dayTimeDuration("P10DT10H01M") + xs:dayTimeDuration("P17DT10H02M")) le xs:dayTimeDuration("P17DT10H02M") to resolve to false
op-add-dayTimeDurations-6;Expected XPath fn:number(xs:dayTimeDuration("P02DT06H09M") + xs:dayTimeDuration("P10DT08H01M")) to resolve to NaN, but instead got Infinity
op-add-dayTimeDurations-7;Expected XPath fn:string(xs:dayTimeDuration("P03DT04H08M") + xs:dayTimeDuration("P01DT09H02M")) to resolve to P4DT13H10M, but instead got PT
op-add-dayTimeDurations-8;Expected XPath (xs:dayTimeDuration("P10DT01H01M") + xs:dayTimeDuration("-P11DT02H02M")) to resolve to -P1DT1H1M, but instead got PT
op-add-dayTimeDurations2args-1;Expected XPath xs:dayTimeDuration("P0DT0H0M0S") + xs:dayTimeDuration("P0DT0H0M0S") to resolve to PT0S, but instead got PT
op-add-dayTimeDurations2args-2;Expected XPath xs:dayTimeDuration("P15DT11H59M59S") + xs:dayTimeDuration("P0DT0H0M0S") to resolve to P15DT11H59M59S, but instead got PT
op-add-dayTimeDurations2args-3;Expected XPath xs:dayTimeDuration("P31DT23H59M59S") + xs:dayTimeDuration("P0DT0H0M0S") to resolve to P31DT23H59M59S, but instead got PT
op-add-dayTimeDurations2args-4;Expected XPath xs:dayTimeDuration("P0DT0H0M0S") + xs:dayTimeDuration("P15DT11H59M59S") to resolve to P15DT11H59M59S, but instead got PT
op-add-dayTimeDurations2args-5;Expected XPath xs:dayTimeDuration("P0DT0H0M0S") + xs:dayTimeDuration("P31DT23H59M59S") to resolve to P31DT23H59M59S, but instead got PT
op-add-yearMonthDurations-1;Expected XPath xs:yearMonthDuration("P2Y11M") + xs:yearMonthDuration("P3Y3M") to resolve to P6Y2M, but instead got P
op-add-yearMonthDurations-11;Attempted to divide by zero.
op-add-yearMonthDurations-13;Expected XPath (xs:yearMonthDuration("P23Y11M") + xs:yearMonthDuration("P23Y11M")) eq xs:yearMonthDuration("P23Y11M") to resolve to false
op-add-yearMonthDurations-14;Expected XPath (xs:yearMonthDuration("P21Y12M") + xs:yearMonthDuration("P08Y05M")) ne xs:yearMonthDuration("P08Y05M") to resolve to true
op-add-yearMonthDurations-15;Expected XPath (xs:yearMonthDuration("P10Y01M") + xs:yearMonthDuration("P17Y02M")) le xs:yearMonthDuration("P17Y02M") to resolve to false
op-add-yearMonthDurations-6;Expected XPath fn:number(xs:yearMonthDuration("P02Y09M") + xs:yearMonthDuration("P10Y01M")) to resolve to NaN, but instead got Infinity
op-add-yearMonthDurations-7;Expected XPath fn:string(xs:yearMonthDuration("P03Y08M") + xs:yearMonthDuration("P01Y02M")) to resolve to P4Y10M, but instead got P
op-add-yearMonthDurations-8;Expected XPath (xs:yearMonthDuration("P10Y01M") + xs:yearMonthDuration("-P11Y02M")) to resolve to -P1Y1M, but instead got P
op-add-yearMonthDurations2args-1;Expected XPath xs:yearMonthDuration("P0Y0M") + xs:yearMonthDuration("P0Y0M") to resolve to P0M, but instead got P
op-add-yearMonthDurations2args-2;Expected XPath xs:yearMonthDuration("P1000Y6M") + xs:yearMonthDuration("P0Y0M") to resolve to P1000Y6M, but instead got P
op-add-yearMonthDurations2args-3;Expected XPath xs:yearMonthDuration("P2030Y12M") + xs:yearMonthDuration("P0Y0M") to resolve to P2031Y, but instead got P
op-add-yearMonthDurations2args-4;Expected XPath xs:yearMonthDuration("P0Y0M") + xs:yearMonthDuration("P1000Y6M") to resolve to P1000Y6M, but instead got P
op-add-yearMonthDurations2args-5;Expected XPath xs:yearMonthDuration("P0Y0M") + xs:yearMonthDuration("P2030Y12M") to resolve to P2031Y, but instead got P
op-base64Binary-equal2args-1;Type casting to XsBase64Binary has not been implemented yet.
op-base64Binary-equal2args-10;Type casting to XsBase64Binary has not been implemented yet.
op-base64Binary-equal2args-2;Type casting to XsBase64Binary has not been implemented yet.
op-base64Binary-equal2args-3;Type casting to XsBase64Binary has not been implemented yet.
op-base64Binary-equal2args-4;Type casting to XsBase64Binary has not been implemented yet.
op-base64Binary-equal2args-5;Type casting to XsBase64Binary has not been implemented yet.
op-base64Binary-equal2args-6;Type casting to XsBase64Binary has not been implemented yet.
op-base64Binary-equal2args-7;Type casting to XsBase64Binary has not been implemented yet.
op-base64Binary-equal2args-8;Type casting to XsBase64Binary has not been implemented yet.
op-base64Binary-equal2args-9;Type casting to XsBase64Binary has not been implemented yet.
op-boolean-equal-17;Expected error code: XPTY0004. Query succeeded with result: True
op-concat-19;PRSC Error: Failed to parse query '(12 || 34 - 50) instance of $xs:string'
op-concatdbl2args-1;Expected XPath (xs:double("-1.7976931348623157E308")||xs:double("-1.7976931348623157E308")) to resolve to -1.7976931348623157E308-1.7976931348623157E308, but instead got -1.7976931348623157E+308-1.7976931348623157E+308
op-concatdbl2args-2;Expected XPath (xs:double("0")||xs:double("-1.7976931348623157E308")) to resolve to 0-1.7976931348623157E308, but instead got 0-1.7976931348623157E+308
op-concatdbl2args-3;Expected XPath (xs:double("1.7976931348623157E308")||xs:double("-1.7976931348623157E308")) to resolve to 1.7976931348623157E308-1.7976931348623157E308, but instead got 1.7976931348623157E+308-1.7976931348623157E+308
op-concatdbl2args-4;Expected XPath (xs:double("-1.7976931348623157E308") || xs:double("0")) to resolve to -1.7976931348623157E3080, but instead got -1.7976931348623157E+3080
op-concatdbl2args-5;Expected XPath (xs:double("-1.7976931348623157E308") || xs:double("1.7976931348623157E308")) to resolve to -1.7976931348623157E3081.7976931348623157E308, but instead got -1.7976931348623157E+3081.7976931348623157E+308
op-concatenate-mix-args-005;Type casting to XsAnyUri has not been implemented yet.
op-concatenate-mix-args-006;Type casting to XsAnyUri has not been implemented yet.
op-concatenate-mix-args-007;Type casting to XsAnyUri has not been implemented yet.
op-concatenate-mix-args-008;Expected XPath xs:float("1.01"), xs:float("NaN") to resolve to 1.01 NaN, but instead got 1.01 Infinity
op-concatenate-mix-args-009;Expected XPath xs:float("INF") , xs:double("NaN") to resolve to INF NaN, but instead got Infinity Infinity
op-concatenate-mix-args-010;Expected XPath xs:double("INF"), xs:double("-INF"), xs:float("-INF") to resolve to INF -INF -INF, but instead got Infinity -Infinity -Infinity
op-concatenate-mix-args-013;Expected XPath xs:date("1993-03-31") , xs:boolean("true"), xs:string("abc") to resolve to 1993-03-31 true abc, but instead got 1993-03-31 True abc
op-concatflt2args-1;Expected XPath (xs:float("-3.4028235E38") || xs:float("-3.4028235E38")) to resolve to -3.4028235E38-3.4028235E38, but instead got -3.4028235E+38-3.4028235E+38
op-concatflt2args-2;Expected XPath (xs:float("0") || xs:float("-3.4028235E38")) to resolve to 0-3.4028235E38, but instead got 0-3.4028235E+38
op-concatflt2args-3;Expected XPath (xs:float("3.4028235E38") || xs:float("-3.4028235E38")) to resolve to 3.4028235E38-3.4028235E38, but instead got 3.4028235E+38-3.4028235E+38
op-concatflt2args-4;Expected XPath (xs:float("-3.4028235E38") || xs:float("0")) to resolve to -3.4028235E380, but instead got -3.4028235E+380
op-concatflt2args-5;Expected XPath (xs:float("-3.4028235E38") || xs:float("3.4028235E38")) to resolve to -3.4028235E383.4028235E38, but instead got -3.4028235E+383.4028235E+38
op-dayTimeDuration-equal2args-10;Expected XPath xs:dayTimeDuration("P0DT0H0M0S") ne xs:dayTimeDuration("P31DT23H59M59S") to resolve to true
op-dayTimeDuration-equal2args-12;Expected XPath xs:dayTimeDuration("P15DT11H59M59S") le xs:dayTimeDuration("P0DT0H0M0S") to resolve to false
op-dayTimeDuration-equal2args-13;Expected XPath xs:dayTimeDuration("P31DT23H59M59S") le xs:dayTimeDuration("P0DT0H0M0S") to resolve to false
op-dayTimeDuration-equal2args-19;Expected XPath xs:dayTimeDuration("P0DT0H0M0S") ge xs:dayTimeDuration("P15DT11H59M59S") to resolve to false
op-dayTimeDuration-equal2args-2;Expected XPath xs:dayTimeDuration("P15DT11H59M59S") eq xs:dayTimeDuration("P0DT0H0M0S") to resolve to false
op-dayTimeDuration-equal2args-20;Expected XPath xs:dayTimeDuration("P0DT0H0M0S") ge xs:dayTimeDuration("P31DT23H59M59S") to resolve to false
op-dayTimeDuration-equal2args-3;Expected XPath xs:dayTimeDuration("P31DT23H59M59S") eq xs:dayTimeDuration("P0DT0H0M0S") to resolve to false
op-dayTimeDuration-equal2args-4;Expected XPath xs:dayTimeDuration("P0DT0H0M0S") eq xs:dayTimeDuration("P15DT11H59M59S") to resolve to false
op-dayTimeDuration-equal2args-5;Expected XPath xs:dayTimeDuration("P0DT0H0M0S") eq xs:dayTimeDuration("P31DT23H59M59S") to resolve to false
op-dayTimeDuration-equal2args-7;Expected XPath xs:dayTimeDuration("P15DT11H59M59S") ne xs:dayTimeDuration("P0DT0H0M0S") to resolve to true
op-dayTimeDuration-equal2args-8;Expected XPath xs:dayTimeDuration("P31DT23H59M59S") ne xs:dayTimeDuration("P0DT0H0M0S") to resolve to true
op-dayTimeDuration-equal2args-9;Expected XPath xs:dayTimeDuration("P0DT0H0M0S") ne xs:dayTimeDuration("P15DT11H59M59S") to resolve to true
op-dayTimeDuration-greater-than-13;Expected XPath (xs:dayTimeDuration("P30DT10H") gt xs:dayTimeDuration("P01DT02H")) or (fn:false()) to resolve to true
op-dayTimeDuration-greater-than-14;Expected XPath (xs:dayTimeDuration("P10DT05H") ge xs:dayTimeDuration("P20DT10H")) or (fn:false()) to resolve to false
op-dayTimeDuration-greater-than-3;Expected XPath fn:not((xs:dayTimeDuration("P15DT12H") gt xs:dayTimeDuration("P14DT11H"))) to resolve to false
op-dayTimeDuration-greater-than-6;Expected XPath fn:not(xs:dayTimeDuration("P07DT09H") ge xs:dayTimeDuration("P09DT09H")) to resolve to true
op-dayTimeDuration-greater-than-7;Expected XPath (xs:dayTimeDuration("P10DT09H") gt xs:dayTimeDuration("P09DT10H")) and (xs:dayTimeDuration("P10DT01H") gt xs:dayTimeDuration("P08DT06H")) to resolve to true
op-dayTimeDuration-greater-than-8;Expected XPath (xs:dayTimeDuration("P10DT09H") ge xs:dayTimeDuration("P10DT01H")) and (xs:dayTimeDuration("P02DT04H") ge xs:dayTimeDuration("P09DT07H")) to resolve to false
op-dayTimeDuration-greater-than-9;Expected XPath (xs:dayTimeDuration("P10DT08H") gt xs:dayTimeDuration("P10DT07H")) or (xs:dayTimeDuration("P10DT09H") gt xs:dayTimeDuration("P10DT09H")) to resolve to true
op-dayTimeDuration-greater-than2args-2;Expected XPath xs:dayTimeDuration("P15DT11H59M59S") gt xs:dayTimeDuration("P0DT0H0M0S") to resolve to true
op-dayTimeDuration-greater-than2args-3;Expected XPath xs:dayTimeDuration("P31DT23H59M59S") gt xs:dayTimeDuration("P0DT0H0M0S") to resolve to true
op-dayTimeDuration-greater-than2args-7;Expected XPath xs:dayTimeDuration("P15DT11H59M59S") le xs:dayTimeDuration("P0DT0H0M0S") to resolve to false
op-dayTimeDuration-greater-than2args-8;Expected XPath xs:dayTimeDuration("P31DT23H59M59S") le xs:dayTimeDuration("P0DT0H0M0S") to resolve to false
op-dayTimeDuration-less-than-10;Expected XPath (xs:dayTimeDuration("P10DT01H") le xs:dayTimeDuration("P09DT06H")) or (xs:dayTimeDuration("P15DT01H") le xs:dayTimeDuration("P02DT04H")) to resolve to false
op-dayTimeDuration-less-than-3;Expected XPath fn:not((xs:dayTimeDuration("P13DT12H") lt xs:dayTimeDuration("P14DT11H"))) to resolve to false
op-dayTimeDuration-less-than-4;Expected XPath fn:not(xs:dayTimeDuration("P10DT110H") le xs:dayTimeDuration("P10DT11H")) to resolve to true
op-dayTimeDuration-less-than-6;Expected XPath fn:not(xs:dayTimeDuration("P10DT09H") le xs:dayTimeDuration("P09DT09H")) to resolve to true
op-dayTimeDuration-less-than-8;Expected XPath (xs:dayTimeDuration("P10DT09H") le xs:dayTimeDuration("P10DT01H")) and (xs:dayTimeDuration("P02DT04H") le xs:dayTimeDuration("P09DT07H")) to resolve to false
op-dayTimeDuration-less-than2args-10;Expected XPath xs:dayTimeDuration("P0DT0H0M0S") ge xs:dayTimeDuration("P31DT23H59M59S") to resolve to false
op-dayTimeDuration-less-than2args-4;Expected XPath xs:dayTimeDuration("P0DT0H0M0S") lt xs:dayTimeDuration("P15DT11H59M59S") to resolve to true
op-dayTimeDuration-less-than2args-5;Expected XPath xs:dayTimeDuration("P0DT0H0M0S") lt xs:dayTimeDuration("P31DT23H59M59S") to resolve to true
op-dayTimeDuration-less-than2args-9;Expected XPath xs:dayTimeDuration("P0DT0H0M0S") ge xs:dayTimeDuration("P15DT11H59M59S") to resolve to false
op-divide-dayTimeDuration-11;Attempted to divide by zero.
op-divide-dayTimeDuration-13;Expected XPath (xs:dayTimeDuration("P23DT11H11M") div 2.0) eq xs:dayTimeDuration("P23DT11H11M") to resolve to false
op-divide-dayTimeDuration-14;Expected XPath (xs:dayTimeDuration("P21DT08H12M") div 2.0) ne xs:dayTimeDuration("P08DT08H05M") to resolve to true
op-divide-dayTimeDuration-16;Expected XPath (xs:dayTimeDuration("P13DT09H09M") div 2.0) ge xs:dayTimeDuration("P18DT02H02M") to resolve to false
op-divide-dayTimeDuration-6;Expected XPath fn:number(xs:dayTimeDuration("P02DT06H09M") div 2.0) to resolve to NaN, but instead got Infinity
op-divide-dayTimeDuration-7;Expected XPath fn:string(xs:dayTimeDuration("P03DT04H08M") div 2.0) to resolve to P1DT14H4M, but instead got PT
op-divide-dayTimeDuration-8;Cannot divide xs:dayTimeDuration by NaN
op-divide-dayTimeDuration-by-dayTimeDuration2args-1;Attempted to divide by zero.
op-divide-dayTimeDuration-by-dayTimeDuration2args-2;Attempted to divide by zero.
op-divide-dayTimeDuration-by-dayTimeDuration2args-3;Attempted to divide by zero.
op-divide-dayTimeDuration-by-dayTimeDuration2args-4;Attempted to divide by zero.
op-divide-dayTimeDuration-by-dayTimeDuration2args-5;Attempted to divide by zero.
op-divide-dayTimeDuration-by-dTD-1;Expected executing the XPath 'fn:round-half-to-even((xs:dayTimeDuration("P2DT53M11S") div xs:dayTimeDuration("P1DT10H")),15)' to resolve to one of the expected results, but got System.DivideByZeroException: Attempted to divide by zero.
op-divide-dayTimeDuration-by-dTD-10;Attempted to divide by zero.
op-divide-dayTimeDuration-by-dTD-11;Attempted to divide by zero.
op-divide-dayTimeDuration-by-dTD-12;Attempted to divide by zero.
op-divide-dayTimeDuration-by-dTD-13;Attempted to divide by zero.
op-divide-dayTimeDuration-by-dTD-14;Attempted to divide by zero.
op-divide-dayTimeDuration-by-dTD-15;Attempted to divide by zero.
op-divide-dayTimeDuration-by-dTD-16;Attempted to divide by zero.
op-divide-dayTimeDuration-by-dTD-2;Attempted to divide by zero.
op-divide-dayTimeDuration-by-dTD-3;Attempted to divide by zero.
op-divide-dayTimeDuration-by-dTD-4;Attempted to divide by zero.
op-divide-dayTimeDuration-by-dTD-5;Attempted to divide by zero.
op-divide-dayTimeDuration-by-dTD-6;Attempted to divide by zero.
op-divide-dayTimeDuration-by-dTD-7;Attempted to divide by zero.
op-divide-dayTimeDuration-by-dTD-8;Attempted to divide by zero.
op-divide-dayTimeDuration-by-dTD-9;Attempted to divide by zero.
op-divide-dayTimeDuration2args-1;Expected XPath xs:dayTimeDuration("P0DT0H0M0S") div xs:double("-1.7976931348623157E308") to resolve to PT0S, but instead got PT
op-divide-dayTimeDuration2args-2;Expected XPath xs:dayTimeDuration("P15DT11H59M59S") div xs:double("-1.7976931348623157E308") to resolve to PT0S, but instead got PT
op-divide-dayTimeDuration2args-3;Expected XPath xs:dayTimeDuration("P31DT23H59M59S") div xs:double("-1.7976931348623157E308") to resolve to PT0S, but instead got PT
op-divide-dayTimeDuration2args-4;Expected XPath xs:dayTimeDuration("P0DT0H0M0S") div xs:double("0.1") to resolve to PT0S, but instead got PT
op-divide-dayTimeDuration2args-5;Expected XPath xs:dayTimeDuration("P0DT0H0M0S") div xs:double("1.7976931348623157E308") to resolve to PT0S, but instead got PT
op-divide-yearMonthDuration-1;Expected XPath (xs:yearMonthDuration("P2Y11M") div 1.5) to resolve to P1Y11M, but instead got P
op-divide-yearMonthDuration-11;Attempted to divide by zero.
op-divide-yearMonthDuration-13;Expected XPath (xs:yearMonthDuration("P23Y11M") div 2.0) eq xs:yearMonthDuration("P23Y11M") to resolve to false
op-divide-yearMonthDuration-14;Expected XPath (xs:yearMonthDuration("P21Y12M") div 2.0) ne xs:yearMonthDuration("P08Y05M") to resolve to true
op-divide-yearMonthDuration-16;Expected XPath (xs:yearMonthDuration("P13Y09M") div 2.0) ge xs:yearMonthDuration("P18Y02M") to resolve to false
op-divide-yearMonthDuration-17;Expected XPath for $i in (-2, -4, -10, -50, +50, +10, +4, +2) return (xs:yearMonthDuration("P5M") div $i) to resolve to -P2M -P1M P0M P0M P0M P1M P1M P3M, but instead got P P P P P P P P
op-divide-yearMonthDuration-6;Expected XPath fn:number(xs:yearMonthDuration("P02Y09M") div 2.0) to resolve to NaN, but instead got Infinity
op-divide-yearMonthDuration-7;Expected XPath fn:string(xs:yearMonthDuration("P03Y08M") div 2.0) to resolve to P1Y10M, but instead got P
op-divide-yearMonthDuration-8;Cannot divide xs:yearMonthDuration by NaN
op-divide-yearMonthDuration-by-yearMonthDuration2args-1;Attempted to divide by zero.
op-divide-yearMonthDuration-by-yearMonthDuration2args-2;Attempted to divide by zero.
op-divide-yearMonthDuration-by-yearMonthDuration2args-3;Attempted to divide by zero.
op-divide-yearMonthDuration-by-yearMonthDuration2args-4;Attempted to divide by zero.
op-divide-yearMonthDuration-by-yearMonthDuration2args-5;Attempted to divide by zero.
op-divide-yearMonthDuration-by-yMD-1;Attempted to divide by zero.
op-divide-yearMonthDuration-by-yMD-10;Attempted to divide by zero.
op-divide-yearMonthDuration-by-yMD-11;Attempted to divide by zero.
op-divide-yearMonthDuration-by-yMD-12;Attempted to divide by zero.
op-divide-yearMonthDuration-by-yMD-13;Attempted to divide by zero.
op-divide-yearMonthDuration-by-yMD-14;Attempted to divide by zero.
op-divide-yearMonthDuration-by-yMD-15;Attempted to divide by zero.
op-divide-yearMonthDuration-by-yMD-16;Attempted to divide by zero.
op-divide-yearMonthDuration-by-yMD-2;Attempted to divide by zero.
op-divide-yearMonthDuration-by-yMD-3;Attempted to divide by zero.
op-divide-yearMonthDuration-by-yMD-4;Attempted to divide by zero.
op-divide-yearMonthDuration-by-yMD-5;Attempted to divide by zero.
op-divide-yearMonthDuration-by-yMD-6;Attempted to divide by zero.
op-divide-yearMonthDuration-by-yMD-7;Attempted to divide by zero.
op-divide-yearMonthDuration-by-yMD-8;Attempted to divide by zero.
op-divide-yearMonthDuration-by-yMD-9;Attempted to divide by zero.
op-divide-yearMonthDuration2args-1;Expected XPath xs:yearMonthDuration("P0Y0M") div xs:double("-1.7976931348623157E308") to resolve to P0M, but instead got P
op-divide-yearMonthDuration2args-2;Expected XPath xs:yearMonthDuration("P1000Y6M") div xs:double("-1.7976931348623157E308") to resolve to P0M, but instead got P
op-divide-yearMonthDuration2args-3;Expected XPath xs:yearMonthDuration("P2030Y12M") div xs:double("-1.7976931348623157E308") to resolve to P0M, but instead got P
op-divide-yearMonthDuration2args-4;Expected XPath xs:yearMonthDuration("P0Y0M") div xs:double("0.1") to resolve to P0M, but instead got P
op-divide-yearMonthDuration2args-5;Expected XPath xs:yearMonthDuration("P0Y0M") div xs:double("1.7976931348623157E308") to resolve to P0M, but instead got P
op-duration-equal-12;Expected XPath xs:duration("P36D") eq xs:duration("P39D") to resolve to false
op-duration-equal-13;Expected XPath xs:duration("P36D") ne xs:duration("P39D") to resolve to true
op-duration-equal-27;Expected XPath xs:yearMonthDuration('P1Y') eq xs:dayTimeDuration('P365D') to resolve to false
op-duration-equal-3;Expected XPath xs:duration("P1Y") eq xs:duration("P365D") to resolve to false
op-hexBinary-equal2args-1;Type casting to XsHexBinary has not been implemented yet.
op-hexBinary-equal2args-10;Type casting to XsHexBinary has not been implemented yet.
op-hexBinary-equal2args-2;Type casting to XsHexBinary has not been implemented yet.
op-hexBinary-equal2args-3;Type casting to XsHexBinary has not been implemented yet.
op-hexBinary-equal2args-4;Type casting to XsHexBinary has not been implemented yet.
op-hexBinary-equal2args-5;Type casting to XsHexBinary has not been implemented yet.
op-hexBinary-equal2args-6;Type casting to XsHexBinary has not been implemented yet.
op-hexBinary-equal2args-7;Type casting to XsHexBinary has not been implemented yet.
op-hexBinary-equal2args-8;Type casting to XsHexBinary has not been implemented yet.
op-hexBinary-equal2args-9;Type casting to XsHexBinary has not been implemented yet.
op-logical-and-033;Expected XPath -1 and 1 to resolve to true
op-logical-and-037;Expected XPath xs:float(1) and xs:float(-1) to resolve to true
op-logical-and-045;Expected XPath xs:float('-INF') and xs:float(1) to resolve to true
op-logical-and-047;Expected XPath xs:float('-INF') and xs:float('INF') to resolve to true
op-logical-and-051;Expected XPath xs:double(1) and xs:double(-1) to resolve to true
op-logical-and-059;Expected XPath xs:double('-INF') and xs:double(1) to resolve to true
op-logical-and-061;Expected XPath xs:double('-INF') and xs:double('INF') to resolve to true
op-logical-and-065;Expected XPath xs:decimal(1) and xs:decimal(-1) to resolve to true
op-logical-and-067;Can not cast '<Value>[type: XsDouble, value: NaN]' to xs:decimal
op-logical-and-068;Expected executing the XPath 'xs:decimal(9.99999999999999999999999999) and xs:decimal(-123456789.123456789123456789)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: Can not cast '<Value>[type: XsDouble, value: NaN]' to xs:decimal
op-logical-and-072;Expected XPath xs:integer(1) and xs:integer(-1) to resolve to true
op-logical-and-074;Expected XPath xs:integer(-99999999999999999) and xs:integer(1) to resolve to true
op-logical-and-075;Expected XPath xs:integer(99999999999999999) and xs:integer(-99999999999999999) to resolve to true
op-logical-and-079;Expected XPath xs:nonPositiveInteger(-1) and xs:nonPositiveInteger(-1) to resolve to true
op-logical-and-081;Expected XPath xs:nonPositiveInteger(-1) and xs:nonPositiveInteger(-9999999999) to resolve to true
op-logical-and-082;Expected XPath xs:nonPositiveInteger(-99999999999999999) and xs:nonPositiveInteger(-99999999999999999) to resolve to true
op-logical-and-090;Expected XPath xs:negativeInteger(-1) and xs:negativeInteger(-1) to resolve to true
op-logical-and-091;Expected XPath xs:negativeInteger(-99999999999999999) and xs:negativeInteger(-1) to resolve to true
op-logical-and-092;Expected XPath xs:negativeInteger(-99999999999999999) and xs:negativeInteger(-99999999999999999) to resolve to true
op-logical-and-099;Expected XPath xs:long(1) and xs:long(-1) to resolve to true
op-logical-and-101;Expected XPath xs:long(9223372036854775807) and xs:long(-1) to resolve to true
op-logical-and-103;Expected XPath xs:long(-99999999999999999) and xs:long(1) to resolve to true
op-logical-and-104;Expected XPath xs:long(99999999999999999) and xs:long(-99999999999999999) to resolve to true
op-logical-and-115;Expected XPath xs:int(1) and xs:int(-1) to resolve to true
op-logical-and-117;Expected XPath xs:int(2147483647) and xs:int(-1) to resolve to true
op-logical-and-119;Expected XPath xs:int(-2147483648) and xs:int(1) to resolve to true
op-logical-and-120;Expected XPath xs:int(2147483647) and xs:int(-2147483648) to resolve to true
op-logical-and-131;Expected XPath xs:short(1) and xs:short(-1) to resolve to true
op-logical-and-133;Expected XPath xs:short(32767) and xs:short(-1) to resolve to true
op-logical-and-135;Expected XPath xs:short(-32768) and xs:short(1) to resolve to true
op-logical-and-136;Expected XPath xs:short(32767) and xs:short(-32768) to resolve to true
op-logical-and-147;Expected XPath xs:byte(1) and xs:byte(-1) to resolve to true
op-logical-and-149;Expected XPath xs:byte(127) and xs:byte(-1) to resolve to true
op-logical-and-151;Expected XPath xs:byte(-128) and xs:byte(1) to resolve to true
op-logical-and-152;Expected XPath xs:byte(127) and xs:byte(-128) to resolve to true
op-logical-or-032;Expected XPath 0 or -1 to resolve to true
op-logical-or-036;Expected XPath xs:float(-1) or xs:float(0) to resolve to true
op-logical-or-044;Expected XPath xs:float('-INF') or xs:float(0) to resolve to true
op-logical-or-046;Expected XPath xs:float('-INF') or xs:float('NaN') to resolve to true
op-logical-or-050;Expected XPath xs:double(-1) or xs:double(0) to resolve to true
op-logical-or-058;Expected XPath xs:double('-INF') or xs:double(0) to resolve to true
op-logical-or-060;Expected XPath xs:double('-INF') or xs:double('NaN') to resolve to true
op-logical-or-064;Expected XPath xs:decimal(-1) or xs:decimal(0) to resolve to true
op-logical-or-067;Can not cast '<Value>[type: XsDouble, value: NaN]' to xs:decimal
op-logical-or-071;Expected XPath xs:integer(-1) or xs:integer(0) to resolve to true
op-logical-or-077;Expected XPath xs:nonPositiveInteger(0) or xs:nonPositiveInteger(-1) to resolve to true
op-logical-or-078;Expected XPath xs:nonPositiveInteger(-1) or xs:nonPositiveInteger(0) to resolve to true
op-logical-or-079;Expected XPath xs:nonPositiveInteger(-1) or xs:nonPositiveInteger(-1) to resolve to true
op-logical-or-080;Expected XPath xs:nonPositiveInteger(-99999999999999999) or xs:nonPositiveInteger(0) to resolve to true
op-logical-or-081;Expected XPath xs:nonPositiveInteger(-1) or xs:nonPositiveInteger(-99999999999999999) to resolve to true
op-logical-or-082;Expected XPath xs:nonPositiveInteger(-99999999999999999) or xs:nonPositiveInteger(-99999999999999999) to resolve to true
op-logical-or-090;Expected XPath xs:negativeInteger(-1) or xs:negativeInteger(-1) to resolve to true
op-logical-or-091;Expected XPath xs:negativeInteger(-99999999999999999) or xs:negativeInteger(-1) to resolve to true
op-logical-or-092;Expected XPath xs:negativeInteger(-99999999999999999) or xs:negativeInteger(-99999999999999999) to resolve to true
op-logical-or-098;Expected XPath xs:long(-1) or xs:long(0) to resolve to true
op-logical-or-102;Expected XPath xs:long(-99999999999999999) or xs:long(0) to resolve to true
op-logical-or-114;Expected XPath xs:int(-1) or xs:int(0) to resolve to true
op-logical-or-118;Expected XPath xs:int(-2147483648) or xs:int(0) to resolve to true
op-logical-or-130;Expected XPath xs:short(-1) or xs:short(0) to resolve to true
op-logical-or-134;Expected XPath xs:short(-32768) or xs:short(0) to resolve to true
op-logical-or-146;Expected XPath xs:byte(-1) or xs:byte(0) to resolve to true
op-logical-or-150;Expected XPath xs:byte(-128) or xs:byte(0) to resolve to true
op-multiply-dayTimeDuration-1;Expected XPath xs:dayTimeDuration("PT2H10M") * 2.1 to resolve to PT4H33M, but instead got PT
op-multiply-dayTimeDuration-11;Attempted to divide by zero.
op-multiply-dayTimeDuration-13;Expected XPath (xs:dayTimeDuration("P23DT11H11M") * 2.0) eq xs:dayTimeDuration("P23DT11H11M") to resolve to false
op-multiply-dayTimeDuration-14;Expected XPath (xs:dayTimeDuration("P21DT08H12M") * 2.0) ne xs:dayTimeDuration("P08DT08H05M") to resolve to true
op-multiply-dayTimeDuration-15;Expected XPath (xs:dayTimeDuration("P10DT10H01M") * 2.0) le xs:dayTimeDuration("P17DT10H02M") to resolve to false
op-multiply-dayTimeDuration-6;Expected XPath fn:number(xs:dayTimeDuration("P02DT06H09M") *2.0) to resolve to NaN, but instead got Infinity
op-multiply-dayTimeDuration-7;Expected XPath fn:string(xs:dayTimeDuration("P03DT04H08M") * 2.0) to resolve to P6DT8H16M, but instead got PT
op-multiply-dayTimeDuration-8;Cannot multiply xs:dayTimeDuration by NaN
op-multiply-dayTimeDuration2args-1;Expected XPath xs:dayTimeDuration("P0DT0H0M0S") * xs:double("-1.7976931348623157E308") to resolve to PT0S, but instead got PT
op-multiply-dayTimeDuration2args-2;Expected XPath xs:dayTimeDuration("P15DT11H59M59S") * xs:double("0") to resolve to PT0S, but instead got PT
op-multiply-dayTimeDuration2args-3;Expected XPath xs:dayTimeDuration("P31DT23H59M59S") * xs:double("0") to resolve to PT0S, but instead got PT
op-multiply-dayTimeDuration2args-4;Expected XPath xs:dayTimeDuration("P0DT0H0M0S") * xs:double("0") to resolve to PT0S, but instead got PT
op-multiply-dayTimeDuration2args-5;Expected XPath xs:dayTimeDuration("P0DT0H0M0S") * xs:double("1.7976931348623157E308") to resolve to PT0S, but instead got PT
op-multiply-yearMonthDuration-1;Expected XPath xs:yearMonthDuration("P2Y11M") * 2.3 to resolve to P6Y9M, but instead got P
op-multiply-yearMonthDuration-11;Attempted to divide by zero.
op-multiply-yearMonthDuration-13;Expected XPath (xs:yearMonthDuration("P23Y11M") * 2.0) eq xs:yearMonthDuration("P23Y11M") to resolve to false
op-multiply-yearMonthDuration-14;Expected XPath (xs:yearMonthDuration("P21Y12M") * 2.0) ne xs:yearMonthDuration("P08Y05M") to resolve to true
op-multiply-yearMonthDuration-15;Expected XPath (xs:yearMonthDuration("P10Y01M") * 2.0) le xs:yearMonthDuration("P17Y02M") to resolve to false
op-multiply-yearMonthDuration-16;Expected XPath (xs:yearMonthDuration("P13Y09M") - xs:yearMonthDuration("P18Y02M")) ge xs:yearMonthDuration("P18Y02M") to resolve to false
op-multiply-yearMonthDuration-20;Cannot multiply xs:yearMonthDuration by NaN
op-multiply-yearMonthDuration-6;Expected XPath fn:number(xs:yearMonthDuration("P02Y09M") * 2.0) to resolve to NaN, but instead got Infinity
op-multiply-yearMonthDuration-7;Expected XPath fn:string(xs:yearMonthDuration("P03Y08M") * 2.0) to resolve to P7Y4M, but instead got P
op-multiply-yearMonthDuration-8;Cannot multiply xs:yearMonthDuration by NaN
op-multiply-yearMonthDuration2args-1;Expected XPath xs:yearMonthDuration("P0Y0M") * xs:double("-1.7976931348623157E308") to resolve to P0M, but instead got P
op-multiply-yearMonthDuration2args-2;Expected XPath xs:yearMonthDuration("P1000Y6M") * xs:double("-0") to resolve to P0M, but instead got P
op-multiply-yearMonthDuration2args-3;Expected XPath xs:yearMonthDuration("P2030Y12M") * xs:double("-0") to resolve to P0M, but instead got P
op-multiply-yearMonthDuration2args-4;Expected XPath xs:yearMonthDuration("P0Y0M") * xs:double("0") to resolve to P0M, but instead got P
op-multiply-yearMonthDuration2args-5;Expected XPath xs:yearMonthDuration("P0Y0M") * xs:double("1.7976931348623157E308") to resolve to P0M, but instead got P
op-numeric-add-1;Use of XQuery FLWOR expressions in XPath is not allowed
op-numeric-add-10;PRSC Error: Failed to parse query '(\n         declare namespace atomic="http://www.w3.org/XQueryTest";\n         /*/atomic:decimal + xs:untypedAtomic('123')\n      ) instance of $xs:double'
op-numeric-add-11;PRSC Error: Failed to parse query '(\n         declare namespace atomic="http://www.w3.org/XQueryTest";\n         /*/atomic:float + xs:untypedAtomic('123')\n      ) instance of $xs:double'
op-numeric-add-12;PRSC Error: Failed to parse query '(\n         declare namespace atomic="http://www.w3.org/XQueryTest";\n         /*/atomic:double + xs:untypedAtomic('123')\n      ) instance of $xs:double'
op-numeric-add-13;PRSC Error: Failed to parse query '(\n         import schema namespace t="http://www.w3.org/XQueryTest/userDefinedTypes";\n         15 cast as t:sizeType + 15 cast as t:floatBased\n      ) instance of $xs:float'
op-numeric-add-14;PRSC Error: Failed to parse query '(\n         import schema namespace t="http://www.w3.org/XQueryTest/userDefinedTypes";\n         15 cast as t:sizeType + 15 cast as t:integer-or-nothing\n      ) instance of $xs:integer'
op-numeric-add-15;PRSC Error: Failed to parse query '(\n         import schema namespace t="http://www.w3.org/XQueryTest/userDefinedTypes";\n         15 cast as t:floatBased + 15 cast as t:integer-or-nothing\n      ) instance of $xs:float'
op-numeric-add-16;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         import schema namespace t="http://www.w3.org/XQueryTest/userDefinedTypes";\n         15 cast as t:floatBased + '' cast as t:integer-or-nothing\n      '
op-numeric-add-2;PRSC Error: Failed to parse query '(\n         declare namespace atomic="http://www.w3.org/XQueryTest";\n         /*/atomic:integer + /*/atomic:integer\n      ) instance of $xs:integer'
op-numeric-add-3;PRSC Error: Failed to parse query '(\n         declare namespace atomic="http://www.w3.org/XQueryTest";\n         /*/atomic:decimal + /*/atomic:integer\n      ) instance of $xs:decimal'
op-numeric-add-4;PRSC Error: Failed to parse query '(\n         declare namespace atomic="http://www.w3.org/XQueryTest";\n         /*/atomic:decimal + /*/atomic:float\n      ) instance of $xs:float'
op-numeric-add-5;PRSC Error: Failed to parse query '(\n         declare namespace atomic="http://www.w3.org/XQueryTest";\n         /*/atomic:float + /*/atomic:float\n      ) instance of $xs:float'
op-numeric-add-6;PRSC Error: Failed to parse query '(\n         declare namespace atomic="http://www.w3.org/XQueryTest";\n         /*/atomic:float + /*/atomic:double\n      ) instance of $xs:double'
op-numeric-add-7;PRSC Error: Failed to parse query '(\n         declare namespace atomic="http://www.w3.org/XQueryTest";\n         /*/atomic:decimal/@* + /*/atomic:double\n      ) instance of $xs:double'
op-numeric-add-8;PRSC Error: Failed to parse query '(\n         declare namespace atomic="http://www.w3.org/XQueryTest";\n         /*/atomic:double + /*/atomic:double\n      ) instance of $xs:double'
op-numeric-add-9;PRSC Error: Failed to parse query '(\n         declare namespace atomic="http://www.w3.org/XQueryTest";\n         /*/atomic:integer + xs:untypedAtomic('123')\n      ) instance of $xs:double'
op-numeric-adddbl2args-1;PRSC Error: Failed to parse query 'xs:double("0") + xs:double("-1.7976931348623157E308") = -1.7976931348623157E308'
op-numeric-adddbl2args-3;PRSC Error: Failed to parse query 'xs:double("-1.7976931348623157E308") + xs:double("0") = -1.7976931348623157E308'
op-numeric-adddec2args-1;Expected XPath xs:decimal("617375191608514839") + xs:decimal("-999999999999999999") to resolve to -382624808391485160
op-numeric-adddec2args-3;Expected XPath xs:decimal("-999999999999999999") + xs:decimal("617375191608514839") to resolve to -382624808391485160
op-numeric-addflt2args-1;PRSC Error: Failed to parse query 'xs:float("0") + xs:float("-3.4028235E38") = xs:float(-3.4028235E38)'
op-numeric-addflt2args-3;PRSC Error: Failed to parse query 'xs:float("-3.4028235E38") + xs:float("0") = xs:float(-3.4028235E38)'
op-numeric-addintg2args-1;Expected XPath xs:integer("830993497117024304") + xs:integer("-999999999999999999") to resolve to -169006502882975695
op-numeric-addintg2args-3;Expected XPath xs:integer("-999999999999999999") + xs:integer("830993497117024304") to resolve to -169006502882975695
op-numeric-addlng2args-1;Expected XPath xs:long("-47175562203048468") + xs:long("-45058158165499290") to resolve to -92233720368547758
op-numeric-addlng2args-3;Expected XPath xs:long("-45058158165499290") + xs:long("-47175562203048468") to resolve to -92233720368547758
op-numeric-addmix2args-4;PRSC Error: Failed to parse query '1 + <a> 2 </a> = 3'
op-numeric-addmix2args-5;PRSC Error: Failed to parse query '1+<a> <b> 2 </b> </a> = 3'
op-numeric-addmix2args-6;Expected error code: FORG0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '1 + <a> <b> 2</b> <c> 2</c> </a>'
op-numeric-addmix2args-7;PRSC Error: Failed to parse query '<a> 1 </a> + <b> 2 </b> = 3'
op-numeric-addmix2args-8;Expected error code: FORG0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '1 + <a> x </a>'
op-numeric-addmix2args-9;Expected error code: FORG0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '1 + <a/>'
op-numeric-addnint2args-1;Expected XPath xs:negativeInteger("-297014075999096793") + xs:negativeInteger("-702985924000903206") to resolve to -999999999999999999
op-numeric-addnint2args-3;Expected XPath xs:negativeInteger("-702985924000903206") + xs:negativeInteger("-297014075999096793") to resolve to -999999999999999999
op-numeric-addnni2args-2;Expected XPath xs:nonNegativeInteger("303884545991464527") + xs:nonNegativeInteger("0") to resolve to 303884545991464527
op-numeric-addnni2args-3;Expected XPath xs:nonNegativeInteger("999999999999999999") + xs:nonNegativeInteger("0") to resolve to 999999999999999999
op-numeric-addnni2args-4;Expected XPath xs:nonNegativeInteger("0") + xs:nonNegativeInteger("303884545991464527") to resolve to 303884545991464527
op-numeric-addnni2args-5;Expected XPath xs:nonNegativeInteger("0") + xs:nonNegativeInteger("999999999999999999") to resolve to 999999999999999999
op-numeric-addnpi2args-1;Expected XPath xs:nonPositiveInteger("-475688437271870490") + xs:nonPositiveInteger("-524311562728129509") to resolve to -999999999999999999
op-numeric-addnpi2args-2;Expected XPath xs:nonPositiveInteger("0") + xs:nonPositiveInteger("-999999999999999999") to resolve to -999999999999999999
op-numeric-addnpi2args-3;Expected XPath xs:nonPositiveInteger("-524311562728129509") + xs:nonPositiveInteger("-475688437271870490") to resolve to -999999999999999999
op-numeric-addnpi2args-4;Expected XPath xs:nonPositiveInteger("-999999999999999999") + xs:nonPositiveInteger("0") to resolve to -999999999999999999
op-numeric-addpint2args-2;Expected XPath xs:positiveInteger("52704602390610033") + xs:positiveInteger("1") to resolve to 52704602390610034
op-numeric-addpint2args-3;Expected XPath xs:positiveInteger("999999999999999998") + xs:positiveInteger("1") to resolve to 999999999999999999
op-numeric-addpint2args-4;Expected XPath xs:positiveInteger("1") + xs:positiveInteger("52704602390610033") to resolve to 52704602390610034
op-numeric-addpint2args-5;Expected XPath xs:positiveInteger("1") + xs:positiveInteger("999999999999999998") to resolve to 999999999999999999
op-numeric-addulng2args-2;Expected XPath xs:unsignedLong("130747108607674654") + xs:unsignedLong("0") to resolve to 130747108607674654
op-numeric-addulng2args-3;Expected XPath xs:unsignedLong("184467440737095516") + xs:unsignedLong("0") to resolve to 184467440737095516
op-numeric-addulng2args-4;Expected XPath xs:unsignedLong("0") + xs:unsignedLong("130747108607674654") to resolve to 130747108607674654
op-numeric-addulng2args-5;Expected XPath xs:unsignedLong("0") + xs:unsignedLong("184467440737095516") to resolve to 184467440737095516
op-numeric-divide-1;The function error with arity 0 is not registered.
op-numeric-divide-big-01;Expected executing the XPath '(10000000000000000000000000000.0 div 0.1) cast as xs:string' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: FOAR0002. Found error code: FOCA0001 with error message: Overflow when creating a Decimal from 1E+29.
op-numeric-dividedec2args-2;Expected executing the XPath 'fn:round-half-to-even((xs:decimal("617375191608514839") div xs:decimal("-999999999999999999")),18)' to resolve to one of the expected results, but got System.OverflowException: Value was either too large or too small for a Decimal.
op-numeric-dividedec2args-4;Expected executing the XPath 'fn:round-half-to-even((xs:decimal("-999999999999999999") div xs:decimal("617375191608514839")),18)' to resolve to one of the expected results, but got System.OverflowException: Value was either too large or too small for a Decimal.
op-numeric-divideint2args-3;Value was either too large or too small for a Decimal.
op-numeric-divideint2args-5;Value was either too large or too small for a Decimal.
op-numeric-divideintg2args-2;Expected executing the XPath 'fn:round-half-to-even((xs:integer("830993497117024304") div xs:integer("-999999999999999999")),18)' to resolve to one of the expected results, but got System.OverflowException: Value was either too large or too small for a Decimal.
op-numeric-divideintg2args-4;Expected executing the XPath 'fn:round-half-to-even((xs:integer("-999999999999999999") div xs:integer("830993497117024304")),18)' to resolve to one of the expected results, but got System.OverflowException: Value was either too large or too small for a Decimal.
op-numeric-dividelng2args-2;Expected executing the XPath 'fn:round-half-to-even((xs:long("-47175562203048468") div xs:long("-92233720368547758")),17)' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPath fn:round-half-to-even((xs:long("-47175562203048468") div xs:long("-92233720368547758")),17) to resolve to 0.51147847028770199
op-numeric-dividelng2args-4;Expected executing the XPath 'fn:round-half-to-even((xs:long("-92233720368547758") div xs:long("-47175562203048468")),17)' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPath fn:round-half-to-even((xs:long("-92233720368547758") div xs:long("-47175562203048468")),17) to resolve to 1.95511650654133906
op-numeric-dividemix2args-4;PRSC Error: Failed to parse query '1 div <a> 2 </a> = 0.5'
op-numeric-dividemix2args-5;PRSC Error: Failed to parse query '1 div <a> <b> 2 </b> </a> = 0.5'
op-numeric-dividemix2args-6;Expected error code: FORG0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '1 div <a> <b> 2</b> <c> 2</c> </a>'
op-numeric-dividemix2args-7;PRSC Error: Failed to parse query '<a> 1 </a> div <b> 2 </b> = 0.5'
op-numeric-dividemix2args-8;Expected error code: FORG0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '1 div <a> x </a>'
op-numeric-dividemix2args-9;Expected error code: FORG0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '1 div <a/>'
op-numeric-dividenint2args-2;Expected executing the XPath 'fn:round-half-to-even((xs:negativeInteger("-297014075999096793") div xs:negativeInteger("-999999999999999999")),18)' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPath fn:round-half-to-even((xs:negativeInteger("-297014075999096793") div xs:negativeInteger("-999999999999999999")),18) to resolve to 0.297014075999096793
op-numeric-dividenint2args-4;Expected executing the XPath 'fn:round-half-to-even((xs:negativeInteger("-999999999999999999") div xs:negativeInteger("-297014075999096793")),18)' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPath fn:round-half-to-even((xs:negativeInteger("-999999999999999999") div xs:negativeInteger("-297014075999096793")),18) to resolve to 3.366843799022646172
op-numeric-dividenint2args-5;Expected XPath xs:negativeInteger("-999999999999999999") div xs:negativeInteger("-1") to resolve to 999999999999999999
op-numeric-dividenpi2args-2;Expected executing the XPath 'fn:round-half-to-even((xs:nonPositiveInteger("-475688437271870490") div xs:nonPositiveInteger("-999999999999999999")),18)' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPath fn:round-half-to-even((xs:nonPositiveInteger("-475688437271870490") div xs:nonPositiveInteger("-999999999999999999")),18) to resolve to 0.47568843727187049
op-numeric-dividenpi2args-4;Expected executing the XPath 'fn:round-half-to-even((xs:nonPositiveInteger("-999999999999999999") div xs:nonPositiveInteger("-475688437271870490")),18)' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPath fn:round-half-to-even((xs:nonPositiveInteger("-999999999999999999") div xs:nonPositiveInteger("-475688437271870490")),18) to resolve to 2.102216328265447024
op-numeric-dividepint2args-2;Expected XPath xs:positiveInteger("52704602390610033") div xs:positiveInteger("1") to resolve to 52704602390610033
op-numeric-dividepint2args-3;Expected XPath xs:positiveInteger("999999999999999999") div xs:positiveInteger("1") to resolve to 999999999999999999
op-numeric-dividesht2args-3;Expected executing the XPath 'xs:short("32767") div xs:short("-32768")' to resolve to one of the expected results, but got System.OverflowException: Value was either too large or too small for a Decimal.
op-numeric-integer-dividemix2args-4;PRSC Error: Failed to parse query '3 idiv <a> 2 </a> = 1'
op-numeric-integer-dividemix2args-5;PRSC Error: Failed to parse query '1 idiv <a> <b> 2 </b> </a> = 0'
op-numeric-integer-dividemix2args-6;Expected error code: FORG0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '3 idiv <a> <b> 2</b> <c> 2</c> </a>'
op-numeric-integer-dividemix2args-7;PRSC Error: Failed to parse query '<a> 1 </a> idiv <b> 2 </b> = 0'
op-numeric-integer-dividemix2args-8;Expected error code: FORG0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '1 idiv <a> x </a>'
op-numeric-integer-dividemix2args-9;Expected error code: FORG0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '1 idiv <a/>'
op-numeric-mod-1;Use of XQuery FLWOR expressions in XPath is not allowed
op-numeric-moddec2args-1;Expected XPath xs:decimal("-999999999999999999") mod xs:decimal("617375191608514839") to resolve to -382624808391485160
op-numeric-modintg2args-1;Expected XPath xs:integer("-999999999999999999") mod xs:integer("830993497117024304") to resolve to -169006502882975695
op-numeric-modmix2args-4;PRSC Error: Failed to parse query '1 mod <a> 2 </a> = 1'
op-numeric-modmix2args-5;PRSC Error: Failed to parse query '1 mod <a> <b> 2 </b> </a> = 1'
op-numeric-modmix2args-6;Expected error code: FORG0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '1 mod <a> <b> 2</b> <c> 2</c> </a>'
op-numeric-modmix2args-7;PRSC Error: Failed to parse query '<a> 1 </a> mod <b> 2 </b> = 1'
op-numeric-modmix2args-8;Expected error code: FORG0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '1 mod <a> x </a>'
op-numeric-modmix2args-9;Expected error code: FORG0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '1 mod <a/>'
op-numeric-multiply-1;Use of XQuery FLWOR expressions in XPath is not allowed
op-numeric-multiplydbl2args-1;PRSC Error: Failed to parse query 'xs:double("-1.0000000000") * xs:double("-1.7976931348623157E308") = 1.7976931348623157E308'
op-numeric-multiplydbl2args-3;PRSC Error: Failed to parse query 'xs:double("1.7976931348623157E308") * xs:double("-1.0000000000") = -1.7976931348623157E308'
op-numeric-multiplydbl2args-5;PRSC Error: Failed to parse query 'xs:double("-1.0000000000") * xs:double("1.7976931348623157E308") = -1.7976931348623157E308'
op-numeric-multiplydec2args-1;Expected XPath xs:decimal("-1.0000000000") * xs:decimal("-999999999999999999") to resolve to 999999999999999999
op-numeric-multiplydec2args-3;Expected XPath xs:decimal("999999999999999999") * xs:decimal("-1.0000000000") to resolve to -999999999999999999
op-numeric-multiplydec2args-5;Expected XPath xs:decimal("-1.0000000000") * xs:decimal("999999999999999999") to resolve to -999999999999999999
op-numeric-multiplyflt2args-1;PRSC Error: Failed to parse query 'xs:float("-1.0000000000") * xs:float("-3.4028235E38") = xs:float(3.4028235E38)'
op-numeric-multiplyflt2args-3;PRSC Error: Failed to parse query 'xs:float("3.4028235E38") * xs:float("-1.0000000000") = xs:float(-3.4028235E38)'
op-numeric-multiplyflt2args-5;PRSC Error: Failed to parse query 'xs:float("-1.0000000000") * xs:float("3.4028235E38") = xs:float(-3.4028235E38)'
op-numeric-multiplymix2args-4;PRSC Error: Failed to parse query '1 * <a> 2 </a> = 2'
op-numeric-multiplymix2args-5;PRSC Error: Failed to parse query '1 * <a> <b> 2 </b> </a> = 2'
op-numeric-multiplymix2args-6;Expected error code: FORG0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '1 * <a> <b> 2</b> <c> 2</c> </a>'
op-numeric-multiplymix2args-7;PRSC Error: Failed to parse query '<a> 1 </a> * <b> 2 </b> = 2'
op-numeric-multiplymix2args-8;Expected error code: FORG0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '1 * <a> x </a>'
op-numeric-multiplymix2args-9;Expected error code: FORG0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '1 * <a/>'
op-numeric-multiplypint2args-2;Expected XPath xs:positiveInteger("52704602390610033") * xs:positiveInteger("1") to resolve to 52704602390610033
op-numeric-multiplypint2args-3;Expected XPath xs:positiveInteger("999999999999999999") * xs:positiveInteger("1") to resolve to 999999999999999999
op-numeric-multiplypint2args-4;Expected XPath xs:positiveInteger("1") * xs:positiveInteger("52704602390610033") to resolve to 52704602390610033
op-numeric-multiplypint2args-5;Expected XPath xs:positiveInteger("1") * xs:positiveInteger("999999999999999999") to resolve to 999999999999999999
op-numeric-subtract-1;Use of XQuery FLWOR expressions in XPath is not allowed
op-numeric-subtract-big-01;Expected executing the XPath '(-79228162514264337593543950335.0 - 1.0) cast as xs:string' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPath (-79228162514264337593543950335.0 - 1.0) cast as xs:string to resolve to -79228162514264337593543950336, but instead got Infinity
op-numeric-subtractdbl2args-2;PRSC Error: Failed to parse query 'xs:double("0") - xs:double("-1.7976931348623157E308") = 1.7976931348623157E308'
op-numeric-subtractdbl2args-3;PRSC Error: Failed to parse query 'xs:double("0") - xs:double("-1.7976931348623157E308") = 1.7976931348623157E308'
op-numeric-subtractdbl2args-4;PRSC Error: Failed to parse query 'xs:double("-1.7976931348623157E308") - xs:double("0") = -1.7976931348623157E308'
op-numeric-subtractdbl2args-5;PRSC Error: Failed to parse query 'xs:double("0") - xs:double("1.7976931348623157E308") = -1.7976931348623157E308'
op-numeric-subtractdec2args-2;Expected XPath xs:decimal("0") - xs:decimal("-999999999999999999") to resolve to 999999999999999999
op-numeric-subtractdec2args-3;Expected XPath xs:decimal("0") - xs:decimal("-999999999999999999") to resolve to 999999999999999999
op-numeric-subtractdec2args-4;Expected XPath xs:decimal("-382624808391485160") - xs:decimal("617375191608514839") to resolve to -999999999999999999
op-numeric-subtractdec2args-5;Expected XPath xs:decimal("0") - xs:decimal("999999999999999999") to resolve to -999999999999999999
op-numeric-subtractflt2args-2;PRSC Error: Failed to parse query 'xs:float("0") - xs:float("-3.4028235E38") = xs:float(3.4028235E38)'
op-numeric-subtractflt2args-3;PRSC Error: Failed to parse query 'xs:float("0") - xs:float("-3.4028235E38") = xs:float(3.4028235E38)'
op-numeric-subtractflt2args-4;PRSC Error: Failed to parse query 'xs:float("-3.4028235E38") - xs:float("0") = xs:float(-3.4028235E38)'
op-numeric-subtractflt2args-5;PRSC Error: Failed to parse query 'xs:float("0") - xs:float("3.4028235E38") = xs:float(-3.4028235E38)'
op-numeric-subtractintg2args-2;Expected XPath xs:integer("0") - xs:integer("-999999999999999999") to resolve to 999999999999999999
op-numeric-subtractintg2args-3;Expected XPath xs:integer("0") - xs:integer("-999999999999999999") to resolve to 999999999999999999
op-numeric-subtractintg2args-4;Expected XPath xs:integer("-169006502882975695") - xs:integer("830993497117024304") to resolve to -999999999999999999
op-numeric-subtractintg2args-5;Expected XPath xs:integer("0") - xs:integer("999999999999999999") to resolve to -999999999999999999
op-numeric-subtractlng2args-2;Expected XPath xs:long("-47175562203048468") - xs:long("-92233720368547758") to resolve to 45058158165499290
op-numeric-subtractlng2args-3;Expected XPath xs:long("0") - xs:long("-92233720368547758") to resolve to 92233720368547758
op-numeric-subtractlng2args-4;Expected XPath xs:long("-92233720368547758") - xs:long("-47175562203048468") to resolve to -45058158165499290
op-numeric-subtractlng2args-5;Expected XPath xs:long("0") - xs:long("92233720368547758") to resolve to -92233720368547758
op-numeric-subtractmix2args-4;PRSC Error: Failed to parse query '3 - <a> 2 </a> = 1'
op-numeric-subtractmix2args-5;PRSC Error: Failed to parse query '3 - <a> <b> 2 </b> </a> = 1'
op-numeric-subtractmix2args-6;Expected error code: FORG0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '3 - <a> <b> 2</b> <c> 2</c> </a>'
op-numeric-subtractmix2args-7;PRSC Error: Failed to parse query '<a> 2 </a> - <b> 1 </b> = 1'
op-numeric-subtractmix2args-8;Expected error code: FORG0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '1 - <a> x </a>'
op-numeric-subtractmix2args-9;Expected error code: FORG0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '1 - <a/>'
op-numeric-subtractnint2args-1;Expected XPath xs:negativeInteger("-999999999999999999") - xs:negativeInteger("-297014075999096793") to resolve to -702985924000903206
op-numeric-subtractnint2args-2;Expected XPath xs:negativeInteger("-999999999999999999") - xs:negativeInteger("-1") to resolve to -999999999999999998
op-numeric-subtractnni2args-2;Expected XPath xs:nonNegativeInteger("303884545991464527") - xs:nonNegativeInteger("0") to resolve to 303884545991464527
op-numeric-subtractnni2args-3;Expected XPath xs:nonNegativeInteger("999999999999999999") - xs:nonNegativeInteger("0") to resolve to 999999999999999999
op-numeric-subtractnpi2args-4;Expected XPath xs:nonPositiveInteger("-999999999999999999") - xs:nonPositiveInteger("-475688437271870490") to resolve to -524311562728129509
op-numeric-subtractnpi2args-5;Expected XPath xs:nonPositiveInteger("-999999999999999999") - xs:nonPositiveInteger("0") to resolve to -999999999999999999
op-numeric-subtractpint2args-2;Expected XPath xs:positiveInteger("999999999999999999") - xs:positiveInteger("1") to resolve to 999999999999999998
op-numeric-subtractpint2args-3;Expected XPath xs:positiveInteger("52704602390610034") - xs:positiveInteger("52704602390610033") to resolve to 1
op-numeric-subtractulng2args-2;Expected XPath xs:unsignedLong("130747108607674654") - xs:unsignedLong("0") to resolve to 130747108607674654
op-numeric-subtractulng2args-3;Expected XPath xs:unsignedLong("184467440737095516") - xs:unsignedLong("0") to resolve to 184467440737095516
op-numeric-unary-minus-1;
op-numeric-unary-minusdbl1args-1;PRSC Error: Failed to parse query '-(xs:double("-1.7976931348623157E308")) = 1.7976931348623157E308'
op-numeric-unary-minusdbl1args-3;PRSC Error: Failed to parse query '-(xs:double("1.7976931348623157E308")) = -1.7976931348623157E308'
op-numeric-unary-minusdec1args-1;Value was either too large or too small for a Decimal.
op-numeric-unary-minusdec1args-2;Value was either too large or too small for a Decimal.
op-numeric-unary-minusdec1args-3;Value was either too large or too small for a Decimal.
op-numeric-unary-minusflt1args-1;PRSC Error: Failed to parse query '-(xs:float("-3.4028235E38")) = xs:float(3.4028235E38)'
op-numeric-unary-minusflt1args-3;PRSC Error: Failed to parse query '-(xs:float("3.4028235E38")) = xs:float(-3.4028235E38)'
op-numeric-unary-plusdbl1args-1;PRSC Error: Failed to parse query '+(xs:double("-1.7976931348623157E308")) = -1.7976931348623157E308'
op-numeric-unary-plusdbl1args-3;PRSC Error: Failed to parse query '+(xs:double("1.7976931348623157E308")) = 1.7976931348623157E308'
op-numeric-unary-plusflt1args-1;PRSC Error: Failed to parse query '+(xs:float("-3.4028235E38")) = xs:float(-3.4028235E38)'
op-numeric-unary-plusflt1args-3;PRSC Error: Failed to parse query '+(xs:float("3.4028235E38")) = xs:float(3.4028235E38)'
op-qname-equal-1;PerformValueCompare: Handle QName
op-qname-equal-10;PerformValueCompare: Handle QName
op-qname-equal-11;PerformValueCompare: Handle QName
op-qname-equal-12;PerformValueCompare: Handle QName
op-qname-equal-13;PerformValueCompare: Handle QName
op-qname-equal-14;PerformValueCompare: Handle QName
op-qname-equal-15;PerformValueCompare: Handle QName
op-qname-equal-16;PerformValueCompare: Handle QName
op-qname-equal-17;PerformValueCompare: Handle QName
op-qname-equal-18;PerformValueCompare: Handle QName
op-qname-equal-19;PerformValueCompare: Handle QName
op-qname-equal-2;PerformValueCompare: Handle QName
op-qname-equal-20;PerformValueCompare: Handle QName
op-qname-equal-21;PerformValueCompare: Handle QName
op-qname-equal-22;PerformValueCompare: Handle QName
op-qname-equal-23;PerformValueCompare: Handle QName
op-qname-equal-24;PerformValueCompare: Handle QName
op-qname-equal-3;PerformValueCompare: Handle QName
op-qname-equal-4;PerformValueCompare: Handle QName
op-qname-equal-5;PerformValueCompare: Handle QName
op-qname-equal-6;PerformValueCompare: Handle QName
op-qname-equal-7;PerformValueCompare: Handle QName
op-qname-equal-8;PerformValueCompare: Handle QName
op-qname-equal-9;PerformValueCompare: Handle QName
op-subtract-dates-yielding-DTD-1;Expected XPath xs:date("2000-10-30") - xs:date("1999-11-28") to resolve to P337D, but instead got PT
op-subtract-dates-yielding-DTD-11;Attempted to divide by zero.
op-subtract-dates-yielding-DTD-13;Expected XPath fn:string((xs:date("1980-05-05Z") - xs:date("1981-12-03Z"))) eq xs:string(xs:dayTimeDuration("P17DT10H02M")) to resolve to false
op-subtract-dates-yielding-DTD-14;Expected XPath fn:string((xs:date("1979-12-12Z") - xs:date("1979-11-11Z"))) ne xs:string(xs:dayTimeDuration("P17DT10H02M")) to resolve to true
op-subtract-dates-yielding-DTD-15;Expected XPath fn:string((xs:date("1978-12-12Z") - xs:date("1977-03-12Z"))) le xs:string(xs:dayTimeDuration("P17DT10H02M")) to resolve to false
op-subtract-dates-yielding-DTD-19;Expected XPath (xs:date("1999-10-23Z") - xs:date("1998-09-09Z")) * xs:decimal(2.0) to resolve to P818D, but instead got PT
op-subtract-dates-yielding-DTD-2;Expected XPath xs:date("2000-10-30+05:00") - xs:date("1999-11-28Z") to resolve to P336DT19H, but instead got PT
op-subtract-dates-yielding-DTD-20;Expected XPath (xs:date("1999-10-23Z") - xs:date("1998-09-09Z")) + xs:dayTimeDuration("P17DT10H02M") to resolve to P426DT10H2M, but instead got PT
op-subtract-dates-yielding-DTD-3;Expected XPath xs:date("2000-10-15-05:00") - xs:date("2000-10-10+02:00") to resolve to P5DT7H, but instead got PT
op-subtract-dates-yielding-DTD-6;Expected XPath fn:number(xs:date("1988-01-28Z") - xs:date("2001-03-02")) to resolve to NaN, but instead got Infinity
op-subtract-dates-yielding-DTD-7;Expected XPath fn:string(xs:date("1989-07-05Z") - xs:date("1962-09-04Z")) to resolve to P9801D, but instead got PT
op-subtract-dates-yielding-DTD-8;Expected XPath xs:date("0001-01-01Z") - xs:date("2005-07-06Z") to resolve to -P732132D, but instead got PT
op-subtract-dateTimes-yielding-DTD-1;Expected XPath xs:dateTime("2000-10-30T06:12:00-05:00") - xs:dateTime("1999-11-28T09:00:00Z") to resolve to P337DT2H12M, but instead got PT
op-subtract-dateTimes-yielding-DTD-11;Attempted to divide by zero.
op-subtract-dateTimes-yielding-DTD-13;Expected XPath fn:string((xs:dateTime("1980-05-05T13:13:13Z") - xs:dateTime("1979-10-05T14:14:14Z"))) eq xs:string(xs:dayTimeDuration("P17DT10H02M")) to resolve to false
op-subtract-dateTimes-yielding-DTD-14;Expected XPath fn:string((xs:dateTime("1979-12-12T16:16:16Z") - xs:dateTime("1978-12-12T17:17:17Z"))) ne xs:string(xs:dayTimeDuration("P17DT10H02M")) to resolve to true
op-subtract-dateTimes-yielding-DTD-15;Expected XPath fn:string((xs:dateTime("1978-12-12T10:09:08Z") - xs:dateTime("1977-12-12T09:08:07Z"))) le xs:string(xs:dayTimeDuration("P17DT10H02M")) to resolve to false
op-subtract-dateTimes-yielding-DTD-19;Expected XPath (xs:dateTime("1999-10-23T01:01:01Z") - xs:dateTime("1998-09-09T02:02:02Z")) * xs:decimal(2.0) to resolve to P817DT21H57M58S, but instead got PT
op-subtract-dateTimes-yielding-DTD-2;Expected XPath xs:dateTime("2000-12-12T09:08:07+05:00") - xs:dateTime("1999-12-12T09:08:07+05:00") to resolve to P366D, but instead got PT
op-subtract-dateTimes-yielding-DTD-20;Expected XPath (xs:dateTime("1999-10-23T09:08:07Z") - xs:dateTime("1998-09-09T04:03:02Z")) + xs:dayTimeDuration("P17DT10H02M") to resolve to P426DT15H7M5S, but instead got PT
op-subtract-dateTimes-yielding-DTD-3;Expected XPath xs:dateTime("2000-02-03T02:09:07-06:00") - xs:dateTime("1998-02-03T02:09:07-06:00") to resolve to P730D, but instead got PT
op-subtract-dateTimes-yielding-DTD-6;Expected XPath fn:number(xs:dateTime("1988-01-28T10:09:08Z") - xs:dateTime("1987-01-01T01:01:02Z")) to resolve to NaN, but instead got Infinity
op-subtract-dateTimes-yielding-DTD-7;Expected XPath fn:string(xs:dateTime("1989-07-05T02:02:02Z") - xs:dateTime("1988-01-28T03:03:03Z")) to resolve to P523DT22H58M59S, but instead got PT
op-subtract-dateTimes-yielding-DTD-8;Expected XPath xs:dateTime("0001-01-01T01:01:01Z") - xs:dateTime("2005-07-06T12:12:12Z") to resolve to -P732132DT11H11M11S, but instead got PT
op-subtract-dayTimeDurations-1;Expected XPath xs:dayTimeDuration("P2DT12H") - xs:dayTimeDuration("P1DT10H30M") to resolve to P1DT1H30M, but instead got PT
op-subtract-dayTimeDurations-11;Attempted to divide by zero.
op-subtract-dayTimeDurations-13;Expected XPath (xs:dayTimeDuration("P23DT11H11M") - xs:dayTimeDuration("P23DT11H11M")) eq xs:dayTimeDuration("P23DT11H11M") to resolve to false
op-subtract-dayTimeDurations-14;Expected XPath (xs:dayTimeDuration("P21DT08H12M") - xs:dayTimeDuration("P08DT08H05M")) ne xs:dayTimeDuration("P08DT08H05M") to resolve to true
op-subtract-dayTimeDurations-16;Expected XPath (xs:dayTimeDuration("P13DT09H09M") - xs:dayTimeDuration("P18DT02H02M")) ge xs:dayTimeDuration("P18DT02H02M") to resolve to false
op-subtract-dayTimeDurations-6;Expected XPath fn:number(xs:dayTimeDuration("P02DT06H09M") - xs:dayTimeDuration("P10DT08H01M")) to resolve to NaN, but instead got Infinity
op-subtract-dayTimeDurations-7;Expected XPath fn:string(xs:dayTimeDuration("P03DT04H08M") - xs:dayTimeDuration("P01DT09H02M")) to resolve to P1DT19H6M, but instead got PT
op-subtract-dayTimeDurations-8;Expected XPath (xs:dayTimeDuration("P10DT01H01M") - xs:dayTimeDuration("P11DT02H02M")) to resolve to -P1DT1H1M, but instead got PT
op-subtract-dayTimeDurations2args-1;Expected XPath xs:dayTimeDuration("P0DT0H0M0S") - xs:dayTimeDuration("P0DT0H0M0S") to resolve to PT0S, but instead got PT
op-subtract-dayTimeDurations2args-2;Expected XPath xs:dayTimeDuration("P15DT11H59M59S") - xs:dayTimeDuration("P0DT0H0M0S") to resolve to P15DT11H59M59S, but instead got PT
op-subtract-dayTimeDurations2args-3;Expected XPath xs:dayTimeDuration("P31DT23H59M59S") - xs:dayTimeDuration("P0DT0H0M0S") to resolve to P31DT23H59M59S, but instead got PT
op-subtract-dayTimeDurations2args-4;Expected XPath xs:dayTimeDuration("P0DT0H0M0S") - xs:dayTimeDuration("P15DT11H59M59S") to resolve to -P15DT11H59M59S, but instead got PT
op-subtract-dayTimeDurations2args-5;Expected XPath xs:dayTimeDuration("P0DT0H0M0S") - xs:dayTimeDuration("P31DT23H59M59S") to resolve to -P31DT23H59M59S, but instead got PT
op-subtract-times-1;Expected XPath xs:time("11:12:00Z") - xs:time("04:00:00Z") to resolve to PT7H12M, but instead got PT
op-subtract-times-2;Expected XPath xs:time("11:00:00-05:00") - xs:time("21:30:00+05:30") to resolve to PT0S, but instead got PT
op-subtract-times-3;Expected XPath xs:time("17:00:00-06:00") - xs:time("08:00:00+09:00") to resolve to P1D, but instead got PT
op-subtract-times-6;Expected XPath fn:number(xs:time("13:00:00Z") - xs:time("12:00:00Z")) to resolve to NaN, but instead got Infinity
op-subtract-times-7;Expected XPath fn:string(xs:time("13:00:00Z") - xs:time("17:00:00Z")) to resolve to -PT4H, but instead got PT
op-subtract-times-8;Expected XPath (xs:time("13:00:00Z") - xs:time("17:00:00Z")) to resolve to -PT4H, but instead got PT
op-subtract-times2args-1;Expected XPath xs:time("00:00:00Z") - xs:time("00:00:00Z") to resolve to PT0S, but instead got PT
op-subtract-times2args-2;Expected XPath xs:time("08:03:35Z") - xs:time("00:00:00Z") to resolve to PT8H3M35S, but instead got PT
op-subtract-times2args-3;Expected XPath xs:time("23:59:59Z") - xs:time("00:00:00Z") to resolve to PT23H59M59S, but instead got PT
op-subtract-times2args-4;Expected XPath xs:time("00:00:00Z") - xs:time("08:03:35Z") to resolve to -PT8H3M35S, but instead got PT
op-subtract-times2args-5;Expected XPath xs:time("00:00:00Z") - xs:time("23:59:59Z") to resolve to -PT23H59M59S, but instead got PT
op-subtract-yearMonthDurations-1;Expected XPath (xs:yearMonthDuration("P2Y11M") - xs:yearMonthDuration("P3Y3M")) to resolve to -P4M, but instead got P
op-subtract-yearMonthDurations-11;Attempted to divide by zero.
op-subtract-yearMonthDurations-13;Expected XPath (xs:yearMonthDuration("P23Y11M") - xs:yearMonthDuration("P23Y11M")) eq xs:yearMonthDuration("P23Y11M") to resolve to false
op-subtract-yearMonthDurations-14;Expected XPath (xs:yearMonthDuration("P21Y12M") - xs:yearMonthDuration("P08Y05M")) ne xs:yearMonthDuration("P08Y05M") to resolve to true
op-subtract-yearMonthDurations-16;Expected XPath (xs:yearMonthDuration("P13Y09M") - xs:yearMonthDuration("P18Y02M")) ge xs:yearMonthDuration("P18Y02M") to resolve to false
op-subtract-yearMonthDurations-6;Expected XPath fn:number(xs:yearMonthDuration("P02Y09M") - xs:yearMonthDuration("P10Y01M")) to resolve to NaN, but instead got Infinity
op-subtract-yearMonthDurations-7;Expected XPath fn:string(xs:yearMonthDuration("P03Y08M") - xs:yearMonthDuration("P01Y02M")) to resolve to P2Y6M, but instead got P
op-subtract-yearMonthDurations-8;Expected XPath (xs:yearMonthDuration("P10Y01M") - xs:yearMonthDuration("P11Y02M")) to resolve to -P1Y1M, but instead got P
op-subtract-yearMonthDurations2args-1;Expected XPath xs:yearMonthDuration("P0Y0M") - xs:yearMonthDuration("P0Y0M") to resolve to P0M, but instead got P
op-subtract-yearMonthDurations2args-2;Expected XPath xs:yearMonthDuration("P1000Y6M") - xs:yearMonthDuration("P0Y0M") to resolve to P1000Y6M, but instead got P
op-subtract-yearMonthDurations2args-3;Expected XPath xs:yearMonthDuration("P2030Y12M") - xs:yearMonthDuration("P0Y0M") to resolve to P2031Y, but instead got P
op-subtract-yearMonthDurations2args-4;Expected XPath xs:yearMonthDuration("P0Y0M") - xs:yearMonthDuration("P1000Y6M") to resolve to -P1000Y6M, but instead got P
op-subtract-yearMonthDurations2args-5;Expected XPath xs:yearMonthDuration("P0Y0M") - xs:yearMonthDuration("P2030Y12M") to resolve to -P2031Y, but instead got P
op-yearMonthDuration-equal2args-10;Expected XPath xs:yearMonthDuration("P0Y0M") ne xs:yearMonthDuration("P2030Y12M") to resolve to true
op-yearMonthDuration-equal2args-12;Expected XPath xs:yearMonthDuration("P1000Y6M") le xs:yearMonthDuration("P0Y0M") to resolve to false
op-yearMonthDuration-equal2args-13;Expected XPath xs:yearMonthDuration("P2030Y12M") le xs:yearMonthDuration("P0Y0M") to resolve to false
op-yearMonthDuration-equal2args-19;Expected XPath xs:yearMonthDuration("P0Y0M") ge xs:yearMonthDuration("P1000Y6M") to resolve to false
op-yearMonthDuration-equal2args-2;Expected XPath xs:yearMonthDuration("P1000Y6M") eq xs:yearMonthDuration("P0Y0M") to resolve to false
op-yearMonthDuration-equal2args-20;Expected XPath xs:yearMonthDuration("P0Y0M") ge xs:yearMonthDuration("P2030Y12M") to resolve to false
op-yearMonthDuration-equal2args-3;Expected XPath xs:yearMonthDuration("P2030Y12M") eq xs:yearMonthDuration("P0Y0M") to resolve to false
op-yearMonthDuration-equal2args-4;Expected XPath xs:yearMonthDuration("P0Y0M") eq xs:yearMonthDuration("P1000Y6M") to resolve to false
op-yearMonthDuration-equal2args-5;Expected XPath xs:yearMonthDuration("P0Y0M") eq xs:yearMonthDuration("P2030Y12M") to resolve to false
op-yearMonthDuration-equal2args-7;Expected XPath xs:yearMonthDuration("P1000Y6M") ne xs:yearMonthDuration("P0Y0M") to resolve to true
op-yearMonthDuration-equal2args-8;Expected XPath xs:yearMonthDuration("P2030Y12M") ne xs:yearMonthDuration("P0Y0M") to resolve to true
op-yearMonthDuration-equal2args-9;Expected XPath xs:yearMonthDuration("P0Y0M") ne xs:yearMonthDuration("P1000Y6M") to resolve to true
op-yearMonthDuration-greater-than-13;Expected XPath (xs:yearMonthDuration("P30Y10M") gt xs:yearMonthDuration("P01Y02M")) or (fn:false()) to resolve to true
op-yearMonthDuration-greater-than-14;Expected XPath (xs:yearMonthDuration("P10Y05M") ge xs:yearMonthDuration("P20Y10M")) or (fn:false()) to resolve to false
op-yearMonthDuration-greater-than-3;Expected XPath fn:not((xs:yearMonthDuration("P20Y123M") gt xs:yearMonthDuration("P20Y11M"))) to resolve to false
op-yearMonthDuration-greater-than-6;Expected XPath fn:not(xs:yearMonthDuration("P10Y07M") ge xs:yearMonthDuration("P10Y09M")) to resolve to true
op-yearMonthDuration-greater-than-7;Expected XPath (xs:yearMonthDuration("P10Y09M") gt xs:yearMonthDuration("P09Y10M")) and (xs:yearMonthDuration("P10Y01M") gt xs:yearMonthDuration("P08Y06M")) to resolve to true
op-yearMonthDuration-greater-than-8;Expected XPath (xs:yearMonthDuration("P10Y09M") ge xs:yearMonthDuration("P10Y01M")) and (xs:yearMonthDuration("P02Y04M") ge xs:yearMonthDuration("P09Y07M")) to resolve to false
op-yearMonthDuration-greater-than-9;Expected XPath (xs:yearMonthDuration("P10Y08M") gt xs:yearMonthDuration("P10Y07M")) or (xs:yearMonthDuration("P10Y09M") gt xs:yearMonthDuration("P10Y09M")) to resolve to true
op-yearMonthDuration-greater-than2args-2;Expected XPath xs:yearMonthDuration("P1000Y6M") gt xs:yearMonthDuration("P0Y0M") to resolve to true
op-yearMonthDuration-greater-than2args-3;Expected XPath xs:yearMonthDuration("P2030Y12M") gt xs:yearMonthDuration("P0Y0M") to resolve to true
op-yearMonthDuration-greater-than2args-7;Expected XPath xs:yearMonthDuration("P1000Y6M") le xs:yearMonthDuration("P0Y0M") to resolve to false
op-yearMonthDuration-greater-than2args-8;Expected XPath xs:yearMonthDuration("P2030Y12M") le xs:yearMonthDuration("P0Y0M") to resolve to false
op-yearMonthDuration-less-than-10;Expected XPath (xs:yearMonthDuration("P10Y01M") le xs:yearMonthDuration("P09Y06M")) or (xs:yearMonthDuration("P15Y01M") le xs:yearMonthDuration("P02Y04M")) to resolve to false
op-yearMonthDuration-less-than-3;Expected XPath fn:not((xs:yearMonthDuration("P20Y10M") lt xs:yearMonthDuration("P20Y11M"))) to resolve to false
op-yearMonthDuration-less-than-6;Expected XPath fn:not(xs:yearMonthDuration("P10Y09M") le xs:yearMonthDuration("P10Y07M")) to resolve to true
op-yearMonthDuration-less-than-8;Expected XPath (xs:yearMonthDuration("P10Y09M") le xs:yearMonthDuration("P10Y01M")) and (xs:yearMonthDuration("P02Y04M") le xs:yearMonthDuration("P09Y07M")) to resolve to false
op-yearMonthDuration-less-than2args-10;Expected XPath xs:yearMonthDuration("P0Y0M") ge xs:yearMonthDuration("P2030Y12M") to resolve to false
op-yearMonthDuration-less-than2args-4;Expected XPath xs:yearMonthDuration("P0Y0M") lt xs:yearMonthDuration("P1000Y6M") to resolve to true
op-yearMonthDuration-less-than2args-5;Expected XPath xs:yearMonthDuration("P0Y0M") lt xs:yearMonthDuration("P2030Y12M") to resolve to true
op-yearMonthDuration-less-than2args-9;Expected XPath xs:yearMonthDuration("P0Y0M") ge xs:yearMonthDuration("P1000Y6M") to resolve to false
orderBy1;PRSC Error: Failed to parse query '\n        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/Strings/orderData order by $x ascending return $x } </results>\n      '
orderBy10;PRSC Error: Failed to parse query '\n        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/Strings/orderData order by concat($x,"") ascending \n            return concat($x,"") } </results>'
orderBy11;PRSC Error: Failed to parse query '\n        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/Strings/orderData order by concat("",$x) descending return concat("",$x) } </results>'
orderBy12;PRSC Error: Failed to parse query '\n        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/Strings/orderData order by concat("",$x) ascending return concat("",$x) } </results>'
orderBy13;PRSC Error: Failed to parse query '\n        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/Strings/orderData order by concat("",$x) ascending return concat("",$x) } </results>'
orderBy14;PRSC Error: Failed to parse query '\n        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/Strings/orderData order by $x is $x ascending return $x is $x } </results>'
orderBy15;PRSC Error: Failed to parse query '\n        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/Strings/orderData order by $x is $x descending return $x is $x } </results>'
orderBy16;PRSC Error: Failed to parse query '\n        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/Strings/orderData order by concat($x,$x) ascending return concat($x,$x) } </results>'
orderBy17;PRSC Error: Failed to parse query '\n        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/Strings/orderData order by string-length($x) ascending return string-length($x) } </results>'
orderBy18;PRSC Error: Failed to parse query '\n        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/Strings/orderData order by count($x) ascending return count($x) } </results>'
orderBy19;PRSC Error: Failed to parse query '\n        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/Strings/orderData order by string-length($x) ascending return string-length($x) } </results>'
orderBy2;PRSC Error: Failed to parse query '\n        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/Strings/orderData order by $x descending return $x } </results>\n      '
orderBy20;Expected executing the XPath 'declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/NegativeNumbers/orderData order by $x ascending return $x } </results>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/NegativeNumbers/orderData order by $x ascending return $x } </results>'
orderBy21;Expected executing the XPath 'declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/NegativeNumbers/orderData order by $x descending return $x } </results>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/NegativeNumbers/orderData order by $x descending return $x } </results>'
orderBy22;Expected executing the XPath 'declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/NegativeNumbers/orderData order by ($x + $x) descending return $x + $x } </results>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/NegativeNumbers/orderData order by ($x + $x) descending return $x + $x } </results>'
orderBy23;PRSC Error: Failed to parse query 'declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/NegativeNumbers/orderData order by $x is $x ascending return $x is $x } </results>'
orderBy24;PRSC Error: Failed to parse query 'declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/NegativeNumbers/orderData order by $x is $x descending return $x is $x } </results>'
orderBy25;Expected executing the XPath 'declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/NegativeNumbers/orderData order by xs:float($x) descending return xs:float($x) } </results>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/NegativeNumbers/orderData order by xs:float($x) descending return xs:float($x) } </results>'
orderBy26;Expected executing the XPath 'declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/NegativeNumbers/orderData order by xs:decimal($x) descending return xs:decimal($x) } </results>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/NegativeNumbers/orderData order by xs:decimal($x) descending return xs:decimal($x) } </results>'
orderBy27;Expected executing the XPath 'declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/NegativeNumbers/orderData order by xs:double($x) descending return xs:double($x) } </results>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/NegativeNumbers/orderData order by xs:double($x) descending return xs:double($x) } </results>'
orderBy28;PRSC Error: Failed to parse query 'declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/NegativeNumbers/orderData order by xs:integer($x) descending return xs:integer($x) } </results>'
orderBy29;PRSC Error: Failed to parse query '\n        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { \n            for $x in /DataValues/NegativeNumbers/orderData \n            order by ($x * -1) descending \n            return ($x * -1e0) (:force to xs:double:) \n        } </results>\n      '
orderBy29a;PRSC Error: Failed to parse query '\n        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { \n            for $x in /DataValues/NegativeNumbers/orderData \n            order by ($x * -1) descending \n            return ($x * -1e0) (:force to xs:double:) \n        } </results>\n      '
orderBy3;PRSC Error: Failed to parse query '\n        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/Strings/orderData order by concat($x,"()") ascending return concat($x,"()") } </results>\n      '
orderBy30;PRSC Error: Failed to parse query 'declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/PositiveNumbers/orderData order by $x ascending return $x } </results>'
orderBy31;PRSC Error: Failed to parse query 'declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/PositiveNumbers/orderData order by $x descending return $x } </results>'
orderBy32;Expected executing the XPath 'declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/PositiveNumbers/orderData order by ($x + $x) descending return $x + $x } </results>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/PositiveNumbers/orderData order by ($x + $x) descending return $x + $x } </results>'
orderBy33;PRSC Error: Failed to parse query 'declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/PositiveNumbers/orderData order by $x is $x ascending return $x is $x } </results>'
orderBy34;PRSC Error: Failed to parse query 'declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/PositiveNumbers/orderData order by $x is $x descending return $x is $x } </results>'
orderBy35;PRSC Error: Failed to parse query 'declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/PositiveNumbers/orderData order by xs:float($x) descending return xs:float($x) } </results>'
orderBy36;PRSC Error: Failed to parse query 'declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/PositiveNumbers/orderData order by xs:decimal($x) descending return xs:decimal($x) } </results>'
orderBy37;PRSC Error: Failed to parse query 'declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/PositiveNumbers/orderData order by xs:double($x) descending return xs:double($x) } </results>'
orderBy38;PRSC Error: Failed to parse query 'declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/PositiveNumbers/orderData order by xs:integer($x) descending return xs:integer($x) } </results>'
orderBy39;PRSC Error: Failed to parse query 'declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/PositiveNumbers/orderData order by string($x) ascending return string($x) } </results>'
orderBy4;PRSC Error: Failed to parse query '\n        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/Strings/orderData order by concat($x,"()") descending return concat($x,"()") } </results>\n      '
orderBy40;PRSC Error: Failed to parse query 'declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/SmallPositiveNumbers/orderData order by $x ascending return $x } </results>'
orderBy41;PRSC Error: Failed to parse query 'declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/SmallPositiveNumbers/orderData order by $x descending return $x } </results>'
orderBy42;Expected executing the XPath 'declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/SmallPositiveNumbers/orderData order by ($x + $x) descending return $x + $x } </results>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/SmallPositiveNumbers/orderData order by ($x + $x) descending return $x + $x } </results>'
orderBy43;PRSC Error: Failed to parse query 'declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/SmallPositiveNumbers/orderData order by $x is $x ascending return $x is $x } </results>'
orderBy44;PRSC Error: Failed to parse query 'declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/SmallPositiveNumbers/orderData order by $x is $x descending return $x is $x } </results>'
orderBy45;PRSC Error: Failed to parse query 'declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/SmallPositiveNumbers/orderData order by xs:float($x) descending return xs:float($x) } </results>'
orderBy46;PRSC Error: Failed to parse query 'declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/SmallPositiveNumbers/orderData order by xs:decimal($x) descending return xs:decimal($x) } </results>'
orderBy47;PRSC Error: Failed to parse query 'declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/SmallPositiveNumbers/orderData order by xs:double($x) descending return xs:double($x) } </results>'
orderBy49;PRSC Error: Failed to parse query 'declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/SmallPositiveNumbers/orderData order by string($x) ascending return string($x) } </results>'
orderBy5;PRSC Error: Failed to parse query '\n        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { \n            for $x in /DataValues/Strings/orderData \n            order by concat($x,"another String After") ascending \n            return concat($x,"another String After") \n        } </results>\n      '
orderBy50;Expected executing the XPath 'declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/SmallNegativeNumbers/orderData order by $x ascending return $x } </results>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/SmallNegativeNumbers/orderData order by $x ascending return $x } </results>'
orderBy51;Expected executing the XPath 'declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/SmallNegativeNumbers/orderData order by $x descending return $x } </results>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/SmallNegativeNumbers/orderData order by $x descending return $x } </results>'
orderBy52;PRSC Error: Failed to parse query 'declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { \n            for $x in /DataValues/SmallNegativeNumbers/orderData \n            order by ($x + $x) descending \n            return xs:double($x + $x) \n        } </results>\n      '
orderBy52a;PRSC Error: Failed to parse query 'declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { \n            for $x in /DataValues/SmallNegativeNumbers/orderData \n            order by ($x + $x) descending \n            return xs:double($x + $x) \n        } </results>\n      '
orderBy53;PRSC Error: Failed to parse query '\n        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/SmallNegativeNumbers/orderData order by $x is $x ascending return $x is $x } </results>\n      '
orderBy54;PRSC Error: Failed to parse query '\n        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/SmallNegativeNumbers/orderData order by $x is $x descending return $x is $x } </results>\n      '
orderBy55;Expected executing the XPath 'declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/SmallNegativeNumbers/orderData order by xs:float($x) descending return xs:float($x) } </results>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/SmallNegativeNumbers/orderData order by xs:float($x) descending return xs:float($x) } </results>\n      '
orderBy56;PRSC Error: Failed to parse query '\n        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/SmallNegativeNumbers/orderData order by xs:decimal($x) descending return xs:decimal($x) } </results>\n      '
orderBy57;Expected executing the XPath 'declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/SmallNegativeNumbers/orderData order by xs:double($x) descending return xs:double($x) } </results>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/SmallNegativeNumbers/orderData order by xs:double($x) descending return xs:double($x) } </results>\n      '
orderBy59;PRSC Error: Failed to parse query '\n        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/SmallNegativeNumbers/orderData order by string($x) ascending return string($x) } </results>\n      '
orderBy6;PRSC Error: Failed to parse query '\n        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/Strings/orderData order by concat($x,"another String After") descending \n            return concat($x,"another String After") } </results>'
orderBy60;PRSC Error: Failed to parse query '\n        declare base-uri "http://www.w3.org/2005/xpath-functions/"; \n        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/Strings/orderData \n                    order by concat($x,"()") ascending collation "collation/codepoint" \n                    return concat($x,"()") } </results>\n      '
orderBy61;PRSC Error: Failed to parse query '\n        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { \n            for $x in /DataValues/Strings/orderData \n            order by concat($x,"()") ascending collation "http://www.w3.org/2005/xpath-functions/collation/codepoint" \n            return concat($x,"()") } \n        </results>\n      '
orderBy62;PRSC Error: Failed to parse query '\n        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results>{ \n            for $x in /DataValues/NegativeNumbers/orderData/xs:decimal(.) \n            where $x > -1000 \n            order by $x ascending collation "http://www.w3.org/2005/xpath-functions/collation/codepoint" \n            return $x }\n        </results>\n      '
orderBy63;PRSC Error: Failed to parse query '\n        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n\n        /DataValues/(\n         (\n           for $x in NegativeNumbers/*\n           order by (if (name(.) = 'orderData') then $x else -$x)\n           return $x\n         )[1]\n        )\n\n      '
orderBy64;PRSC Error: Failed to parse query '\n        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results>{ \n            for $x in /DataValues/NegativeNumbers/orderData/xs:decimal(.)  \n            order by $x ascending collation "http://www.w3.org/2005/xpath-functions/collation/codepoint" \n            where $x > -1000\n            return $x }\n        </results>\n      '
orderBy65;PRSC Error: Failed to parse query '\n        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results>{ \n            for $x in /DataValues/NegativeNumbers/orderData/xs:decimal(.) \n            order by $x descending collation "http://www.w3.org/2005/xpath-functions/collation/codepoint" \n            order by $x ascending collation "http://www.w3.org/2005/xpath-functions/collation/codepoint" \n            where $x > -1000\n            return $x }\n        </results>\n      '
orderBy66;PRSC Error: Failed to parse query 'deep-equal((\n        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n \n            for $i in 1 to 100\n            order by -$i\n            count $count\n            let $e := <e i="{$i}" pos="{$count}"/>\n            order by number($e/@i)\n            where $count gt 90\n            return $e!@pos!number()\n\n      ), (100, 99, 98, 97, 96, 95, 94, 93, 92, 91))'
orderBy67;PRSC Error: Failed to parse query 'deep-equal((\n         for $j in (text{'Az'}, text{'Bx'}, text{'Cy'}) \n         order by $j/substring(., $j/string-length(.)) \n         return $j/string()\n      ), ("Bx", "Cy", "Az"))'
orderBy68;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         declare variable $in := <in><e on="2017-09-18"/><e on="2016-04-15"/><e on="2012-07-09"/></in>;\n         for $j in ($in//e/@on, xs:date('1999-12-17')) \n         order by $j \n         return $j\n      '
orderBy7;PRSC Error: Failed to parse query '\n        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/Strings/orderData order by concat($x,"another String Before") ascending \n            return concat($x,"another String Before") } </results>'
orderBy8;PRSC Error: Failed to parse query '\n        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/Strings/orderData order by concat($x,"another String Before") descending \n            return concat($x,"another String Before") } </results>'
orderBy9;PRSC Error: Failed to parse query '\n        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; \n        <results> { for $x in /DataValues/Strings/orderData order by concat($x,"") descending return concat($x,"") } </results>'
orderbylocal-1;PRSC Error: Failed to parse query '<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String",\n        "I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String",\n        "U String","V String","W String","X String","Y String","Z String") order by xs:string($x) \n        ascending return xs:string($x) } </results>'
orderbylocal-10;PRSC Error: Failed to parse query '<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String","I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String","U String","V String","W String","X String","Y String","Z String") order by concat(xs:string($x),"") ascending return concat(xs:string($x),"") } </results>'
orderbylocal-11;PRSC Error: Failed to parse query '<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String","I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String","U String","V String","W String","X String","Y String","Z String") order by concat("",xs:string($x)) descending return concat("",xs:string($x)) } </results>'
orderbylocal-12;PRSC Error: Failed to parse query '<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String","I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String","U String","V String","W String","X String","Y String","Z String") order by concat("",xs:string($x)) ascending return concat("",xs:string($x)) } </results>'
orderbylocal-16;PRSC Error: Failed to parse query '<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String","I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String","U String","V String","W String","X String","Y String","Z String") order by concat(xs:string($x),xs:string($x)) ascending return concat(xs:string($x),xs:string($x)) } </results>'
orderbylocal-17;PRSC Error: Failed to parse query '<results> { for $x in("A String","B String","C String","D String","E String","F String","G String","H String","I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String","U String","V String","W String","X String","Y String","Z String") order by string-length(xs:string($x)) ascending return string-length(xs:string($x)) } </results>'
orderbylocal-18;PRSC Error: Failed to parse query '<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String","I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String","U String","V String","W String","X String","Y String","Z String") order by count(xs:string($x)) ascending return count(xs:string($x)) } </results>'
orderbylocal-19;PRSC Error: Failed to parse query '<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String","I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String","U String","V String","W String","X String","Y String","Z String") order by string-length(xs:string($x)) ascending return string-length(xs:string($x)) } </results>'
orderbylocal-2;PRSC Error: Failed to parse query '<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String",\n        "I String","J String","K String","L String","M String","N String","O String","P String","R String","S String",\n        "T String","U String","V String","W String","X String","Y String","Z String") order by xs:string($x) \n        descending return xs:string($x) } </results>'
orderbylocal-20;PRSC Error: Failed to parse query '<results> { for $x in (-100000000000000000,-10000000000000000,-1000000000000000,-100000000000000,-10000000000000,-1000000000000,-100000000000,-10000000000,-1000000000,-100000000,-10000000,-1000000,-100000,-10000,-1000,-100,-10,-1,-0) order by xs:decimal($x) ascending return xs:decimal($x) } </results>'
orderbylocal-21;PRSC Error: Failed to parse query '<results> { for $x in (-100000000000000000,-10000000000000000,-1000000000000000,-100000000000000,-10000000000000,-1000000000000,-100000000000,-10000000000,-1000000000,-100000000,-10000000,-1000000,-100000,-10000,-1000,-100,-10,-1,-0) order by xs:decimal($x) descending return xs:decimal($x) } </results>'
orderbylocal-22;PRSC Error: Failed to parse query '<results> { for $x in (-100000000000000000,-10000000000000000,-1000000000000000,-100000000000000,-10000000000000,-1000000000000,-100000000000,-10000000000,-1000000000,-100000000,-10000000,-1000000,-100000,-10000,-1000,-100,-10,-1,-0) order by (xs:decimal($x) + xs:decimal($x)) descending return xs:decimal($x) + xs:decimal($x) } </results>'
orderbylocal-25;PRSC Error: Failed to parse query '<results> { for $x in (-100000000000000000,-10000000000000000,-1000000000000000,-100000000000000,-10000000000000,-1000000000000,-100000000000,-10000000000,-1000000000,-100000000,-10000000,-1000000,-100000,-10000,-1000,-100,-10,-1,-0) order by xs:float($x) descending return xs:float($x) } </results>'
orderbylocal-26;PRSC Error: Failed to parse query '<results> { for $x in (-100000000000000000,-10000000000000000,-1000000000000000,-100000000000000,-10000000000000,-1000000000000,-100000000000,-10000000000,-1000000000,-100000000,-10000000,-1000000,-100000,-10000,-1000,-100,-10,-1,-0) order by xs:decimal($x) descending return xs:decimal($x) } </results>'
orderbylocal-27;PRSC Error: Failed to parse query '<results> { for $x in (-100000000000000000,-10000000000000000,-1000000000000000,-100000000000000,-10000000000000,-1000000000000,-100000000000,-10000000000,-1000000000,-100000000,-10000000,-1000000,-100000,-10000,-1000,-100,-10,-1,-0) order by xs:double($x) descending return xs:double($x) } </results>'
orderbylocal-28;PRSC Error: Failed to parse query '<results> { for $x in (-100000000000000000,-10000000000000000,-1000000000000000,-100000000000000,-10000000000000,-1000000000000,-100000000000,-10000000000,-1000000000,-100000000,-10000000,-1000000,-100000,-10000,-1000,-100,-10,-1,-0) order by xs:integer($x) descending return xs:integer($x) } </results>'
orderbylocal-29;PRSC Error: Failed to parse query '<results> { for $x in (-100000000000000000,-10000000000000000,-1000000000000000,-100000000000000,-10000000000000,-1000000000000,-100000000000,-10000000000,-1000000000,-100000000,-10000000,-1000000,-100000,-10000,-1000,-100,-10,-1,-0) order by (xs:decimal($x) * -1) descending return (xs:decimal($x) * -1) } </results>'
orderbylocal-3;PRSC Error: Failed to parse query '<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String",\n        "I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String",\n        "U String","V String","W String","X String","Y String","Z String") order by concat(xs:string($x),"()") \n        ascending return concat(xs:string($x),"()") } </results>'
orderbylocal-30;PRSC Error: Failed to parse query '<results> { for $x in (100000000000000000,10000000000000000,1000000000000000,100000000000000,10000000000000,1000000000000,100000000000,10000000000,1000000000,100000000,10000000,1000000,100000,10000,1000,100,10,1,0) order by xs:decimal($x) ascending return xs:decimal($x) } </results>'
orderbylocal-31;PRSC Error: Failed to parse query '<results> { for $x in (100000000000000000,10000000000000000,1000000000000000,100000000000000,10000000000000,1000000000000,100000000000,10000000000,1000000000,100000000,10000000,1000000,100000,10000,1000,100,10,1,0) order by xs:decimal($x) descending return xs:decimal($x) } </results>'
orderbylocal-32;PRSC Error: Failed to parse query '<results> { for $x in (100000000000000000,10000000000000000,1000000000000000,100000000000000,10000000000000,1000000000000,100000000000,10000000000,1000000000,100000000,10000000,1000000,100000,10000,1000,100,10,1,0) order by (xs:decimal($x) + xs:decimal($x)) descending return xs:decimal($x) + xs:decimal($x) } </results>'
orderbylocal-35;PRSC Error: Failed to parse query '<results> { for $x in (100000000000000000,10000000000000000,1000000000000000,100000000000000,10000000000000,1000000000000,100000000000,10000000000,1000000000,100000000,10000000,1000000,100000,10000,1000,100,10,1,0) order by xs:float($x) descending return xs:float($x) } </results>'
orderbylocal-36;PRSC Error: Failed to parse query '<results> { for $x in (100000000000000000,10000000000000000,1000000000000000,100000000000000,10000000000000,1000000000000,100000000000,10000000000,1000000000,100000000,10000000,1000000,100000,10000,1000,100,10,1,0) order by xs:decimal($x) descending return xs:decimal($x) } </results>'
orderbylocal-37;PRSC Error: Failed to parse query '<results> { for $x in (100000000000000000,10000000000000000,1000000000000000,100000000000000,10000000000000,1000000000000,100000000000,10000000000,1000000000,100000000,10000000,1000000,100000,10000,1000,100,10,1,0) order by xs:double($x) descending return xs:double($x) } </results>'
orderbylocal-38;PRSC Error: Failed to parse query '<results> { for $x in (100000000000000000,10000000000000000,1000000000000000,100000000000000,10000000000000,1000000000000,100000000000,10000000000,1000000000,100000000,10000000,1000000,100000,10000,1000,100,10,1,0) order by xs:integer($x) descending return xs:integer($x) } </results>'
orderbylocal-39;PRSC Error: Failed to parse query '<results> { for $x in (100000000000000000,10000000000000000,1000000000000000,100000000000000,10000000000000,1000000000000,100000000000,10000000000,1000000000,100000000,10000000,1000000,100000,10000,1000,100,10,1,0) order by string($x) ascending return string($x) } </results>'
orderbylocal-4;PRSC Error: Failed to parse query '<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String","I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String","U String","V String","W String","X String","Y String","Z String") order by concat(xs:string($x),"()") descending return concat(xs:string($x),"()") } </results>'
orderbylocal-40;PRSC Error: Failed to parse query '<results> { for $x in (0.000000000000000001,0.00000000000000001,0.0000000000000001,0.000000000000001,0.00000000000001,0.0000000000001,0.000000000001,0.00000000001,0.0000000001,0.000000001,0.00000001,0.0000001,0.000001,0.00001,0.0001,0.001,0.01,0.1,0.0) order by $x ascending return $x } </results>'
orderbylocal-41;PRSC Error: Failed to parse query '<results> { for $x in (0.000000000000000001,0.00000000000000001,0.0000000000000001,0.000000000000001,0.00000000000001,0.0000000000001,0.000000000001,0.00000000001,0.0000000001,0.000000001,0.00000001,0.0000001,0.000001,0.00001,0.0001,0.001,0.01,0.1,0.0) order by xs:decimal($x) descending return xs:decimal($x) } </results>'
orderbylocal-42;PRSC Error: Failed to parse query '<results> { for $x in (0.000000000000000001,0.00000000000000001,0.0000000000000001,0.000000000000001,0.00000000000001,0.0000000000001,0.000000000001,0.00000000001,0.0000000001,0.000000001,0.00000001,0.0000001,0.000001,0.00001,0.0001,0.001,0.01,0.1,0.0) order by (xs:decimal($x) + xs:decimal($x)) descending return xs:decimal($x) + xs:decimal($x) } </results>'
orderbylocal-43;PRSC Error: Failed to parse query '<results>{ for $x in (<a>0.000000000000000001</a>,<a>0.00000000000000001</a>,<a>0.0000000000000001</a>,<a>0.000000000000001</a>,<a>0.00000000000001</a>,<a>0.0000000000001</a>,<a>0.000000000001</a>,<a>0.00000000001</a>,<a>0.0000000001</a>,<a>0.000000001</a>,<a>0.00000001</a>,<a>0.0000001</a>,<a>0.000001</a>,<a>0.00001</a>,<a>0.0001</a>,<a>0.001</a>,<a>0.01</a>,<a>0.1</a>,<a>0.0</a>) order by $x is $x ascending return $x is $x}</results>'
orderbylocal-44;PRSC Error: Failed to parse query '<results>{ for $x in (<a>0.000000000000000001</a>,<a>0.00000000000000001</a>,<a>0.0000000000000001</a>,<a>0.000000000000001</a>,<a>0.00000000000001</a>,<a>0.0000000000001</a>,<a>0.000000000001</a>,<a>0.00000000001</a>,<a>0.0000000001</a>,<a>0.000000001</a>,<a>0.00000001</a>,<a>0.0000001</a>,<a>0.000001</a>,<a>0.00001</a>,<a>0.0001</a>,<a>0.001</a>,<a>0.01</a>,<a>0.1</a>,<a>0.0</a>) order by $x is $x descending return $x is $x }</results>'
orderbylocal-45;PRSC Error: Failed to parse query '<results> { for $x in (0.000000000000000001,0.00000000000000001,0.0000000000000001,0.000000000000001,0.00000000000001,0.0000000000001,0.000000000001,0.00000000001,0.0000000001,0.000000001,0.00000001,0.0000001,0.000001,0.00001,0.0001,0.001,0.01,0.1,0.0) order by xs:float($x) descending return xs:float($x) } </results>'
orderbylocal-46;PRSC Error: Failed to parse query '<results> { for $x in (0.000000000000000001,0.00000000000000001,0.0000000000000001,0.000000000000001,0.00000000000001,0.0000000000001,0.000000000001,0.00000000001,0.0000000001,0.000000001,0.00000001,0.0000001,0.000001,0.00001,0.0001,0.001,0.01,0.1,0.0) order by xs:decimal($x) descending return xs:decimal($x) } </results>'
orderbylocal-47;PRSC Error: Failed to parse query '<results> { for $x in (0.000000000000000001,0.00000000000000001,0.0000000000000001,0.000000000000001,0.00000000000001,0.0000000000001,0.000000000001,0.00000000001,0.0000000001,0.000000001,0.00000001,0.0000001,0.000001,0.00001,0.0001,0.001,0.01,0.1,0.0) order by xs:double($x) descending return xs:double($x) } </results>'
orderbylocal-49;PRSC Error: Failed to parse query '<results> { for $x in (0.000000000000000001,0.00000000000000001,0.0000000000000001,0.000000000000001,0.00000000000001,0.0000000000001,0.000000000001,0.00000000001,0.0000000001,0.000000001,0.00000001,0.0000001,0.000001,0.00001,0.0001,0.001,0.01,0.1,0.0) order by string($x) ascending return string($x) } </results>'
orderbylocal-5;PRSC Error: Failed to parse query '<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String","I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String","U String","V String","W String","X String","Y String","Z String") order by concat(xs:string($x),"another String After") ascending return concat(xs:string($x),"another String After") } </results>'
orderbylocal-50;PRSC Error: Failed to parse query '<results> { for $x in (-0.000000000000000001,-0.00000000000000001,-0.0000000000000001,-0.000000000000001,-0.00000000000001,-0.0000000000001,-0.000000000001,-0.00000000001,-0.0000000001,-0.000000001,-0.00000001,-0.0000001,-0.000001,-0.00001,-0.0001,-0.001,-0.01,-0.0,-0.1) order by xs:decimal($x) ascending return xs:decimal($x) } </results>'
orderbylocal-51;PRSC Error: Failed to parse query '<results> { for $x in (-0.000000000000000001,-0.00000000000000001,-0.0000000000000001,-0.000000000000001,-0.00000000000001,-0.0000000000001,-0.000000000001,-0.00000000001,-0.0000000001,-0.000000001,-0.00000001,-0.0000001,-0.000001,-0.00001,-0.0001,-0.001,-0.01,-0.0,-0.1) order by xs:decimal($x) descending return xs:decimal($x) } </results>'
orderbylocal-52;PRSC Error: Failed to parse query '<results> { for $x in (-0.000000000000000001,-0.00000000000000001,-0.0000000000000001,-0.000000000000001,-0.00000000000001,-0.0000000000001,-0.000000000001,-0.00000000001,-0.0000000001,-0.000000001,-0.00000001,-0.0000001,-0.000001,-0.00001,-0.0001,-0.001,-0.01,-0.0,-0.1) order by (xs:decimal($x) + xs:decimal($x)) descending return xs:decimal($x) + xs:decimal($x) } </results>'
orderbylocal-55;PRSC Error: Failed to parse query '<results> { for $x in (-0.000000000000000001,-0.00000000000000001,-0.0000000000000001,-0.000000000000001,-0.00000000000001,-0.0000000000001,-0.000000000001,-0.00000000001,-0.0000000001,-0.000000001,-0.00000001,-0.0000001,-0.000001,-0.00001,-0.0001,-0.001,-0.01,-0.0,-0.1) order by xs:float($x) descending return xs:float($x) } </results>'
orderbylocal-56;PRSC Error: Failed to parse query '<results> { for $x in (-0.000000000000000001,-0.00000000000000001,-0.0000000000000001,-0.000000000000001,-0.00000000000001,-0.0000000000001,-0.000000000001,-0.00000000001,-0.0000000001,-0.000000001,-0.00000001,-0.0000001,-0.000001,-0.00001,-0.0001,-0.001,-0.01,-0.0,-0.1) order by xs:decimal($x) descending return xs:decimal($x) } </results>'
orderbylocal-57;PRSC Error: Failed to parse query '<results> { for $x in (-0.000000000000000001,-0.00000000000000001,-0.0000000000000001,-0.000000000000001,-0.00000000000001,-0.0000000000001,-0.000000000001,-0.00000000001,-0.0000000001,-0.000000001,-0.00000001,-0.0000001,-0.000001,-0.00001,-0.0001,-0.001,-0.01,-0.0,-0.1) order by xs:double($x) descending return xs:double($x) } </results>'
orderbylocal-59;PRSC Error: Failed to parse query '<results> { for $x in (-0.000000000000000001,-0.00000000000000001,-0.0000000000000001,-0.000000000000001,-0.00000000000001,-0.0000000000001,-0.000000000001,-0.00000000001,-0.0000000001,-0.000000001,-0.00000001,-0.0000001,-0.000001,-0.00001,-0.0001,-0.001,-0.01,-0.0,-0.1) order by string($x) ascending return string($x) } </results>'
orderbylocal-6;PRSC Error: Failed to parse query '<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String","I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String","U String","V String","W String","X String","Y String","Z String") order by concat(xs:string($x),"another String After") descending return concat(xs:string($x),"another String After") } </results>'
orderbylocal-60;Expected error code: XQST0076. Found error code: XPST0003 with error message: Use of XQuery FLWOR expressions in XPath is not allowed
orderbylocal-7;PRSC Error: Failed to parse query '<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String","I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String","U String","V String","W String","X String","Y String","Z String") order by concat("another String Before",xs:string($x)) ascending return concat("another String Before",xs:string($x)) } </results>'
orderbylocal-8;PRSC Error: Failed to parse query '<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String","I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String","U String","V String","W String","X String","Y String","Z String") order by concat("another String Before",xs:string($x)) descending return concat("another String Before",xs:string($x)) } </results>'
orderbylocal-9;PRSC Error: Failed to parse query '<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String","I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String","U String","V String","W String","X String","Y String","Z String") order by concat(xs:string($x),"") descending return concat(xs:string($x),"") } </results>'
orderbywithout-1;PRSC Error: Failed to parse query '<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String","I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String","U String","V String","W String","X String","Y String","Z String") order by xs:string($x) return xs:string($x) } </results>'
orderbywithout-10;PRSC Error: Failed to parse query '<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String","I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String","U String","V String","W String","X String","Y String","Z String") order by count(xs:string($x)) return count(xs:string($x)) } </results>'
orderbywithout-11;PRSC Error: Failed to parse query '<results> { for $x in (-100000000000000000,-10000000000000000,-1000000000000000,-100000000000000,-10000000000000,-1000000000000,-100000000000,-10000000000,-1000000000,-100000000,-10000000,-1000000,-100000,-10000,-1000,-100,-10,-1,-0) order by xs:decimal($x) return xs:decimal($x) } </results>'
orderbywithout-12;PRSC Error: Failed to parse query '<results> { for $x in (-100000000000000000,-10000000000000000,-1000000000000000,-100000000000000,-10000000000000,-1000000000000,-100000000000,-10000000000,-1000000000,-100000000,-10000000,-1000000,-100000,-10000,-1000,-100,-10,-1,-0) order by (xs:decimal($x) + xs:decimal($x)) return xs:decimal($x) + xs:decimal($x) } </results>'
orderbywithout-13;PRSC Error: Failed to parse query '<results> { for $x in (<orderData>-100000000000000000</orderData>,<orderData>-10000000000000000</orderData>,<orderData>-1000000000000000</orderData>,<orderData>-100000000000000</orderData>, <orderData>-10000000000000</orderData>,<orderData>-1000000000000</orderData>,<orderData>-100000000000</orderData>,<orderData>-10000000000</orderData>,<orderData>-1000000000</orderData>, <orderData>-100000000</orderData>,<orderData>-10000000</orderData>,<orderData>-1000000</orderData>,<orderData>-100000</orderData>,<orderData>-10000</orderData>,<orderData>-1000</orderData>, <orderData>-100</orderData>,<orderData>-10</orderData>,<orderData>-1</orderData>,<orderData>-0</orderData>) order by $x is $x return $x is $x } </results>'
orderbywithout-14;PRSC Error: Failed to parse query '<results> { for $x in (-100000000000000000,-10000000000000000,-1000000000000000,-100000000000000,-10000000000000,-1000000000000,-100000000000,-10000000000,-1000000000,-100000000,-10000000,-1000000,-100000,-10000,-1000,-100,-10,-1,-0) order by xs:float($x) return xs:float($x) } </results>'
orderbywithout-15;PRSC Error: Failed to parse query '<results> { for $x in (-100000000000000000,-10000000000000000,-1000000000000000,-100000000000000,-10000000000000,-1000000000000,-100000000000,-10000000000,-1000000000,-100000000,-10000000,-1000000,-100000,-10000,-1000,-100,-10,-1,-0) order by xs:double($x) return xs:double($x) } </results>'
orderbywithout-16;PRSC Error: Failed to parse query '<results> { for $x in (-100000000000000000,-10000000000000000,-1000000000000000,-100000000000000,-10000000000000,-1000000000000,-100000000000,-10000000000,-1000000000,-100000000,-10000000,-1000000,-100000,-10000,-1000,-100,-10,-1,-0) order by xs:integer($x) return xs:integer($x) } </results>'
orderbywithout-17;PRSC Error: Failed to parse query '<results> { for $x in (-100000000000000000,-10000000000000000,-1000000000000000,-100000000000000,-10000000000000,-1000000000000,-100000000000,-10000000000,-1000000000,-100000000,-10000000,-1000000,-100000,-10000,-1000,-100,-10,-1,-0) order by (xs:decimal($x) * -1) return (xs:decimal($x) * -1) } </results>'
orderbywithout-18;PRSC Error: Failed to parse query '<results> { for $x in (100000000000000000,10000000000000000,1000000000000000,100000000000000,10000000000000,1000000000000,100000000000,10000000000,1000000000,100000000,10000000,1000000,100000,10000,1000,100,10,1,0) order by xs:decimal($x) return xs:decimal($x) } </results>'
orderbywithout-19;PRSC Error: Failed to parse query '<results> { for $x in (100000000000000000,10000000000000000,1000000000000000,100000000000000,10000000000000,1000000000000,100000000000,10000000000,1000000000,100000000,10000000,1000000,100000,10000,1000,100,10,1,0) order by (xs:decimal($x) + xs:decimal($x)) return xs:decimal($x) + xs:decimal($x) } </results>'
orderbywithout-2;PRSC Error: Failed to parse query '<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String","I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String","U String","V String","W String","X String","Y String","Z String") order by concat(xs:string($x),"()") return concat(xs:string($x),"()") } </results>'
orderbywithout-20;PRSC Error: Failed to parse query '<results> { for $x in (<orderData>100000000000000000</orderData>,<orderData>10000000000000000</orderData>,<orderData>1000000000000000</orderData>, <orderData>100000000000000</orderData>,<orderData>10000000000000</orderData>,<orderData>1000000000000</orderData>,<orderData>100000000000</orderData>, <orderData>10000000000</orderData>,<orderData>1000000000</orderData>,<orderData>100000000</orderData>,<orderData>10000000</orderData>, <orderData>1000000</orderData>,<orderData>100000</orderData>,<orderData>10000</orderData>,<orderData>1000</orderData>,<orderData>100</orderData>, <orderData>10</orderData>,<orderData>1</orderData>,<orderData>0</orderData>) order by $x is $x return $x is $x } </results>'
orderbywithout-21;PRSC Error: Failed to parse query '<results> { for $x in (100000000000000000,10000000000000000,1000000000000000,100000000000000,10000000000000,1000000000000,100000000000,10000000000,1000000000,100000000,10000000,1000000,100000,10000,1000,100,10,1,0) order by xs:float($x) return xs:float($x) } </results>'
orderbywithout-22;PRSC Error: Failed to parse query '<results> { for $x in (100000000000000000,10000000000000000,1000000000000000,100000000000000,10000000000000,1000000000000,100000000000,10000000000,1000000000,100000000,10000000,1000000,100000,10000,1000,100,10,1,0) order by xs:decimal($x) return xs:decimal($x) } </results>'
orderbywithout-23;PRSC Error: Failed to parse query '<results> { for $x in (100000000000000000,10000000000000000,1000000000000000,100000000000000,10000000000000,1000000000000,100000000000,10000000000,1000000000,100000000,10000000,1000000,100000,10000,1000,100,10,1,0) order by xs:double($x) return xs:double($x) } </results>'
orderbywithout-24;PRSC Error: Failed to parse query '<results> { for $x in (100000000000000000,10000000000000000,1000000000000000,100000000000000,10000000000000,1000000000000,100000000000,10000000000,1000000000,100000000,10000000,1000000,100000,10000,1000,100,10,1,0) order by xs:integer($x) return xs:integer($x) } </results>'
orderbywithout-25;PRSC Error: Failed to parse query '<results> { for $x in (100000000000000000,10000000000000000,1000000000000000,100000000000000,10000000000000,1000000000000,100000000000,10000000000,1000000000,100000000,10000000,1000000,100000,10000,1000,100,10,1,0) order by string($x) return string($x) } </results>'
orderbywithout-26;PRSC Error: Failed to parse query '<results> { for $x in (0.000000000000000001,0.00000000000000001,0.0000000000000001,0.000000000000001,0.00000000000001,0.0000000000001,0.000000000001,0.00000000001,0.0000000001,0.000000001,0.00000001,0.0000001,0.000001,0.00001,0.0001,0.001,0.01,0.1,0.0) order by $x return $x } </results>'
orderbywithout-27;PRSC Error: Failed to parse query '<results> { for $x in (0.000000000000000001,0.00000000000000001,0.0000000000000001,0.000000000000001,0.00000000000001,0.0000000000001,0.000000000001,0.00000000001,0.0000000001,0.000000001,0.00000001,0.0000001,0.000001,0.00001,0.0001,0.001,0.01,0.1,0.0) order by xs:decimal($x) return xs:decimal($x) } </results>'
orderbywithout-28;PRSC Error: Failed to parse query '<results> { for $x in (0.000000000000000001,0.00000000000000001,0.0000000000000001,0.000000000000001,0.00000000000001,0.0000000000001,0.000000000001,0.00000000001,0.0000000001,0.000000001,0.00000001,0.0000001,0.000001,0.00001,0.0001,0.001,0.01,0.1,0.0) order by (xs:decimal($x) + xs:decimal($x)) return xs:decimal($x) + xs:decimal($x) } </results>'
orderbywithout-29;PRSC Error: Failed to parse query '<results> { for $x in (<orderData>0.000000000000000001</orderData>,<orderData>0.00000000000000001</orderData>,<orderData>0.0000000000000001</orderData>,<orderData>0.000000000000001</orderData>, <orderData>0.00000000000001</orderData>,<orderData>0.0000000000001</orderData>,<orderData>0.000000000001</orderData>,<orderData>0.00000000001</orderData>,<orderData>0.0000000001</orderData>, <orderData>0.000000001</orderData>,<orderData>0.00000001</orderData>,<orderData>0.0000001</orderData>,<orderData>0.000001</orderData>,<orderData>0.00001</orderData>, <orderData>0.0001</orderData>,<orderData>0.001</orderData>,<orderData>0.01</orderData>,<orderData>0.1</orderData>,<orderData>0.0</orderData>) order by $x is $x return $x is $x } </results>'
orderbywithout-3;PRSC Error: Failed to parse query '<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String","I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String","U String","V String","W String","X String","Y String","Z String") order by concat(xs:string($x),"another String After") return concat(xs:string($x),"another String After") } </results>'
orderbywithout-30;PRSC Error: Failed to parse query '<results> { for $x in (0.000000000000000001,0.00000000000000001,0.0000000000000001,0.000000000000001,0.00000000000001,0.0000000000001,0.000000000001,0.00000000001,0.0000000001,0.000000001,0.00000001,0.0000001,0.000001,0.00001,0.0001,0.001,0.01,0.1,0.0) order by xs:float($x) return xs:float($x) } </results>'
orderbywithout-31;PRSC Error: Failed to parse query '<results> { for $x in (0.000000000000000001,0.00000000000000001,0.0000000000000001,0.000000000000001,0.00000000000001,0.0000000000001,0.000000000001,0.00000000001,0.0000000001,0.000000001,0.00000001,0.0000001,0.000001,0.00001,0.0001,0.001,0.01,0.1,0.0) order by xs:decimal($x) return xs:decimal($x) } </results>'
orderbywithout-32;PRSC Error: Failed to parse query '<results> { for $x in (0.000000000000000001,0.00000000000000001,0.0000000000000001,0.000000000000001,0.00000000000001,0.0000000000001,0.000000000001,0.00000000001,0.0000000001,0.000000001,0.00000001,0.0000001,0.000001,0.00001,0.0001,0.001,0.01,0.1,0.0) order by xs:double($x) return xs:double($x) } </results>'
orderbywithout-33;PRSC Error: Failed to parse query '<results> { for $x in (0.000000000000000001,0.00000000000000001,0.0000000000000001,0.000000000000001,0.00000000000001,0.0000000000001,0.000000000001,0.00000000001,0.0000000001,0.000000001,0.00000001,0.0000001,0.000001,0.00001,0.0001,0.001,0.01,0.1,0.0) order by string($x) return string($x) } </results>'
orderbywithout-34;PRSC Error: Failed to parse query '<results> { for $x in (-0.000000000000000001,-0.00000000000000001,-0.0000000000000001,-0.000000000000001,-0.00000000000001,-0.0000000000001,-0.000000000001,-0.00000000001,-0.0000000001,-0.000000001,-0.00000001,-0.0000001,-0.000001,-0.00001,-0.0001,-0.001,-0.01,-0.0,-0.1) order by xs:decimal($x) return xs:decimal($x) } </results>'
orderbywithout-35;PRSC Error: Failed to parse query '<results> { for $x in (-0.000000000000000001,-0.00000000000000001,-0.0000000000000001,-0.000000000000001,-0.00000000000001,-0.0000000000001,-0.000000000001,-0.00000000001,-0.0000000001,-0.000000001,-0.00000001,-0.0000001,-0.000001,-0.00001,-0.0001,-0.001,-0.01,-0.0,-0.1) order by (xs:decimal($x) + xs:decimal($x)) return xs:decimal($x) + xs:decimal($x) } </results>'
orderbywithout-36;PRSC Error: Failed to parse query '<results> { for $x in (<orderData>-0.000000000000000001</orderData>,<orderData>-0.00000000000000001</orderData>,<orderData>-0.0000000000000001</orderData>,<orderData>-0.000000000000001</orderData>,<orderData>-0.00000000000001</orderData>,<orderData>-0.0000000000001</orderData>, <orderData>-0.000000000001</orderData>,<orderData>-0.00000000001</orderData>,<orderData>-0.0000000001</orderData>,<orderData>-0.000000001</orderData>, <orderData>-0.00000001</orderData>,<orderData>-0.0000001</orderData>,<orderData>-0.000001</orderData>,<orderData>-0.00001</orderData>,<orderData>-0.0001</orderData>,<orderData>-0.001</orderData>,<orderData>-0.01</orderData>,<orderData>-0.0</orderData>, <orderData>-0.1</orderData>) order by $x is $x return $x is $x } </results>'
orderbywithout-37;PRSC Error: Failed to parse query '<results> { for $x in (-0.000000000000000001,-0.00000000000000001,-0.0000000000000001,-0.000000000000001,-0.00000000000001,-0.0000000000001,-0.000000000001,-0.00000000001,-0.0000000001,-0.000000001,-0.00000001,-0.0000001,-0.000001,-0.00001,-0.0001,-0.001,-0.01,-0.0,-0.1) order by xs:float($x) return xs:float($x) } </results>'
orderbywithout-38;PRSC Error: Failed to parse query '<results> { for $x in (-0.000000000000000001,-0.00000000000000001,-0.0000000000000001,-0.000000000000001,-0.00000000000001,-0.0000000000001,-0.000000000001,-0.00000000001,-0.0000000001,-0.000000001,-0.00000001,-0.0000001,-0.000001,-0.00001,-0.0001,-0.001,-0.01,-0.0,-0.1) order by xs:decimal($x) return xs:decimal($x) } </results>'
orderbywithout-39;PRSC Error: Failed to parse query '<results> { for $x in (-0.000000000000000001,-0.00000000000000001,-0.0000000000000001,-0.000000000000001,-0.00000000000001,-0.0000000000001,-0.000000000001,-0.00000000001,-0.0000000001,-0.000000001,-0.00000001,-0.0000001,-0.000001,-0.00001,-0.0001,-0.001,-0.01,-0.0,-0.1) order by xs:double($x) return xs:double($x) } </results>'
orderbywithout-4;PRSC Error: Failed to parse query '<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String","I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String","U String","V String","W String","X String","Y String","Z String") order by concat("another String Before",xs:string($x)) return concat("another String Before",xs:string($x)) } </results>'
orderbywithout-40;PRSC Error: Failed to parse query '<results> { for $x in (-0.000000000000000001,-0.00000000000000001,-0.0000000000000001,-0.000000000000001,-0.00000000000001,-0.0000000000001,-0.000000000001,-0.00000000001,-0.0000000001,-0.000000001,-0.00000001,-0.0000001,-0.000001,-0.00001,-0.0001,-0.001,-0.01,-0.0,-0.1) order by string($x) return string($x) } </results>'
orderbywithout-5;PRSC Error: Failed to parse query '<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String","I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String","U String","V String","W String","X String","Y String","Z String") order by concat(xs:string($x),"") return concat(xs:string($x),"") } </results>'
orderbywithout-6;PRSC Error: Failed to parse query '<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String","I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String","U String","V String","W String","X String","Y String","Z String") order by concat("",xs:string($x)) return concat("",xs:string($x)) } </results>'
orderbywithout-7;PRSC Error: Failed to parse query '<results> { for $x in (<a>A String</a>,<a>B String</a>,<a>C String</a>,<a>D String</a>,<a>E String</a>,<a>F String</a>,<a>G String</a>,<a>H String</a>,<a>I String</a>, <a>J String</a>,<a>K String</a>,<a>L String</a>,<a>M String</a>,<a>N String</a>,<a>O String</a>,<a>P String</a>,<a>R String</a>,<a>S String</a>,<a>T String</a>, <a>U String</a>,<a>V String</a>,<a>W String</a>,<a>X String</a>,<a>Y String</a>,<a>Z String</a>) order by $x is $x return $x is $x } </results>'
orderbywithout-8;PRSC Error: Failed to parse query '<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String","I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String","U String","V String","W String","X String","Y String","Z String") order by concat(xs:string($x),xs:string($x)) return concat(xs:string($x),xs:string($x)) } </results>'
orderbywithout-9;PRSC Error: Failed to parse query '<results> { for $x in (<a>A String</a>,<a>B String</a>,<a>C String</a>,<a>D String</a>,<a>E String</a>,<a>F String</a>,<a>G String</a>,<a>H String</a>,<a>I String</a>, <a>J String</a>,<a>K String</a>,<a>L String</a>,<a>M String</a>,<a>N String</a>,<a>O String</a>,<a>P String</a>,<a>R String</a>,<a>S String</a>,<a>T String</a>, <a>U String</a>,<a>V String</a>,<a>W String</a>,<a>X String</a>,<a>Y String</a>,<a>Z String</a>) order by string-length($x) return string-length($x) } </results>'
orderDecl-1;Expected error code: XQST0065. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare ordering unordered; declare ordering ordered; "aa"'
orderDecl-10;PRSC Error: Failed to parse query 'declare ordering ordered; for $x in //hours order by $x ascending return $x'
orderDecl-11;PRSC Error: Failed to parse query 'declare ordering unordered; for $x in //hours order by $x descending return $x'
orderDecl-12;PRSC Error: Failed to parse query 'declare ordering unordered; for $x in //hours order by $x ascending return $x'
orderDecl-13;PRSC Error: Failed to parse query 'declare ordering ordered; for $x in (/works/employee/hours) return $x'
orderdecl-14;Expected executing the XPath 'declare ordering unordered; for $x in (/works/employee[4]/hours) return $x' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare ordering unordered; for $x in (/works/employee[4]/hours) return $x'
orderDecl-15;PRSC Error: Failed to parse query 'declare ordering ordered; for $x in (//day) return $x'
orderDecl-16;Expected executing the XPath 'declare ordering unordered; for $x in (//day) return $x' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare ordering unordered; for $x in (//day) return $x'
orderDecl-17;PRSC Error: Failed to parse query 'declare ordering unordered; ordered { for $x in /works//day return $x }'
orderDecl-18;Expected executing the XPath 'declare ordering ordered; unordered { for $x in /works//day return $x }' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare ordering ordered; unordered { for $x in /works//day return $x }'
orderDecl-2;PRSC Error: Failed to parse query 'declare ordering ordered; let $a := <a><b>1</b><c>2</c></a> return $a/b union $a/c'
orderDecl-20;PRSC Error: Failed to parse query 'declare ordering ordered; for $x in /works//overtime return $x/child::day'
orderDecl-21;PRSC Error: Failed to parse query 'declare ordering ordered; for $x in /works//day[1] return $x/parent::node()'
orderDecl-22;Expected executing the XPath 'declare ordering ordered; for $x in /works//day[1] return $x/following::day' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare ordering ordered; for $x in /works//day[1] return $x/following::day'
orderDecl-23;PRSC Error: Failed to parse query 'declare ordering ordered; for $x in /works//overtime return $x/descendant::day'
orderdecl-3;Expected executing the XPath 'declare ordering unordered; (<a>1</a>) union (<b>2</b>)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare ordering unordered; (<a>1</a>) union (<b>2</b>)'
orderDecl-4;PRSC Error: Failed to parse query 'declare ordering ordered; (//overtime) intersect (//overtime)'
orderdecl-5;PRSC Error: Failed to parse query 'declare ordering unordered; (//overtime) intersect (//overtime)'
orderdecl-6;PRSC Error: Failed to parse query 'declare ordering ordered; (//employee[1]) except (//employee[2])'
orderDecl-7;PRSC Error: Failed to parse query 'declare ordering unordered; (//employee[1]) except (//employee[2])'
orderDecl-8;PRSC Error: Failed to parse query 'declare ordering ordered; for $x in //hours return $x'
orderDecl-9;PRSC Error: Failed to parse query 'declare ordering ordered; for $x in //hours order by $x descending return $x'
orderedunorderedexpr-1;PRSC Error: Failed to parse query 'ordered {if (fn:true()) then (0,1,2,3,4) else ("A","B","C")}'
orderedunorderedexpr-2;PRSC Error: Failed to parse query 'ordered {if (1 eq 1 and 2 eq 2) then (0,1,2,3,4) else ("a","b")}'
orderedunorderedexpr-3;PRSC Error: Failed to parse query 'ordered {if (1 eq 1 or 2 eq 3) then (0,1,2,3,4) else ("a","b")}'
orderedunorderedexpr-4;PRSC Error: Failed to parse query 'ordered {if (some $x in (1, 2, 3), $y in (2, 3, 4) satisfies $x + $y = 4) then (0,1,2,3,4) else ("a","b")}'
orderedunorderedexpr-5;PRSC Error: Failed to parse query 'ordered {if (every $x in (1, 2, 3) satisfies $x < 4) then (0,1,2,3,4) else ("a","b")}'
orderedunorderedexpr-6;PRSC Error: Failed to parse query 'ordered {typeswitch(123) case $i as xs:string return ("a","b","c") case $i as xs:double return ("a","b","c") case $i as xs:integer return (1,2,3,4) default return ("a","b","c") }'
Orderexpr-1;PRSC Error: Failed to parse query 'ordered {//part[@partid < 2]}'
Orderexpr-10;PRSC Error: Failed to parse query '(unordered {//part[@partof = 1] union //part[@partid = 1] }) => count()'
Orderexpr-11;PRSC Error: Failed to parse query 'ordered {//part[@partof < 2] intersect //part[@partid = 1 or @partid > 2] }'
Orderexpr-12;Expected executing the XPath 'unordered {//part[@partof < 2] intersect //part[@partid = 1 or @partid > 2] }' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'unordered {//part[@partof < 2] intersect //part[@partid = 1 or @partid > 2] }'
Orderexpr-13;PRSC Error: Failed to parse query 'ordered {//part[@partof < 2] except //part[@partid = 2] }'
Orderexpr-14;Expected executing the XPath 'unordered {//part[@partof < 2] except //part[@partid = 2] }' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'unordered {//part[@partof < 2] except //part[@partid = 2] }'
Orderexpr-15;PRSC Error: Failed to parse query 'ordered {fn:subsequence((1,2,3,4),2,2)}'
Orderexpr-16;Expected executing the XPath 'unordered {fn:subsequence((1,2,3,4),2,2)}' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'unordered {fn:subsequence((1,2,3,4),2,2)}'
Orderexpr-17;PRSC Error: Failed to parse query 'ordered {fn:reverse((3,2))}'
Orderexpr-18;Expected executing the XPath 'unordered {fn:reverse((2,3))}' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'unordered {fn:reverse((2,3))}'
Orderexpr-19;PRSC Error: Failed to parse query 'ordered { for $i in (//part[@partid = 1], //part[@partid = 2]), $j in (//part[@partof = $i/@partid]) where ($i/@partid + $j/@partid) < 7 return $i/@partid + $j/@partid }'
Orderexpr-2;Expected executing the XPath 'unordered {//part[@partid < 2]}' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'unordered {//part[@partid < 2]}'
Orderexpr-20;Expected executing the XPath 'unordered { for $i in (//part[@partid = 1], //part[@partid = 2]), $j in (//part[@partof = $i/@partid]) where ($i/@partid + $j/@partid) < 7 return $i/@partid + $j/@partid }' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'unordered { for $i in (//part[@partid = 1], //part[@partid = 2]), $j in (//part[@partof = $i/@partid]) where ($i/@partid + $j/@partid) < 7 return $i/@partid + $j/@partid }'
Orderexpr-5;PRSC Error: Failed to parse query 'ordered {//part[@partid < 2][2]}'
Orderexpr-6;Expected executing the XPath 'unordered {//part[@partid < 2][2]}' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'unordered {//part[@partid < 2][2]}'
Orderexpr-9;PRSC Error: Failed to parse query '(ordered {//part[@partof = 1] union //part[@partid = 1] }) => count()'
outer-001;PRSC Error: Failed to parse query '\n        declare variable $n as xs:integer external := 10; \n        <out>{ for $x allowing empty in 1 to $n return <a>{$x}</a> }</out>\n      '
outer-002;PRSC Error: Failed to parse query '\n        declare variable $n as xs:integer external := 0; \n        <out>{ for $x allowing empty in 1 to $n return <a>{$x}</a> }</out>\n      '
outer-003;PRSC Error: Failed to parse query '\n        declare variable $n as xs:integer external := 10; \n        <out>{ for $x allowing empty at $p in 1 to $n return <a position="{$p}">{$x}</a> }</out>\n      '
outer-004;PRSC Error: Failed to parse query '\n        declare variable $n as xs:integer external := 0; \n        <out>{ for $x allowing empty at $p in 1 to $n return <a position="{$p}">{$x}</a> }</out>\n      '
outer-005;PRSC Error: Failed to parse query '\n        declare variable $n as xs:integer external := 10;\n        <out>{ string-join(for $x allowing empty in 1 to $n return concat('[',$x,']'), '|') }</out>'
outer-006;PRSC Error: Failed to parse query '\n        declare variable $n as xs:integer external := 0; \n        <out>{ string-join(for $x allowing empty in 1 to $n return concat('[',$x,']'), '|') }</out>\n      '
outer-007;PRSC Error: Failed to parse query '\n        declare variable $m as xs:integer external := 5; \n        declare variable $n as xs:integer external := 5;\n         <out>{ for $x allowing empty at $p in 1 to $m, $y at $q in 1 to $n return <a p="{$p}" q="{$q}">{$x},{$y}</a> }</out>\n      '
outer-008;PRSC Error: Failed to parse query '\n        declare variable $m as xs:integer external := 5; \n        declare variable $n as xs:integer external := 0; \n        <out>{ for $x allowing empty at $p in 1 to $m, $y allowing empty at $q in 1 to $n return <a p="{$p}" q="{$q}">{$x},{$y}</a> }</out>\n      '
outer-009;PRSC Error: Failed to parse query '\n        declare variable $m as xs:integer external := 0; \n        declare variable $n as xs:integer external := 5; \n        <out>{ for $x allowing empty at $p in 1 to $m, $y at $q in 1 to $n return <a p="{$p}" q="{$q}">{$x},{$y}</a> }</out>'
outer-010;PRSC Error: Failed to parse query '\n        declare variable $m as xs:integer external := 0; \n        declare variable $n as xs:integer external := 0; \n        <out>{ for $x allowing empty at $p in 1 to $m, \n                   $y allowing empty at $q in 1 to $n return <a p="{$p}" q="{$q}">{$x},{$y}</a> }</out>\n      '
outer-011;PRSC Error: Failed to parse query '\n        declare variable $n as xs:integer external := 5; \n        <out>{ for $x allowing empty at $p in 1 to $n, $y allowing empty at $q in ($x+1) to $n return <a p="{$p}" q="{$q}">{$x},{$y}</a> }</out>\n      '
outer-012;PRSC Error: Failed to parse query '\n        declare variable $n as xs:integer external := 5; \n        <out>{ \n            for $x as xs:integer allowing empty at $p in 1 to $n, \n                $y as xs:integer? allowing empty at $q in ($x+1) to $n \n            return <a p="{$p}" q="{$q}">{$x},{$y}</a> }</out>\n      '
outer-013;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare variable $n as xs:integer external := 5; \n        <out>{ for $x as xs:integer allowing empty at $p in 1 to $n, \n                   $y as xs:integer allowing empty at $q in ($x+1) to $n \n               return <a p="{$p}" q="{$q}">{$x},{$y}</a> }</out>\n      '
outer-014;PRSC Error: Failed to parse query '\n        declare variable $n as xs:integer external := 5; \n        <out>{ for $x as xs:integer at $p in 1 to $n \n               for $y as xs:integer? allowing empty at $q in ($x+1) to $n \n               return <a p="{$p}" q="{$q}">{$x},{$y}</a> }</out>\n      '
outer-015;PRSC Error: Failed to parse query '\n        declare variable $n as xs:integer external := 5; \n        <out>{ for $x as xs:integer? allowing empty at $p in 1 to $n \n               for $y as xs:integer at $q in (if (empty($x)) then 0 else (1 to $x)) \n               return <a p="{$p}" q="{$q}">{$x},{$y}</a> }</out>\n      '
outer-016;PRSC Error: Failed to parse query '\n        declare variable $n as xs:integer external := 0; \n        <out>{ for $x as xs:integer? allowing empty at $p in 1 to $n \n               for $y as xs:integer at $q in (if (empty($x)) then 0 else (1 to $x)) \n               return <a p="{$p}" q="{$q}">{$x},{$y}</a> }</out>\n      '
outer-017;PRSC Error: Failed to parse query '\n        declare variable $n as xs:integer external := 5; \n        <out>{ for $x as xs:integer? allowing empty at $p in 1 to $n \n               for $y as xs:integer? allowing empty at $q in (if (empty($x)) then () else (1 to $x)) \n               where deep-equal($x,$y) \n               return <a p="{$p}" q="{$q}">{$x},{$y}</a> }</out>\n      '
outer-018;PRSC Error: Failed to parse query '\n        declare variable $n as xs:integer external := 0; \n        <out>{ for $x as xs:integer? allowing empty at $p in 1 to $n \n               for $y as xs:integer? allowing empty at $q in (if (empty($x)) then () else (1 to $x)) \n               where deep-equal($x,$y) return <a p="{$p}" q="{$q}">{$x},{$y}</a> }</out>\n      '
outer-019;Expected error code: FORG0005. Query succeeded with result: 
Parenexpr-11;Use of XQuery FLWOR expressions in XPath is not allowed
Parenexpr-15;PRSC Error: Failed to parse query '<elem>{//node() | (//node() except //comment())}</elem>'
Parenexpr-16;PRSC Error: Failed to parse query '<elem>{(//node() | //node()) except //comment()}</elem>'
Parenexpr-17;PRSC Error: Failed to parse query '(<elem/>)'
Parenexpr-18;PRSC Error: Failed to parse query '<elem attr="{(1)}">{(<child/>),(<child/>)}</elem>'
Parenexpr-19;Haven't implemented Qnames from: far-north:
Parenexpr-20;PRSC Error: Failed to parse query '<elem>{(//(north)/(/)//(@mark)[(1)]/(.)/(..))}</elem>'
parts-queries-results-q1;Expected executing the XPath 'declare variable $input-context := .;\n        declare function local:one_level($p as element()) as element() { \n            <part partid="{ $p/@partid }" name="{ $p/@name }" > { \n                for $s in ($input-context//part)\n                where $s/@partof = $p/@partid \n                return local:one_level($s) } </part> }; \n        <parttree> { for $p in //part[empty(@partof)] \n                     return local:one_level($p) } </parttree>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n        declare variable $input-context := .;\n        declare function local:one_level($p as element()) as element() { \n            <part partid="{ $p/@partid }" name="{ $p/@name }" > { \n                for $s in ($input-context//part)\n                where $s/@partof = $p/@partid \n                return local:one_level($s) } </part> }; \n        <parttree> { for $p in //part[empty(@partof)] \n                     return local:one_level($p) } </parttree>\n      '
path002;PRSC Error: Failed to parse query '(fn:path(/*)) instance of $xs:string'
path003;PRSC Error: Failed to parse query '(fn:path((//*:all-of)[1])) instance of $xs:string'
path004;PRSC Error: Failed to parse query '(fn:path(//*[@name="fn-absintg1args-1"])) instance of $xs:string'
path005;PRSC Error: Failed to parse query '(fn:path((//@idref)[1])) instance of $xs:string'
path006;PRSC Error: Failed to parse query '(fn:path((//*:source)[3]/@xml:id)) instance of $xs:string'
path007;PRSC Error: Failed to parse query '(fn:path((//comment())[2])) instance of $xs:string'
path008;PRSC Error: Failed to parse query '(fn:path(//text()[.='2147483647'][1])) instance of $xs:string'
path009;PRSC Error: Failed to parse query '(fn:path(//processing-instruction()[1])) instance of $xs:string'
path010;PRSC Error: Failed to parse query '(fn:path(//p)) instance of $xs:string'
path011;PRSC Error: Failed to parse query 'fn:path((//namespace::xml)[1])'
path012;PRSC Error: Failed to parse query 'fn:path((//namespace::xml)[1])'
path013;PRSC Error: Failed to parse query 'fn:path((//namespace::*[name()=''])[1])'
path014;PRSC Error: Failed to parse query '\n        import module namespace copy="http://www.w3.org/QT3/copy";\n        fn:path(copy:copy((//employee)[1])/pnum)\n      '
path015;PRSC Error: Failed to parse query '(fn:path(/)) instance of $xs:string'
path016;PRSC Error: Failed to parse query 'fn:path(attribute name {"fred"})'
path017;PRSC Error: Failed to parse query 'fn:path(text{"fred"})'
path018;PRSC Error: Failed to parse query 'fn:path(<a b="c"/>/@b)'
path019;PRSC Error: Failed to parse query 'fn:path(<a><b/><b/></a>/(b[2]))'
path020;PRSC Error: Failed to parse query '((//*:all-of)[1] ! fn:path()) instance of $xs:string'
PathExpr-1;Casting AbstractValue(XsDouble) to IntegerValue
PathExpr-14;PRSC Error: Failed to parse query 'fn:count(.[/<a/>]) = 1'
PathExpr-15;Casting AbstractValue(XsDouble) to IntegerValue
PathExpr-2;Casting AbstractValue(XsDouble) to IntegerValue
PathExpr-5;Expected error code: XPST0003. Query succeeded with result: 0
PathExpr-7;Expected error code: XPST0003. Query succeeded with result: 0
PathExpr-8;Expected error code: XPST0003. Query succeeded with result: 0
PathExpr-9;Expected error code: XPST0003. Query succeeded with result: 0
PathExprErr-2;Expected error code: XPTY0018. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '(<a>1</a>,<b>2</b>)/(if(position() eq 1) then . else data(.))'
position-2;Expected error code: XPDY0002. Query succeeded with result: 1
preceding-21;PRSC Error: Failed to parse query 'let $var := <anElement>Some Content</anElement> return fn:count($var/preceding::*) = 0'
preceding-22;PRSC Error: Failed to parse query '<result> { (//node())[last()]/preceding::node() } </result>'
preceding-23;PRSC Error: Failed to parse query '<result> { (//node())[last()]/preceding::node(), empty((//node())[last()]/preceding::node()) } </result>'
preceding-24;PRSC Error: Failed to parse query '(<a z=""/>/@*/preceding::*) => empty()'
preceding-sibling-21;PRSC Error: Failed to parse query 'let $var := <anElement>Some Content</anElement> return fn:count($var/preceding-sibling::*) = 0'
preceding-sibling-attr;PRSC Error: Failed to parse query '<foo a='1' b='2' c='3'> <bar>4</bar> <bar>5</bar> <bar>6</bar> </foo>/@c/preceding-sibling::node()'
predicates-11;PRSC Error: Failed to parse query '(/root/float[xs:float(.) = xs:float(1267.43233E12)])'
predicates-12;PRSC Error: Failed to parse query '(/root/double[xs:double(.) = 1267.43233E12])'
predicates-29;Expected error code: FORG0006. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'let $foo := <element1><element2>some content</element2></element1> return $foo[(2 to 5)]'
predicates-32;PRSC Error: Failed to parse query '\n        declare variable $i := ("x", 1);\n        declare variable $j := $i[position() ne 1];\n        $i[$j]      \n       = "x"'
predicates-33;The function current-date with arity 0 is not registered.
predicates-34;The function current-date with arity 0 is not registered.
predicates-35;The function current-date with arity 0 is not registered.
predicatesns-11;PRSC Error: Failed to parse query '(/root/float[xs:float(.) = xs:float(1267.43233E12)])'
predicatesns-12;PRSC Error: Failed to parse query '(/root/double[xs:double(.) = 1267.43233E12])'
prolog-version-1-v3;PRSC Error: Failed to parse query 'xquery version "3.0" encoding "utf-8"; 1,2'
prolog-version-1;PRSC Error: Failed to parse query 'xquery version "1.0" encoding "utf-8"; 1,2'
prolog-version-3-v3;PRSC Error: Failed to parse query 'xquery version "3.0" encoding "US-ASCII"; 1,2'
prolog-version-3;PRSC Error: Failed to parse query 'xquery version "1.0" encoding "US-ASCII"; 1,2'
prolog-version-4-v3;PRSC Error: Failed to parse query 'xquery version "3.0"; 1,2'
prolog-version-4-v31;PRSC Error: Failed to parse query 'xquery version "3.1"; 1,2'
prolog-version-4;PRSC Error: Failed to parse query 'xquery version "1.0"; 1,2'
prolog-version-5-v3;PRSC Error: Failed to parse query 'xquery version "3.0"; <bib/>'
prolog-version-5-v31;PRSC Error: Failed to parse query 'xquery version "3.1"; <bib/>'
prolog-version-5;PRSC Error: Failed to parse query 'xquery version "1.0"; <bib/>'
prolog-version-6-v3;PRSC Error: Failed to parse query '\n        xquery version '3.0'; \n        declare boundary-space preserve; \n        declare default order empty greatest; \n        declare namespace ns = "http://www.example.org/"; \n        for $b in//book stable order by xs:decimal($b/price[1]) empty greatest \n        return $b/title'
prolog-version-6-v31;PRSC Error: Failed to parse query '\n         xquery version '3.1'; \n         declare boundary-space preserve; \n         declare default order empty greatest; \n         declare namespace ns = "http://www.example.org/"; \n         for $b in//book stable order by xs:decimal($b/price[1]) empty greatest \n         return $b/title'
prolog-version-6;PRSC Error: Failed to parse query '\n        xquery version '1.0'; \n        declare boundary-space preserve; \n        declare default order empty greatest; \n        declare namespace ns = "http://www.example.org/"; \n        for $b in//book stable order by xs:decimal($b/price[1]) empty greatest \n        return $b/title'
prolog-version-7-v3;PRSC Error: Failed to parse query '\n        xquery version "3.0"; \n        declare boundary-space preserve; \n        declare default order empty greatest; \n        declare namespace ns = "http://www.example.org/"; \n        for $b in //book stable order by xs:decimal($b/price[1]) empty greatest \n        return $b/title'
prolog-version-7-v31;PRSC Error: Failed to parse query '\n         xquery version "3.1"; \n         declare boundary-space preserve; \n         declare default order empty greatest; \n         declare namespace ns = "http://www.example.org/"; \n         for $b in //book stable order by xs:decimal($b/price[1]) empty greatest \n         return $b/title'
prolog-version-7;PRSC Error: Failed to parse query '\n        xquery version "1.0"; \n        declare boundary-space preserve; \n        declare default order empty greatest; \n        declare namespace ns = "http://www.example.org/"; \n        for $b in //book stable order by xs:decimal($b/price[1]) empty greatest \n        return $b/title'
qname-cast-1;Atomic Value for XsName is not implemented yet.
qname-cast-2;PRSC Error: Failed to parse query '\n        import schema namespace myType="http://www.w3.org/XQueryTest/userDefinedTypes"; \n        let $var := myType:QNameBased("value1") return $var cast as xs:QName'
qname-cast-3;PRSC Error: Failed to parse query '\n        import schema namespace myType="http://www.w3.org/XQueryTest/userDefinedTypes"; \n        let $var := myType:QNameBased("value1") return $var cast as myType:QNameBased'
qname-cast-4;PRSC Error: Failed to parse query '\n        import schema namespace myType="http://www.w3.org/XQueryTest/userDefinedTypes"; \n        let $var := xs:QName("value1") return $var cast as myType:QNameBased'
quantexpr-66;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare function local:f($x, $y) {\n          let $a := $x\n          where empty($y)   (every $i in $x satisfies $i = $y)\n          return $a\n        };\n        local:f("x", ())\n      '
quantexpr-67;PRSC Error: Failed to parse query '\n        declare function local:f($x, $y) {\n            let $a := $x\n            where (every $i in $x satisfies $i = $y) or empty($y)\n            return $a\n        };\n        local:f("x", ())\n      '
quantexpr-68;PRSC Error: Failed to parse query '\n        declare function local:f($x, $y) {\n            let $a := $x\n            where (every $i in $x satisfies $i = $y) or empty($y)\n            return true()\n        };\n        local:f((current-date(), current-date(), current-date()), (current-date()))\n      '
rangeExpr-28;Expected executing the XPath '18446744073709551616 to 18446744073709551620' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: Overflow when creating a Int64 from 18446744073709551616.
rangeExpr-29;Expected executing the XPath 'count(18446744073709551616 to 18446744073709551620)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: Overflow when creating a Int64 from 18446744073709551616.
rangeExpr-30;Expected executing the XPath '(28446744073709551616 to 28446744073709551620)!position()' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: Overflow when creating a Int64 from 28446744073709551616.
rangeExpr-31;Expected executing the XPath '((28446744073709551616 to 28446744073709551620)!last())[1]' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: Overflow when creating a Int64 from 28446744073709551616.
rangeExpr-32;Expected executing the XPath 'reverse(28446744073709551616 to 28446744073709551620)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: Overflow when creating a Int64 from 28446744073709551616.
rangeExpr-36;The function year-from-date with arity 1 is not registered.
rangeExpr-37;The function year-from-date with arity 1 is not registered.
rangeExpr-38;The function year-from-date with arity 1 is not registered.
rangeExpr-39;The function year-from-date with arity 1 is not registered.
rangeExpr-40;The function year-from-date with arity 1 is not registered.
RangeExpr-408;Value was either too large or too small for an Int32.
RangeExpr-408a;Value was either too large or too small for an Int32.
RangeExpr-408b;Value was either too large or too small for an Int32.
RangeExpr-408c;Value was either too large or too small for an Int32.
RangeExpr-408d;Value was either too large or too small for an Int32.
RangeExpr-408e;Value was either too large or too small for an Int32.
RangeExpr-409;Overflow when creating a Int64 from 1000000000000000000000.
RangeExpr-409a;Overflow when creating a Int64 from 1000000000000000000000.
RangeExpr-409b;Overflow when creating a Int64 from 1000000000000000000000.
RangeExpr-409c;Overflow when creating a Int64 from 1000000000000000020001.
RangeExpr-409d;Overflow when creating a Int64 from 1000000000000000020001.
RangeExpr-409e;Overflow when creating a Int64 from 1000000000000000000000.
RangeExpr-410;Value was either too large or too small for an Int32.
RangeExpr-410a;Value was either too large or too small for an Int32.
RangeExpr-410b;Value was either too large or too small for an Int32.
RangeExpr-410c;Value was either too large or too small for an Int32.
RangeExpr-410d;Value was either too large or too small for an Int32.
RangeExpr-410e;Value was either too large or too small for an Int32.
RangeExpr-411;Overflow when creating a Int64 from 1000000000000000000003.
RangeExpr-411a;Overflow when creating a Int64 from 1000000000000000000003.
RangeExpr-411b;Overflow when creating a Int64 from 1000000000000000000003.
RangeExpr-411c;Overflow when creating a Int64 from 1000000000000000000000.
RangeExpr-411d;Overflow when creating a Int64 from 1000000000000000000000.
RangeExpr-411e;Overflow when creating a Int64 from 1000000000000000000003.
RangeExpr-413;The function year-from-date with arity 1 is not registered.
RangeExpr-413a;The function year-from-date with arity 1 is not registered.
RangeExpr-413b;The function year-from-date with arity 1 is not registered.
RangeExpr-413c;The function year-from-date with arity 1 is not registered.
RangeExpr-413d;The function year-from-date with arity 1 is not registered.
RangeExpr-413e;The function year-from-date with arity 1 is not registered.
RangeExpr-414;The function year-from-date with arity 1 is not registered.
RangeExpr-414a;The function year-from-date with arity 1 is not registered.
RangeExpr-414b;The function year-from-date with arity 1 is not registered.
RangeExpr-414c;The function year-from-date with arity 1 is not registered.
RangeExpr-414d;The function year-from-date with arity 1 is not registered.
RangeExpr-415;The function year-from-date with arity 1 is not registered.
RangeExpr-415a;The function year-from-date with arity 1 is not registered.
RangeExpr-415b;The function year-from-date with arity 1 is not registered.
RangeExpr-416;The function year-from-date with arity 1 is not registered.
RangeExpr-416a;The function year-from-date with arity 1 is not registered.
RangeExpr-416b;The function year-from-date with arity 1 is not registered.
rangeExpr-42;The function year-from-date with arity 1 is not registered.
RangeExpr-600;The function year-from-date with arity 1 is not registered.
RangeExpr-601;The function year-from-date with arity 1 is not registered.
RangeExpr-604;PRSC Error: Failed to parse query 'deep-equal((let $x := <e>3</e> return 1 to $x), (1, 2, 3))'
raytracer;PRSC Error: Failed to parse query 'let $result := (\n        import module namespace raytracer="http://www.xqsharp.com/raytracer";\n        import module namespace scene="http://www.xqsharp.com/raytracer/scene";\n        declare variable $width := 64;\n        declare variable $height := 64;\n        declare variable $input-context := .;\n        declare variable $scene := scene:prepare-scene($input-context/scene);\n        string-join( ( "P3", string-join((string($width), string($height)), " "), "255", (: : Now the pixel data. We take each pixel in the image, and recenter it, so that the : y co-ordinate ($y-recentered) ranges from -0.5 at the bottom of the image, to 0.5 : at the top of the image. : : The aspect ratio is used to "stretch" the range of x-coordinate values to stop the : image from being skewed. :) \n        let $aspect-ratio := $width div $height \n        for $y in 1 to $height \n        let $y-recentered := ((-$y div $height) + 0.5) \n        for $x in 1 to $width \n        let $x-recentered := (($x div $width) - 0.5) * $aspect-ratio \n        return (: plot-pixel returns us the rgb values of the color of this pixel. \n        		  We convert these to an integer value in the range [0, 255], and output them. :) \n        	string-join( for $channel in raytracer:plot-pixel($scene, $x-recentered, $y-recentered) \n        			     return string(floor($channel * 255)), " ") ), "&#xA;" )\n      ) return starts-with(normalize-space(string-join($result, ' ')), 'P3 64 64 255 0 0 0')'
rdb-queries-results-q1;PRSC Error: Failed to parse query '\n        <result> { \n            for $i in $items//item_tuple \n            where $i/start_date <= xs:date("1999-01-31") \n                and $i/end_date >= xs:date("1999-01-31") \n                and contains(exactly-one($i/description), "Bicycle") \n            order by $i/itemno \n            return <item_tuple> { $i/itemno } { $i/description } </item_tuple> } \n        </result>\n      '
rdb-queries-results-q10;PRSC Error: Failed to parse query '\n        <result> { \n            for $highbid in $bids//bid_tuple, \n                $user in $users//user_tuple \n            where $user/userid = $highbid/userid and $highbid/bid = max($bids//bid_tuple[itemno=$highbid/itemno]/bid) \n            order by exactly-one($highbid/itemno) \n            return <high_bid> { $highbid/itemno } { $highbid/bid } \n                     <bidder>{ $user/name/text() }</bidder> \n                   </high_bid> \n        } </result>\n      '
rdb-queries-results-q11;PRSC Error: Failed to parse query '\n        let $highbid := max($bids//bid_tuple/bid) \n        return <result> { for $item in $items//item_tuple, \n                              $b in $bids//bid_tuple[itemno = $item/itemno] \n                          where $b/bid = $highbid \n                          return <expensive_item> { $item/itemno } { $item/description } \n                                    <high_bid>{ $highbid }</high_bid> \n                                 </expensive_item> \n               } </result>\n      '
rdb-queries-results-q12;PRSC Error: Failed to parse query '\n        declare function local:bid_summary() as element()* { \n            for $i in distinct-values($bids//itemno) \n            let $b := $bids//bid_tuple[itemno = $i] \n            return <bid_count> \n                        <itemno>{ $i }</itemno> \n                        <nbids>{ count($b) }</nbids> \n                   </bid_count> };\n        <result> { \n            let $bid_counts := local:bid_summary(), \n                $maxbids := max($bid_counts/nbids), \n                $maxitemnos := $bid_counts[nbids = $maxbids] \n                for $item in $items//item_tuple, \n                    $bc in $bid_counts \n                where $bc/nbids = $maxbids and $item/itemno = $bc/itemno \n                return <popular_item> { $item/itemno } { $item/description } \n                        <bid_count>{ $bc/nbids/text() }</bid_count> \n                       </popular_item> \n        } </result>\n      '
rdb-queries-results-q13;PRSC Error: Failed to parse query '\n        <result> { \n            for $uid in distinct-values($bids//userid), \n                $u in $users//user_tuple[userid = $uid] \n            let $b := $bids//bid_tuple[userid = $uid] \n            order by exactly-one($u/userid) \n            return <bidder> { $u/userid } { $u/name } <bidcount>{ count($b) }</bidcount> <avgbid>{ avg($b/bid) }</avgbid> </bidder> \n        } </result>\n      '
rdb-queries-results-q14;PRSC Error: Failed to parse query '\n        <result> { \n            for $i in distinct-values($items//itemno) \n            let $b := $bids//bid_tuple[itemno = $i] \n            let $avgbid := avg($b/bid) \n            where count($b) >= 3 \n            order by $avgbid descending \n            return <popular_item> <itemno>{ $i }</itemno> <avgbid>{ $avgbid }</avgbid> </popular_item> \n        } </result>\n      '
rdb-queries-results-q15;PRSC Error: Failed to parse query '\n        <result> { \n            for $u in $users//user_tuple \n            let $b := $bids//bid_tuple[userid=$u/userid and bid>=100] \n            where count($b) > 1 \n            return <big_spender>{ $u/name/text() }</big_spender> \n        } </result>\n      '
rdb-queries-results-q16;PRSC Error: Failed to parse query '\n        <result> { \n            for $u in $users//user_tuple \n            let $b := $bids//bid_tuple[userid = $u/userid] \n            order by exactly-one($u/userid) \n            return <user> { $u/userid } { $u/name } { \n                if (empty($b)) \n                then <status>inactive</status> \n                else <status>active</status> } </user> \n        } </result>'
rdb-queries-results-q17;PRSC Error: Failed to parse query '\n        <frequent_bidder> { \n            for $u in $users//user_tuple \n            where every $item in $items//item_tuple \n                  satisfies some $b in $bids//bid_tuple \n                            satisfies ($item/itemno = $b/itemno and $u/userid = $b/userid) \n            return $u/name \n        } </frequent_bidder>\n      '
rdb-queries-results-q18;PRSC Error: Failed to parse query '\n        <result> { \n            for $u in $users//user_tuple \n            order by $u/name \n            return <user> { $u/name } { \n                for $b in distinct-values($bids//bid_tuple [userid = $u/userid]/itemno) \n                for $i in $items//item_tuple[itemno = $b] \n                let $descr := $i/description/text() \n                order by exactly-one($descr) \n                return <bid_on_item>{ $descr }</bid_on_item> } </user> \n        } </result>\n      '
rdb-queries-results-q2;PRSC Error: Failed to parse query '\n        <result> { \n            for $i in $items//item_tuple \n            let $b := $bids//bid_tuple[itemno = $i/itemno] \n            where contains(exactly-one($i/description), "Bicycle") \n            order by $i/itemno \n            return <item_tuple> { $i/itemno } { $i/description } <high_bid>{ max($b/bid) }</high_bid> </item_tuple> } \n        </result>\n      '
rdb-queries-results-q3;PRSC Error: Failed to parse query '\n        <result> { \n            for $u in $users//user_tuple \n            for $i in $items//item_tuple \n            where $u/rating > "C" and $i/reserve_price > 1000 and $i/offered_by = $u/userid \n            return <warning> { $u/name } { $u/rating } { $i/description } { $i/reserve_price } </warning> } \n        </result>\n     '
rdb-queries-results-q4;PRSC Error: Failed to parse query '\n        <result> { \n            for $i in $items//item_tuple \n            where empty ($bids//bid_tuple[itemno = $i/itemno]) \n            return <no_bid_item> { $i/itemno } { $i/description } </no_bid_item> \n        } </result>\n      '
rdb-queries-results-q5;PRSC Error: Failed to parse query '\n        <result> { \n            unordered ( \n                for $seller in $users//user_tuple, \n                    $buyer in $users//user_tuple, \n                    $item in $items//item_tuple, \n                    $highbid in $bids//bid_tuple \n                where $seller/name = "Tom Jones" \n                  and $seller/userid = $item/offered_by \n                  and contains(exactly-one($item/description), "Bicycle") \n                  and $item/itemno = $highbid/itemno \n                  and $highbid/userid = $buyer/userid \n                  and $highbid/bid = max( $bids//bid_tuple [itemno = $item/itemno]/bid ) \n                return <jones_bike> { $item/itemno } { $item/description } \n                        <high_bid>{ $highbid/bid }</high_bid> \n                        <high_bidder>{ $buyer/name }</high_bidder> \n                       </jones_bike> ) \n        } </result>\n     '
rdb-queries-results-q6;PRSC Error: Failed to parse query '\n        <result> { \n            for $item in $items//item_tuple \n            let $b := $bids//bid_tuple[itemno = $item/itemno] \n            let $z := max($b/bid) \n            where exactly-one($item/reserve_price) * 2 < $z \n            return <successful_item> { $item/itemno } { $item/description } { $item/reserve_price } \n                    <high_bid>{$z }</high_bid> \n                   </successful_item> \n        } </result>\n      '
rdb-queries-results-q7;PRSC Error: Failed to parse query '\n        let $allbikes := $items//item_tuple [contains(exactly-one(description), "Bicycle") or contains(exactly-one(description), "Tricycle")] \n        let $bikebids := $bids//bid_tuple[itemno = $allbikes/itemno] \n        return <high_bid> { max($bikebids/bid) } </high_bid>\n      '
rdb-queries-results-q8;PRSC Error: Failed to parse query '\n        let $item := $items//item_tuple [end_date >= xs:date("1999-03-01") and end_date <= xs:date("1999-03-31")] \n            return <item_count> { count($item) } </item_count>\n      '
rdb-queries-results-q9;PRSC Error: Failed to parse query '\n        <result> { \n            let $end_dates := $items//item_tuple/end_date \n            for $m in distinct-values(\n                        for $e in $end_dates \n                        return month-from-date($e)) \n            let $item := $items//item_tuple[year-from-date(exactly-one(end_date)) = 1999 and month-from-date(exactly-one(end_date)) = $m] \n            order by $m \n            return <monthly_result> \n                    <month>{ $m }</month> \n                    <item_count>{ count($item) }</item_count>\n                   </monthly_result> \n        } </result>\n      '
re00001;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00002;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00003;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00004;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00005;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00006;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00008;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00009;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00010;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00011;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00012;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00013;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00014;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00015;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00016;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00017;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00018;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00019;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00020;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00021;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00022;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00023;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00024;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00025;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00026;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00027;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00028;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00029;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00030;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00031;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00032;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00033;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00034;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00035;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00036;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00037;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00038;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00039;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00040;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00041;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00042;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00043;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00044;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00045;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00046;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00048;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00053;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00054;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00055;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00056;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00056a;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00067;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00068;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00071;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00072;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00073;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00076;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00082;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00085;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00086;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00086a;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00087;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00088;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00090;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00091;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00092;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00093;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00097;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00098;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00102;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00102a;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00104;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00105;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00106;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00107;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00108;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00125;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00126;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00127;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00127a;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00128;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00129;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00129a;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00133;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00134;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00176;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00177;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00212;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00214;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00215;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00216;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00217;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00218;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00219;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00220;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00221;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00222;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00223;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00224;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00225;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00226;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00227;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00228;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00229;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00230;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00231;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00232;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00233;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00234;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00235;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00236;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00237;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00238;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00239;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00240;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00241;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00242;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00243;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00244;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00245;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00246;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00247;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00248;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00249;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00250;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00251;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00252;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00253;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00254;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00255;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00257;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00258;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00259;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00260;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00261;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00262;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00263;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00264;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00265;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00266;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00267;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00268;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00269;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00270;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00271;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00272;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00273;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00274;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00275;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00276;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00277;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00278;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00279;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00280;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00281;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00282;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00284;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00285;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00286;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00288;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00289;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00290;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00291;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00292;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00293;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00294;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00296;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00297;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00370;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00377;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00469;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00481;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00482;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00483;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00484;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00486;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00489;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00490;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00495;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00497;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00498;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00499;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00500;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00501;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00502;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00503;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00504;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00505;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00506;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00509;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00512;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00514;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00517;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00519;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00521;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00527;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00530;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00531;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00534;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00540;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00541;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00542;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00543;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00544;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00545;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00546;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00556;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00558;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00561;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00562;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00563;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00564;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00565;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00566;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00567;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00568;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00569;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00570;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00571;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00572;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00573;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00574;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00575;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00576;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00577;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00578;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00579;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00580;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00581;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00582;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00583;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00584;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00585;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00586;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00587;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00588;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00589;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00590;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00591;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00592;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00593;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00594;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00595;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00596;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00597;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00598;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00600;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00609;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00610;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00613;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00614;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00615;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00616;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00618;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00619;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00620;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00621;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00622;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00623;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00624;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00625;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00626;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00627;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00628;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00629;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00630;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00631;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00632;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00633;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00634;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00635;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00636;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00637;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00638;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00642;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00646;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00647;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00648;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00649;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00650;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00651;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00652;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00653;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00654;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00656;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00658;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00659;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00666;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00667;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00668;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00669;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00670;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00671;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00674;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00675;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00676;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00677;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00678;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00679;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00680;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00681;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00682;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00683;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00684;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00685;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00686;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00687;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00688;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00694;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00695;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00719;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00740;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00741;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00742;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00743;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00744;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00745;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00746;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00748;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00750;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00751;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00752;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00754;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00755;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00756;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00757;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00761;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00762;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00763;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00764;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00765;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00766;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00767;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00768;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00769;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00773;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00776;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00777;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00778;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00784;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00785;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00786;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00787;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00791;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00792;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00801;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00802;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00803;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00804;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00805;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00806;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00807;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00808;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00809;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00810;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00811;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00812;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00813;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00814;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00815;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00816;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00817;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00819;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00820;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00821;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00822;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00823;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00824;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00826;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00827;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00828;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00829;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00830;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00845;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00846;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00847;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00848;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00849;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00850;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00851;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00852;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00853;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00854;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00855;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00856;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00857;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00858;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00859;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00860;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00861;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00862;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00863;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00864;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00865;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00866;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00867;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00868;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00869;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00870;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00871;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00872;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00873;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00874;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00875;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00876;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00877;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00878;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00879;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00880;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00881;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00882;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00883;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00884;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00885;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00886;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00887;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00888;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00889;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00890;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00891;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00892;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00893;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00894;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00895;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00896;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00897;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00898;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00899;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00900;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00901;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00902;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00903;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00904;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00905;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00906;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00907;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00908;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00909;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00910;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00911;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00912;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00913;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00914;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00915;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00916;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00917;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00918;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00919;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00920;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00921;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00922;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00923;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00924;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00925;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00926;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00927;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00928;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00929;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00930;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00931;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00937;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00938;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00939;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00940;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00941;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00942;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00943;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00944;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00945;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00946;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00947;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00948;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00949;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00950;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00951;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00952;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00953;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00954;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00955;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00956;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00958;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00959;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00960;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00961;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00962;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00963;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00964;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00965;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00966;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00967;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00968;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00969;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00970;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00971;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00972;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00973;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00974;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00975;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00976;PRSC Error: Failed to parse query '(\n        matches('22a22z', '^(\d*){2,}?a\1z$')\n      ) instance of $xs:boolean'
re00976a;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00976b;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00977;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00978;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00983;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00984;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00985;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00987;PRSC Error: Failed to parse query '((for $range in\n            tokenize('65-90;97-122;192-214;216-246;248-305;308-318;321-328;330-382;384-451;461-496;500-501;506-535;592-680;699-705;902-902;904-906;908-908;910-929;931-974;976-982;986-986;988-988;990-990;992-992;994-1011;1025-1036;1038-1103;1105-1116;1118-1153;1168-1220;1223-1224;1227-1228;1232-1259;1262-1269;1272-1273;1329-1366;1369-1369;1377-1414;1488-1514;1520-1522;1569-1594;1601-1610;1649-1719;1722-1726;1728-1742;1744-1747;1749-1749;1765-1766;2309-2361;2365-2365;2392-2401;2437-2444;2447-2448;2451-2472;2474-2480;2482-2482;2486-2489;2524-2525;2527-2529;2544-2545;2565-2570;'||\n            '2575-2576;2579-2600;2602-2608;2610-2611;2613-2614;2616-2617;2649-2652;2654-2654;2674-2676;2693-2699;2701-2701;2703-2705;2707-2728;2730-2736;2738-2739;2741-2745;2749-2749;2784-2784;2821-2828;2831-2832;2835-2856;2858-2864;2866-2867;2870-2873;2877-2877;2908-2909;2911-2913;2949-2954;2958-2960;2962-2965;2969-2970;2972-2972;2974-2975;2979-2980;2984-2986;2990-2997;2999-3001;3077-3084;3086-3088;3090-3112;3114-3123;3125-3129;3168-3169;3205-3212;3214-3216;3218-3240;3242-3251;3253-3257;3294-3294;3296-3297;3333-3340;3342-3344;3346-3368;3370-3385;3424-3425;3585-3630;3632-3632;'||\n            '3634-3635;3648-3653;3713-3714;3716-3716;3719-3720;3722-3722;3725-3725;3732-3735;3737-3743;3745-3747;3749-3749;3751-3751;3754-3755;3757-3758;3760-3760;3762-3763;3773-3773;3776-3780;3904-3911;3913-3945;4256-4293;4304-4342;4352-4352;4354-4355;4357-4359;4361-4361;4363-4364;4366-4370;4412-4412;4414-4414;4416-4416;4428-4428;4430-4430;4432-4432;4436-4437;4441-4441;4447-4449;4451-4451;4453-4453;4455-4455;4457-4457;4461-4462;4466-4467;4469-4469;4510-4510;4520-4520;4523-4523;4526-4527;4535-4536;4538-4538;4540-4546;4587-4587;4592-4592;4601-4601;7680-7835;7840-7929;7936-7957;'||\n            '7960-7965;7968-8005;8008-8013;8016-8023;8025-8025;8027-8027;8029-8029;8031-8061;8064-8116;8118-8124;8126-8126;8130-8132;8134-8140;8144-8147;8150-8155;8160-8172;8178-8180;8182-8188;8486-8486;8490-8491;8494-8494;8576-8578;12353-12436;12449-12538;12549-12588;44032-55203;19968-40869;12295-12295;12321-12329;48-57;1632-1641;1776-1785;2406-2415;2534-2543;2662-2671;2790-2799;2918-2927;3047-3055;3174-3183;3302-3311;3430-3439;3664-3673;3792-3801;3872-3881;768-837;864-865;1155-1158;1425-1441;1443-1465;1467-1469;1471-1471;1473-1474;1476-1476;1611-1618;1648-1648;1750-1764;1767-1768;'||\n            '1770-1773;2305-2307;2364-2364;2366-2381;2385-2388;2402-2403;2433-2435;2492-2492;2494-2500;2503-2504;2507-2509;2519-2519;2530-2531;2562-2562;2620-2620;2622-2626;2631-2632;2635-2637;2672-2673;2689-2691;2748-2748;2750-2757;2759-2761;2763-2765;2817-2819;2876-2876;2878-2883;2887-2888;2891-2893;2902-2903;2946-2947;3006-3010;3014-3016;3018-3021;3031-3031;3073-3075;3134-3140;3142-3144;3146-3149;3157-3158;3202-3203;3262-3268;3270-3272;3274-3277;3285-3286;3330-3331;3390-3395;3398-3400;3402-3405;3415-3415;3633-3633;3636-3642;3655-3662;3761-3761;3764-3769;3771-3772;3784-3789;3864-3865;'||\n            '3893-3893;3895-3895;3897-3897;3902-3903;3953-3972;3974-3979;3984-3989;3991-3991;3993-4013;4017-4023;4025-4025;8400-8412;8417-8417;12330-12335;12441-12442;183-183;720-721;903-903;1600-1600;3654-3654;3782-3782;12293-12293;12337-12341;12445-12446;12540-12542;58-58;95-95;45-46;65-90;97-122;192-214;216-246;248-305;308-318;321-328;330-382;384-451;461-496;500-501;506-535;592-680;699-705;902-902;904-906;908-908;910-929;931-974;976-982;986-986;988-988;990-990;992-992;994-1011;1025-1036;1038-1103;1105-1116;1118-1153;1168-1220;1223-1224;1227-1228;1232-1259;1262-1269;1272-1273;1329-1366;'||\n            '1369-1369;1377-1414;1488-1514;1520-1522;1569-1594;1601-1610;1649-1719;1722-1726;1728-1742;1744-1747;1749-1749;1765-1766;2309-2361;2365-2365;2392-2401;2437-2444;2447-2448;2451-2472;2474-2480;2482-2482;2486-2489;2524-2525;2527-2529;2544-2545;2565-2570;2575-2576;2579-2600;2602-2608;2610-2611;2613-2614;2616-2617;2649-2652;2654-2654;2674-2676;2693-2699;2701-2701;2703-2705;2707-2728;2730-2736;2738-2739;2741-2745;2749-2749;2784-2784;2821-2828;2831-2832;2835-2856;2858-2864;2866-2867;2870-2873;2877-2877;2908-2909;2911-2913;2949-2954;2958-2960;2962-2965;2969-2970;2972-2972;2974-2975;'||\n            '2979-2980;2984-2986;2990-2997;2999-3001;3077-3084;3086-3088;3090-3112;3114-3123;3125-3129;3168-3169;3205-3212;3214-3216;3218-3240;3242-3251;3253-3257;3294-3294;3296-3297;3333-3340;3342-3344;3346-3368;3370-3385;3424-3425;3585-3630;3632-3632;3634-3635;3648-3653;3713-3714;3716-3716;3719-3720;3722-3722;3725-3725;3732-3735;3737-3743;3745-3747;3749-3749;3751-3751;3754-3755;3757-3758;3760-3760;3762-3763;3773-3773;3776-3780;3904-3911;3913-3945;4256-4293;4304-4342;4352-4352;4354-4355;4357-4359;4361-4361;4363-4364;4366-4370;4412-4412;4414-4414;4416-4416;4428-4428;4430-4430;4432-4432;'||\n            '4436-4437;4441-4441;4447-4449;4451-4451;4453-4453;4455-4455;4457-4457;4461-4462;4466-4467;4469-4469;4510-4510;4520-4520;4523-4523;4526-4527;4535-4536;4538-4538;4540-4546;4587-4587;4592-4592;4601-4601;7680-7835;7840-7929;7936-7957;7960-7965;7968-8005;8008-8013;8016-8023;8025-8025;8027-8027;8029-8029;8031-8061;8064-8116;8118-8124;8126-8126;8130-8132;8134-8140;8144-8147;8150-8155;8160-8172;8178-8180;8182-8188;8486-8486;8490-8491;8494-8494;8576-8578;12353-12436;12449-12538;12549-12588;44032-55203;19968-40869;12295-12295;12321-12329;48-57;1632-1641;1776-1785;2406-2415;2534-2543;'||\n            '2662-2671;2790-2799;2918-2927;3047-3055;3174-3183;3302-3311;3430-3439;3664-3673;3792-3801;3872-3881;768-836;864-865;1155-1158;1425-1441;1443-1465;1467-1469;1471-1471;1473-1474;1476-1476;1611-1618;1648-1648;1750-1764;1767-1768;1770-1773;2305-2307;2364-2364;2366-2381;2385-2388;2402-2403;2433-2435;2492-2492;2494-2500;2503-2504;2507-2509;2519-2519;2530-2531;2562-2562;2620-2620;2622-2626;2631-2632;2635-2637;2672-2673;2689-2691;2748-2748;2750-2757;2759-2761;2763-2765;2817-2819;2876-2876;2878-2883;2887-2888;2891-2893;'||\n            '2902-2903;2946-2947;3006-3010;3014-3016;3018-3021;3031-3031;3073-3075;3134-3140;3142-3144;3146-3149;3157-3158;3202-3203;3262-3268;3270-3272;3274-3277;3285-3286;3330-3331;3390-3395;3398-3400;3402-3405;3415-3415;3633-3633;3636-3642;3655-3662;3761-3761;3764-3769;3771-3772;3784-3789;3864-3865;3893-3893;3895-3895;3897-3897;3902-3903;3953-3972;3974-3979;3984-3989;3991-3991;3993-4013;4017-4023;4025-4025;8400-8412;8417-8417;12330-12335;12441-12442;183-183;720-721;903-903;1600-1600;3654-3654;3782-3782;12293-12293;12337-12341;12445-12446;12540-12542;58-58;95-95;45-46', ';')\n            let $s := xs:integer(substring-before($range, '-')) \n            let $e := xs:integer(substring-after($range, '-')) \n            for $c in ($s to $e)!codepoints-to-string(.)\n            where not(matches($c, '^([\c])$')) \n            return string-to-codepoints($c)), \n            \n            (for $range in tokenize('161-161', ';') \n            let $s := xs:integer(substring-before($range, '-')) \n            let $e := xs:integer(substring-after($range, '-')) \n            for $c in ($s to $e)!codepoints-to-string(.)\n            where (matches($c, '^([\c])$')) \n            return string-to-codepoints($c)) \n        ) => empty()'
re00988;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00989;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00990;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00991;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00992;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00993;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00994;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00995;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00996;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00997;Expected XPathException with code FORX0002, but got BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00998;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re00999;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re01000;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re01001;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re01002;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
re01003;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
ReturnExpr001;PRSC Error: Failed to parse query 'for $folder in /MyComputer/Drive2//Folder return <newFolder>{ $folder/FolderName/text() }</newFolder>'
ReturnExpr002;PRSC Error: Failed to parse query 'for $folder in /MyComputer/Drive2//Folder return <newFolder>{ $folder/@name, $folder/FolderName/text() }</newFolder>'
ReturnExpr003;PRSC Error: Failed to parse query '\n        for $folder in /MyComputer/Drive1/Folder[1] \n        return <folder1> {$folder/FolderName} <files> { \n                    for $file in ($folder/File)[position() < 6] \n                    return <f>{$file/FileName/substring(.,13)}</f> } </files> \n               </folder1>\n      '
ReturnExpr004;Use of XQuery FLWOR expressions in XPath is not allowed
ReturnExpr010;Expected executing the XPath '<empty> { for $file in (//Folder)[1]/File return () } </empty>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '<empty> { for $file in (//Folder)[1]/File return () } </empty>'
ReturnExpr016;PRSC Error: Failed to parse query 'for $file at $offset in (//Folder)[1]/File return <File>{ $file/@name }{ attribute offset{ $offset }}</File>'
ReturnExpr018;Expected XPath for $file in (//Folder)[1]/File return ($file/Stream/StreamSize)[1] > 1004 to resolve to false false false true true true true true true true true true true true true true true true true true true true true true true true true true true true true, but instead got False False False True True True True True True True True True True True True True True True True True True True True True True True True True True True True
seq-queries-results-q3;Use of XQuery FLWOR expressions in XPath is not allowed
seq-queries-results-q4;Use of XQuery FLWOR expressions in XPath is not allowed
seq-queries-results-q5;PRSC Error: Failed to parse query '<critical_sequence> { let $proc := //section[section.title="Procedure"][1], $i1 := ($proc//incision)[1], $i2 := ($proc//incision)[2] for $n in $proc//node() except $i1//node() where $n >> $i1 and $n << $i2 return $n } </critical_sequence>'
sequence-type-10;PRSC Error: Failed to parse query '(1,2) castable as xs:integer?'
sequence-type-11;PRSC Error: Failed to parse query '(1E3) castable as xs:double?'
sequence-type-12;PRSC Error: Failed to parse query '(1E3,2E3) castable as xs:double?'
sequence-type-13;PRSC Error: Failed to parse query '(1.2) castable as xs:decimal?'
sequence-type-14;PRSC Error: Failed to parse query '(1.2,2.1) castable as xs:decimal?'
sequence-type-15;PRSC Error: Failed to parse query '("abc") castable as xs:string?'
sequence-type-16;PRSC Error: Failed to parse query '("abc","def") castable as xs:string?'
sequence-type-17;PRSC Error: Failed to parse query '("abc") castable as xs:integer?'
sequence-type-18;PRSC Error: Failed to parse query '("abc","def") castable as xs:integer?'
sequence-type-9;PRSC Error: Failed to parse query '(2) castable as xs:integer?'
sgml-queries-results-q1;PRSC Error: Failed to parse query '<result> { //report//para } </result>'
sgml-queries-results-q10;PRSC Error: Failed to parse query '<result> { let $x := //xref[@xrefid = "top4"], $t := //title[. << exactly-one($x)] return $t[last()] } </result>'
sgml-queries-results-q2;PRSC Error: Failed to parse query '<result> { //intro/para } </result>'
sgml-queries-results-q3;PRSC Error: Failed to parse query '<result> { for $c in //chapter where empty($c/intro) return $c/section/intro/para } </result>'
sgml-queries-results-q4;PRSC Error: Failed to parse query '<result> { (((//chapter)[2]//section)[3]//para)[2] } </result>'
sgml-queries-results-q5;PRSC Error: Failed to parse query '<result> { //para[@security = "c"] } </result>'
sgml-queries-results-q6;PRSC Error: Failed to parse query '<result> { for $s in //section/@shorttitle return <stitle>{ $s }</stitle> } </result>'
sgml-queries-results-q7;PRSC Error: Failed to parse query '<result> { for $i in //intro/para[1] return <first_letter>{ substring(string($i), 1, 1) }</first_letter> } </result>'
sgml-queries-results-q8a;PRSC Error: Failed to parse query '<result> { //section[.//title[contains(., "is SGML")]] } </result>'
sgml-queries-results-q8b;Expected executing the XPath '<result> { //section[.//title/text()[contains(., "is SGML")]] } </result>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '<result> { //section[.//title/text()[contains(., "is SGML")]] } </result>'
sgml-queries-results-q9;PRSC Error: Failed to parse query '<result> { for $id in //xref/@xrefid return //topic[@topicid = $id] } </result>'
SquareArray-001;PRSC Error: Failed to parse query '([]) instance of $array(*)'
SquareArray-003;PRSC Error: Failed to parse query 'array:size([(), ('A', 'B', 'C'), 'D']) = 3'
SquareArray-005;PRSC Error: Failed to parse query 'declare function local:fun() {1 to 5}; array:size([local:fun()]) = 1'
SquareArray-007;PRSC Error: Failed to parse query 'deep-equal((declare function local:fun() {1 to 5}; [local:fun()](1)), ((1, 2, 3, 4, 5)))'
SquareArray-009;PRSC Error: Failed to parse query 'deep-equal((declare function local:fun() {1 to 5}; [local:fun()]?1), ((1, 2, 3, 4, 5)))'
SquareArray-010;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '[1](4294967297)'
ST-Data001;Expected error code: FOTY0012. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        import schema namespace mc ="http://www.w3.org/XQueryTest/mixedcontent"; \n        let $node as element(*, mc:mixedType) := /* \n        return data($node)'
static-context-1;Expected error code: XPST0008. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace test = 'http://www.example.com'; \n        <a/> instance of element(*, test:unknownType)'
step-expr-si-1;Expected executing the XPath 'import schema default element namespace "http://www.example.com/XQueryTest/extendedTypes"; \n        for $extended as element(*, extendedWithElementType) in //element(*, extendedWithElementType) \n        let $baseElement as empty-sequence() := $extended/baseElement \n        return $baseElement' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        import schema default element namespace "http://www.example.com/XQueryTest/extendedTypes"; \n        for $extended as element(*, extendedWithElementType) in //element(*, extendedWithElementType) \n        let $baseElement as empty-sequence() := $extended/baseElement \n        return $baseElement'
step-expr-si-2;PRSC Error: Failed to parse query '\n        import schema default element namespace "http://www.example.com/XQueryTest/extendedTypes"; \n        for $extended as element(*, restrictedType) in //element(*, restrictedType) \n        let $baseElement as element()+ := $extended/node() \n        return $baseElement'
step-expr-si-3;PRSC Error: Failed to parse query '\n        import schema default element namespace "http://www.example.com/XQueryTest/extendedTypes"; \n        for $extended as element(*, anotherBaseType) in //element(restrictedAttribute, anotherBaseType) \n        let $baseElement as element(baseElement) := $extended/baseElement \n        return $baseElement'
Steps-leading-lone-slash-10;PRSC Error: Failed to parse query '\n        declare variable $var := document {<a>123</a>}; \n        $var[/*]\n        '
Steps-leading-lone-slash-11;PRSC Error: Failed to parse query '\n        declare variable $var := document {<a>123</a>}; \n        $var[/<a/>]\n        '
Steps-leading-lone-slash-12;PRSC Error: Failed to parse query '\n        declare variable $var := document {<a>123</a>}; \n        $var[/<a div="3"/>]\n        '
Steps-leading-lone-slash-13;PRSC Error: Failed to parse query '\n        declare variable $var := document {<a>123</a>}; \n        $var[/unordered{a}]\n        '
Steps-leading-lone-slash-14;PRSC Error: Failed to parse query '\n        declare variable $var := document {<a>123</a>}; \n        $var[/max(a)]\n        '
Steps-leading-lone-slash-15;PRSC Error: Failed to parse query '\n        declare variable $var := document {<a>123</a>}; \n        $var[/-5]\n        '
Steps-leading-lone-slash-16;PRSC Error: Failed to parse query '\n        declare variable $var := document {<a>123</a>}; \n        declare variable $a := document {<a>123</a>}; \n        $var[/=$a]\n        '
Steps-leading-lone-slash-17;PRSC Error: Failed to parse query '\n        declare variable $var := document {<a>123</a>}; \n        declare variable $a := document {<a>123</a>}; \n        $var[5*/]\n        '
Steps-leading-lone-slash-1a;PRSC Error: Failed to parse query '\n        declare variable $var := document {<a>123</a>}; $var[(/)*5]\n        '
Steps-leading-lone-slash-2a;PRSC Error: Failed to parse query '\n        declare variable $var := document {<a>123</a>}; $var[(/)<a]\n        '
Steps-leading-lone-slash-3a;PRSC Error: Failed to parse query '\n        declare variable $var := document {<a>123</a>}; $var[(/)<5]\n        '
Steps-leading-lone-slash-5a;PRSC Error: Failed to parse query '\n        declare variable $var := document {<a>123</a>}; $var[(/)<a div 3]\n        '
Steps-leading-lone-slash-7a;PRSC Error: Failed to parse query '\n        declare variable $var := document {<a>123</a>}; \n        declare variable $a := document {<a>123</a>}; $var[(/) is $a]\n        '
Steps-leading-lone-slash-8a;PRSC Error: Failed to parse query '\n        declare variable $var := document {<a>123</a>}; \n        $var[(/) instance of document-node(element(x))]\n        '
string-constructor-001;PRSC Error: Failed to parse query '(\n        declare variable $n as xs:integer external := 10; \n        ``[There were `{$n}` green bottles]``\n      ) instance of $xs:string'
string-constructor-002;PRSC Error: Failed to parse query '(\n        declare variable $n as xs:integer external := 10; \n        ``[There were 10 green bottles]``\n      ) instance of $xs:string'
string-constructor-003;PRSC Error: Failed to parse query '(\n        declare variable $n as xs:integer external := 10; \n        declare variable $thing as xs:string external := ``[wall]``;\n        ``[There were `{$n}` green bottles hanging on the `{$thing}`]``\n      ) instance of $xs:string'
string-constructor-004;PRSC Error: Failed to parse query '(\n        declare variable $n as xs:integer external := 10; \n        ``[There were &lt; `{$n}` green bottles]``\n      ) instance of $xs:string'
string-constructor-005;PRSC Error: Failed to parse query '(\n        declare variable $n as xs:integer external := 10; \n        ``["{}"'[`]'\\<> `{$n}`]``\n      ) instance of $xs:string'
string-constructor-006;PRSC Error: Failed to parse query '(\n        declare variable $n as xs:integer external := 10; \n        ``[`{$n}``{$n+1}``{$n+2}`]``\n      ) instance of $xs:string'
string-constructor-007;PRSC Error: Failed to parse query '(\n        declare variable $n as xs:integer external := 10; \n        ``[ `{$n}` `{$n+1}` `{$n+2}` ]``\n      ) instance of $xs:string'
string-constructor-008;PRSC Error: Failed to parse query '(\n        declare variable $n external := <e>10</e>; \n        ``[There were `{$n}` green bottles]``\n      ) instance of $xs:string'
string-constructor-009;PRSC Error: Failed to parse query '(\n        declare variable $n external := <e>10</e>; \n        ``[There were `{``[at least `{$n}`]``}` green bottles]``\n      ) instance of $xs:string'
string-constructor-010;PRSC Error: Failed to parse query '\n        declare variable $n external := <e>10</e>; \n        <a>{``[There were `{$n}` green bottles]``}</a>\n      '
string-constructor-011;PRSC Error: Failed to parse query '\n        declare variable $n external := <e>10</e>; \n        <a text="{``[There were `{$n}` green bottles]``}"/>\n      '
string-constructor-012;PRSC Error: Failed to parse query '(\n        declare variable $n as xs:integer external := 10; \n        if ($n lt 20) then ``[There were `{$n}` green bottles]`` else ``[There were many green bottles]``\n      ) instance of $xs:string'
string-constructor-013;PRSC Error: Failed to parse query '(\n        declare variable $n as xs:integer external := 10; \n        ``[There were `{$n}` green bottles]``[$n lt 20]\n      ) instance of $xs:string'
string-constructor-014;PRSC Error: Failed to parse query '(\n        declare variable $n as xs:integer external := 10; \n        ``[There\nwere `{$n}` green\nbottles]``\n      ) instance of $xs:string'
string-constructor-015;PRSC Error: Failed to parse query '(\n        declare variable $n as xs:integer external := 10; \n        [``[There were `{$n}` green bottles]``]?1\n      ) instance of $xs:string'
string-constructor-016;PRSC Error: Failed to parse query '(\n        declare variable $n as xs:integer external := 10; \n        ``[There were `{[$n]}` green bottles]``\n      ) instance of $xs:string'
string-constructor-017;PRSC Error: Failed to parse query '(\n        declare variable $n as xs:integer external := 10; \n        ``[There were `{array{$n}}` green bottles]``\n      ) instance of $xs:string'
string-constructor-018;PRSC Error: Failed to parse query '(\n        declare variable $n as xs:integer external := 10; \n        ``[There were `{$n, ()}` green bottles]``\n      ) instance of $xs:string'
string-constructor-019;PRSC Error: Failed to parse query '(\n        declare variable $n as xs:integer external := 10; \n        ``[There were ``{$n}`` green bottles]``\n      ) instance of $xs:string'
string-constructor-020;PRSC Error: Failed to parse query '(\n        declare variable $n as xs:integer external := 10; \n        ``[``[There were `{"`{"}``{$n}`}` green bottles`{"]``"}`]``\n      ) instance of $xs:string'
string-constructor-021;PRSC Error: Failed to parse query '\n        matches("""", ``[["']]``)\n      '
string-constructor-022;PRSC Error: Failed to parse query '``[]`` = ""'
string-constructor-023;PRSC Error: Failed to parse query '``[` {$n}`]`` = "` {$n}`"'
string-constructor-024;PRSC Error: Failed to parse query '``[` *`{}`* `]`` = "` ** `"'
string-constructor-025;PRSC Error: Failed to parse query '``[` *`{(:Nothing here:)}`* `]`` = "` ** `"'
string-constructor-026;PRSC Error: Failed to parse query '``[ *`{xs:date('2012-05-05')}`* ]`` = " *2012-05-05* "'
string-constructor-027;PRSC Error: Failed to parse query '<a>Today is `{xs:date('2012-05-05')}`</a> = "Today is `2012-05-05`"'
string-constructor-028;PRSC Error: Failed to parse query '(\n        declare variable $n external := <e>10</e>; \n        <a>`{``[There were `{<b>{``[at least `{$n}`]``}</b>}` green bottles]``}`</a>\n      ) instance of $element(a)'
string-constructor-910;Expected error code: FOTY0013. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare variable $n external := map{'a':10}; \n        ``[There were `{$n}` green bottles]``\n      '
string-constructor-911;Expected error code: FOTY0013. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare variable $n external := map{'a':10}; \n        ``[There were `{map{'a':10}}` green bottles]``\n      '
string-constructor-912;PRSC Error: Failed to parse query '\n        declare variable $n as xs:integer external := 10; \n        ``[There were `{1 to $n}` green bottles]``\n       = "There were 1 2 3 4 5 6 7 8 9 10 green bottles"'
string-queries-results-q1;Could not find a part of the path ending in: 'qt3tests//UseCaseSTRING/string-queries-results-q1.out'
string-queries-results-q2;Could not find a part of the path ending in: 'qt3tests//UseCaseSTRING/string-queries-results-q2.out'
string-queries-results-q4;Could not find a part of the path ending in: 'qt3tests//UseCaseSTRING/string-queries-results-q4.out'
string-queries-results-q5;Could not find a part of the path ending in: 'qt3tests//UseCaseSTRING/string-queries-results-q5.out'
sudoku;Could not find a part of the path ending in: 'qt3tests//Demos/sudoku-result.xml'
surrogates01;Expected XPath string-length("abc&#x1D156;def") to resolve to 7
surrogates01a;Expected XPath string-length("abc𝅖def") to resolve to 7
surrogates02;Expected XPath substring("abc&#x1D156;def", 5) to resolve to def, but instead got #x1D156;def
surrogates02a;Expected XPath substring("abc𝅖def", 5) to resolve to def, but instead got �def
surrogates03;Expected XPath substring("abc&#x1D156;def", 4) to resolve to 𝅖def, but instead got &#x1D156;def
surrogates04;Index was outside the bounds of the array.
surrogates04a;Index was outside the bounds of the array.
surrogates05;Index was outside the bounds of the array.
surrogates05a;Index was outside the bounds of the array.
surrogates06;Expected XPath translate("abc&#x1D156;def", "def", "&#x1D156;EF") to resolve to abc𝅖𝅖EF, but instead got abc&#x1D156;&#x
surrogates06a;Expected XPath translate("abc𝅖def", "def", "𝅖EF") to resolve to abc𝅖𝅖EF, but instead got abc𝅖𝅖E
surrogates07;Expected XPath string-to-codepoints("abc&#x1D156;def") to resolve to 97 98 99 119126 100 101 102, but instead got 97 98 99 38 35 120 49 68 49 53 54 59 100 101 102
surrogates10;Expected XPath substring-before("abc&#x1D156;def", "f") to resolve to abc𝅖de, but instead got abc&#x1D156;de
surrogates12;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
surrogates12a;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
surrogates13;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
surrogates13a;BuiltInFunctionsString.FnMatches, XSD pattern compiling needs to be added.
surrogates14;Invalid pattern '[&#119120;-&#119135;]' at offset 12. [x-y] range in reverse order.
surrogates14a;Invalid pattern '[𝅐-𝅘𝅥]' at offset 5. [x-y] range in reverse order.
surrogates15;Expected XPath replace("abc&#x1D157;def", "[^a-f]", "###") to resolve to abc###def, but instead got abc###########################def
surrogates15a;Expected XPath replace("abc𝅗def", "[^a-f]", "###") to resolve to abc###def, but instead got abc######def
surrogates16;Expected XPath string-to-codepoints(substring("&#x10FC00;A", 2, 1)) to resolve to 65
surrogates16a;Found a low surrogate char without a preceding high surrogate at index: 0. The input may not be in this encoding, or may not contain valid Unicode (UTF-16) characters. (Parameter 's')
tail-006;PRSC Error: Failed to parse query 'declare function local:sum($n) { if (empty($n)) then 0 else head($n) + local:sum(tail($n)) }; \n            local:sum(1 to 5) = 15'
tree-queries-results-q1;PRSC Error: Failed to parse query '\n        declare function local:toc($book-or-section as element()) as element()* { \n            for $section in $book-or-section/section \n            return <section> { $section/@* , $section/title , local:toc($section) } </section> };\n        <toc> { for $s in /book return local:toc($s) } </toc>\n      '
tree-queries-results-q2;PRSC Error: Failed to parse query '<figlist> { for $f in //figure return <figure> { $f/@* } { $f/title } </figure> } </figlist>'
tree-queries-results-q3;PRSC Error: Failed to parse query '<section_count>{ count(//section) }</section_count>, <figure_count>{ count(//figure) }</figure_count>'
tree-queries-results-q4;PRSC Error: Failed to parse query '<top_section_count> { count(/book/section) } </top_section_count>'
tree-queries-results-q5;PRSC Error: Failed to parse query '<section_list> { for $s in //section let $f := $s/figure return <section title="{ $s/title/text() }" figcount="{ count($f) }"/> } </section_list>'
tree-queries-results-q6;PRSC Error: Failed to parse query '\n        declare function local:section-summary($book-or-section as element()*) as element()* { \n            for $section in $book-or-section \n            return <section> { $section/@* } { $section/title } <figcount> { count($section/figure) } </figcount> { local:section-summary($section/section) } </section> \n        }; \n        <toc> { \n            for $s in /book/section \n            return local:section-summary($s) \n        } </toc>\n      '
typeswitch-112;PRSC Error: Failed to parse query '\n      	declare namespace lu = 'http://www.w3.org/XQueryTest/ListUnionTypes' ;\n        import schema "http://www.w3.org/XQueryTest/ListUnionTypes";\n        typeswitch (23)\n        case $i as lu:unionType return true()\n        default $v return false()\n      '
typeswitch-113;Expected error code: XPST0051. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	declare namespace lu = 'http://www.w3.org/XQueryTest/ListUnionTypes' ;\n        import schema "http://www.w3.org/XQueryTest/ListUnionTypes";\n        typeswitch (-23)\n        case $i as lu:restrictedUnionType return true()\n        default $v return false()\n      '
typeswitch-114;Expected error code: XPST0051. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	declare namespace lu = 'http://www.w3.org/XQueryTest/ListUnionTypes' ;\n        import schema "http://www.w3.org/XQueryTest/ListUnionTypes";\n        typeswitch (-23)\n        case $i as lu:listType return true()\n        default $v return false()\n      '
typeswitch-115;Expected error code: XPST0051. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	declare namespace lu = 'http://www.w3.org/XQueryTest/ListUnionTypes' ;\n        import schema "http://www.w3.org/XQueryTest/ListUnionTypes";\n        typeswitch (-23)\n        case $i as lu:unionOfListType return true()\n        default $v return false()\n      '
typeswitch-116;PRSC Error: Failed to parse query '\n      	declare namespace lu = 'http://www.w3.org/XQueryTest/ListUnionTypes' ;\n        import schema "http://www.w3.org/XQueryTest/ListUnionTypes";\n        \n        (typeswitch (current-date())\n        case $i as lu:unionOfUnionType return true()\n        default $v return false())\n          and\n        (typeswitch (23)\n        case $i as lu:unionOfUnionType return true()\n        default $v return false())  \n      '
typeswitch-117;PRSC Error: Failed to parse query 'deep-equal((\n      	let $x := [map{'x':1, 'y':2}, 'x']\n      	let $y := [array{1, 2, 3}, 1]\n      	let $z := ($x, $y)\n      	for $e in $z return\n      	  typeswitch($e?1)\n      	  case $A as array(*) return array:get($A, $e?2)\n      	  case $M as map(*) return map:get($M, $e?2)\n      	  default return error()\n      ), (1,1))'
typeswitch-118;Expected executing the XPath 'let $x := map{'x':1, 'y':2}\n      \tlet $y := map{'A':1, 'B':2}\n      \tlet $z := ($x, $y, [])\n      \tfor $e in $z[position() lt 3] return\n      \t  typeswitch($e)\n      \t  case $A as array(*) return array:get($A, 'A') (: deliberate: array:get requires an integer :)\n      \t  case $M as map(*) return map:get($M, 'A')\n      \t  default return error()' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	let $x := map{'x':1, 'y':2}\n      	let $y := map{'A':1, 'B':2}\n      	let $z := ($x, $y, [])\n      	for $e in $z[position() lt 3] return\n      	  typeswitch($e)\n      	  case $A as array(*) return array:get($A, 'A') (: deliberate: array:get requires an integer :)\n      	  case $M as map(*) return map:get($M, 'A')\n      	  default return error()\n      '
typeswitch-119;PRSC Error: Failed to parse query '\n         let $x := map{'x':1, 'y':2}\n         let $y := map{'A':1, 'B':2}\n         let $z := ($x, $y, [])\n         for $e as map(*) in $z[position() lt 3] return\n         typeswitch($e)\n         case $A as array(*) return array:get($A, 1)\n         case $M as map(*) return map:get($M, 'A')\n         default return error()\n       = 1'
typeswitch-union-branch-1-dup;PRSC Error: Failed to parse query '\n	 typeswitch (47) \n	 case $i as xs:integer | xs:string return $i\n	 case $i as xs:integer return $i\n	 default $v return 0\n	  = 47'
typeswitch-union-branch-1;PRSC Error: Failed to parse query '\n	 typeswitch (47) \n	 case $i as xs:integer | xs:string return $i\n	 default $v return 0\n	  = 47'
typeswitch-union-branch-2-dup;PRSC Error: Failed to parse query '\n	 typeswitch (47) \n	 case $i as xs:string | xs:integer return $i\n	 case $i as xs:integer return $i\n	 default $v return 0\n	  = 47'
typeswitch-union-branch-2;PRSC Error: Failed to parse query '\n	 typeswitch (47) \n	 case $i as xs:string | xs:integer return $i\n	 default $v return 0\n	  = 47'
typeswitch-union-branch-both-dup;PRSC Error: Failed to parse query '\n	 typeswitch (xs:integer(47)) \n	 case $i as xs:decimal | xs:integer return $i\n	 case $i as xs:decimal return $i\n	 default $v return 0\n	  = 47'
typeswitch-union-branch-both;PRSC Error: Failed to parse query '\n	 typeswitch (xs:integer(47)) \n	 case $i as xs:decimal | xs:integer return $i\n	 default $v return 0\n	  = 47'
typeswitch-union-multi;PRSC Error: Failed to parse query 'deep-equal((\n	 for $x in (<e/>, 1, "x") return\n	 typeswitch ($x) \n	 case $i as xs:integer | xs:boolean | element() return 1\n	 default $v return 0\n	 ), (1, 1, 0))'
typeswitch-union-nomatch-2;PRSC Error: Failed to parse query '\n	 typeswitch (<e/>) \n	 case xs:integer | xs:string return 1\n	 default $v return 0\n	  = 0'
typeswitch-union-nomatch;PRSC Error: Failed to parse query '\n	 typeswitch (<e/>) \n	 case $i as xs:integer | xs:string return $i\n	 default $v return 0\n	  = 0'
typeswitchhc1;PRSC Error: Failed to parse query '\n        typeswitch (5) \n        case $i as xs:integer return <wrap>test passed - integer data type</wrap> \n        case $i as xs:date return <wrap>test failed</wrap> \n        case $i as xs:time return <wrap>test failed</wrap> \n        case $i as xs:string return <wrap>test failed</wrap> \n        default return <wrap>test failed</wrap>'
typeswitchhc10;PRSC Error: Failed to parse query '\n        typeswitch(xs:anyURI("http://example.com")) \n        case $i as xs:string return <wrap>test failed</wrap> \n        case $i as xs:integer return <wrap>test failed</wrap> \n        case $i as xs:anyURI return <wrap>test passed - xs:anyURI("http://www.example.com")is of anyURI type</wrap> \n        default return <wrap>test failed</wrap>'
typeswitchhc11;PRSC Error: Failed to parse query '\n        typeswitch(123) \n        case $i as xs:string return <wrap>test failed</wrap> \n        case $i as xs:double return <wrap>test failed</wrap> \n        case $i as xs:anyURI return <wrap>test failed</wrap> \n        default return <wrap>test passed - 123 is an integer (not an option on any cases)</wrap>'
typeswitchhc12;PRSC Error: Failed to parse query '\n        typeswitch(123) \n        case $i as xs:string return <wrap>test failed</wrap> \n        case $i as xs:double return <wrap>test failed</wrap> \n        case $i as xs:integer return <wrap>test passed - If a dynamic error is generated, then test failed.</wrap> \n        default return 12 div 0'
typeswitchhc13;PRSC Error: Failed to parse query '\n        typeswitch(if (1 lt 2) then 3 else 4.5E4) \n        case $i as xs:string return <wrap>test failed</wrap> \n        case $i as xs:double return <wrap>test failed</wrap> \n        case $i as xs:integer return <wrap>test passed - "(1 lt 2) then 3 else 4.5E4" should evaluate to an integer</wrap> \n        default return <wrap>test failed</wrap>'
typeswitchhc14;PRSC Error: Failed to parse query '\n        typeswitch(fn:true() and fn:true()) \n        case $i as xs:string return <wrap>test failed</wrap> \n        case $i as xs:double return <wrap>test failed</wrap> \n        case $i as xs:boolean return <wrap>test passed - "fn:true() and fn:true()" should evaluate to boolean type</wrap> \n        default return <wrap>test failed</wrap>'
typeswitchhc15;PRSC Error: Failed to parse query '\n        typeswitch(fn:true() or fn:false()) \n        case $i as xs:string return <wrap>test failed</wrap> \n        case $i as xs:double return <wrap>test failed</wrap> \n        case $i as xs:boolean return <wrap>test passed - "fn:true() or fn:false()" should evaluate to boolean type</wrap> \n        default return <wrap>test failed</wrap>'
typeswitchhc16;PRSC Error: Failed to parse query '\n        typeswitch(typeswitch (1) \n        case $i as xs:integer return $i default return <a>fn:false</a> ) \n        case $i as xs:string return <wrap>test failed</wrap> \n        case $i as xs:double return <wrap>test failed</wrap> \n        case $i as xs:integer return <wrap>test passed - the operand expression should evaluate to an integer type</wrap> \n        default return <wrap>test failed</wrap>'
typeswitchhc17;PRSC Error: Failed to parse query '\n        typeswitch (5) \n        case $i as xs:integer return xs:integer(1 + 1) \n        case $i as xs:date return <wrap>test failed</wrap> \n        case $i as xs:time return <wrap>test failed</wrap> \n        case $i as xs:string return <wrap>test failed</wrap> \n        default return <wrap>test failed</wrap> = 2'
typeswitchhc18;PRSC Error: Failed to parse query '\n        typeswitch (5.1) \n        case $i as xs:decimal return xs:decimal(1.1 + 3.1) \n        case $i as xs:float return <wrap>test failed</wrap> \n        case $i as xs:integer return <wrap>test failed</wrap> \n        case $i as xs:double return <wrap>test failed</wrap> \n        default return <wrap>test failed</wrap>'
typeswitchhc19;PRSC Error: Failed to parse query '\n        typeswitch (5.1E2) \n        case $i as xs:integer return <wrap>test failed2</wrap> \n        case $i as xs:double return xs:double(5.1E2 + 1.1E2) \n        default return <wrap>test failed</wrap> = 620'
typeswitchhc2;PRSC Error: Failed to parse query '\n        typeswitch (5.1) \n        case $i as xs:decimal return <wrap>test passed - 5.1 is a decimal type</wrap> \n        case $i as xs:float return <wrap>test failed</wrap> \n        case $i as xs:integer return <wrap>test failed</wrap> \n        case $i as xs:double return <wrap>test failed</wrap> \n        default return <wrap>test failed</wrap>'
typeswitchhc20;PRSC Error: Failed to parse query '\n        typeswitch ("A String") \n        case $i as xs:decimal return <wrap>test failed</wrap> \n        case $i as xs:integer return <wrap>test failed</wrap> \n        case $i as xs:string return fn:string-length($i) \n        default return <wrap>test failed</wrap> = 8'
typeswitchhc21;PRSC Error: Failed to parse query '\n        typeswitch (1) \n        case $i as xs:double return <wrap>test failed</wrap> \n        case $i as xs:integer return fn:count((1, 2, 3)) \n        case $i as xs:string return <wrap>test failed</wrap> \n        default return <wrap>test failed</wrap> = 3'
typeswitchhc22;PRSC Error: Failed to parse query '\n        typeswitch (1) \n        case $i as xs:double return <wrap>test failed</wrap> \n        case $i as xs:integer return 5 - 3 \n        case $i as xs:string return <wrap>test failed</wrap> \n        default return <wrap>test failed</wrap> = 2'
typeswitchhc23;PRSC Error: Failed to parse query '\n        typeswitch (1) \n        case $i as xs:double return <wrap>test failed</wrap> \n        case $i as xs:integer return 5 * 2 \n        case $i as xs:string return <wrap>test failed</wrap> \n        default return <wrap>test failed</wrap> = 10'
typeswitchhc24;PRSC Error: Failed to parse query '\n        typeswitch (1) \n        case $i as xs:double return <wrap>test failed</wrap> \n        case $i as xs:integer return 10 div 2 \n        case $i as xs:string return <wrap>test failed</wrap> \n        default return <wrap>test failed</wrap> = 5'
typeswitchhc25;PRSC Error: Failed to parse query '\n        typeswitch (1) \n        case $i as xs:double return <wrap>test failed</wrap> \n        case $i as xs:integer return 10 idiv 2 \n        case $i as xs:string return <wrap>test failed</wrap> \n        default return <wrap>test failed</wrap> = 5'
typeswitchhc3;PRSC Error: Failed to parse query '\n        typeswitch (5.1E2) \n        case $i as xs:integer return <wrap>test failed2</wrap> \n        case $i as xs:double return <wrap>test passed - 5.1E2 is a double type</wrap> \n        default return <wrap>test failed</wrap>'
typeswitchhc4;PRSC Error: Failed to parse query '\n        typeswitch ("A String") \n        case $i as xs:decimal return <wrap>test failed</wrap> \n        case $i as xs:integer return <wrap>test failed</wrap> \n        case $i as xs:string return <wrap>test passed - "A String" is a string type</wrap> \n        default return <wrap>test failed</wrap>'
typeswitchhc5;PRSC Error: Failed to parse query '\n        typeswitch (1267.43233E12) \n        case $i as xs:string return <wrap>test failed</wrap> \n        case $i as xs:integer return <wrap>test failed</wrap> \n        case $i as xs:double return <wrap>test passed - 1267.43233E12 is a double type</wrap> \n        default return <wrap>test failed</wrap>'
typeswitchhc6;PRSC Error: Failed to parse query '\n        typeswitch(1 > 2) case $i as xs:string return <wrap>test failed</wrap> \n        case $i as xs:integer return <wrap>test failed</wrap> \n        case $i as xs:boolean return <wrap>test passed - 1 > 2 is a boolean type</wrap> \n        default return <wrap>test failed</wrap>'
typeswitchhc7;PRSC Error: Failed to parse query '\n        typeswitch(xs:date("1999-05-31")) \n        case $i as xs:string return <wrap>test failed</wrap> \n        case $i as xs:integer return <wrap>test failed</wrap> \n        case $i as xs:date return <wrap>test passed - xs:date("1999-05-31")is of date type</wrap> \n        default return <wrap>test failed</wrap>'
typeswitchhc8;PRSC Error: Failed to parse query '\n        typeswitch(xs:time("12:00:00")) \n        case $i as xs:string return <wrap>test failed</wrap> \n        case $i as xs:integer return <wrap>test failed</wrap> \n        case $i as xs:time return <wrap>test passed - xs:time("12:00:00")is of time type</wrap> \n        default return <wrap>test failed</wrap>'
typeswitchhc9;PRSC Error: Failed to parse query '\n        typeswitch(xs:dateTime("1999-12-31T19:20:00")) \n        case $i as xs:string return <wrap>test failed</wrap> \n        case $i as xs:integer return <wrap>test failed</wrap> \n        case $i as xs:dateTime return <wrap>test passed - xs:dateTime("1999-12-31T19:20:00")is of dateTime type</wrap> \n        default return <wrap>test failed</wrap>'
unabbreviatedSyntax-3;Expected XPath for $h in (/works[1]/employee[2]) return $h/child::text() to resolve to Text data from Employee[2], but instead got Text data from Employee[2]
UnaryLookup-001;PRSC Error: Failed to parse query 'deep-equal(((['a', 'b'], ['c', 'd'])[?1 eq 'c']), (['c', 'd']))'
UnaryLookup-002;PRSC Error: Failed to parse query 'deep-equal((let $i := 1 return (['a', 'b'], ['c', 'd'])[?($i) eq 'c']), (['c', 'd']))'
UnaryLookup-003;PRSC Error: Failed to parse query 'deep-equal(((['a', 'b'], ['c', 'd'])[ ? 001 eq 'c']), (['c', 'd']))'
UnaryLookup-005;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '(['a', 'b'], ['c', 'd'])[ ?0 eq 'c']'
UnaryLookup-006;Expected error code: FOAY0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '(['a', 'b'], ['c', 'd'], ['e'])[ ?2 eq 'b']'
UnaryLookup-007;PRSC Error: Failed to parse query 'deep-equal(((['a', 'b', 'c'], ['b', 'c', 'd'], ['e', 'f', 'b'])[ ?(1 to 2) = 'b']), (['a', 'b', 'c'], ['b', 'c', 'd']))'
UnaryLookup-008;PRSC Error: Failed to parse query 'deep-equal((let $i := (1, 3) return (['a', 'b', 'c'], ['b', 'c', 'd'], ['e', 'f', 'b'])[ ?($i) = 'b']), (['b', 'c', 'd'], ['e', 'f', 'b']))'
UnaryLookup-009;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '(['a', 'b', 'c'], ['b', 'c', 'd'], ['e', 'f', 'b'])[ ?first = 'b']'
UnaryLookup-010;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'let $d := current-date() return (['a', 'b', 'c'], ['b', 'c', 'd'], ['e', 'f', 'b'])[ ?($d) = 'b']'
UnaryLookup-011;Expected error code: XPDY0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'let $d := function($x) {$x + ?2} return $d(12)'
UnaryLookup-012;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '(1 to 10)[?1 = 3]'
UnaryLookup-013;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '(floor#1, ceiling#1, round#1, abs#1)[?1 = 1]'
UnaryLookup-014;PRSC Error: Failed to parse query 'deep-equal(((['a', 'b', 'c'], ['b', 'c', 'd'], ['e', 'f', 'b'])[ ?* = 'c']), (['a', 'b', 'c'], ['b', 'c', 'd']))'
UnaryLookup-015;PRSC Error: Failed to parse query 'deep-equal((([1, [2], [3]], [[2], 2, [4]])[ ?1 = ?2 ]), ([[2], 2, [4]]))'
UnaryLookup-016;PRSC Error: Failed to parse query 'deep-equal(((['a', 'b', 'c'], ['b', 'c', 'd'], ['e', 'f', 'b'])[contains(?1, ?, 'http://www.w3.org/2005/xpath-functions/collation/codepoint')('a')]), (['a', 'b', 'c']))'
UnaryLookup-017;PRSC Error: Failed to parse query 'deep-equal(((['a', 'b', 'c'], ['b', 'c', 'd'], ['e', 'f', 'b'])[contains(?1, ?)('a')]), (['a', 'b', 'c']))'
UnaryLookup-019;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '(['a', 'b', 'c'], ['b', 'c', 'd'], ['e', 'f', 'b'])[?(1.0) = 'a']'
UnaryLookup-020;PRSC Error: Failed to parse query 'deep-equal((\n        let $x := (validate type xs:integer {<x>1</x>}, validate type xs:integer {<y>2</y>}) return\n        (['a', 'b', 'c'], ['b', 'c', 'd'], ['e', 'f', 'b'])[?($x) = 'b']\n      ), ((['a', 'b', 'c'], ['b', 'c', 'd'])))'
UnaryLookup-021;PRSC Error: Failed to parse query 'deep-equal((\n        let $x := (<x>1</x>, <y>2</y>) return\n        (['a', 'b', 'c'], ['b', 'c', 'd'], ['e', 'f', 'b'])[?($x) = 'b']\n      ), ((['a', 'b', 'c'], ['b', 'c', 'd'])))'
UnaryLookup-022;PRSC Error: Failed to parse query 'deep-equal(([['a', 'b', 'c'], ['b', 'c', 'd'], ['e', 'f', 'b']]?*[?1 = 'a']), (['a', 'b', 'c']))'
UnaryLookup-023;PRSC Error: Failed to parse query 'deep-equal(([['a', 'b', 'c'], ['b', 'c', 'd'], ['e', 'f', 'b']]!?*!?1), ('a', 'b', 'e'))'
UnaryLookup-024;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        let $x := (<x>1</x>, <y>2</y>) return $x / ?1\n      '
UnaryLookup-025;PRSC Error: Failed to parse query '((['a', 'b', 'c'], ['b', 'c', 'd'], ['e', 'f', 'b'])[exists(?())]) => empty()'
UnaryLookup-040;PRSC Error: Failed to parse query 'deep-equal(((map{'a':1, 'b':2, 'c':3},  map{'a':2, 'b':3, 'c':4})[?b eq 3]), (map{'a':2, 'b':3, 'c':4}))'
UnaryLookup-041;PRSC Error: Failed to parse query 'deep-equal(((map{1:1, 2:2, 3:3},  map{1:2, 2:3, 3:4})[?2 eq 3]), (map{1:2, 2:3, 3:4}))'
UnaryLookup-042;PRSC Error: Failed to parse query 'deep-equal(((map{1:1, 2:2, 3:3},  map{1:2, 2:3, 3:4})[?(1 to 2) = 3]), (map{1:2, 2:3, 3:4}))'
UnaryLookup-043;PRSC Error: Failed to parse query 'deep-equal(((map{'a-1':1, 'b-1':2, 'c-1':3},  map{'a-1':2, 'b-1':3, 'c-1':4})[?b-1 eq 3]), (map{'a-1':2, 'b-1':3, 'c-1':4}))'
UnaryLookup-044;PRSC Error: Failed to parse query 'deep-equal(((map{'a-1':1, 'b-1':2, 'c-1':3},  map{'a-1':2, 'b-1':3, 'c-1':4})[? (:confusing?:) b-1 eq 3]), (map{'a-1':2, 'b-1':3, 'c-1':4}))'
UnaryLookup-045;PRSC Error: Failed to parse query 'deep-equal(((map{1:1, 2:2, 3:3},  map{1:2, 2:3, 3:4})[?* = 3]), (map{1:1, 2:2, 3:3},  map{1:2, 2:3, 3:4}))'
UnaryLookup-046;PRSC Error: Failed to parse query '((map{1:1, 2:2, 3:3},  map{1:2, 2:3, 3:4})[exists(?())]) => empty()'
UnaryLookup-048;PRSC Error: Failed to parse query '(map{1.1:1, 2.2:2, 3.3:3},  map{1.1:2, 2.2:3, 3.3:4})[?(2.2) = 3]?(3.3) = 4'
UnionType-equal-01;PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         declare function local:f($a as s:dateOrDateTime) as xs:boolean { $a = current-dateTime() };\n         local:f(xs:dateTime('2001-01-01T13:00:00Z'))\n       '
UnionType-equal-02;PRSC Error: Failed to parse query '\n         import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";\n         declare function local:f($a as s:dateOrDateTime) as xs:boolean { current-dateTime() eq $a };\n         local:f(xs:dateTime('2001-01-01T13:00:00Z'))\n       '
UseCaseCompoundValues-001;PRSC Error: Failed to parse query 'deep-equal((\n        declare namespace i = "http://example.com/compound-values";\n        declare function i:complex($real as xs:double, $imaginary as xs:double) as map(xs:boolean, xs:double)\n        {\n          map { true() : $real, false() : $imaginary }\n        };\n        \n        declare function i:real($complex as map(xs:boolean, xs:double)) as xs:double\n        {\n          $complex(true())\n        };\n        \n        declare function i:imaginary($complex as map(xs:boolean, xs:double)) as xs:double\n        {\n          $complex(false())\n        };\n        \n        declare function i:add($arg1 as map(xs:boolean, xs:double), $arg2 as map(xs:boolean, xs:double)) as map(xs:boolean, xs:double){\n          i:complex(i:real($arg1)+i:real($arg2),\n            i:imaginary($arg1)+i:imaginary($arg2))\n        };\n        \n        declare function i:multiply($arg1 as map(xs:boolean, xs:double), $arg2 as map(xs:boolean, xs:double)) as map(xs:boolean, xs:double)\n        {\n          i:complex(\n            i:real($arg1)*i:real($arg2) - i:imaginary($arg1)*i:imaginary($arg2),\n            i:real($arg1)*i:imaginary($arg2) + i:imaginary($arg1)*i:real($arg2))\n        };\n        \n        i:add(i:complex(2, 3), i:complex(1, -6)),\n        i:multiply(i:complex(2, -1), i:complex(3, 4))\n      ), ((map {true() : 3, false() : -3}, map {true() : 10, false() : 5})))'
UseCaseJSON-001;PRSC Error: Failed to parse query 'json-doc("mildred.json")?phone?*[?type = 'mobile']?number'
UseCaseJSON-002;Expected executing the XPath 'declare namespace array="http://www.w3.org/2005/xpath-functions/array";\n        declare namespace map="http://www.w3.org/2005/xpath-functions/map";\n        let $input := json-doc('employees.json')\n\t\t\t\tfor $k in map:keys($input)\n\t\t\t\treturn \n\t\t\t\t  <department name="{$k}">{\n\t\t\t\t    let $array := $input($k)\n\t\t\t\t    for $i in 1 to array:size($array)\n\t\t\t\t    let $emp := $array($i)\n\t\t\t\t    return\n\t\t\t\t      <employee>\n\t\t\t\t        <firstName>{ $emp('firstName') }</firstName>\n\t\t\t\t        <lastName>{ $emp('lastName') }</lastName>\n\t\t\t\t        <age>{ $emp('age') }</age>\n\t\t\t\t      </employee>\n\t\t\t\t  }</department>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n        declare namespace array="http://www.w3.org/2005/xpath-functions/array";\n        declare namespace map="http://www.w3.org/2005/xpath-functions/map";\n        let $input := json-doc('employees.json')\n				for $k in map:keys($input)\n				return \n				  <department name="{$k}">{\n				    let $array := $input($k)\n				    for $i in 1 to array:size($array)\n				    let $emp := $array($i)\n				    return\n				      <employee>\n				        <firstName>{ $emp('firstName') }</firstName>\n				        <lastName>{ $emp('lastName') }</lastName>\n				        <age>{ $emp('age') }</age>\n				      </employee>\n				  }</department>		  '
UseCaseJSON-003;PRSC Error: Failed to parse query 'deep-equal((\n        declare namespace map="http://www.w3.org/2005/xpath-functions/map";\n				declare function local:deep-put($input as item()*, $key as xs:string, $value as item()*) as item()* {\n				   for $i in $input return\n				     if ($i instance of map(*))\n				     then map:merge(map:for-each($i, function($k, $v) {\n				                                             if ($k eq $key) then map{$k : $value} else map{$k : local:deep-put($v, $key, $value)} }))\n				      else if ($i instance of array(*))\n				     then array{ local:deep-put($i?*, $key, $value) }\n				      else $i\n				};\n				local:deep-put(json-doc("bookinfo.json"), "first", "John")		  \n		  ), (map {"book" : map {"title" : "Data on the Web", "year" : 2000, "author" : [map {"last" : "Abiteboul", "first" : "John"}, map {"last" : "Buneman", "first" : "John"}, map {"last" : "Suciu", "first" : "John"}], "publisher" : "Morgan Kaufmann Publishers", "price" : 39.95}}))'
UseCaseJSON-004;Use of XQuery FLWOR expressions in XPath is not allowed
UseCaseJSON-005;PRSC Error: Failed to parse query 'deep-equal((\n        declare namespace map="http://www.w3.org/2005/xpath-functions/map";\n        let $products := json-doc('sales.json')?*\n        return map:merge((\n          for $sales in $products\n          let $pname := $sales?product\n          group by $pname\n          return map { $pname : sum(for $s in $sales return $s?quantity) }\n        ))    \n		  ), (map { "broiler" : 20, "toaster" : 200, "blender" : 250, "socks" : 510, "shirt" : 10 }))'
UseCaseJSON-006;PRSC Error: Failed to parse query 'deep-equal((\n        declare namespace map="http://www.w3.org/2005/xpath-functions/map";\n				array {\n				  for $store in json-doc('stores.json')?*\n				  let $state := $store?state\n				  group by $state\n				  order by $state\n				  return\n				    map {\n				      $state :  array {\n				        for $product in json-doc('products.json')?*\n				        let $category := $product?category\n				        group by $category\n				        order by $category\n				        return\n				          map {\n				            $category :  map:merge((\n				              for $sales in json-doc('sales.json')?*\n				              where $sales?("store number") = $store?("store number") and $sales?product = $product?name\n				              let $pname := $sales?product\n				              group by $pname\n				              order by $pname\n				              return map { $pname :  sum(for $s in $sales return $s?quantity)}\n				            ))\n				          }\n				      }\n				   }\n				}\n		  ), ([map { "CA" : [ map { "clothes" : map { "socks" : 510 }}, map { "kitchen" : map { "broiler" : 20, "toaster" : 150 }} ] }, map { "MA" : [ map { "clothes" : map { "shirt" : 10 }}, map { "kitchen" : map { "toaster" : 50, "blender" : 250 }}]}]))'
UseCaseJSON-007;Expected executing the XPath 'let $sats := json-doc("satellites.json")("satellites")\n        return map { "visible" : array { map:keys($sats)[$sats(.)("visible")] }, "invisible" : array { map:keys($sats)[not($sats(.)("visible"))] } }' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'deep-equal((\n        let $sats := json-doc("satellites.json")("satellites")\n        return map { "visible" : array { map:keys($sats)[$sats(.)("visible")] }, "invisible" : array { map:keys($sats)[not($sats(.)("visible"))] } }\n		  ), (map { "visible" : [ "AJISAI (EGS)", "AKARI (ASTRO-F)" ], "invisible" : [ "AAU CUBESAT" ] }))'
UseCaseJSON-008;PRSC Error: Failed to parse query 'deep-equal((\n        array {\n          for $page in doc($uri)//page\n          return map {\n                  "title": string($page/title),\n                  "id" : string($page/id),\n                  "last updated" : string($page/revision[1]/timestamp),\n                  "authors" : array { for $a in $page/revision/contributor/username return string($a) }\n                 }               \n         }     \n		  ), ([map {"title" : "Kawasaki's theorem", "id" : "14511776", "last updated" : "2011-06-21T20:08:56Z", "authors" : ["Some jerk on the Internet"]}, map {"title" : "Origami techniques", "id" : "193590", "last updated" : "2011-08-31T17:21:49Z", "authors" : ["Dmcq"]}, map {"title" : "Mathematics of paper folding", "id" : "232840", "last updated" : "2011-07-23T09:10:42Z", "authors" : ["Tabletop"]}]))'
UseCaseJSON-009;PRSC Error: Failed to parse query '   \n        declare namespace array="http://www.w3.org/2005/xpath-functions/array";\n        declare variable $data := map {\n          "color" : "blue",\n          "closed" : true(),\n          "points" : [[10,10], [20,10], [20,20], [10,20]]\n        };      \n        declare variable $stroke := attribute stroke { $data("color") };\n        declare variable $points := attribute points { array:flatten($data("points")) };\n        if ($data("closed")) then <svg><polygon>{ $stroke, $points }</polygon></svg>\n         else <svg><polyline>{ $stroke, $points }</polyline></svg>\n		  '
UseCaseJSON-010;PRSC Error: Failed to parse query '\n        <html>\n				  <body>				\n				    <table>\n				      <tr> \n				         { (: Column headings :) \n				            <th> </th>,\n				            for $th in json-doc("table.json")("col labels")?*\n				            return <th>{ $th }</th>\n				         }\n				      </tr>\n				      {  (: Data for each row :)\n				         for $r at $i in json-doc("table.json")("data")?*\n				         return\n				            <tr>\n				             {\n				               <th>{ json-doc("table.json")("row labels")[$i] }</th>,\n				               for $c in $r?*\n				               return <td>{ $c }</td>\n				             }\n				            </tr>\n				      }\n				    </table>				\n				  </body>\n				</html>   \n		  '
UseCaseJSON-011;PRSC Error: Failed to parse query '\n        <table>{\n          for tumbling window $w in json-doc("colors.json")?*\n          start at $x when fn:true()\n          end at $y when $y - $x = 2\n          return\n            <tr>{ for $i in $w return <td>{ $i?color }</td> }</tr>\n         }</table>\n		  '
UseCaseJSON-012;PRSC Error: Failed to parse query 'deep-equal((\n        let $users := [map { "userid" : "W0342", "firstname" : "Walter", "lastname" : "Denisovich" }, map { "userid" : "M0535", "firstname" : "Mick", "lastname" : "Goulish" }]?* \n        let $holdings := [map { "userid" : "W0342", "ticker" : "DIS", "shares" : 153212312 }, map { "userid" : "M0535", "ticker" : "DIS", "shares" : 10 }, map { "userid" : "M0535", "ticker" : "AIG", "shares" : 23412 }]?*   \n        return array {\n          for $u in $users\n          order by $u("userid")\n          return map { "userid" : $u("userid"), \n                       "first" :  $u("firstname"), \n                       "last" :   $u("lastname"), \n                       "holdings" : array {\n                          for $h in $holdings\n                          where $h("userid") = $u("userid")\n                          order by $h("ticker")\n									        return map { "ticker" : $h("ticker"), "share" : $h("shares") }\n										    }\n                 }\n        }       \n		  ), ([map {"userid" : "M0535", "first" : "Mick", "last" : "Goulish", "holdings" : [map {"ticker" : "AIG", "share" : 23412}, map {"ticker" : "DIS", "share" : 10}]}, map {"userid" : "W0342", "first" : "Walter", "last" : "Denisovich", "holdings" : [map {"ticker" : "DIS", "share" : 153212312}]}]))'
UseCaseJSON-014;PRSC Error: Failed to parse query 'deep-equal((\n				let $feed := json-doc("incoming.json")("feed")\n				  , $entry := $feed("entry")\n				return\n				if ($entry?*("app$control")("yt$state")("name") = "restricted")\n				  then map:remove($feed, "entry")\n				  else $feed\n		  ), (map {"author" : [map {"name" : map {"$t" : "YouTube"}, "uri" : map {"$t" : "http://www.youtube.com/"}}], "category" : [map {"scheme" : "http://schemas.google.com/g/2005#kind", "term" : "http://gdata.youtube.com/schemas/2007#video"}]}))'
UseCaseNLP-001;PRSC Error: Failed to parse query '\n          <s>\n           {\n            for $w in json-doc('speech-representation.json')?*\n            return <w pos="{ $w(2) }">{ $w(1) }</w>\n           }\n          </s>      \n        '
UseCaseNLP-002;PRSC Error: Failed to parse query '\n          declare variable $index := map { "pos" : 2, "lemma" : 1 };\n          <s>\n           {\n            for $w in json-doc('speech-representation.json')?*\n            return <w pos="{ $w($index("pos")) }">{ $w($index("lemma")) }</w>\n           }\n          </s>			  \n        '
UseCaseNLP-003;PRSC Error: Failed to parse query 'deep-equal((\n          array {\n            for $w in json-doc('speech-representation.json')?*\n            return map { "pos" : $w(2), "lemma" : $w(1) }\n          }\n        ), (\n        	[ map { "pos" : "DT", "lemma" : "A" }, \n        	  map { "pos" : "NN", "lemma" : "bride" }, \n        	  map { "pos" : ",", "lemma" : "," }, \n        	  map { "pos" : "PRP", "lemma" : "you" }, \n        	  map { "pos" : "VBP", "lemma" : "know" }, \n        	  map { "pos" : ",", "lemma" : "," }, \n        	  map { "pos" : "MD", "lemma" : "must" }, \n        	  map { "pos" : "VB", "lemma" : "appear" }, \n        	  map { "pos" : "IN", "lemma" : "like" }, \n        	  map { "pos" : "DT", "lemma" : "a" }, \n        	  map { "pos" : "NN", "lemma" : "bride" }, \n        	  map { "pos" : ",", "lemma" : "," }, \n        	  map { "pos" : "CC", "lemma" : "but" }, \n        	  map { "pos" : "PRP$", "lemma" : "my" }, \n        	  map { "pos" : "JJ", "lemma" : "natural" }, \n        	  map { "pos" : "NN", "lemma" : "taste" }, \n        	  map { "pos" : "VBZ", "lemma" : "is" }, \n        	  map { "pos" : "DT", "lemma" : "all" }, \n        	  map { "pos" : "IN", "lemma" : "for" }, \n        	  map { "pos" : "NN", "lemma" : "simplicity" }, \n        	  map { "pos" : ":", "lemma" : ";" }, \n        	  map { "pos" : "DT", "lemma" : "a" }, \n        	  map { "pos" : "JJ", "lemma" : "simple" }, \n        	  map { "pos" : "NN", "lemma" : "style" }, \n        	  map { "pos" : "IN", "lemma" : "of" }, \n        	  map { "pos" : "NN", "lemma" : "dress" }, \n        	  map { "pos" : "VBZ", "lemma" : "is" }, \n        	  map { "pos" : "RB", "lemma" : "so" }, \n        	  map { "pos" : "RB", "lemma" : "infinitely" }, \n        	  map { "pos" : "JJ", "lemma" : "preferable" }, \n        	  map { "pos" : "TO", "lemma" : "to" }, \n        	  map { "pos" : "VB", "lemma" : "finery" }, \n        	  map { "pos" : ".", "lemma" : "." } \n        	]\n        ))'
UseCaseNLP-004;PRSC Error: Failed to parse query '\n          for $word in json-doc('speech-representation.json')?*\n          let $pos := $word(2)\n          let $lexeme := $word(1)\n          where $pos = ("JJ", "NN", "RB", "VB")\n          group by $pos\n          order by $pos\n          return \n            <pos name="{$pos}">\n              { \n                for $l in distinct-values($lexeme)\n                return <lexeme>{ $l }</lexeme>\n              }\n            </pos>\n        '
UseCaseNLP-005;PRSC Error: Failed to parse query 'deep-equal((\n          declare function local:words-only($s)\n          {\n            for $w in $s\n            where not($w(2) = (".", ",", ";", ":"))\n            return $w(1)\n          };\n          \n          for sliding window $w in local:words-only(json-doc('speech-representation.json')?*)\n              start at $i when true()\n              only end at $j when $j - $i eq 2\n          return \n              array { $w }\n        ), (\n            ([ "A", "bride", "you" ], \n            [ "bride", "you", "know" ], \n            [ "you", "know", "must" ], \n            [ "know", "must", "appear" ], \n            [ "must", "appear", "like" ], \n            [ "appear", "like", "a" ], \n            [ "like", "a", "bride" ], \n            [ "a", "bride", "but" ], \n            [ "bride", "but", "my" ], \n            [ "but", "my", "natural" ], \n            [ "my", "natural", "taste" ], \n            [ "natural", "taste", "is" ], \n            [ "taste", "is", "all" ], \n            [ "is", "all", "for" ], \n            [ "all", "for", "simplicity" ], \n            [ "for", "simplicity", "a" ], \n            [ "simplicity", "a", "simple" ], \n            [ "a", "simple", "style" ], \n            [ "simple", "style", "of" ], \n            [ "style", "of", "dress" ], \n            [ "of", "dress", "is" ], \n            [ "dress", "is", "so" ], \n            [ "is", "so", "infinitely" ], \n            [ "so", "infinitely", "preferable" ], \n            [ "infinitely", "preferable", "to" ], \n            [ "preferable", "to", "finery" ])\n          ))'
UseCaseNLP-006a;PRSC Error: Failed to parse query 'deep-equal((\n          declare function local:filter($s as item()*, $p as function(item()) as xs:boolean)\n          {\n            array { $s[$p(.)] },   array { $s[not($p(.))] }\n          };\n          \n          let $f := function($a) { starts-with($a(2), "VB") }\n          return\n            local:filter(json-doc('speech-representation.json')?*, $f)			  \n        ), (\n            [["know", "VBP"], ["appear", "VB"], ["is", "VBZ"], ["is", "VBZ"], ["finery", "VB"]],\n             [["A", "DT"], ["bride", "NN"], [",", ","], ["you", "PRP"], [",", ","], ["must", "MD"], \n              ["like", "IN"], ["a", "DT"], ["bride", "NN"], [",", ","], ["but", "CC"], ["my", "PRP$"], \n              ["natural", "JJ"], ["taste", "NN"], ["all", "DT"], ["for", "IN"], ["simplicity", "NN"], \n              [";", ":"], ["a", "DT"], ["simple", "JJ"], ["style", "NN"], ["of", "IN"], ["dress", "NN"], \n              ["so", "RB"], ["infinitely", "RB"], ["preferable", "JJ"], ["to", "TO"], [".", "."]]\n          ))'
UseCaseNLP-006b;PRSC Error: Failed to parse query 'deep-equal((\n          declare function local:filter($s as item()*, $p as function(item()) as xs:boolean)\n          {\n           map {\n              true() : array { $s[$p(.)] },   \n              false() : array { $s[not($p(.))] }\n            }\n          };					\n          let $f := function($a) { starts-with($a(2), "VB") }\n          return\n            local:filter(json-doc('speech-representation.json')?*, $f)\n  			  ), (\n              map { \n              true() : \n                         [ [ "know", "VBP" ], [ "appear", "VB" ], [ "is", "VBZ" ],\n                           ["is", "VBZ" ], [ "finery", "VB" ] ],\n              \n              false() :  \n              \n                         [ [ "A", "DT" ], ["bride", "NN" ], [ ",", "," ], \n                           [ "you", "PRP" ], [ ",", "," ], [ "must", "MD" ], \n                           [ "like", "IN" ], [ "a", "DT" ], [ "bride", "NN" ], \n                           [ ",", "," ], [ "but", "CC" ], [ "my", "PRP$" ], \n                           [ "natural", "JJ" ], [ "taste", "NN" ], [ "all", "DT"],\n                           [ "for", "IN" ], [ "simplicity", "NN" ], [ ";", ":" ],\n                           [ "a", "DT" ], [ "simple", "JJ" ], [ "style", "NN" ], \n                           [ "of", "IN" ], [ "dress", "NN" ], [ "so", "RB" ], \n                           [ "infinitely", "RB" ], [ "preferable", "JJ" ], \n                           [ "to", "TO" ], [ ".", "." ] ] \n              }\n          ))'
UseCaseR31-001;PRSC Error: Failed to parse query 'let $result := (\n        for $e in /employees/employee,\n    $d in $e/department\ngroup by $d\nreturn\n   <department name="{$d}">\n     {\n       let $max := max($e/salary)\n       return $e[salary=$max]\n     }\n   </department>\n      ) return $result/@name='Management''
UseCaseR31-002;PRSC Error: Failed to parse query 'let $result := (\n        for $e in /employees/employee,\n    $d in $e/department\ngroup by $d\nreturn\n   map {\n     "department" : $d,\n     "highest paid employee" :\n       let $max := max($e/salary)\n       return $e[salary=$max]/name/text()}) return $result?("highest paid employee") = "Charles Madigen"'
UseCaseR31-003;PRSC Error: Failed to parse query 'let $result := (   <out>  {\nfor $employee in /employees/employee\nlet $salary := $employee/salary\ngroup by $department := $employee/department\nlet $max-salary := max($salary)\nlet $highest-earners := $employee[salary = $max-salary]\nreturn\n   <department name="{$department}">{ $highest-earners }</department>,\n\nfor $employee in /employees/employee\nlet $salary := $employee/salary\ngroup by $job-type := $employee/employeeType\nlet $totals := count($employee)\nreturn\n    <total-by-job-type type="{$job-type}">{ $totals }</total-by-job-type>\n    }</out>) return $result/department/@name='Management''
UseCaseR31-004;PRSC Error: Failed to parse query 'let $result := (\n        declare namespace map="http://www.w3.org/2005/xpath-functions/map";\n\n        for $employee in /employees/employee\nlet $salary := $employee/salary\ngroup by $department := $employee/department\nlet $max-salary := max($salary)\nlet $highest-earners := $employee[salary = $max-salary]\nreturn\n  map{ "first" : map {\n     "department" : $department,\n     "highest earners" : $highest-earners/name/text()\n   }\n, "job type count" : map:merge(\nfor $employee in /employees/employee\nlet $salary := $employee/salary\ngroup by $job-type := $employee/employeeType\nlet $totals := count($employee)\nreturn map {\n      $job-type : $totals\n   }\n   )}\n      ) return $result?first?("highest earners") = "Charles Madigen"'
UseCaseR31-009;PRSC Error: Failed to parse query 'let $result := (\n      declare namespace map="http://www.w3.org/2005/xpath-functions/map";\n      declare variable $book:= (<book>\n<isbn>0470192747</isbn>\n<publisher>Wiley</publisher>\n<title>XSLT 2.0 and XPath 2.0 Programmer's Reference</title>\n</book>);\n\ndeclare variable $author := (<author>\n<name>Michael H. Kay</name>\n<isbn>0470192747</isbn>\n<isbn>...</isbn>\n</author>);\n\n      declare variable $index := map:merge($book ! map{isbn : .});\n\n<table>{\n  for $a in $author\n  return <tr>\n    <td>{ $a/name/string() }</td>\n    <td>{ string-join($a/isbn ! $index(.)/title/string(), ", ") }</td>\n  </tr>\n}</table>\n      ) return $result//td[1]='Michael H. Kay''
UseCaseR31-012;PRSC Error: Failed to parse query 'declare function local:play(\n  $secret-number as xs:integer,\n  $guessed-number as xs:integer,\n  $translator as function(xs:string) as xs:string)\n{\n  switch (true())\n  case $guessed-number eq $secret-number\n    return $translator("You won!")\n  case $guessed-number lt $secret-number\n    return $translator("The secret number is greater.")\n  default (: $guessed-number gt $secret-number :)\n    return $translator("The secret number is lower.")\n};\n\nlocal:play(76, 86, function($x) { $x }), (: Keep English :)\n\nlocal:play(76, 86, map {\n  "You won!" : "Du hast gewonnen!",\n  "The secret number is greater." : "Die geheime Zahl ist groesser.",\n  "The secret number is lower." :  "Die geheime Zahl ist kleiner." }\n)\n       '
UseCaseR31-013;PRSC Error: Failed to parse query '\n              declare variable $s :=[['A', 'DT'], ['bride', 'NN'], [',', ','], ['you', 'PRP'], ['know', 'VBP'], [',', ','], ['must', 'MD'],\n ['appear', 'VB'], ['like', 'IN'], ['a', 'DT'], ['bride', 'NN'], [',', ','], ['but', 'CC'], ['my', 'PRP$'],\n ['natural', 'JJ'], ['taste', 'NN'], ['is', 'VBZ'], ['all', 'DT'], ['for', 'IN'], ['simplicity', 'NN'], [';', ':'],\n ['a', 'DT'], ['simple', 'JJ'], ['style', 'NN'], ['of', 'IN'], ['dress', 'NN'], ['is', 'VBZ'],\n ['so', 'RB'], ['infinitely', 'RB'], ['preferable', 'JJ'], ['to', 'TO'], ['finery', 'VB'], ['.', '.']\n];\n<s>\n {\n  for $w in $s?*\n  return <w pos="{ $w(2) }">{ $w(1) }</w>\n }\n</s>\n\n      '
UseCaseR31-014;PRSC Error: Failed to parse query '\n              declare variable $s :=[['A', 'DT'], ['bride', 'NN'], [',', ','], ['you', 'PRP'], ['know', 'VBP'], [',', ','], ['must', 'MD'],\n ['appear', 'VB'], ['like', 'IN'], ['a', 'DT'], ['bride', 'NN'], [',', ','], ['but', 'CC'], ['my', 'PRP$'],\n ['natural', 'JJ'], ['taste', 'NN'], ['is', 'VBZ'], ['all', 'DT'], ['for', 'IN'], ['simplicity', 'NN'], [';', ':'],\n ['a', 'DT'], ['simple', 'JJ'], ['style', 'NN'], ['of', 'IN'], ['dress', 'NN'], ['is', 'VBZ'],\n ['so', 'RB'], ['infinitely', 'RB'], ['preferable', 'JJ'], ['to', 'TO'], ['finery', 'VB'], ['.', '.']\n];\ndeclare variable $index := map { "pos" : 2, "lemma" : 1 };\n\n<s>\n {\n  for $w in $s?*\n  return <w pos="{ $w($index("pos")) }">{ $w($index("lemma")) }</w>\n }\n</s>'
UseCaseR31-015;PRSC Error: Failed to parse query '\n              declare variable $s :=[['A', 'DT'], ['bride', 'NN'], [',', ','], ['you', 'PRP'], ['know', 'VBP'], [',', ','], ['must', 'MD'],\n ['appear', 'VB'], ['like', 'IN'], ['a', 'DT'], ['bride', 'NN'], [',', ','], ['but', 'CC'], ['my', 'PRP$'],\n ['natural', 'JJ'], ['taste', 'NN'], ['is', 'VBZ'], ['all', 'DT'], ['for', 'IN'], ['simplicity', 'NN'], [';', ':'],\n ['a', 'DT'], ['simple', 'JJ'], ['style', 'NN'], ['of', 'IN'], ['dress', 'NN'], ['is', 'VBZ'],\n ['so', 'RB'], ['infinitely', 'RB'], ['preferable', 'JJ'], ['to', 'TO'], ['finery', 'VB'], ['.', '.']\n];\ndeclare variable $index := map { "pos" : 2, "lemma" : 1 };\n\nfor $word in $s?*\nlet $pos := $word(2)\nlet $lexeme := $word(1)\nwhere $pos = ("JJ", "NN", "RB", "VB")\ngroup by $pos\norder by $pos\nreturn\n  <pos name="{$pos}">\n    {\n      for $l in distinct-values($lexeme)\n      return <lexeme>{ $l }</lexeme>\n    }\n  </pos>'
UseCaseR31-016;PRSC Error: Failed to parse query 'deep-equal((\n              declare variable $s :=[['A', 'DT'], ['bride', 'NN'], [',', ','], ['you', 'PRP'], ['know', 'VBP'], [',', ','], ['must', 'MD'],\n ['appear', 'VB'], ['like', 'IN'], ['a', 'DT'], ['bride', 'NN'], [',', ','], ['but', 'CC'], ['my', 'PRP$'],\n ['natural', 'JJ'], ['taste', 'NN'], ['is', 'VBZ'], ['all', 'DT'], ['for', 'IN'], ['simplicity', 'NN'], [';', ':'],\n ['a', 'DT'], ['simple', 'JJ'], ['style', 'NN'], ['of', 'IN'], ['dress', 'NN'], ['is', 'VBZ'],\n ['so', 'RB'], ['infinitely', 'RB'], ['preferable', 'JJ'], ['to', 'TO'], ['finery', 'VB'], ['.', '.']\n];\ndeclare function local:words-only($s)\n{\n  for $w in $s\n  where not($w(2) = (".", ",", ";", ":"))\n  return $w(1)\n};\n\nfor sliding window $w in local:words-only($s?*)\n    start at $i when true()\n    only end at $j when $j - $i eq 2\nreturn\n    array { $w }), ([ "A", "bride", "you" ],\n[ "bride", "you", "know" ],\n[ "you", "know", "must" ],\n[ "know", "must", "appear" ],\n[ "must", "appear", "like" ],\n[ "appear", "like", "a" ],\n[ "like", "a", "bride" ],\n[ "a", "bride", "but" ],\n[ "bride", "but", "my" ],\n[ "but", "my", "natural" ],\n[ "my", "natural", "taste" ],\n[ "natural", "taste", "is" ],\n[ "taste", "is", "all" ],\n[ "is", "all", "for" ],\n[ "all", "for", "simplicity" ],\n[ "for", "simplicity", "a" ],\n[ "simplicity", "a", "simple" ],\n[ "a", "simple", "style" ],\n[ "simple", "style", "of" ],\n[ "style", "of", "dress" ],\n[ "of", "dress", "is" ],\n[ "dress", "is", "so" ],\n[ "is", "so", "infinitely" ],\n[ "so", "infinitely", "preferable" ],\n[ "infinitely", "preferable", "to" ],\n[ "preferable", "to", "finery" ]))'
UseCaseR31-017;PRSC Error: Failed to parse query 'deep-equal((\n              declare variable $s :=[['A', 'DT'], ['bride', 'NN'], [',', ','], ['you', 'PRP'], ['know', 'VBP'], [',', ','], ['must', 'MD'],\n ['appear', 'VB'], ['like', 'IN'], ['a', 'DT'], ['bride', 'NN'], [',', ','], ['but', 'CC'], ['my', 'PRP$'],\n ['natural', 'JJ'], ['taste', 'NN'], ['is', 'VBZ'], ['all', 'DT'], ['for', 'IN'], ['simplicity', 'NN'], [';', ':'],\n ['a', 'DT'], ['simple', 'JJ'], ['style', 'NN'], ['of', 'IN'], ['dress', 'NN'], ['is', 'VBZ'],\n ['so', 'RB'], ['infinitely', 'RB'], ['preferable', 'JJ'], ['to', 'TO'], ['finery', 'VB'], ['.', '.']\n];\ndeclare function local:filter($s as item()*, $p as function(item()) as xs:boolean)\n{\n  array { $s[$p(.)] },   array { $s[not($p(.))] }\n};\n\nlet $f := function($a) { starts-with($a(2), "VB") }\nreturn\n  local:filter($s?*, $f)), ([ [ "know", "VBP" ], [ "appear", "VB" ], [ "is", "VBZ" ], [ "is", "VBZ" ],\n[ "finery", "VB" ] ],\n\n[ [ "A", "DT" ], [ "bride", "NN" ], [ ",", "," ], [ "you", "PRP" ],\n  [ ",", "," ], [ "must", "MD" ], [ "like", "IN" ], [ "a", "DT" ],\n  [ "bride", "NN" ], [ ",", "," ], [ "but", "CC" ], [ "my", "PRP$" ],\n  [ "natural", "JJ" ], [ "taste", "NN" ], [ "all", "DT" ], [ "for", "IN" ],\n  [ "simplicity", "NN" ], [ ";", ":" ], [ "a", "DT" ], [ "simple", "JJ" ],\n  [ "style", "NN" ], [ "of", "IN" ], [ "dress", "NN" ], [ "so", "RB" ],\n  [ "infinitely", "RB" ], [ "preferable", "JJ" ], [ "to", "TO"],\n  [ ".", "." ] ]))'
UseCaseR31-018;PRSC Error: Failed to parse query 'deep-equal((\n              declare variable $s :=[['A', 'DT'], ['bride', 'NN'], [',', ','], ['you', 'PRP'], ['know', 'VBP'], [',', ','], ['must', 'MD'],\n ['appear', 'VB'], ['like', 'IN'], ['a', 'DT'], ['bride', 'NN'], [',', ','], ['but', 'CC'], ['my', 'PRP$'],\n ['natural', 'JJ'], ['taste', 'NN'], ['is', 'VBZ'], ['all', 'DT'], ['for', 'IN'], ['simplicity', 'NN'], [';', ':'],\n ['a', 'DT'], ['simple', 'JJ'], ['style', 'NN'], ['of', 'IN'], ['dress', 'NN'], ['is', 'VBZ'],\n ['so', 'RB'], ['infinitely', 'RB'], ['preferable', 'JJ'], ['to', 'TO'], ['finery', 'VB'], ['.', '.']\n];\ndeclare function local:filter($s as item()*, $p as function(item()) as xs:boolean)\n{\n  map {\n    true() : array { $s[$p(.)] },\n    false() : array { $s[not($p(.))] }\n  }\n};\n\n\nlet $f := function($a) { starts-with($a(2), "VB") }\nreturn\n  local:filter($s?*, $f)), (map {\n\n  true() :\n             [ [ "know", "VBP" ], [ "appear", "VB" ], [ "is", "VBZ" ],\n               ["is", "VBZ" ], [ "finery", "VB" ] ],\n\n  false() :\n\n             [ [ "A", "DT" ], ["bride", "NN" ], [ ",", "," ],\n               [ "you", "PRP" ], [ ",", "," ], [ "must", "MD" ],\n               [ "like", "IN" ], [ "a", "DT" ], [ "bride", "NN" ],\n               [ ",", "," ], [ "but", "CC" ], [ "my", "PRP$" ],\n               [ "natural", "JJ" ], [ "taste", "NN" ], [ "all", "DT"],\n               [ "for", "IN" ], [ "simplicity", "NN" ], [ ";", ":" ],\n               [ "a", "DT" ], [ "simple", "JJ" ], [ "style", "NN" ],\n               [ "of", "IN" ], [ "dress", "NN" ], [ "so", "RB" ],\n               [ "infinitely", "RB" ], [ "preferable", "JJ" ],\n               [ "to", "TO" ], [ ".", "." ] ]\n}))'
UseCaseR31-019;PRSC Error: Failed to parse query '\n              declare variable $span := <root><span class="ocr_word" title="bbox 1388 430 1461 474">the</span>\n<span class="ocr_word" title="bbox 1514 433 1635 476">other</span>\n<span class="ocr_word" title="bbox 133 498 317 554">pcssible</span>\n<span class="ocr_word" title="bbox 354 498 590 541">derivation</span>\n<span class="ocr_word" title="bbox 631 497 738 538">from</span>\n<span class="ocr_word" title="bbox 772 495 799 547" lang="grc" xml:lang="grc">?</span>\n<span class="ocr_word" title="bbox 835 495 1019 538" lang="grc" xml:lang="grc">???????</span>\n<span class="ocr_word" title="bbox 134 567 220 607">dies</span>\n<span class="ocr_word" title="bbox 257 566 462 607">erastinus</span></root>;\n\ndeclare function local:extract-text($spans)\n{\n  for $s in $spans//span return string($s)\n};\n\n  local:extract-text($span)'
UseCaseR31-022;PRSC Error: Failed to parse query 'json-doc("http://www.w3.org/qt3/app/UseCaseR31/mildred-json")?phone?*[?type = 'mobile']?number'
UseCaseR31-023;PRSC Error: Failed to parse query '\ndeclare namespace map = "http://www.w3.org/2005/xpath-functions/map";\ndeclare namespace array = "http://www.w3.org/2005/xpath-functions/array";\n\nlet $input := json-doc('http://www.w3.org/qt3/app/UseCaseR31/employees-json')\nfor $k in map:keys($input)\norder by $k descending\nreturn\n  <department name="{ $k }">\n    {\n    let $array := $input($k)\n    for $i in 1 to array:size($array)\n    let $emp := $array($i)\n    return\n      <employee>\n        <firstName>{ $emp('firstName') }</firstName>\n        <lastName>{ $emp('lastName') }</lastName>\n        <age>{ $emp('age') }</age>\n      </employee>\n    }\n  </department>'
UseCaseR31-025;PRSC Error: Failed to parse query 'deep-equal((declare namespace map="http://www.w3.org/2005/xpath-functions/map";\n\ndeclare function local:deep-put($input as item()*, $key as xs:string, $value as item()*) as item()*\n{\n  let $mf := function($k, $v) {\n                if ($k eq $key)\n                then map{$k : $value}\n                else map{$k : local:deep-put($v, $key, $value)}\n             }\n  for $i in $input\n  return\n    if ($i instance of map(*))\n    then map:merge(map:for-each($i, $mf))\n    else if ($i instance of array(*))\n    then array{ local:deep-put($i?*, $key, $value) }\n    else $i\n};\n\nlocal:deep-put(json-doc("http://www.w3.org/qt3/app/UseCaseR31/bookinfo-json"), "first", "John")), (map {\n    "book": map {\n        "title": "Data on the Web",\n        "year": 2000,\n        "author": [\n            map {\n                "last": "Abiteboul",\n                "first": "John"\n            },\n            map {\n                "last": "Buneman",\n                "first": "John"\n            },\n            map {\n                "last": "Suciu",\n                "first": "John"\n            }\n        ],\n        "publisher": "Morgan Kaufmann Publishers",\n        "price": 39.95\n    }\n}))'
UseCaseR31-026;Use of XQuery FLWOR expressions in XPath is not allowed
UseCaseR31-027;PRSC Error: Failed to parse query 'deep-equal((\nQ{http://www.w3.org/2005/xpath-functions/map}merge(\n  for $sales in collection($sales-collection-uri)\n  let $pname := $sales('product')\n  group by $pname\n  return map { $pname : sum(for $s in $sales return $s('quantity')) })), (map {\n  "blender" : 250,\n  "broiler" : 20,\n  "shirt" : 10,\n  "socks" : 510,\n  "toaster" : 200\n  }))'
UseCaseR31-028;PRSC Error: Failed to parse query 'deep-equal((\n      declare namespace map="http://www.w3.org/2005/xpath-functions/map";\n      declare variable $storesVar := array { unparsed-text-lines("UseCaseR31/stores.json") ! parse-json(.) };\n      declare variable $productsVar := array { unparsed-text-lines("UseCaseR31/products.json") ! parse-json(.) };\n      declare variable $salesVar := array { unparsed-text-lines("UseCaseR31/sales.json") ! parse-json(.) };\n      array {\n  for $store in $storesVar ? *\n  let $state := $store?state\n  group by $state\n  order by $state\n  return\n    map {\n      $state :  array {\n        for $product in $productsVar ? *\n        let $category := $product?category\n        group by $category\n        order by $category\n        return\n          map {\n            $category :  map:merge((\n              for $sales in $salesVar ? *\n              where $sales?("store number") = $store?("store number") and $sales?product = $product?name\n              let $pname := $sales?product\n              group by $pname\n              return map { $pname :  sum(for $s in $sales return $s?quantity)}\n            ))\n          }\n      }\n    }\n}), ([map{"CA":[map{"clothes":map{"socks":510}},map{"kitchen":map{"broiler":20,"toaster":150}}]},map{"MA":[map{"clothes":map{"shirt":10}},map{"kitchen":map{"toaster":50,"blender":250}}]}]))'
UseCaseR31-029;Expected executing the XPath 'declare namespace map="http://www.w3.org/2005/xpath-functions/map";\nlet $sats := json-doc("http://www.w3.org/qt3/app/UseCaseR31/satellites-json")("satellites")\nreturn map {\n  "visible" : array {\n     map:keys($sats)[$sats(.)("visible")]\n  },\n  "invisible" : array {\n     map:keys($sats)[not($sats(.)("visible"))]\n  }\n}' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'deep-equal((declare namespace map="http://www.w3.org/2005/xpath-functions/map";\nlet $sats := json-doc("http://www.w3.org/qt3/app/UseCaseR31/satellites-json")("satellites")\nreturn map {\n  "visible" : array {\n     map:keys($sats)[$sats(.)("visible")]\n  },\n  "invisible" : array {\n     map:keys($sats)[not($sats(.)("visible"))]\n  }\n}), (map { "visible" : ["AKARI (ASTRO-F)","AJISAI (EGS)"], "invisible" : ["AAU CUBESAT"]}))'
UseCaseR31-030;PRSC Error: Failed to parse query 'let $result := (array {\n for $page in doc("UseCaseR31/Wikipedia-Origami.xml")//page\n return map {\n  "title": string($page/title),\n  "id" : string($page/id),\n  "last updated" : string($page/revision[1]/timestamp),\n  "authors" : array {\n       for $a in $page/revision/contributor/username\n       return string($a)\n  }\n }\n}) return array:get($result,1)?authors = "Myasuda"'
UseCaseR31-031;PRSC Error: Failed to parse query 'let $result := (\n  <html><body><table>\n    <tr> (: Column headings :)\n         {\n            <th> </th>,\n            for $th in json-doc('http://www.w3.org/qt3/app/UseCaseR31/table-json')?col-labels?*\n            return <th>{ $th }</th>\n         }\n      </tr>\n      {  (: Data for each row :)\n         for $r at $i in json-doc('http://www.w3.org/qt3/app/UseCaseR31/table-json')?data?*\n         return\n            <tr>\n             {\n               <th>{ json-doc('http://www.w3.org/qt3/app/UseCaseR31/table-json')?row-labels[$i] }</th>,\n               for $c in $r?*\n               return <td>{ $c }</td>\n             }\n            </tr>\n      }\n    </table>\n\n  </body>\n</html>\n   ) return count($result//td[text()='spinnen'])=2'
UseCaseR31-032;PRSC Error: Failed to parse query '\n  <table>{\n  for tumbling window $w in json-doc("http://www.w3.org/qt3/app/UseCaseR31/colors-json")?colors?*\n   start at $x when fn:true()\n    end at $y when $y - $x = 2\n  return\n    <tr>{\n      for $i in $w?color\n      return\n        <td>{ $i }</td>\n    }</tr>\n}</table>\n   '
UseCaseR31-033;PRSC Error: Failed to parse query 'deep-equal((\n        declare namespace map="http://www.w3.org/2005/xpath-functions/map";\n  let $dbj := json-doc("http://www.w3.org/qt3/app/UseCaseR31/users2-json")[ .("name") = "Deadbeat Jim" ]\nreturn map:put($dbj, "status", "credit card declined")\n   ), (map {\n  "name" : "Deadbeat Jim",\n  "address" : "1 E 161st St, Bronx, NY 10451",\n  "status" : "credit card declined",\n  "risk tolerance" : "high"\n}))'
UseCaseR31-034-err;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n  let $mf := function($k as node(), $v) {\n                map{$k('book') : $v}\n\n             }\n\n  return $mf(json-doc("http://www.w3.org/qt3/app/UseCaseR31/bookinfo-json"), "first")'
user-defined-1;PRSC Error: Failed to parse query '\n        import schema namespace myType="http://www.w3.org/XQueryTest/userDefinedTypes"; \n        let $value := myType:sizeType(1) return ($value eq 1)'
user-defined-10;PRSC Error: Failed to parse query '\n        import schema namespace myType="http://www.w3.org/XQueryTest/userDefinedTypes"; \n        myType:sizeType(16) + myType:floatBased (16) = 32'
user-defined-2;Expected error code: FORG0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        import schema namespace myType="http://www.w3.org/XQueryTest/userDefinedTypes"; \n        let $value := myType:sizeType(20) return $value'
user-defined-3;PRSC Error: Failed to parse query '\n        import schema namespace myType="http://www.w3.org/XQueryTest/userDefinedTypes"; \n        let $value := myType:sizeType(1) + myType:sizeType(2) return $value = 3'
user-defined-4;PRSC Error: Failed to parse query '\n        import schema namespace myType="http://www.w3.org/XQueryTest/userDefinedTypes"; \n        let $value := myType:stringBased("valid value 4") return $value'
user-defined-5;PRSC Error: Failed to parse query '\n        import schema namespace myType="http://www.w3.org/XQueryTest/userDefinedTypes"; \n        fn:concat(myType:stringBased("valid value 4"),myType:stringBased("valid value 1"))'
user-defined-6;PRSC Error: Failed to parse query '\n        import schema namespace myType="http://www.w3.org/XQueryTest/userDefinedTypes"; \n        (myType:sizeType(2) cast as xs:integer) eq 2'
user-defined-7;PRSC Error: Failed to parse query '\n        import schema namespace myType="http://www.w3.org/XQueryTest/userDefinedTypes"; \n        myType:sizeType(2) castable as xs:integer'
user-defined-8;PRSC Error: Failed to parse query '\n        import schema namespace myType="http://www.w3.org/XQueryTest/userDefinedTypes"; \n        (myType:sizeType(16) cast as myType:floatBased) eq 16'
user-defined-9;PRSC Error: Failed to parse query '\n        import schema namespace myType="http://www.w3.org/XQueryTest/userDefinedTypes"; \n        myType:sizeType(16) castable as myType:floatBased'
value-comparison-1;Type casting to XsAnyUri has not been implemented yet.
value-comparison-10;Expected executing the XPath 'map{} eq ()' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '(map{} eq ()) => empty()'
value-comparison-11;Expected error code: FOTY0013. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'map{1:1} eq 1'
value-comparison-13;PRSC Error: Failed to parse query '\n         import schema namespace myType="http://www.w3.org/XQueryTest/userDefinedTypes"; \n         myType:hatsize(5) eq myType:integer-or-nothing(5)'
value-comparison-14;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         import schema namespace myType="http://www.w3.org/XQueryTest/userDefinedTypes"; \n         myType:hatsize(5) eq myType:integer-or-nothing("")'
value-comparison-2;Type casting to XsAnyUri has not been implemented yet.
value-comparison-3;Expected executing the XPath 'import schema namespace myType="http://www.w3.org/XQueryTest/userDefinedTypes"; \n        myType:hatsize(5) eq myType:shoesize(5)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n        import schema namespace myType="http://www.w3.org/XQueryTest/userDefinedTypes"; \n        myType:hatsize(5) eq myType:shoesize(5)'
value-comparison-4;Expected executing the XPath 'import schema namespace myType="http://www.w3.org/XQueryTest/userDefinedTypes"; \n        myType:hatsize(5) ne myType:shoesize(5)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n        import schema namespace myType="http://www.w3.org/XQueryTest/userDefinedTypes"; \n        myType:hatsize(5) ne myType:shoesize(5)'
value-comparison-5;PRSC Error: Failed to parse query '[3] eq 3'
value-comparison-6;PRSC Error: Failed to parse query '[3] le [3]'
value-comparison-7;PRSC Error: Failed to parse query '([] eq 3) => empty()'
value-comparison-8;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '[3,4] eq 3'
value-comparison-9;PRSC Error: Failed to parse query '([] eq ()) => empty()'
VarDecl001;PRSC Error: Failed to parse query 'declare variable $x := "" ; $x'
VarDecl002;PRSC Error: Failed to parse query 'declare variable $x := '' ; $x'
VarDecl003;PRSC Error: Failed to parse query 'declare variable $x := 'a string' ; $x'
VarDecl004;PRSC Error: Failed to parse query 'declare variable $x := "a string" ; $x'
VarDecl005;PRSC Error: Failed to parse query 'declare variable $x := "This is a string, isn't it?" ; $x'
VarDecl006;PRSC Error: Failed to parse query 'declare variable $x := 'This is a "String"' ; $x'
VarDecl007;PRSC Error: Failed to parse query 'declare variable $x := "a "" or a ' delimits a string literal" ; $x'
VarDecl008;PRSC Error: Failed to parse query 'declare variable $x := 'a " or a '' delimits a string literal' ; $x'
VarDecl009;PRSC Error: Failed to parse query 'declare variable $x := '&lt;bold&gt;A sample element.&lt;/bold&gt;' ; $x'
VarDecl010;PRSC Error: Failed to parse query 'declare variable $x := 0 ; $x = 0'
VarDecl011;PRSC Error: Failed to parse query 'declare variable $x := 1 ; $x = 1'
VarDecl012;PRSC Error: Failed to parse query 'declare variable $x := -1 ; $x = -1'
VarDecl013;PRSC Error: Failed to parse query 'declare variable $x := +1 ; $x = 1'
VarDecl014;PRSC Error: Failed to parse query 'declare variable $x := 1.23 ; $x'
VarDecl015;PRSC Error: Failed to parse query 'declare variable $x := -1.23 ; $x'
VarDecl016;PRSC Error: Failed to parse query 'declare variable $x := 1.2e5 ; $x = 120000'
VarDecl017;PRSC Error: Failed to parse query 'declare variable $x := -1.2E5 ; $x = -120000'
VarDecl018;PRSC Error: Failed to parse query 'declare variable $x := 0.0E0 ; $x = 0'
VarDecl019;PRSC Error: Failed to parse query 'declare variable $x := 1e-5 ; $x'
VarDecl020;PRSC Error: Failed to parse query 'declare variable $x := 9.999999999999999; $x'
VarDecl021;PRSC Error: Failed to parse query 'declare variable $x := -10000000 ; $x = -10000000'
VarDecl022;PRSC Error: Failed to parse query 'declare variable $x := 1 to 10 ; $x'
VarDecl023;PRSC Error: Failed to parse query 'declare variable $x := xs:double('NaN'); $x'
VarDecl024;PRSC Error: Failed to parse query 'declare variable $x := xs:double('INF'); $x'
VarDecl025;PRSC Error: Failed to parse query 'declare variable $x := xs:double('-INF'); $x'
VarDecl026;PRSC Error: Failed to parse query 'declare variable $x := fn:false() ; $x'
VarDecl027;PRSC Error: Failed to parse query 'declare variable $x := false(); $x'
VarDecl028;PRSC Error: Failed to parse query 'declare variable $x := fn:true() ; $x'
VarDecl029;PRSC Error: Failed to parse query 'declare variable $x := true() ; $x'
VarDecl030;PRSC Error: Failed to parse query 'declare variable $x := true(); $x'
VarDecl031;PRSC Error: Failed to parse query 'declare variable $x := 2+2 ; $x = 4'
VarDecl032;PRSC Error: Failed to parse query 'declare variable $x := 2*2 ; $x = 4'
VarDecl033;PRSC Error: Failed to parse query 'declare variable $x := 3-2 ; $x = 1'
VarDecl034;PRSC Error: Failed to parse query 'declare variable $x := 3 div 2 ; $x'
VarDecl035;PRSC Error: Failed to parse query 'declare variable $x := 3 mod 2 ; $x = 1'
VarDecl036;PRSC Error: Failed to parse query 'declare variable $x := 3 idiv 2 ; $x = 1'
VarDecl037;PRSC Error: Failed to parse query 'declare variable $x := -1.7976931348623157E308 ; $x'
VarDecl038;PRSC Error: Failed to parse query 'declare variable $x := xs:double("-1.7976931348623157E308") ; $x'
VarDecl039;PRSC Error: Failed to parse query 'declare variable $x := -999999999999999999 ; $x = -999999999999999999'
VarDecl040;PRSC Error: Failed to parse query 'declare variable $x := xs:decimal("-999999999999999999") ; $x = -999999999999999999'
VarDecl041;PRSC Error: Failed to parse query 'declare variable $x := 999999999999999999 ; $x = 999999999999999999'
VarDecl042;PRSC Error: Failed to parse query 'declare variable $x := xs:decimal("999999999999999999") ; $x = 999999999999999999'
VarDecl043;PRSC Error: Failed to parse query 'declare variable $x := -3.4028235E38 ; $x'
VarDecl044;PRSC Error: Failed to parse query 'declare variable $x := xs:float("-3.4028235E38") ; $x'
VarDecl045;PRSC Error: Failed to parse query 'declare variable $x := xs:date("1970-01-01Z") ; $x'
VarDecl046;PRSC Error: Failed to parse query 'declare variable $x := xs:date("1970-01-01Z") + xs:dayTimeDuration("P31DT23H59M59S") ; $x'
VarDecl047;PRSC Error: Failed to parse query 'declare variable $x := xs:time("08:03:35Z") ; $x'
VarDecl048;PRSC Error: Failed to parse query 'declare variable $x := xs:time("08:03:35Z") + xs:dayTimeDuration("P0DT0H0M0S") ; $x'
VarDecl049;PRSC Error: Failed to parse query 'declare variable $x := xs:dateTime("2030-12-31T23:59:59Z") ; $x'
VarDecl050;PRSC Error: Failed to parse query 'declare variable $x := (1,2,3) ; $x'
VarDecl051;PRSC Error: Failed to parse query 'declare variable $x := (xs:string("a") , (), "xyz") ; $x'
VarDecl052;PRSC Error: Failed to parse query 'declare variable $x := (xs:string("a") , xs:anyURI("www.example.com")) ; $x'
VarDecl053;PRSC Error: Failed to parse query 'declare variable $x := (xs:float("INF") , xs:double("NaN")) ; $x'
VarDecl054;PRSC Error: Failed to parse query 'declare variable $x := (xs:boolean("true") , xs:boolean("0"), xs:integer("0")) ; $x'
VarDecl055;PRSC Error: Failed to parse query 'declare variable $x := (xs:date("1993-03-31") , xs:boolean("true"), xs:string("abc")) ; $x'
VarDecl056;PRSC Error: Failed to parse query 'declare variable $x := (xs:time("12:30:00") , xs:string(" ") , xs:decimal("2.000000000000002")) ; $x'
VarDecl057;PRSC Error: Failed to parse query 'declare variable $x := ((1+1), (2-2)) ; $x'
VarDecl058;PRSC Error: Failed to parse query 'declare variable $x := ((1,2,2),(1,2,3),(123,""),(),("")) ; $x'
VarDecl059;PRSC Error: Failed to parse query 'declare variable $x := (//book/price, (), (1)) ; document{$x}'
VarDecl060;PRSC Error: Failed to parse query 'declare variable $x := //Price/text() ; $x'
VarDecl061;PRSC Error: Failed to parse query 'declare variable $x := /comment() ; $x'
VarDecl062;PRSC Error: Failed to parse query 'declare variable $x := /processing-instruction() ; $x'
VarDecl063;PRSC Error: Failed to parse query '\n        declare variable $x := $y + 3;\n        declare variable $y := 17;\n        $x + 5\n       = 25'
VarDecl064;PRSC Error: Failed to parse query '\n        declare function local:f1() {$a};\n        declare function local:f2() {$a};\n        declare variable $a := 19;      \n        local:f1() + local:f2()\n       = 38'
vardeclerr-1;Expected error code: XQDY0054. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      declare namespace foo = "http://www..oracle.com/xquery/test"; \n      declare variable $var1 as xs:integer := foo:price(xs:integer(2)); \n      declare function foo:price ($b as xs:integer) as xs:integer { $var1 + 1 }; \n      $var1'
vardeclerr;Expected error code: XQST0054. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      declare namespace foo = "http://www..oracle.com/xquery/test"; \n      declare variable $var1 as xs:integer := foo:price(xs:integer(2)); \n      declare function foo:price ($b as xs:integer) as xs:integer { $var1 + 1 }; \n      $var1'
vardeclwithtype-1;PRSC Error: Failed to parse query 'declare variable $var as xs:string := "abc"; $var'
vardeclwithtype-10;PRSC Error: Failed to parse query 'declare variable $var as xs:time := xs:time("11:12:00Z"); $var'
vardeclwithtype-11;PRSC Error: Failed to parse query 'declare variable $var as xs:date := xs:date("1999-11-28Z"); $var'
vardeclwithtype-12;Expected error code: XQST0049. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	declare variable $var as xs:date := xs:date("1999-11-28Z"); \n      	declare variable $var as xs:date := xs:date("1999-11-28Z"); \n      	$var\n      '
vardeclwithtype-13;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $var as xs:date := fn:true() and fn:true(); $var'
vardeclwithtype-14;PRSC Error: Failed to parse query 'declare variable $x as xs:integer := 10; declare variable $var as xs:integer := $x +1; $var = 11'
vardeclwithtype-15a;Expected error code: XPST0008. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        declare variable $var as xs:integer := $e +1; \n        declare variable $e as xs:integer := 10;  \n        $var\n      '
vardeclwithtype-15b;PRSC Error: Failed to parse query '\n      declare variable $var as xs:integer := $e +1; \n      declare variable $e as xs:integer := 10;  \n      $var = 11'
vardeclwithtype-16;PRSC Error: Failed to parse query '\n      	declare namespace p1 = "http://www.example.com"; \n      	declare variable $p1:var as xs:integer := 10; \n      	$p1:var\n       = 10'
vardeclwithtype-17;PRSC Error: Failed to parse query '\n      	declare namespace p1 = "http://www.example.com"; \n      	declare namespace p2 = "http://www.example.com/examples"; \n      	declare variable $p1:var as xs:integer := 10; \n      	declare variable $p2:var as xs:integer := 20; \n      	$p2:var\n       = 20'
vardeclwithtype-18;Expected error code: XQST0049. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	declare namespace p1 = "http://www.example.com"; \n      	declare namespace p2 = "http://www.example.com"; \n      	declare variable $p1:var as xs:integer := 10; \n      	declare variable $p2:var as xs:integer := 20; \n      	$p2:var\n      '
vardeclwithtype-19;PRSC Error: Failed to parse query 'declare variable $var as xs:integer := fn:count((10,2)); $var = 2'
vardeclwithtype-2;PRSC Error: Failed to parse query 'declare variable $var as xs:integer := 100; $var = 100'
vardeclwithtype-20;PRSC Error: Failed to parse query 'declare variable $var as xs:integer := fn:string-length("ABC"); $var = 3'
vardeclwithtype-21;PRSC Error: Failed to parse query 'declare variable $var as xs:boolean := fn:not(fn:true()); $var'
vardeclwithtype-22;PRSC Error: Failed to parse query 'declare variable $var as xs:boolean := fn:empty((1,2,3)); $var'
vardeclwithtype-3;PRSC Error: Failed to parse query 'declare variable $var as xs:decimal := 100; $var = 100'
vardeclwithtype-4;PRSC Error: Failed to parse query 'declare variable $var as xs:boolean := fn:true(); $var'
vardeclwithtype-5;PRSC Error: Failed to parse query 'declare variable $var as xs:boolean := fn:false(); $var'
vardeclwithtype-6;PRSC Error: Failed to parse query 'declare variable $var as xs:float := xs:float(12.5E10); $var'
vardeclwithtype-7;PRSC Error: Failed to parse query 'declare variable $var as xs:double := xs:double(1267.43233E12); $var'
vardeclwithtype-8;PRSC Error: Failed to parse query 'declare variable $var as xs:anyURI := xs:anyURI("http://example.com"); $var'
vardeclwithtype-9;PRSC Error: Failed to parse query 'declare variable $var as xs:dateTime := xs:dateTime("1999-11-28T09:00:00Z"); $var'
version_declaration-001;Expected executing the XPath 'xquery version "1.0" (:encoding "utf-8xx":); 1,2' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'xquery version "1.0" (:encoding "utf-8xx":); 1,2'
version_declaration-002;Expected executing the XPath '(:encoding "utf-8xx":)xquery version "1.0"; <bib/>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '(:encoding "utf-8xx":)xquery version "1.0"; <bib/>'
version_declaration-005;Expected executing the XPath 'xquery version "1.0"; \n        declare boundary-space preserve; \n        declare default collation "xspanish"; \n        declare base-uri "http://www.base-uri.com/"; \n        declare construction strip; declare ordering unordered; \n        declare default order empty greatest; \n        import schema default element namespace "http://comment"; \n        declare namespace foo = "http://foo.org"; \n        declare default function namespace "http://example.org/math-functions"; \n        declare namespace bar = "http://bar.org"; \n        declare variable $x as xs:integer := 7; \n        declare function local:sumOf1toN($i) as xs:integer { if ($i = 1) then $i else $i + local:sumOf1toN($i - 1) }; \n        declare option foo:strip-comments "true"; \n        local:sumOf1toN(5)' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '\n        xquery version "1.0"; \n        declare boundary-space preserve; \n        declare default collation "xspanish"; \n        declare base-uri "http://www.base-uri.com/"; \n        declare construction strip; declare ordering unordered; \n        declare default order empty greatest; \n        import schema default element namespace "http://comment"; \n        declare namespace foo = "http://foo.org"; \n        declare default function namespace "http://example.org/math-functions"; \n        declare namespace bar = "http://bar.org"; \n        declare variable $x as xs:integer := 7; \n        declare function local:sumOf1toN($i) as xs:integer { if ($i = 1) then $i else $i + local:sumOf1toN($i - 1) }; \n        declare option foo:strip-comments "true"; \n        local:sumOf1toN(5) = 15'
version_declaration-007;Expected error code: XQST0031. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'xquery version '-1.0'; 2 + 2'
version_declaration-008;Expected error code: XQST0031. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'xquery version "abc"; 1,2'
version_declaration-010-v3;Expected error code: XQST0087. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'xquery version "3.0" encoding "999-UTF-8-*"; "ABC"'
version_declaration-010;Expected error code: XQST0087. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'xquery version "1.0" encoding "999-UTF-8-*"; "ABC"'
version_declaration-021;Expected executing the XPath 'xquery version "2.0"; 1.2' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'xquery version "2.0"; 1.2 = 1.2'
version_declaration-023-v3;PRSC Error: Failed to parse query 'xquery encoding "utf-8"; 1 eq 1'
VersionDecl-v1-processor-and-v3-query;Expected error code: XQST0031. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'xquery version "3.0"; <bib/>'
VersionDecl-v3-processor-and-v1-query;Expected executing the XPath 'xquery version "1.0"; <bib/>' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XQST0031. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'xquery version "1.0"; <bib/>'
whereClause-1;Use of XQuery FLWOR expressions in XPath is not allowed
whereClause-10;Use of XQuery FLWOR expressions in XPath is not allowed
whereClause-11;Use of XQuery FLWOR expressions in XPath is not allowed
whereClause-12;Use of XQuery FLWOR expressions in XPath is not allowed
whereClause-2;Use of XQuery FLWOR expressions in XPath is not allowed
whereClause-3;Use of XQuery FLWOR expressions in XPath is not allowed
whereClause-4;Use of XQuery FLWOR expressions in XPath is not allowed
whereClause-5;PRSC Error: Failed to parse query 'let $var := 100 where typeswitch($var) case $i as xs:string return fn:false() case $i as xs:integer return fn:true() default return fn:false() return $var = 100'
whereClause-6;Use of XQuery FLWOR expressions in XPath is not allowed
whereClause-7;Use of XQuery FLWOR expressions in XPath is not allowed
whereClause-8;Use of XQuery FLWOR expressions in XPath is not allowed
whereClause-9;PRSC Error: Failed to parse query 'let $var := <anElement>Some content</anElement> where $var is $var return $var is $var'
WhereExpr001;PRSC Error: Failed to parse query 'if ( count( for $f in //* where $f/File return $f/File[1] ) = count( //File[1]) ) then <Same/> else <notSame/>'
WhereExpr002;Expected error code: XPST0008. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'for $folder in //Folder where $folde/@name = "ABC" return <folder/>'
WhereExpr003;PRSC Error: Failed to parse query 'for $d in /MyComputer/Drive4 where $d/Folder[@id="128"] return <FolderName>{$d/Folder/@name}</FolderName>'
WhereExpr004;Use of XQuery FLWOR expressions in XPath is not allowed
WhereExpr005;Expected executing the XPath '<empty> { for $folder in /MyComputer/Drive2//Folder where 1 = 2 return <Folder> { $folder/FolderName/text() } </Folder> } </empty>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '<empty> { for $folder in /MyComputer/Drive2//Folder where 1 = 2 return <Folder> { $folder/FolderName/text() } </Folder> } </empty>'
WhereExpr006;PRSC Error: Failed to parse query 'for $folder in /MyComputer/Drive4//Folder return <Folder>{ $folder/@name }{ for $file in /MyComputer/Drive4//File where $file/@idref = $folder/@id return <File>{ $file/@name }</File> }</Folder>'
WhereExpr007;PRSC Error: Failed to parse query '<fragment-result>{ for $folder in /MyComputer/Drive3/Folder ,$file in /MyComputer/Drive3/Folder/File where $folder/@id = $file/@idref return <Folder> { $folder/@name, $folder/@id } <file>{ $file/@idref, $file/FileName/text() }</file> </Folder> }</fragment-result>'
WhereExpr008;Expected executing the XPath '<empty> { for $file in (//Folder)[1]/File where () return $file/FileName } </empty>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '<empty> { for $file in (//Folder)[1]/File where () return $file/FileName } </empty>'
WhereExpr009;Use of XQuery FLWOR expressions in XPath is not allowed
WhereExpr010;Expected error code: FORG0006. Found error code: XPST0003 with error message: Use of XQuery FLWOR expressions in XPath is not allowed
WhereExpr013;Use of XQuery FLWOR expressions in XPath is not allowed
WhereExpr014;Use of XQuery FLWOR expressions in XPath is not allowed
WhereExpr015;Expected executing the XPath '<empty> { for $file in (//Folder)[1]/File where false() return $file/FileName } </empty>' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query '<empty> { for $file in (//Folder)[1]/File where false() return $file/FileName } </empty>'
WhereExpr016;Use of XQuery FLWOR expressions in XPath is not allowed
WhereExpr018;Expected error code: XPST0008. Found error code: XPST0003 with error message: Use of XQuery FLWOR expressions in XPath is not allowed
WhereExpr020a;Use of XQuery FLWOR expressions in XPath is not allowed
WhereExpr021;Use of XQuery FLWOR expressions in XPath is not allowed
WhereExpr022;PRSC Error: Failed to parse query '\n         for $file in //File \n         let $namelen := string-length($file/FileName)\n         where ($namelen = 15 and $file//Allow/user = 'system\Hyungjeong') \n         return $file/FileName\n      '
WhereExpr023;PRSC Error: Failed to parse query '\n         for $file in //File\n         count $c\n         where ($file//Allow/user = 'system\Aladin') \n         return $c\n      '
WhereExpr024;PRSC Error: Failed to parse query '\n         for $file in //File \n         let $prefix := substring($file/FileName, 1, 4)\n         where ($prefix = 'File')\n         where ($file//Allow/user = 'system\Hyungjeong')\n         return $file/FileName\n      '
WhereExpr025;Use of XQuery FLWOR expressions in XPath is not allowed
WhereExpr026;PRSC Error: Failed to parse query '\n         let $doc := (/)\n         return (11 to 15)!\n            (for $file in $doc//File\n            count $c\n            where $c = position()\n            return $file/FileName)\n      '
WhereExpr027;Use of XQuery FLWOR expressions in XPath is not allowed
WhereExpr028;Use of XQuery FLWOR expressions in XPath is not allowed
WhereExpr029;Use of XQuery FLWOR expressions in XPath is not allowed
WhereExpr030;PRSC Error: Failed to parse query '\n         declare variable $n external := 10;\n         for $x allowing empty in 1 to $n\n         where $x lt 5\n         return $x\n      '
WhereExpr031;PRSC Error: Failed to parse query '\n         declare variable $n external := 0;\n         for $x allowing empty in 1 to $n\n         where not($x = 5)\n         return concat("[", $x, "]")\n      '
WhereExpr032;Use of XQuery FLWOR expressions in XPath is not allowed
WhereExpr033;PRSC Error: Failed to parse query '\n         declare variable $n external := 0;\n         for $x in -2 to +2\n         where ($n - $x)\n         return $x\n      '
WhereExpr034;Use of XQuery FLWOR expressions in XPath is not allowed
XMark-Q1;PRSC Error: Failed to parse query '\n        <XMark-result-Q1> { \n            let $auction := (/)\n            return for $b in $auction/site/people/person[@id = "person0"] \n            return $b/name/text() } </XMark-result-Q1>'
XMark-Q10;Could not find a part of the path ending in: 'qt3tests//XMark/XMark-Q10.xml'
XMark-Q11;Could not find a part of the path ending in: 'qt3tests//XMark/XMark-Q11.xml'
XMark-Q12;Could not find a part of the path ending in: 'qt3tests//XMark/XMark-Q12.xml'
XMark-Q13;Could not find a part of the path ending in: 'qt3tests//XMark/XMark-Q13.xml'
XMark-Q14;Could not find a part of the path ending in: 'qt3tests//XMark/XMark-Q14.xml'
XMark-Q15;Could not find a part of the path ending in: 'qt3tests//XMark/XMark-Q15.xml'
XMark-Q16;Could not find a part of the path ending in: 'qt3tests//XMark/XMark-Q16.xml'
XMark-Q17;Could not find a part of the path ending in: 'qt3tests//XMark/XMark-Q17.xml'
XMark-Q18;Could not find a part of the path ending in: 'qt3tests//XMark/XMark-Q18.xml'
XMark-Q19;Could not find a part of the path ending in: 'qt3tests//XMark/XMark-Q19.xml'
XMark-Q2;Could not find a part of the path ending in: 'qt3tests//XMark/XMark-Q2.xml'
XMark-Q20;Could not find a part of the path ending in: 'qt3tests//XMark/XMark-Q20.xml'
XMark-Q3;Could not find a part of the path ending in: 'qt3tests//XMark/XMark-Q3.xml'
XMark-Q4;PRSC Error: Failed to parse query '(: Purpose: List the reserves of those open auctions where a certain person issued a bid before another person. :) \n        <XMark-result-Q4> { \n            let $auction := (/) return \n            for $b in $auction/site/open_auctions/open_auction \n            where some $pr1 in $b/bidder/personref[@person = "person20"], $pr2 in $b/bidder/personref[@person = "person51"] satisfies $pr1 << $pr2 \n            return <history>{$b/reserve/text()}</history> } \n        </XMark-result-Q4>'
XMark-Q5;PRSC Error: Failed to parse query '\n        <XMark-result-Q5> { \n          let $auction := (/) return count(\n            for $i in $auction/site/closed_auctions/closed_auction \n            where $i/price/text() >= 40.0 return $i/price) } \n        </XMark-result-Q5>'
XMark-Q6;PRSC Error: Failed to parse query '\n        <XMark-result-Q6> { \n            let $auction := (/) return for $b in $auction//site/regions return count($b//item) } \n        </XMark-result-Q6>'
XMark-Q7;PRSC Error: Failed to parse query '<XMark-result-Q7> { let $auction := (/) return for $p in $auction/site return count($p//description) + count($p//annotation) + count($p//emailaddress) } </XMark-result-Q7>'
XMark-Q8;Could not find a part of the path ending in: 'qt3tests//XMark/XMark-Q8.xml'
XMark-Q9;Could not find a part of the path ending in: 'qt3tests//XMark/XMark-Q9.xml'
XML10-3ed-Mixed-content;PRSC Error: Failed to parse query '<foo> a <![CDATA[cdata section]]> in mixed content. a <!-- comment --> in mixed content. a <?processing instruction?> in mixed content. </foo>'
XML10-4ed-Excluded-char-1-new;Name cannot begin with the 'Ϳ' character, hexadecimal value 0x37F. Line 1, position 7.
XML10-5ed-Included-char-1;PRSC Error: Failed to parse query '<foo></foo>'
XML11-1ed-Included-char-1-new;The 'ſ' character, hexadecimal value 0x17F, cannot be included in a name. Line 1, position 10.
xmp-queries-results-q1;PRSC Error: Failed to parse query '\n      	<bib> { \n      		for $b in /bib/book \n      		where $b/publisher = "Addison-Wesley" and $b/@year > 1991 \n      		return <book year="{ $b/@year }">{ $b/title }</book> } \n      	</bib>'
xmp-queries-results-q10;PRSC Error: Failed to parse query '\n      	<results> { \n      		let $doc := (/) \n      		for $t in distinct-values($doc//book/title) \n      		let $p := $doc//book[title = $t]/price \n      		return <minprice title="{ $t }"> <price>{ min($p) }</price> </minprice> } \n      	</results>\n      '
xmp-queries-results-q11;PRSC Error: Failed to parse query '\n      	<bib> { \n      		for $b in //book[author] \n      		return <book> \n      			{ $b/title } { $b/author } </book> } \n      			{ for $b in //book[editor] \n      				return <reference> { $b/title } {$b/editor/affiliation} </reference> } \n      	</bib>\n      '
xmp-queries-results-q12;PRSC Error: Failed to parse query '\n      	<bib> { \n      		for $book1 in //book, $book2 in //book \n      		let $aut1 := \n      			for $a in $book1/author \n      			order by exactly-one($a/last), exactly-one($a/first) \n      			return $a \n      		let $aut2 := \n      			for $a in $book2/author \n      			order by exactly-one($a/last), exactly-one($a/first) \n      			return $a \n      		where $book1 << $book2 and not($book1/title = $book2/title) and deep-equal($aut1, $aut2) \n      		return <book-pair> { $book1/title } { $book2/title } </book-pair> } \n      	</bib>\n      '
xmp-queries-results-q2;PRSC Error: Failed to parse query '\n      	<results> { \n      		for $b in /bib/book, $t in $b/title, $a in $b/author \n      		return <result> { $t } { $a } </result> } \n      	</results>'
xmp-queries-results-q3;PRSC Error: Failed to parse query '\n      	<results> { \n      		for $b in /bib/book \n      		return <result> { $b/title } { $b/author } </result> } \n      	</results>\n      '
xmp-queries-results-q4;PRSC Error: Failed to parse query '\n      	<results> { \n      		let $a := //author \n      		for $last in distinct-values($a/last), $first in distinct-values($a[last=$last]/first) \n      		order by $last, $first \n      		return <result> \n      				<author> <last>{ $last }</last> <first>{ $first }</first> </author> \n      				{ for $b in /bib/book \n      					where some $ba in $b/author satisfies ($ba/last = $last and $ba/first=$first) \n      					return $b/title } \n      			   </result> } \n      	</results>\n      '
xmp-queries-results-q5;PRSC Error: Failed to parse query '<books-with-prices> { \n        for $b in $bib//book, $a in $reviews//entry \n        where $b/title = $a/title \n        return <book-with-prices> { $b/title } <price-bstore2>{ $a/price/text() }</price-bstore2> <price-bstore1>{ $b/price/text() }</price-bstore1> </book-with-prices> } </books-with-prices>\n      '
xmp-queries-results-q6;PRSC Error: Failed to parse query '\n      	<bib> { \n      		for $b in //book \n      		where count($b/author) > 0 \n      		return <book> \n      			{ $b/title } \n      			{ for $a in $b/author[position()<=2] return $a } \n      			{ if (count($b/author) > 2) then <et-al/> else () } \n      			</book> } \n      	</bib>\n      '
xmp-queries-results-q7;PRSC Error: Failed to parse query '\n      	<bib> { \n      		for $b in //book \n      		where $b/publisher = "Addison-Wesley" and $b/@year > 1991 \n      		order by exactly-one($b/title) \n      		return <book> { $b/@year } { $b/title } </book> } \n      	</bib>\n      '
xmp-queries-results-q8;PRSC Error: Failed to parse query '\n      	for $b in //book \n      	let $e := $b/*[contains(string(.), "Suciu") and ends-with(local-name(.), "or")] \n      	where exists($e) \n      	return <book> { $b/title } { $e } </book>\n      '
xmp-queries-results-q9;PRSC Error: Failed to parse query '\n      	<results> { \n      		for $t in //(chapter | section)/title \n      		where contains(exactly-one($t/text()), "XML") \n      		return $t } \n      	</results>\n      '
XPDY0002_01;Expected error code: XPDY0002. Query succeeded with result: 
XPDY0002_02;Expected error code: XPDY0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $variable external; $variable'
XPDY0050;Expected XPathException with code XPDY0050, but got TreatExpr AST to Expression not yet implemented
XPTY0004_01;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'attribute { 1 } { 1 }'
XPTY0004_02;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'element { 1 } { }'
XPTY0004_05;Expected error code: XPTY0004. Query succeeded with result: 1
XPTY0004_06;Expected error code: XPTY0004. Query succeeded with result: 1 2 3
XPTY0004_07;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'document { attribute {'foo'} {} }'
XPTY0004_08;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace foo = "http://www.example.org"; declare function foo:content($type as xs:integer) { if ($type eq 1) then attribute {'foo'} {} else <foo /> }; document { foo:content(1) }'
XPTY0004_09;Expected error code: XPTY0004. Found error code: XPST0003 with error message: Use of XQuery FLWOR expressions in XPath is not allowed
XPTY0004_12;Expected error code: XPTY0004. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
XPTY0004_12a;Expected error code: FOER0000. Found error code: XPST0017 with error message: The function fn:error with arity 1 is not registered.
XPTY0004_28;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace foo = "http://www.example.org"; declare function foo:something($type\n         as xs:integer) { if ($type eq 1) then xs:date('2007-11-28') else 1.0 };\n         abs(foo:something(1))'
XPTY0004_29;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace foo = "http://www.example.org"; declare function foo:something($type\n         as xs:integer) { if ($type eq 1) then xs:date('2007-11-28') else 'foo' }; element {\n         foo:something(1) } { }'
XPTY0004_30;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace foo = "http://www.example.org"; declare function foo:something($type\n         as xs:integer) { if ($type eq 1) then xs:date('2007-11-28') else 'foo' };\n         processing-instruction { foo:something(1) } { }'
XPTY0004_31;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace foo = "http://www.example.org"; declare function foo:something($type as xs:integer) { if ($type eq 1) then xs:date('2007-11-28') else 'foo' }; <e> { attribute { foo:something(1) } { } } </e>'
XPTY0004_32;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace foo = "http://www.example.org"; declare function foo:something($type\n         as xs:integer) { if ($type eq 1) then ('foo', xs:date('2007-11-28'), 'foo') else 'foo' };\n         let $x as xs:string* := foo:something(1) return $x'
XPTY0004_33;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace foo = "http://www.example.org"; declare function foo:something($type\n         as xs:integer) { if ($type eq 1) then xs:date('2007-11-28') else 'foo' }; for $x as\n         xs:string in foo:something(1) return $x'
XPTY0004_34;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace foo = "http://www.example.org"; declare function foo:something($type)\n         as xs:integer { $type }; foo:something('foo')'
XPTY0004_35;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace foo = "http://www.example.org"; declare function foo:something($type\n         as xs:integer) as xs:integer { if ($type eq 1) then xs:date('2007-11-28') else $type };\n         foo:something(1)'
XPTY0004_37;Expected error code: XPTY0004. Query succeeded with result: Infinity
XPTY0004_38;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace foo = "http://www.example.org"; declare function foo:something($pos as\n         xs:integer) { if ($pos eq 1) then 1 else xs:date('2007-11-29') }; -foo:something(2)'
XPTY0004_39;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace foo = "http://www.example.org"; declare function foo:something($pos as\n         xs:integer) { if ($pos eq 1) then 1 else xs:date('2007-11-29') }; +foo:something(2)'
XPTY0004_40;Expected error code: XPTY0004. Query succeeded with result: Infinity
XPTY0004_45;Expected executing the XPath 'concat('prefix:', 'localname') cast as xs:QName' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected XPathException with code XPTY0004, but got Type casting to XsQName has not been implemented yet.
XPTY0004_47;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $a := <e><a/><b/><a/></e>; <a>{$a/a eq 1}</a>'
XPTY0004_48;Expected executing the XPath 'let $i := (1, 3, 2) order by $i return $i' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: Use of XQuery FLWOR expressions in XPath is not allowed
XPTY0018;Expected error code: XPTY0018. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '(<a/>, <b/>)/(if (position() mod 2 = 1) then position() else .)'
XPTY0019_1;Expected error code: XPTY0019. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<a/>/1/node()'
XPTY0019_2;Expected error code: XPTY0019. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace foo = "http://www.example.org"; declare function foo:something() { (<a />, 1, <b/>, 2) }; foo:something()/a'
XPTY0019_3;Expected error code: XPTY0019. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace foo = "http://www.example.org"; declare function foo:something($pos as xs:integer) { if ($pos eq 1) then 1 else <a /> }; let $x := <a><b><c/></b><b><c/></b></a> return $x/b/(foo:something(position()))/a'
XPTY0019-XPTY0020;Expected executing the XPath '<a/>/20[text()]' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XPTY0019. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<a/>/20[text()]'
XQDY0025_1;Expected error code: XQDY0025. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'let $attr1 := attribute attr { 'foo' } return let $attr2 := attribute attr { 'bar' } return <a>{$attr1, $attr2 }</a>'
XQDY0025_2;Expected error code: XQDY0025. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace prefix = "http://www/w3.org/"; let $attr1 := attribute prefix:attr { 'foo' } return let $attr2 := attribute prefix:attr { 'bar' } return <a>{$attr1, $attr2 }</a>'
XQDY0025_3;Expected error code: XQDY0025. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace prefix = "http://www/w3.org/"; let $attr1 := attribute attr { 'foo' } return let $attr2 := attribute attr { 'bar' } return <prefix:a>{$attr1, $attr2 }</prefix:a>'
XQDY0025_4;Expected error code: XQDY0025. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace prefix = "http://www/w3.org/"; let $attr1 := attribute prefix:attr { 'foo' } return let $attr2 := attribute prefix:attr { 'bar' } return <prefix:a>{$attr1, $attr2 }</prefix:a>'
XQDY0026;Expected error code: XQDY0026. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'processing-instruction target { '?>' }'
XQDY0027;Expected error code: XQDY0027. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare construction preserve; declare copy-namespaces no-preserve,inherit; import schema namespace foo = "http://www.example.org/2007/schema/XQDY0027"; let $x := validate strict { <foo:element attr="foo:notation">foo:qname</foo:element> } return <a>{$x}</a>'
XQDY0041;Expected error code: XQDY0041. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<a> { processing-instruction { '1BadName' } { 'content' } } </a>'
XQDY0044_1;Expected error code: XQDY0044. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<a> { attribute { 'xmlns' } { 'http://www.w3.org/' } } </a>'
XQDY0061;Expected error code: XQDY0061. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'validate lax { document {'hello'} }'
XQDY0064;Expected error code: XQDY0064. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<a> { processing-instruction { 'xml' } { 'content' } } </a>'
XQDY0072;Expected error code: XQDY0072. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<a> { comment { ' -- ' } } </a>'
XQDY0074_1;Expected error code: XQDY0074. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<a> { element { 'prefix:localName' } { } } </a>'
XQDY0074_2;Expected error code: XQDY0074. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<a> { attribute { 'prefix:localName' } { } } </a>'
XQDY0074_3;Expected error code: XQDY0074. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<a> { element { '1localName' } { } } </a>'
XQDY0074_4;Expected error code: XQDY0074. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<a> { attribute { '1localName' } { } } </a>'
XQDY0084;Expected error code: XQDY0084. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'import schema namespace foo = "http://www.example.org/2007/schema/XQDY0084"; validate strict { <foo:a /> }'
XQDY0091;Expected executing the XPath '<e xml:id=" ab c d "/>' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XQDY0091. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<e xml:id=" ab c d "/>'
XQDY0092;'space' is an invalid xml:space value. Line 1, position 9.
xqhof1;PRSC Error: Failed to parse query '\ndeclare namespace map = "http://snelson.org.uk/functions/map";\n\ndeclare function map:key($pair as function() as item()+) as item()\n{\n  $pair()[1]\n};\n\ndeclare function map:value($pair as function() as item()+) as item()*\n{\n  subsequence($pair(), 2)\n};\n\ndeclare function map:contains($map as (function() as item()+)*, $key as item())\n  as xs:boolean\n{\n  map:process($map, $key, function($a) { true() }, false(),\n    function($a) { () })\n};\n\ndeclare function map:get($map as (function() as item()+)*, $key as item())\n  as item()*\n{\n  map:process($map, $key, map:value#1, (), function($a) { () })\n};\n\ndeclare function map:process(\n  $map as (function() as item()+)*,\n  $key as item(),\n  $found as function(function() as item()+) as item()*,\n  $notfound as item()*,\n  $unused as function((function() as item()+)*) as item()*\n) as item()*\n{\n  if(empty($map)) then $notfound\n  else\n\n  let $length := count($map)\n  let $middle := $length idiv 2 + 1\n  let $pair := $map[$middle]\n  let $pair_key := $pair()[1]\n  return\n    if($pair_key eq $key) then (\n      $unused(subsequence($map, 1, $middle - 1)),\n      $found($pair),\n      $unused(subsequence($map, $middle + 1))\n    )\n    else if($pair_key gt $key) then (\n      map:process(subsequence($map, 1, $middle - 1), $key,\n        $found, $notfound, $unused),\n      $unused(subsequence($map, $middle))\n    )\n    else (\n      $unused(subsequence($map, 1, $middle)),\n      map:process(subsequence($map, $middle + 1), $key,\n        $found, $notfound, $unused)\n    )\n};\n\ndeclare function map:pair($key as item(), $value as item()*)\n  as function() as item()+\n{\n  function() { $key, $value }\n};\n\ndeclare function map:put(\n  $map as (function() as item()+)*,\n  $key as item(),\n  $value as item()*\n) as (function() as item()+)+\n{\n  let $pair := map:pair($key, $value)\n  return\n    map:process($map, $key, function($a) { $pair }, $pair,\n      function($a) { $a })\n};\n\nstring-join(let $map := map:put(map:put(map:put(map:put(map:put(map:put((),\n  "a", "aardvark"),\n  "z", "zebra"),\n  "e", ("elephant", "eagle")),\n  "o", "osterich"),\n  "t", "terrapin"),\n  "a", "antelope")\nreturn (\n  map:get($map, "o"),\n\n  for $m in $map\n  return concat("key: ", map:key($m), ", value: (",\n    string-join(map:value($m), ", "), ")"))\n, "\n")\n = "osterich\nkey: a, value: (antelope)\nkey: e, value: (elephant, eagle)\nkey: o, value: (osterich)\nkey: t, value: (terrapin)\nkey: z, value: (zebra)"'
xqhof10;Atomic Value for XsNcName is not implemented yet.
xqhof13;Expected error code: XPDY0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         let $f := function($a) { node-name(.), $a }\n         return <a/>/$f(5)\n      '
xqhof14;Expected error code: XPDY0002. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n         let $f := name#0\n         return <a/>/$f()\n      '
xqhof15;PRSC Error: Failed to parse query '\n         let $f := <b/>/name#0\n         return <a/>/$f()\n       = "b"'
xqhof16;PRSC Error: Failed to parse query 'let $result := (\n         declare base-uri "main";\n         import module namespace lib = "lib";\n         \n         lib:getfun()(),\n         fn:static-base-uri#0(),\n         fn:static-base-uri()\n      ) return fn:ends-with($result[1], "lib")'
xqhof17;PRSC Error: Failed to parse query 'deep-equal((\n         import module namespace lib = "lib";\n         \n         <main/>/lib:getfun2()(),\n         <main/>/name#0(),\n         <main/>/name()\n      ), ("lib", "main", "main"))'
xqhof18;PRSC Error: Failed to parse query 'let $result := (\n         declare base-uri "main";\n         import module namespace lib = "lib";\n         \n         lib:getfun3()(xs:QName("fn:static-base-uri"),0)(),\n         function-lookup#2(xs:QName("fn:static-base-uri"),0)(),\n         function-lookup(xs:QName("fn:static-base-uri"),0)()\n      ) return fn:ends-with($result[1], "lib")'
xqhof19;PRSC Error: Failed to parse query 'deep-equal((\n         import module namespace lib = "lib";\n         \n         <main/>/lib:getfun3()(xs:QName("fn:name"),0)(),\n         <main/>/function-lookup#2(xs:QName("fn:name"),0)(),\n         <main/>/function-lookup(xs:QName("fn:name"),0)()\n      ), ("lib", "main", "main"))'
xqhof2;PRSC Error: Failed to parse query '\n         import module namespace func = "http://snelson.org.uk/functions/functional";\n         \n         let $f := func:curry(concat#5)\n         return $f("foo")(" bar")(" baz")(" what's")(" next?")\n       = "foo bar baz what's next?"'
xqhof20;PRSC Error: Failed to parse query 'deep-equal((\n          let $m := map {\n                "Tuesday" : true(),\n                "Wednesday" : true(),\n                "Thursday" : false(),\n                "Friday" : true(),\n                "Monday" : true(),\n                "Sunday" : false(),\n                "Saturday" : false() }\n          let $days := ("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")     \n          return fn:filter($days,$m)        \n      ), ("Monday", "Tuesday", "Wednesday", "Friday"))'
xqhof21;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n          let $m := map {\n                "Tuesday" : true(),\n                "Wednesday" : true(),\n                "Friday" : true(),\n                "Monday" : true(),\n                "Sunday" : false(),\n                "Saturday" : false() }\n          let $days := ("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")     \n          return fn:filter($days,$m)        \n      '
xqhof22;PRSC Error: Failed to parse query 'deep-equal((\n          let $m := array {\n                true(),\n                true(),\n                false(),\n                true(),\n                true(),\n                false(),\n                false() }\n          let $indices := (1 to 7)\n          return fn:filter($indices,$m)        \n      ), (1, 2, 4, 5))'
xqhof3;PRSC Error: Failed to parse query '\nimport module namespace func = "http://snelson.org.uk/functions/functional";\n\ndeclare function local:fib2_aux($result as xs:integer, $next as xs:integer, $n) as xs:integer*\n{\n  if($n eq 0) then () else (\n  $result, local:fib2_aux($next, $next + $result, $n - 1))\n};\n\ndeclare function local:fib2($n) as xs:integer*\n{\n  local:fib2_aux(0, 1, $n)\n};\n\ndeclare function local:map-pairs($f,$a,$b)\n{\n  for-each-pair($a,$b,$f)\n};\n\nstring-join(\nfor $a in subsequence(\n\nlet $interleave := func:curry(local:map-pairs#3)(function($a, $b) { $a, $b })\nlet $enumerate := $interleave(0 to 49)\nreturn\n$enumerate(local:fib2(50))\n\n, 1, 100)\nreturn string($a)\n, "\n")\n       = "0\n0\n1\n1\n2\n1\n3\n2\n4\n3\n5\n5\n6\n8\n7\n13\n8\n21\n9\n34\n10\n55\n11\n89\n12\n144\n13\n233\n14\n377\n15\n610\n16\n987\n17\n1597\n18\n2584\n19\n4181\n20\n6765\n21\n10946\n22\n17711\n23\n28657\n24\n46368\n25\n75025\n26\n121393\n27\n196418\n28\n317811\n29\n514229\n30\n832040\n31\n1346269\n32\n2178309\n33\n3524578\n34\n5702887\n35\n9227465\n36\n14930352\n37\n24157817\n38\n39088169\n39\n63245986\n40\n102334155\n41\n165580141\n42\n267914296\n43\n433494437\n44\n701408733\n45\n1134903170\n46\n1836311903\n47\n2971215073\n48\n4807526976\n49\n7778742049"'
xqhof4;PRSC Error: Failed to parse query '\n         declare function local:hof($s, $f as function(*)) {\n           $f($s[1], $s[2])\n         };\n         \n         local:hof(('1', '2'), concat#2)\n       = "12"'
xqhof6;PRSC Error: Failed to parse query '\n         declare function local:curry($f as function(item()*, item()*) as item()*) as function(item()*) as function(item()*) as item()*\n         {\n           function($a) { $f($a, ?) }\n         };\n         \n         local:curry(substring-after#2)("foobar")("foo")\n       = "bar"'
xqhof9;Expected error code: XPTY0004. Query succeeded with result: onethree
XQST0022_1;Expected error code: XQST0022. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<a xmlns="{1}" />'
XQST0022_2;Expected error code: XQST0022. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<a xmlns:prefix="{1}" />'
XQST0031;Expected error code: XQST0031. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'xquery version '2.0'; 1+2'
XQST0032;Expected error code: XQST0032. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare base-uri "http://www.example.org/A"; declare base-uri\n         "http://www.example.org/B"; 1 + 2'
XQST0033;Expected error code: XQST0033. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace cheddar = 'http://www.example.org/cheddar'; declare namespace cheddar\n         = 'http://www.example.org/cheddar'; 1 + 2'
XQST0034;Expected error code: XQST0034. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace prefix = "http://www.example.org/"; declare function prefix:foo() { 1\n         }; declare function prefix:foo() { 1 }; 1'
XQST0036_1;Expected error code: XQST0036. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'import module namespace test = "http://www.example.org/2007/test"; $test:test'
XQST0036_2;Expected error code: XQST0036. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'import module namespace test = "http://www.example.org/2007/test";\n         test:bool-to-uppercase(true())'
XQST0036_3;Expected error code: XQST0036. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'import module namespace test = "http://www.example.org/2007/test"; test:f()'
XQST0036_4;Expected error code: XQST0036. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'import module namespace test = "http://www.example.org/2007/test"; $test:i'
XQST0036_5;Expected error code: XQST0036. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'import module namespace test = "http://www.example.org/2007/test"; test:attrs()'
XQST0036_6;Expected error code: XQST0036. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'import module namespace test = "http://www.example.org/2007/test"; $test:none'
XQST0036_7;Expected error code: XQST0036. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'import module namespace test = "http://www.example.org/2007/test"; test:attrs()'
XQST0038_1;Expected error code: XQST0038. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare default collation "http://www.w3.org/2005/xpath-functions/collation/codepoint";\n         declare default collation "http://www.w3.org/2005/xpath-functions/collation/codepoint"; 1 +\n         2'
XQST0038_3;Expected error code: XQST0038. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare default collation "http://www.example.org/"; 1 + 2'
XQST0039;Expected error code: XQST0039. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace prefix = "http://www.w3.org/"; declare function prefix:foo($arg, $arg)\n         { 1 }; 1 + 2'
XQST0040;Expected error code: XQST0040. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<a attr="a" attr="a" />'
XQST0045-1;Expected error code: XQST0045. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function foo() { 1 }; foo()'
XQST0045-2;Expected error code: XQST0045. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function xml:foo() { 1 }; xml:foo()'
XQST0045-3;Expected error code: XQST0045. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function xs:foo() { 1 }; xs:foo()'
XQST0045-4;Expected error code: XQST0045. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function xsi:foo() { 1 }; xsi:foo()'
XQST0046_01;Expected executing the XPath 'base-uri(<a xml:base="%gg" />)' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XQST0046. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'base-uri(<a xml:base="%gg" />)'
XQST0046_02;Expected executing the XPath 'import module "http://www.example.org/test"; true()' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XQST0046. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'import module "http://www.example.org/test"; true()'
XQST0046_03;Expected executing the XPath 'declare namespace foo = "%gg"; true()' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XQST0046. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace foo = "%gg"; true()'
XQST0046_04;Expected executing the XPath 'declare default element namespace "%gg"; true()' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XQST0046. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare default element namespace "%gg"; true()'
XQST0046_05;Expected executing the XPath 'declare default function namespace "%gg"; fn:true()' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XQST0046. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare default function namespace "%gg"; fn:true()'
XQST0046_06;Expected executing the XPath 'declare default collation "%gg"; fn:true()' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XQST0046. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare default collation "%gg"; fn:true()'
XQST0046_07;Expected executing the XPath 'declare base-uri "%gg"; true()' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XQST0046. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare base-uri "%gg"; true()'
XQST0046_09;Expected executing the XPath 'import schema "http://www.w3.org/" at "%gg"; 1' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XQST0046. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'import schema "http://www.w3.org/" at "%gg"; 1'
XQST0046_10;Expected executing the XPath 'import module "%gg"; true()' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XQST0046. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'import module "%gg"; true()'
XQST0046_11;Expected executing the XPath 'import module "http://www.w3.org/" at "%gg"; 1' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XQST0046. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'import module "http://www.w3.org/" at "%gg"; 1'
XQST0046_12;Expected executing the XPath 'for $x in ("a", "a", "a") order by $x collation "%gg" return $x' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XQST0046. Found error code: XPST0003 with error message: Use of XQuery FLWOR expressions in XPath is not allowed
XQST0047;Expected error code: XQST0047. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'import module "http://www.example.org/foo"; import module "http://www.example.org/foo";\n         1'
XQST0048;Expected error code: XQST0048. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'import module namespace foo = "http://www.example.org/foo"; 1'
XQST0049;Expected error code: XQST0049. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare variable $foo external; declare variable $foo external; 1'
XQST0054;Expected error code: XQST0054. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace foo = "http://www.example.org/"; declare variable $a := foo:bar();\n         declare function foo:bar() { $a + 1 }; $a'
XQST0055;Expected error code: XQST0055. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare copy-namespaces preserve,inherit; declare copy-namespaces preserve,no-inherit;\n         1'
XQST0057;Expected error code: XQST0057. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'import schema namespace foo = "" at "http://www.w3.org/"; 1'
XQST0058;Expected error code: XQST0058. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'import schema namespace foo = "http://www.w3.org/XQueryTest/testcases"; import schema\n         namespace bar = "http://www.w3.org/XQueryTest/testcases"; 1'
XQST0059_1;Expected error code: XQST0059. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'import schema namespace foo = "http://www.w3.org/" at "DoesNotExist.xsd"; 1'
XQST0059_2;Expected error code: XQST0059. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'import module namespace foo = "http://www.w3.org/" at "DoesNotExist.xq"; 1'
XQST0059_3;Expected error code: XQST0059. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'import schema namespace foo = "http://www.w3.org/"; 1'
XQST0059_4;Expected error code: XQST0059. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'import module namespace foo = "http://www.w3.org/"; 1'
XQST0059_5;Expected error code: XQST0059. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'import module namespace foo = "http://www.example.org/"; foo:bar()'
XQST0059_6;Expected error code: XQST0059. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'import schema namespace foo = "http://www.example.org/" at "XQST0059.xsd"; 1'
XQST0060;Expected error code: XQST0060. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare default function namespace ""; declare function foo() { 1 }; 1'
XQST0065;Expected error code: XQST0065. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare ordering unordered; declare ordering ordered; 1'
XQST0066_1;Expected error code: XQST0066. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare default element namespace "http://www.w3.org/a"; declare default element\n         namespace "http://www.w3.org/b"; 1'
XQST0066_3;Expected error code: XQST0066. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare default function namespace "http://www.example.org/"; declare default function\n         namespace "http://www.w3.org/2005/xpath-functions/collation/codepoint"; 1 + 2'
XQST0067;Expected error code: XQST0067. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare construction strip; declare construction preserve; 1'
XQST0068;Expected error code: XQST0068. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare boundary-space strip; declare boundary-space preserve; 1'
XQST0069;Expected error code: XQST0069. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare default order empty least; declare default order empty greatest; 1'
XQST0070_1;Expected error code: XQST0070. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'import schema namespace xml = "http://www.example.org/"; 1 + 2'
XQST0070_2;Expected error code: XQST0070. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'import module namespace xml = "http://www.example.org/"; 1 + 2'
XQST0070_3;Expected error code: XQST0070. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'import module namespace xml = 'http://www.example.org/'; 1 + 2'
XQST0070_4;Expected error code: XQST0070. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace xml = "http://www.example.org/"; 1 + 2'
XQST0071_1;Expected error code: XQST0071. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<a xmlns:prefix="http://www.w3.org/" xmlns:prefix="http://www.w3.org/" />'
XQST0071_2;Expected error code: XQST0071. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<a xmlns="http://www.w3.org/" xmlns="http://www.w3.org/" />'
XQST0076;Expected error code: XQST0076. Found error code: XPST0003 with error message: Use of XQuery FLWOR expressions in XPath is not allowed
XQST0079;Expected error code: XQST0079. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace prefix = "http://www.w3.org/"; (# prefix:pragma #) { }'
XQST0085;Expected error code: XQST0085. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<element xmlns:foo="http://www.w3.org/"> <element xmlns:foo="" /> </element>'
XQST0085b;PRSC Error: Failed to parse query 'let $result := (<a xmlns:foo="http://www.w3.org/"> <b xmlns:foo="" /> </a>) return $result[self::a]'
XQST0085c;Expected error code: XPST0081. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<a xmlns:foo="http://www.w3.org/"> <b xmlns:foo="" foo:c=""/> </a>'
XQST0087;Expected error code: XQST0087. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'xquery version '1.0' encoding '_utf'; 1+2'
XQST0088_1;Expected error code: XQST0088. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'import module namespace cheese = ''; 1 + 2'
XQST0088_2;Expected error code: XQST0088. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'import module "http://www.example.org/test"; 1'
XQST0089;Expected error code: XQST0089. Query succeeded with result: 1 2 3
XQST0090;Expected error code: XQST0090. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<bad-character-reference>&#xa999999999999999a;</bad-character-reference>'
XQST0093;Expected error code: XQST0093. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'import module namespace foo="http://www.example.org/foo"; $foo:variable2'
XQST0093a;PRSC Error: Failed to parse query ' import module namespace foo="http://www.example.org/foo"; $foo:variable2  = 1'
XQST0125_1;Expected error code: XQST0125. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        let $f := %public function($arg as xs:integer) as xs:integer \n                          { $arg + 1 }\n        return $f(1)\n      '
XQST0125_2;Expected error code: XQST0125. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n        let $f := %private function($arg as xs:integer) as xs:integer \n                           { $arg + 1 }\n        return $f(1)\n      '
XQTY0024_1;Expected error code: XQTY0024. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace prefix = "http://www.w3.org/"; <prefix:a> { <b />, attribute prefix:foo { 'bar' } } </prefix:a>'
XQTY0024_2;Expected error code: XQTY0024. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace prefix = "http://www.w3.org/"; <prefix:a> { <b />, attribute foo { 'bar' } } </prefix:a>'
XQTY0024_3;Expected error code: XQTY0024. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare namespace prefix = "http://www.w3.org/"; <a> { <b />, attribute prefix:foo { 'bar' } } </a>'
XQTY0024_4;Expected error code: XQTY0024. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '<a> { <b />, attribute foo { 'bar' } } </a>'
XQTY0030;Expected error code: XQTY0030. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'validate strict { () }'
XQTY0086_1;Expected error code: XQTY0086. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	declare construction preserve; \n      	declare copy-namespaces no-preserve,inherit; \n      	declare namespace ns="http://www.xqsharp.com/test/namespace-sensitive"; \n      	<e>{.//ns:sensitive}</e>\n      '
XQTY0086_2;Expected error code: XQTY0086. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	declare construction preserve; \n      	declare namespace ns="http://www.xqsharp.com/test/namespace-sensitive"; \n      	<e>{.//ns:sensitive-attribute/@sensitive}</e>\n      '
XQTY0086_3;Expected error code: XQTY0086. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query '\n      	declare construction preserve; \n      	declare copy-namespaces no-preserve,inherit; \n      	declare namespace ns="http://www.xqsharp.com/test/namespace-sensitive"; \n      	<e>{.//ns:sensitive-attribute}</e>\n      '
xquery10keywords;PRSC Error: Failed to parse query 'let $ancestor-or-self := 1 \n      let $ancestor := 1 \n      let $and := 1 \n      let $as := 1 \n      let $ascending := 1 \n      let $at := 1 \n      let $attribute := 1 \n      let $base-uri := 1 \n      let $boundary-space := 1 \n      let $by := 1 \n      let $case := 1 \n      let $cast := 1 \n      let $castable := 1 \n      let $child := 1 \n      let $collation := 1 \n      let $comment := 1 \n      let $construction := 1 \n      let $copy-namespaces := 1 \n      let $declare := 1 \n      let $default := 1 \n      let $descendant-or-self := 1 \n      let $descendant := 1 \n      let $descending := 1 \n      let $div := 1 \n      let $document-node := 1 \n      let $document := 1 \n      let $element := 1 \n      let $else := 1 \n      let $empty-sequence := 1 \n      let $empty := 1 \n      let $encoding := 1 \n      let $eq := 1 let $every := 1 let $except := 1 let $external := 1 let $following-sibling := 1 \n      let $following := 1 let $for := 1 let $function := 1 let $ge := 1 let $greatest := 1 \n      let $gt := 1 let $idiv := 1 let $if := 1 let $import := 1 let $in := 1 let $inherit := 1 \n      let $instance := 1 let $intersect := 1 let $is := 1 let $item := 1 let $lax := 1 \n      let $le := 1 let $least := 1 let $let := 1 let $lt := 1 let $mod := 1 let $module := 1 \n      let $module := 1 let $namespace := 1 let $ne := 1 let $no-inherit := 1 \n      let $no-preserve := 1 let $node := 1 let $of := 1 let $option := 1 let $or := 1 \n      let $order := 1 let $ordered := 1 let $ordering := 1 let $parent := 1 let $preceding-sibling := 1 \n      let $preceding := 1 let $preserve := 1 let $processing-instruction := 1 let $return := 1 \n      let $satisfies := 1 let $schema-attribute := 1 let $schema-element := 1 let $schema := 1 \n      let $self := 1 let $some := 1 let $stable := 1 let $strict := 1 let $strip := 1 \n      let $text := 1 let $then := 1 let $to := 1 let $treat := 1 let $typeswitch := 1 \n      let $union := 1 let $unordered := 1 let $validate := 1 let $variable := 1 let $version := 1 \n      let $where := 1 let $xquery := 1 return 2 = 2'
xquery10keywords3;PRSC Error: Failed to parse query '\n      <keywords> <ancestor-or-self/> <ancestor/> <and/> <as/> <ascending/> <at/> <attribute/> \n      <base-uri/> <boundary-space/> <by/> \n      <case/> <cast/> <castable/> <child/> <collation/> <comment/> <construction/> <copy-namespaces/> \n      <declare/> <default/> <descendant-or-self/> <descendant/> <descending/> <div/> <document-node/> <document/> \n      <element/> <else/> <empty-sequence/> <empty/> <encoding/> <eq/> <every/> <except/> <external/> \n      <following-sibling/> <following/> <for/> <function/> \n      <ge/> <greatest/> <gt/> \n      <idiv/> <if/> <import/> <in/> <inherit/> <instance/> <intersect/> <is/> <item/> \n      <lax/> <le/> <least/> <let/> <lt/> \n      <mod/> <module/> <module/> \n      <namespace/> <ne/> <no-inherit/> <no-preserve/> <node/> \n      <of/> <option/> <or/> <order/> <ordered/> <ordering/> \n      <parent/> <preceding-sibling/> <preceding/> <preserve/> <processing-instruction/> \n      <return/> \n      <satisfies/> <schema-attribute/> <schema-element/> <schema/> <self/> <some/> <stable/> <strict/> <strip/> \n      <text/> <then/> <to/> <treat/> <typeswitch/> \n      <union/> <unordered/> \n      <validate/> <variable/> <version/> \n      <where/> \n      <xquery/> </keywords>/name()'
xquery30keywords;PRSC Error: Failed to parse query '\n        let $NaN := 1\n        let $allowing := 1\n        let $ancestor-or-self := 1\n        let $ancestor := 1\n        let $and := 1\n        let $as := 1\n        let $ascending := 1\n        let $at := 1\n        let $attribute := 1\n        let $base-uri := 1\n        let $boundary-space := 1\n        let $by := 1\n        let $case := 1\n        let $cast := 1\n        let $castable := 1\n        let $catch := 1\n        let $child := 1\n        let $collation := 1\n        let $comment := 1\n        let $construction := 1\n        let $context := 1\n        let $copy-namespaces := 1\n        let $count := 1\n        let $decimal-format := 1\n        let $decimal-separator := 1\n        let $declare := 1\n        let $default := 1\n        let $descendant-or-self := 1\n        let $descendant := 1\n        let $descending := 1\n        let $digit := 1\n        let $div := 1\n        let $document-node := 1\n        let $document := 1\n        let $element := 1\n        let $else := 1\n        let $empty-sequence := 1\n        let $empty := 1\n        let $encoding := 1\n        let $end := 1\n        let $eq := 1\n        let $every := 1\n        let $except := 1\n        let $external := 1\n        let $following-sibling := 1\n        let $following := 1\n        let $for := 1\n        let $function := 1\n        let $ge := 1\n        let $greatest := 1\n        let $group := 1\n        let $grouping-separator := 1\n        let $gt := 1\n        let $idiv := 1\n        let $if := 1\n        let $import := 1\n        let $in := 1\n        let $infinity := 1\n        let $inherit := 1\n        let $instance := 1\n        let $intersect := 1\n        let $is := 1\n        let $item := 1\n        let $lax := 1\n        let $le := 1\n        let $least := 1\n        let $let := 1\n        let $lt := 1\n        let $minus-sign := 1\n        let $mod := 1\n        let $module := 1\n        let $namespace-node := 1\n        let $namespace := 1\n        let $ne := 1\n        let $next := 1\n        let $no-inherit := 1\n        let $no-preserve := 1\n        let $node := 1\n        let $of := 1\n        let $only := 1\n        let $option := 1\n        let $or := 1\n        let $order := 1\n        let $ordered := 1\n        let $ordering := 1\n        let $parent := 1\n        let $pattern-separator := 1\n        let $per-mille := 1\n        let $percent := 1\n        let $preceding-sibling := 1\n        let $preceding := 1\n        let $preserve := 1\n        let $previous := 1\n        let $processing-instruction := 1\n        let $return := 1\n        let $satisfies := 1\n        let $schema-attribute := 1\n        let $schema-element := 1\n        let $schema := 1\n        let $self := 1\n        let $sliding := 1\n        let $some := 1\n        let $stable := 1\n        let $start := 1\n        let $strict := 1\n        let $strip := 1\n        let $switch := 1\n        let $text := 1\n        let $then := 1\n        let $to := 1\n        let $treat := 1\n        let $try := 1\n        let $tumbling := 1\n        let $type := 1\n        let $typeswitch := 1\n        let $union := 1\n        let $unordered := 1\n        let $validate := 1\n        let $variable := 1\n        let $version := 1\n        let $when := 1\n        let $where := 1\n        let $window := 1\n        let $xquery := 1\n        let $zero-digit := 1\n        return 2\n       = 2'
xquery30keywords3;PRSC Error: Failed to parse query '\n        <keywords>\n           <NaN/>\n           <allowing/>\n           <ancestor-or-self/>\n           <ancestor/>\n           <and/>\n           <as/>\n           <ascending/>\n           <at/>\n           <attribute/>\n           <base-uri/>\n           <boundary-space/>\n           <by/>\n           <case/>\n           <cast/>\n           <castable/>\n           <catch/>\n           <child/>\n           <collation/>\n           <comment/>\n           <construction/>\n           <context/>\n           <copy-namespaces/>\n           <count/>\n           <decimal-format/>\n           <decimal-separator/>\n           <declare/>\n           <default/>\n           <descendant-or-self/>\n           <descendant/>\n           <descending/>\n           <digit/>\n           <div/>\n           <document-node/>\n           <document/>\n           <element/>\n           <else/>\n           <empty-sequence/>\n           <empty/>\n           <encoding/>\n           <end/>\n           <eq/>\n           <every/>\n           <except/>\n           <external/>\n           <following-sibling/>\n           <following/>\n           <for/>\n           <function/>\n           <ge/>\n           <greatest/>\n           <group/>\n           <grouping-separator/>\n           <gt/>\n           <idiv/>\n           <if/>\n           <import/>\n           <in/>\n           <infinity/>\n           <inherit/>\n           <instance/>\n           <intersect/>\n           <is/>\n           <item/>\n           <lax/>\n           <le/>\n           <least/>\n           <let/>\n           <lt/>\n           <minus-sign/>\n           <mod/>\n           <module/>\n           <namespace-node/>\n           <namespace/>\n           <ne/>\n           <next/>\n           <no-inherit/>\n           <no-preserve/>\n           <node/>\n           <of/>\n           <only/>\n           <option/>\n           <or/>\n           <order/>\n           <ordered/>\n           <ordering/>\n           <parent/>\n           <pattern-separator/>\n           <per-mille/>\n           <percent/>\n           <preceding-sibling/>\n           <preceding/>\n           <preserve/>\n           <previous/>\n           <processing-instruction/>\n           <return/>\n           <satisfies/>\n           <schema-attribute/>\n           <schema-element/>\n           <schema/>\n           <self/>\n           <sliding/>\n           <some/>\n           <stable/>\n           <start/>\n           <strict/>\n           <strip/>\n           <switch/>\n           <text/>\n           <then/>\n           <to/>\n           <treat/>\n           <try/>\n           <tumbling/>\n           <type/>\n           <typeswitch/>\n           <union/>\n           <unordered/>\n           <validate/>\n           <variable/>\n           <version/>\n           <when/>\n           <where/>\n           <window/>\n           <xquery/>\n           <zero-digit/>\n        </keywords>/name()\n      '
xquery30keywords4;PRSC Error: Failed to parse query '\n         declare function local:NaN () {1};\n         declare function local:allowing () {2};\n         declare function local:ancestor-or-self () {3};\n         declare function local:ancestor () {4};\n         declare function local:and () {5};\n         declare function local:as () {6};\n         declare function local:ascending () {7};\n         declare function local:at () {8};\n         declare function local:attribute () {9};\n         declare function local:base-uri () {10};\n         declare function local:boundary-space () {11};\n         declare function local:by () {12};\n         declare function local:case () {13};\n         declare function local:cast () {14};\n         declare function local:castable () {15};\n         declare function local:catch () {16};\n         declare function local:child () {17};\n         declare function local:collation () {18};\n         declare function local:comment () {19};\n         declare function local:construction () {20};\n         declare function local:context () {21};\n         declare function local:copy-namespaces () {22};\n         declare function local:count () {23};\n         declare function local:decimal-format () {24};\n         declare function local:decimal-separator () {25};\n         declare function local:declare () {26};\n         declare function local:default () {27};\n         declare function local:descendant-or-self () {28};\n         declare function local:descendant () {29};\n         declare function local:descending () {30};\n         declare function local:digit () {31};\n         declare function local:div () {32};\n         declare function local:document-node () {33};\n         declare function local:document () {34};\n         declare function local:element () {35};\n         declare function local:else () {36};\n         declare function local:empty-sequence () {37};\n         declare function local:empty () {38};\n         declare function local:encoding () {39};\n         declare function local:end () {40};\n         declare function local:eq () {41};\n         declare function local:every () {42};\n         declare function local:except () {43};\n         declare function local:external () {44};\n         declare function local:following-sibling () {45};\n         declare function local:following () {46};\n         declare function local:for () {47};\n         declare function local:function () {48};\n         declare function local:ge () {49};\n         declare function local:greatest () {50};\n         declare function local:group () {51};\n         declare function local:grouping-separator () {52};\n         declare function local:gt () {53};\n         declare function local:idiv () {54};\n         declare function local:if () {55};\n         declare function local:import () {56};\n         declare function local:in () {57};\n         declare function local:infinity () {58};\n         declare function local:inherit () {59};\n         declare function local:instance () {60};\n         declare function local:intersect () {61};\n         declare function local:is () {62};\n         declare function local:item () {63};\n         declare function local:lax () {64};\n         declare function local:le () {65};\n         declare function local:least () {66};\n         declare function local:let () {67};\n         declare function local:lt () {68};\n         declare function local:minus-sign () {69};\n         declare function local:mod () {70};\n         declare function local:module () {71};\n         declare function local:namespace-node () {72};\n         declare function local:namespace () {73};\n         declare function local:ne () {74};\n         declare function local:next () {75};\n         declare function local:no-inherit () {76};\n         declare function local:no-preserve () {77};\n         declare function local:node () {78};\n         declare function local:of () {79};\n         declare function local:only () {80};\n         declare function local:option () {81};\n         declare function local:or () {82};\n         declare function local:order () {83};\n         declare function local:ordered () {84};\n         declare function local:ordering () {85};\n         declare function local:parent () {86};\n         declare function local:pattern-separator () {87};\n         declare function local:per-mille () {88};\n         declare function local:percent () {89};\n         declare function local:preceding-sibling () {90};\n         declare function local:preceding () {91};\n         declare function local:preserve () {92};\n         declare function local:previous () {93};\n         declare function local:processing-instruction () {94};\n         declare function local:return () {95};\n         declare function local:satisfies () {96};\n         declare function local:schema-attribute () {97};\n         declare function local:schema-element () {98};\n         declare function local:schema () {99};\n         declare function local:self () {100};\n         declare function local:sliding () {101};\n         declare function local:some () {102};\n         declare function local:stable () {103};\n         declare function local:start () {104};\n         declare function local:strict () {105};\n         declare function local:strip () {106};\n         declare function local:switch () {107};\n         declare function local:text () {108};\n         declare function local:then () {109};\n         declare function local:to () {110};\n         declare function local:treat () {111};\n         declare function local:try () {112};\n         declare function local:tumbling () {113};\n         declare function local:type () {114};\n         declare function local:typeswitch () {115};\n         declare function local:union () {116};\n         declare function local:unordered () {117};\n         declare function local:validate () {118};\n         declare function local:variable () {119};\n         declare function local:version () {120};\n         declare function local:when () {121};\n         declare function local:where () {122};\n         declare function local:window () {123};\n         declare function local:xquery () {124};\n         declare function local:zero-digit () {125};\n         \n         local:NaN() +\n         local:allowing() +\n         local:ancestor-or-self() +\n         local:ancestor() +\n         local:and() +\n         local:as() +\n         local:ascending() +\n         local:at() +\n         local:attribute() +\n         local:base-uri() +\n         local:boundary-space() +\n         local:by() +\n         local:case() +\n         local:cast() +\n         local:castable() +\n         local:catch() +\n         local:child() +\n         local:collation() +\n         local:comment() +\n         local:construction() +\n         local:context() +\n         local:copy-namespaces() +\n         local:count() +\n         local:decimal-format() +\n         local:decimal-separator() +\n         local:declare() +\n         local:default() +\n         local:descendant-or-self() +\n         local:descendant() +\n         local:descending() +\n         local:digit() +\n         local:div() +\n         local:document-node() +\n         local:document() +\n         local:element() +\n         local:else() +\n         local:empty-sequence() +\n         local:empty() +\n         local:encoding() +\n         local:end() +\n         local:eq() +\n         local:every() +\n         local:except() +\n         local:external() +\n         local:following-sibling() +\n         local:following() +\n         local:for() +\n         local:function() +\n         local:ge() +\n         local:greatest() +\n         local:group() +\n         local:grouping-separator() +\n         local:gt() +\n         local:idiv() +\n         local:if() +\n         local:import() +\n         local:in() +\n         local:infinity() +\n         local:inherit() +\n         local:instance() +\n         local:intersect() +\n         local:is() +\n         local:item() +\n         local:lax() +\n         local:le() +\n         local:least() +\n         local:let() +\n         local:lt() +\n         local:minus-sign() +\n         local:mod() +\n         local:module() +\n         local:namespace-node() +\n         local:namespace() +\n         local:ne() +\n         local:next() +\n         local:no-inherit() +\n         local:no-preserve() +\n         local:node() +\n         local:of() +\n         local:only() +\n         local:option() +\n         local:or() +\n         local:order() +\n         local:ordered() +\n         local:ordering() +\n         local:parent() +\n         local:pattern-separator() +\n         local:per-mille() +\n         local:percent() +\n         local:preceding-sibling() +\n         local:preceding() +\n         local:preserve() +\n         local:previous() +\n         local:processing-instruction() +\n         local:return() +\n         local:satisfies() +\n         local:schema-attribute() +\n         local:schema-element() +\n         local:schema() +\n         local:self() +\n         local:sliding() +\n         local:some() +\n         local:stable() +\n         local:start() +\n         local:strict() +\n         local:strip() +\n         local:switch() +\n         local:text() +\n         local:then() +\n         local:to() +\n         local:treat() +\n         local:try() +\n         local:tumbling() +\n         local:type() +\n         local:typeswitch() +\n         local:union() +\n         local:unordered() +\n         local:validate() +\n         local:variable() +\n         local:version() +\n         local:when() +\n         local:where() +\n         local:window() +\n         local:xquery() +\n         local:zero-digit()\n         eq (125 * (125 + 1)) div 2\n      '
xquery30keywords5;PRSC Error: Failed to parse query '\n         declare default function namespace "http://www.w3.org/2005/xquery-local-functions";\n         \n         declare function NaN () {1};\n         declare function allowing () {2};\n         declare function ancestor-or-self () {3};\n         declare function ancestor () {4};\n         declare function and () {5};\n         declare function as () {6};\n         declare function ascending () {7};\n         declare function at () {8};\n         declare function base-uri () {9};\n         declare function boundary-space () {10};\n         declare function by () {11};\n         declare function case () {12};\n         declare function cast () {13};\n         declare function castable () {14};\n         declare function catch () {15};\n         declare function child () {16};\n         declare function collation () {17};\n         declare function construction () {18};\n         declare function context () {19};\n         declare function copy-namespaces () {20};\n         declare function count () {21};\n         declare function decimal-format () {22};\n         declare function decimal-separator () {23};\n         declare function declare () {24};\n         declare function default () {25};\n         declare function descendant-or-self () {26};\n         declare function descendant () {27};\n         declare function descending () {28};\n         declare function digit () {29};\n         declare function div () {30};\n         declare function document () {31};\n         declare function else () {32};\n         declare function empty () {33};\n         declare function encoding () {34};\n         declare function end () {35};\n         declare function eq () {36};\n         declare function every () {37};\n         declare function except () {38};\n         declare function external () {39};\n         declare function following-sibling () {40};\n         declare function following () {41};\n         declare function for () {42};\n         declare function ge () {43};\n         declare function greatest () {44};\n         declare function group () {45};\n         declare function grouping-separator () {46};\n         declare function gt () {47};\n         declare function idiv () {48};\n         declare function import () {49};\n         declare function in () {50};\n         declare function infinity () {51};\n         declare function inherit () {52};\n         declare function instance () {53};\n         declare function intersect () {54};\n         declare function is () {55};\n         declare function lax () {56};\n         declare function le () {57};\n         declare function least () {58};\n         declare function let () {59};\n         declare function lt () {60};\n         declare function minus-sign () {61};\n         declare function mod () {62};\n         declare function module () {63};\n         declare function namespace () {64};\n         declare function ne () {65};\n         declare function next () {66};\n         declare function no-inherit () {67};\n         declare function no-preserve () {68};\n         declare function of () {69};\n         declare function only () {70};\n         declare function option () {71};\n         declare function or () {72};\n         declare function order () {73};\n         declare function ordered () {74};\n         declare function ordering () {75};\n         declare function parent () {76};\n         declare function pattern-separator () {77};\n         declare function per-mille () {78};\n         declare function percent () {79};\n         declare function preceding-sibling () {80};\n         declare function preceding () {81};\n         declare function preserve () {82};\n         declare function previous () {83};\n         declare function return () {84};\n         declare function satisfies () {85};\n         declare function schema () {86};\n         declare function self () {87};\n         declare function sliding () {88};\n         declare function some () {89};\n         declare function stable () {90};\n         declare function start () {91};\n         declare function strict () {92};\n         declare function strip () {93};\n         declare function then () {94};\n         declare function to () {95};\n         declare function treat () {96};\n         declare function try () {97};\n         declare function tumbling () {98};\n         declare function type () {99};\n         declare function union () {100};\n         declare function unordered () {101};\n         declare function validate () {102};\n         declare function variable () {103};\n         declare function version () {104};\n         declare function when () {105};\n         declare function where () {106};\n         declare function window () {107};\n         declare function xquery () {108};\n         declare function zero-digit () {109};\n         \n         NaN() +\n         allowing() +\n         ancestor-or-self() +\n         ancestor() +\n         and() +\n         as() +\n         ascending() +\n         at() +\n         base-uri() +\n         boundary-space() +\n         by() +\n         case() +\n         cast() +\n         castable() +\n         catch() +\n         child() +\n         collation() +\n         construction() +\n         context() +\n         copy-namespaces() +\n         count() +\n         decimal-format() +\n         decimal-separator() +\n         declare() +\n         default() +\n         descendant-or-self() +\n         descendant() +\n         descending() +\n         digit() +\n         div() +\n         document() +\n         else() +\n         empty() +\n         encoding() +\n         end() +\n         eq() +\n         every() +\n         except() +\n         external() +\n         following-sibling() +\n         following() +\n         for() +\n         ge() +\n         greatest() +\n         group() +\n         grouping-separator() +\n         gt() +\n         idiv() +\n         import() +\n         in() +\n         infinity() +\n         inherit() +\n         instance() +\n         intersect() +\n         is() +\n         lax() +\n         le() +\n         least() +\n         let() +\n         lt() +\n         minus-sign() +\n         mod() +\n         module() +\n         namespace() +\n         ne() +\n         next() +\n         no-inherit() +\n         no-preserve() +\n         of() +\n         only() +\n         option() +\n         or() +\n         order() +\n         ordered() +\n         ordering() +\n         parent() +\n         pattern-separator() +\n         per-mille() +\n         percent() +\n         preceding-sibling() +\n         preceding() +\n         preserve() +\n         previous() +\n         return() +\n         satisfies() +\n         schema() +\n         self() +\n         sliding() +\n         some() +\n         stable() +\n         start() +\n         strict() +\n         strip() +\n         then() +\n         to() +\n         treat() +\n         try() +\n         tumbling() +\n         type() +\n         union() +\n         unordered() +\n         validate() +\n         variable() +\n         version() +\n         when() +\n         where() +\n         window() +\n         xquery() +\n         zero-digit()\n         eq (109 * (109 + 1)) div 2\n      '
xquery31keywords3;PRSC Error: Failed to parse query '\n        <keywords>\n           <exponent-separator/>\n        </keywords>/name()\n      '
xquery31keywords4;PRSC Error: Failed to parse query '\n         declare function local:exponent-separator () {126};\n         local:exponent-separator()\n         eq 126\n      '
xquery31keywords5;PRSC Error: Failed to parse query '\n         declare default function namespace "http://www.w3.org/2005/xquery-local-functions";\n         declare function exponent-separator () {110};\n         exponent-separator()\n         eq 110\n      '
XQueryComment001;PRSC Error: Failed to parse query '(: Name: XQueryComment001 :)\n(: Description: Simple use case for XQuery comments :)\n\n\n(: This is a comment :)\n<result/>\n\n'
XQueryComment003;PRSC Error: Failed to parse query '(: Name: XQueryComment003 :)\n(: Description: Simple use case for XQuery comment containing '-' :)\n\n\n(:This is a comment-:)\n<result/>\n'
XQueryComment004;PRSC Error: Failed to parse query '(: Name: XQueryComment004 :)\n(: Description: Empty comment :)\n\n\n(::)\n<result/>\n'
XQueryComment005;PRSC Error: Failed to parse query '(: Name: XQueryComment004 :)\n(: Description: Comment containing only '-' :)\n\n\n(:-:)\n<result/>\n'
XQueryComment006;PRSC Error: Failed to parse query '(: Name: XQueryComment006 :)\n(: Description: Comment containing ':' :)\n\n\n(: this is a comment ::)\n<result/>\n'
XQueryComment007;PRSC Error: Failed to parse query '(: Name: XQueryComment007 :)\n(: Description: Comment containing ')' :)\n\n\n(: this is a comment ):)\n<result/>\n'
XQueryComment008;PRSC Error: Failed to parse query '(: Name: XQueryComment008 :)\n(: Description: Simple example of embedded comments :)\n\n\n(: this is a comment (: this is an embedded comment :):)\n<result/>\n'
XQueryComment014;PRSC Error: Failed to parse query '(: Name: XQueryComment014 :)\n(: Description: Comments inside a cast expression :)\n\n\n"10" cast as (: type comment :) xs:integer ?\n\n = 10'
XQueryComment020;PRSC Error: Failed to parse query '(: Name: XQueryComment020 :)\n(: Description: Comment containing an enclosed expression :)\n\n\n(: { "comment" } :)\n<result/>'
xs-dateTimeStamp-1;The function fn:timezone-from-dateTime with arity 1 is not registered.
xs-dateTimeStamp-2;The function fn:timezone-from-dateTime with arity 1 is not registered.
xs-dateTimeStamp-3;Expected XPathException with code FORG0001, but got Atomic Value for XsDateTimeStamp is not implemented yet.
xs-dateTimeStamp-4;Expected XPathException with code FORG0001, but got Atomic Value for XsDateTimeStamp is not implemented yet.
xs-dateTimeStamp-5;Casting not supported from given type to xs:dateTime or any of its derived types.
xs-dateTimeStamp-6;PRSC Error: Failed to parse query 'current-date() castable as xs:dateTimeStamp'
xs-double-004;Expected error code: FORG0001. Query succeeded with result: True
xs-double-005;PRSC Error: Failed to parse query '(xs:double("2.2250738585072012e-308")) instance of $xs:double'
xs-error-006;PRSC Error: Failed to parse query 'xs:error#1 instance of function(xs:anyAtomicType?) as xs:error?'
xs-error-007;PRSC Error: Failed to parse query 'xs:error#1 instance of function(xs:anyAtomicType?) as empty-sequence()'
xs-error-015;PRSC Error: Failed to parse query 'function() as empty-sequence() { () } instance of function() as xs:error?'
xs-error-016;PRSC Error: Failed to parse query 'function() as empty-sequence() { () } instance of function() as xs:error*'
xs-error-017;Expected error code: FOER0000. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:identity($arg as xs:error)\n            {\n              $arg\n            };\n       local:identity(fn:error())\n      '
xs-error-018;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:identity($arg as xs:error)\n            {\n              $arg\n            };\n       local:identity(1)\n      '
xs-error-019;Expected executing the XPath 'declare function local:constant($arg as xs:error)\n            {\n              fn:true()\n            };\n       local:constant(fn:error())' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'declare function local:constant($arg as xs:error)\n            {\n              fn:true()\n            };\n       local:constant(fn:error())\n      '
xs-error-020;PRSC Error: Failed to parse query '(declare function local:identity($arg as xs:error?)\n            {\n              $arg\n            };\n       local:identity(())\n      ) => empty()'
xs-error-021;Expected error code: FOER0000. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:error() as xs:error\n            {\n               fn:error()\n            };\n       local:error()\n      '
xs-error-022;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:error() as xs:error\n            {\n	      1\n            };\n       local:error()\n      '
xs-error-023;Expected error code: FOER0000. Found error code: XPST0017 with error message: The function fn:error with arity 0 is not registered.
xs-error-024;Expected error code: FOER0000. Found error code: XPST0017 with error message: The function fn:error with arity 0 is not registered.
xs-error-025;Expected executing the XPath 'let $x as xs:error := fn:error() return fn:true()' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function fn:error with arity 0 is not registered.
xs-error-026;Expected executing the XPath 'let $x := fn:error() return true()' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function fn:error with arity 0 is not registered.
xs-error-029;Expected executing the XPath 'for $x as xs:error in fn:error() return fn:true()' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function fn:error with arity 0 is not registered.
xs-error-030;Expected executing the XPath 'for $x in fn:error() return fn:true()' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function fn:error with arity 0 is not registered.
xs-error-031;Expected executing the XPath 'for $x as xs:error in (1, 2, 3) return $x' to resolve to one of the expected results, but got Xunit.Sdk.TrueException: Expected error code: XPTY0004. Query succeeded with result: 1 2 3
xs-error-032;Expected error code: FORG0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'xs:error(1) castable as xs:error'
xs-error-033;Expected error code: FORG0001. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'xs:error(1) castable as xs:integer'
xs-error-034;PRSC Error: Failed to parse query 'xs:error(()) castable as xs:error'
xs-error-035;PRSC Error: Failed to parse query 'xs:error(()) castable as xs:error?'
xs-error-036;Expected error code: FOER0000. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'fn:error() castable as xs:error'
xs-error-037;PRSC Error: Failed to parse query '() castable as xs:error?'
xs-error-044;Expected executing the XPath 'fn:error() instance of xs:error' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: The function fn:error with arity 0 is not registered.
xs-error-045;Expected executing the XPath 'typeswitch (xs:error(1)) \n            case xs:error return fn:true()\n            default return false()' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'typeswitch (xs:error(1)) \n            case xs:error return fn:true()\n            default return false()'
xs-error-046;Expected executing the XPath 'typeswitch (fn:error()) \n            case xs:error return fn:true()\n            default return false()' to resolve to one of the expected results, but got FontoXPathCSharp.XPathException: PRSC Error: Failed to parse query 'typeswitch (fn:error()) \n            case xs:error return fn:true()\n            default return false()'
xs-error-047;Expected XPathException with code FOER0000, but got TreatExpr AST to Expression not yet implemented
xs-error-048;Expected XPathException with code XPDY0050, but got TreatExpr AST to Expression not yet implemented
xs-error-049;TreatExpr AST to Expression not yet implemented
xs-error-052;PRSC Error: Failed to parse query '1 castable as xs:error'
xs-error-053;PRSC Error: Failed to parse query '1 castable as xs:error'
xs-error-054;Expected error code: XPTY0004. Found error code: XPST0003 with error message: PRSC Error: Failed to parse query 'declare function local:identity($arg as xs:error)\n         {\n         $arg\n         };\n         local:identity(())\n      '
xs-float-004;Expected error code: FORG0001. Query succeeded with result: True